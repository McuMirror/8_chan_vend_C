

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Nov  2 14:14:36 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBIGRAMh,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1
   145                           	psect	text126,global,reloc=2,class=CODE,delta=1
   146                           	psect	text127,global,reloc=2,class=CODE,delta=1
   147                           	psect	text128,global,reloc=2,class=CODE,delta=1
   148                           	psect	text129,global,reloc=2,class=CODE,delta=1
   149                           	psect	text130,global,reloc=2,class=CODE,delta=1
   150                           	psect	text131,global,reloc=2,class=CODE,delta=1
   151                           	psect	text132,global,reloc=2,class=CODE,delta=1
   152                           	psect	text133,global,reloc=2,class=CODE,delta=1
   153                           	psect	text134,global,reloc=2,class=CODE,delta=1
   154                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   155                           	psect	text136,global,reloc=2,class=CODE,delta=1
   156                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   157                           	psect	text137,global,reloc=2,class=CODE,delta=1
   158                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   159                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   160                           	dabs	1,0x3,1,_chanlink1
   161                           	dabs	1,0xA,1,_chanlink8
   162                           	dabs	1,0x9,1,_chanlink7
   163                           	dabs	1,0x8,1,_chanlink6
   164                           	dabs	1,0x7,1,_chanlink5
   165                           	dabs	1,0x6,1,_chanlink4
   166                           	dabs	1,0x5,1,_chanlink3
   167                           	dabs	1,0x4,1,_chanlink2
   168  0000                     
   169                           ; Version 1.45
   170                           ; Generated 16/11/2017 GMT
   171                           ; 
   172                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   173                           ; All rights reserved.
   174                           ; 
   175                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   176                           ; 
   177                           ; Redistribution and use in source and binary forms, with or without modification, are
   178                           ; permitted provided that the following conditions are met:
   179                           ; 
   180                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   181                           ;        conditions and the following disclaimer.
   182                           ; 
   183                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   184                           ;        of conditions and the following disclaimer in the documentation and/or other
   185                           ;        materials provided with the distribution.
   186                           ; 
   187                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   188                           ;        software without specific prior written permission.
   189                           ; 
   190                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   191                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   192                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   193                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   194                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   195                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   196                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   197                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   198                           ; 
   199                           ; 
   200                           ; Code-generator required, PIC18F47K40 Definitions
   201                           ; 
   202                           ; SFR Addresses
   203  0000                     
   204                           	psect	idataBANK0
   205  0137AE                     __pidataBANK0:
   206                           	opt stack 0
   207                           
   208                           ;initializer for _hopercount
   209  0137AE  03                 	db	3
   210                           
   211                           ;initializer for _notenum
   212  0137AF  FF                 	db	255
   213                           
   214                           	psect	mediumconst
   215  00F91E                     __pmediumconst:
   216                           	opt stack 0
   217  00F91E  00                 	db	0
   218  00F91F                     _chanlinkmsg:
   219                           	opt stack 0
   220  00F91F  50                 	db	80
   221  00F920  75                 	db	117
   222  00F921  73                 	db	115
   223  00F922  68                 	db	104
   224  00F923  20                 	db	32
   225  00F924  42                 	db	66
   226  00F925  75                 	db	117
   227  00F926  74                 	db	116
   228  00F927  74                 	db	116
   229  00F928  6F                 	db	111
   230  00F929  6E                 	db	110
   231  00F92A  20                 	db	32
   232  00F92B  74                 	db	116
   233  00F92C  6F                 	db	111
   234  00F92D  20                 	db	32
   235  00F92E  4C                 	db	76
   236  00F92F  69                 	db	105
   237  00F930  6E                 	db	110
   238  00F931  6B                 	db	107
   239  00F932  20                 	db	32
   240  00F933  50                 	db	80
   241  00F934  75                 	db	117
   242  00F935  73                 	db	115
   243  00F936  68                 	db	104
   244  00F937  20                 	db	32
   245  00F938  61                 	db	97
   246  00F939  67                 	db	103
   247  00F93A  61                 	db	97
   248  00F93B  69                 	db	105
   249  00F93C  6E                 	db	110
   250  00F93D  20                 	db	32
   251  00F93E  74                 	db	116
   252  00F93F  6F                 	db	111
   253  00F940  20                 	db	32
   254  00F941  55                 	db	85
   255  00F942  6E                 	db	110
   256  00F943  6C                 	db	108
   257  00F944  69                 	db	105
   258  00F945  6E                 	db	110
   259  00F946  6B                 	db	107
   260  00F947  50                 	db	80
   261  00F948  75                 	db	117
   262  00F949  73                 	db	115
   263  00F94A  68                 	db	104
   264  00F94B  20                 	db	32
   265  00F94C  53                 	db	83
   266  00F94D  65                 	db	101
   267  00F94E  72                 	db	114
   268  00F94F  76                 	db	118
   269  00F950  69                 	db	105
   270  00F951  63                 	db	99
   271  00F952  65                 	db	101
   272  00F953  20                 	db	32
   273  00F954  74                 	db	116
   274  00F955  6F                 	db	111
   275  00F956  20                 	db	32
   276  00F957  45                 	db	69
   277  00F958  78                 	db	120
   278  00F959  69                 	db	105
   279  00F95A  74                 	db	116
   280  00F95B  00                 	db	0
   281  00F95C                     __end_of_chanlinkmsg:
   282                           	opt stack 0
   283  00F95C                     _motimemsg:
   284                           	opt stack 0
   285  00F95C  20                 	db	32
   286  00F95D  50                 	db	80
   287  00F95E  72                 	db	114
   288  00F95F  65                 	db	101
   289  00F960  73                 	db	115
   290  00F961  73                 	db	115
   291  00F962  20                 	db	32
   292  00F963  43                 	db	67
   293  00F964  68                 	db	104
   294  00F965  61                 	db	97
   295  00F966  6E                 	db	110
   296  00F967  6E                 	db	110
   297  00F968  65                 	db	101
   298  00F969  6C                 	db	108
   299  00F96A  20                 	db	32
   300  00F96B  56                 	db	86
   301  00F96C  65                 	db	101
   302  00F96D  6E                 	db	110
   303  00F96E  64                 	db	100
   304  00F96F  20                 	db	32
   305  00F970  42                 	db	66
   306  00F971  75                 	db	117
   307  00F972  74                 	db	116
   308  00F973  74                 	db	116
   309  00F974  6F                 	db	111
   310  00F975  6E                 	db	110
   311  00F976  20                 	db	32
   312  00F977  6F                 	db	111
   313  00F978  72                 	db	114
   314  00F979  20                 	db	32
   315  00F97A  50                 	db	80
   316  00F97B  72                 	db	114
   317  00F97C  65                 	db	101
   318  00F97D  73                 	db	115
   319  00F97E  73                 	db	115
   320  00F97F  20                 	db	32
   321  00F980  20                 	db	32
   322  00F981  20                 	db	32
   323  00F982  20                 	db	32
   324  00F983  20                 	db	32
   325  00F984  20                 	db	32
   326  00F985  20                 	db	32
   327  00F986  53                 	db	83
   328  00F987  65                 	db	101
   329  00F988  72                 	db	114
   330  00F989  76                 	db	118
   331  00F98A  69                 	db	105
   332  00F98B  63                 	db	99
   333  00F98C  65                 	db	101
   334  00F98D  20                 	db	32
   335  00F98E  74                 	db	116
   336  00F98F  6F                 	db	111
   337  00F990  20                 	db	32
   338  00F991  45                 	db	69
   339  00F992  78                 	db	120
   340  00F993  69                 	db	105
   341  00F994  74                 	db	116
   342  00F995  00                 	db	0
   343  00F996                     __end_of_motimemsg:
   344                           	opt stack 0
   345  00F996                     _sensoffms:
   346                           	opt stack 0
   347  00F996  48                 	db	72
   348  00F997  6F                 	db	111
   349  00F998  6C                 	db	108
   350  00F999  64                 	db	100
   351  00F99A  20                 	db	32
   352  00F99B  63                 	db	99
   353  00F99C  68                 	db	104
   354  00F99D  61                 	db	97
   355  00F99E  6E                 	db	110
   356  00F99F  6E                 	db	110
   357  00F9A0  65                 	db	101
   358  00F9A1  6C                 	db	108
   359  00F9A2  20                 	db	32
   360  00F9A3  62                 	db	98
   361  00F9A4  75                 	db	117
   362  00F9A5  74                 	db	116
   363  00F9A6  74                 	db	116
   364  00F9A7  6F                 	db	111
   365  00F9A8  6E                 	db	110
   366  00F9A9  20                 	db	32
   367  00F9AA  6F                 	db	111
   368  00F9AB  72                 	db	114
   369  00F9AC  20                 	db	32
   370  00F9AD  50                 	db	80
   371  00F9AE  75                 	db	117
   372  00F9AF  73                 	db	115
   373  00F9B0  68                 	db	104
   374  00F9B1  20                 	db	32
   375  00F9B2  73                 	db	115
   376  00F9B3  65                 	db	101
   377  00F9B4  72                 	db	114
   378  00F9B5  76                 	db	118
   379  00F9B6  69                 	db	105
   380  00F9B7  63                 	db	99
   381  00F9B8  65                 	db	101
   382  00F9B9  20                 	db	32
   383  00F9BA  74                 	db	116
   384  00F9BB  6F                 	db	111
   385  00F9BC  20                 	db	32
   386  00F9BD  20                 	db	32
   387  00F9BE  65                 	db	101
   388  00F9BF  78                 	db	120
   389  00F9C0  69                 	db	105
   390  00F9C1  74                 	db	116
   391  00F9C2  00                 	db	0
   392  00F9C3                     __end_of_sensoffms:
   393                           	opt stack 0
   394  00F9C3                     _credclr:
   395                           	opt stack 0
   396  00F9C3  50                 	db	80
   397  00F9C4  75                 	db	117
   398  00F9C5  73                 	db	115
   399  00F9C6  68                 	db	104
   400  00F9C7  20                 	db	32
   401  00F9C8  62                 	db	98
   402  00F9C9  75                 	db	117
   403  00F9CA  74                 	db	116
   404  00F9CB  74                 	db	116
   405  00F9CC  6F                 	db	111
   406  00F9CD  6E                 	db	110
   407  00F9CE  20                 	db	32
   408  00F9CF  31                 	db	49
   409  00F9D0  20                 	db	32
   410  00F9D1  74                 	db	116
   411  00F9D2  6F                 	db	111
   412  00F9D3  20                 	db	32
   413  00F9D4  63                 	db	99
   414  00F9D5  6C                 	db	108
   415  00F9D6  65                 	db	101
   416  00F9D7  61                 	db	97
   417  00F9D8  72                 	db	114
   418  00F9D9  20                 	db	32
   419  00F9DA  63                 	db	99
   420  00F9DB  72                 	db	114
   421  00F9DC  65                 	db	101
   422  00F9DD  64                 	db	100
   423  00F9DE  69                 	db	105
   424  00F9DF  74                 	db	116
   425  00F9E0  73                 	db	115
   426  00F9E1  20                 	db	32
   427  00F9E2  20                 	db	32
   428  00F9E3  20                 	db	32
   429  00F9E4  61                 	db	97
   430  00F9E5  6E                 	db	110
   431  00F9E6  64                 	db	100
   432  00F9E7  20                 	db	32
   433  00F9E8  65                 	db	101
   434  00F9E9  78                 	db	120
   435  00F9EA  69                 	db	105
   436  00F9EB  74                 	db	116
   437  00F9EC  00                 	db	0
   438  00F9ED                     __end_of_credclr:
   439                           	opt stack 0
   440  00F9ED                     _settimemsg:
   441                           	opt stack 0
   442  00F9ED  50                 	db	80
   443  00F9EE  72                 	db	114
   444  00F9EF  65                 	db	101
   445  00F9F0  73                 	db	115
   446  00F9F1  73                 	db	115
   447  00F9F2  20                 	db	32
   448  00F9F3  31                 	db	49
   449  00F9F4  20                 	db	32
   450  00F9F5  3D                 	db	61
   451  00F9F6  20                 	db	32
   452  00F9F7  2B                 	db	43
   453  00F9F8  20                 	db	32
   454  00F9F9  6F                 	db	111
   455  00F9FA  72                 	db	114
   456  00F9FB  20                 	db	32
   457  00F9FC  32                 	db	50
   458  00F9FD  20                 	db	32
   459  00F9FE  3D                 	db	61
   460  00F9FF  20                 	db	32
   461  00FA00  2D                 	db	45
   462  00FA01  20                 	db	32
   463  00FA02  20                 	db	32
   464  00FA03  50                 	db	80
   465  00FA04  72                 	db	114
   466  00FA05  65                 	db	101
   467  00FA06  73                 	db	115
   468  00FA07  73                 	db	115
   469  00FA08  20                 	db	32
   470  00FA09  38                 	db	56
   471  00FA0A  20                 	db	32
   472  00FA0B  74                 	db	116
   473  00FA0C  6F                 	db	111
   474  00FA0D  20                 	db	32
   475  00FA0E  45                 	db	69
   476  00FA0F  78                 	db	120
   477  00FA10  69                 	db	105
   478  00FA11  74                 	db	116
   479  00FA12  00                 	db	0
   480  00FA13                     __end_of_settimemsg:
   481                           	opt stack 0
   482  00FA13                     _vendtest:
   483                           	opt stack 0
   484  00FA13  20                 	db	32
   485  00FA14  50                 	db	80
   486  00FA15  75                 	db	117
   487  00FA16  73                 	db	115
   488  00FA17  68                 	db	104
   489  00FA18  20                 	db	32
   490  00FA19  62                 	db	98
   491  00FA1A  75                 	db	117
   492  00FA1B  74                 	db	116
   493  00FA1C  74                 	db	116
   494  00FA1D  6F                 	db	111
   495  00FA1E  6E                 	db	110
   496  00FA1F  20                 	db	32
   497  00FA20  74                 	db	116
   498  00FA21  6F                 	db	111
   499  00FA22  20                 	db	32
   500  00FA23  20                 	db	32
   501  00FA24  20                 	db	32
   502  00FA25  20                 	db	32
   503  00FA26  20                 	db	32
   504  00FA27  76                 	db	118
   505  00FA28  65                 	db	101
   506  00FA29  6E                 	db	110
   507  00FA2A  64                 	db	100
   508  00FA2B  00                 	db	0
   509  00FA2C                     __end_of_vendtest:
   510                           	opt stack 0
   511  00FA2C                     _priceexit:
   512                           	opt stack 0
   513  00FA2C  50                 	db	80
   514  00FA2D  72                 	db	114
   515  00FA2E  65                 	db	101
   516  00FA2F  73                 	db	115
   517  00FA30  73                 	db	115
   518  00FA31  20                 	db	32
   519  00FA32  73                 	db	115
   520  00FA33  65                 	db	101
   521  00FA34  72                 	db	114
   522  00FA35  76                 	db	118
   523  00FA36  69                 	db	105
   524  00FA37  63                 	db	99
   525  00FA38  65                 	db	101
   526  00FA39  20                 	db	32
   527  00FA3A  74                 	db	116
   528  00FA3B  6F                 	db	111
   529  00FA3C  20                 	db	32
   530  00FA3D  65                 	db	101
   531  00FA3E  78                 	db	120
   532  00FA3F  69                 	db	105
   533  00FA40  74                 	db	116
   534  00FA41  00                 	db	0
   535  00FA42                     __end_of_priceexit:
   536                           	opt stack 0
   537  00FA42                     _inithop:
   538                           	opt stack 0
   539  00FA42  20                 	db	32
   540  00FA43  20                 	db	32
   541  00FA44  49                 	db	73
   542  00FA45  6E                 	db	110
   543  00FA46  69                 	db	105
   544  00FA47  74                 	db	116
   545  00FA48  69                 	db	105
   546  00FA49  61                 	db	97
   547  00FA4A  6C                 	db	108
   548  00FA4B  69                 	db	105
   549  00FA4C  7A                 	db	122
   550  00FA4D  65                 	db	101
   551  00FA4E  20                 	db	32
   552  00FA4F  48                 	db	72
   553  00FA50  6F                 	db	111
   554  00FA51  70                 	db	112
   555  00FA52  70                 	db	112
   556  00FA53  65                 	db	101
   557  00FA54  72                 	db	114
   558  00FA55  00                 	db	0
   559  00FA56                     __end_of_inithop:
   560                           	opt stack 0
   561  00FA56                     _loctim:
   562                           	opt stack 0
   563  00FA56  41                 	db	65
   564  00FA57  54                 	db	84
   565  00FA58  2B                 	db	43
   566  00FA59  43                 	db	67
   567  00FA5A  49                 	db	73
   568  00FA5B  50                 	db	80
   569  00FA5C  47                 	db	71
   570  00FA5D  53                 	db	83
   571  00FA5E  4D                 	db	77
   572  00FA5F  4C                 	db	76
   573  00FA60  4F                 	db	79
   574  00FA61  43                 	db	67
   575  00FA62  3D                 	db	61
   576  00FA63  32                 	db	50
   577  00FA64  0D                 	db	13
   578  00FA65  00                 	db	0
   579  00FA66                     __end_of_loctim:
   580                           	opt stack 0
   581  00FA66                     _smslst:
   582                           	opt stack 0
   583  00FA66  41                 	db	65
   584  00FA67  54                 	db	84
   585  00FA68  2B                 	db	43
   586  00FA69  43                 	db	67
   587  00FA6A  4D                 	db	77
   588  00FA6B  47                 	db	71
   589  00FA6C  4C                 	db	76
   590  00FA6D  3D                 	db	61
   591  00FA6E  22                 	db	34
   592  00FA6F  41                 	db	65
   593  00FA70  4C                 	db	76
   594  00FA71  4C                 	db	76
   595  00FA72  22                 	db	34
   596  00FA73  0D                 	db	13
   597  00FA74  00                 	db	0
   598  00FA75                     __end_of_smslst:
   599                           	opt stack 0
   600  00FA75                     _senset:
   601                           	opt stack 0
   602  00FA75  20                 	db	32
   603  00FA76  20                 	db	32
   604  00FA77  53                 	db	83
   605  00FA78  65                 	db	101
   606  00FA79  74                 	db	116
   607  00FA7A  75                 	db	117
   608  00FA7B  70                 	db	112
   609  00FA7C  20                 	db	32
   610  00FA7D  53                 	db	83
   611  00FA7E  65                 	db	101
   612  00FA7F  6E                 	db	110
   613  00FA80  73                 	db	115
   614  00FA81  6F                 	db	111
   615  00FA82  72                 	db	114
   616  00FA83  00                 	db	0
   617  00FA84                     __end_of_senset:
   618                           	opt stack 0
   619  00FA84                     _baudra:
   620                           	opt stack 0
   621  00FA84  41                 	db	65
   622  00FA85  54                 	db	84
   623  00FA86  2B                 	db	43
   624  00FA87  49                 	db	73
   625  00FA88  50                 	db	80
   626  00FA89  52                 	db	82
   627  00FA8A  3D                 	db	61
   628  00FA8B  31                 	db	49
   629  00FA8C  39                 	db	57
   630  00FA8D  32                 	db	50
   631  00FA8E  30                 	db	48
   632  00FA8F  30                 	db	48
   633  00FA90  0D                 	db	13
   634  00FA91  00                 	db	0
   635  00FA92                     __end_of_baudra:
   636                           	opt stack 0
   637  00FA92                     _notetest:
   638                           	opt stack 0
   639  00FA92  20                 	db	32
   640  00FA93  20                 	db	32
   641  00FA94  49                 	db	73
   642  00FA95  6E                 	db	110
   643  00FA96  73                 	db	115
   644  00FA97  65                 	db	101
   645  00FA98  72                 	db	114
   646  00FA99  74                 	db	116
   647  00FA9A  20                 	db	32
   648  00FA9B  4E                 	db	78
   649  00FA9C  6F                 	db	111
   650  00FA9D  74                 	db	116
   651  00FA9E  65                 	db	101
   652  00FA9F  00                 	db	0
   653  00FAA0                     __end_of_notetest:
   654                           	opt stack 0
   655  00FAA0                     _auditmsg:
   656                           	opt stack 0
   657  00FAA0  20                 	db	32
   658  00FAA1  20                 	db	32
   659  00FAA2  41                 	db	65
   660  00FAA3  75                 	db	117
   661  00FAA4  64                 	db	100
   662  00FAA5  69                 	db	105
   663  00FAA6  74                 	db	116
   664  00FAA7  20                 	db	32
   665  00FAA8  4D                 	db	77
   666  00FAA9  6F                 	db	111
   667  00FAAA  64                 	db	100
   668  00FAAB  65                 	db	101
   669  00FAAC  00                 	db	0
   670  00FAAD                     __end_of_auditmsg:
   671                           	opt stack 0
   672  00FAAD                     _airtim:
   673                           	opt stack 0
   674  00FAAD  41                 	db	65
   675  00FAAE  54                 	db	84
   676  00FAAF  2B                 	db	43
   677  00FAB0  43                 	db	67
   678  00FAB1  55                 	db	85
   679  00FAB2  53                 	db	83
   680  00FAB3  44                 	db	68
   681  00FAB4  20                 	db	32
   682  00FAB5  3D                 	db	61
   683  00FAB6  31                 	db	49
   684  00FAB7  0D                 	db	13
   685  00FAB8  00                 	db	0
   686  00FAB9                     __end_of_airtim:
   687                           	opt stack 0
   688  00FAB9                     _ussdwe:
   689                           	opt stack 0
   690  00FAB9  41                 	db	65
   691  00FABA  54                 	db	84
   692  00FABB  2B                 	db	43
   693  00FABC  43                 	db	67
   694  00FABD  55                 	db	85
   695  00FABE  53                 	db	83
   696  00FABF  44                 	db	68
   697  00FAC0  3D                 	db	61
   698  00FAC1  31                 	db	49
   699  00FAC2  0D                 	db	13
   700  00FAC3  00                 	db	0
   701  00FAC4                     __end_of_ussdwe:
   702                           	opt stack 0
   703  00FAC4                     _usdtst:
   704                           	opt stack 0
   705  00FAC4  41                 	db	65
   706  00FAC5  54                 	db	84
   707  00FAC6  2B                 	db	43
   708  00FAC7  43                 	db	67
   709  00FAC8  55                 	db	85
   710  00FAC9  53                 	db	83
   711  00FACA  44                 	db	68
   712  00FACB  3D                 	db	61
   713  00FACC  3F                 	db	63
   714  00FACD  0D                 	db	13
   715  00FACE  00                 	db	0
   716  00FACF                     __end_of_usdtst:
   717                           	opt stack 0
   718  00FACF                     _smscap:
   719                           	opt stack 0
   720  00FACF  41                 	db	65
   721  00FAD0  54                 	db	84
   722  00FAD1  2B                 	db	43
   723  00FAD2  43                 	db	67
   724  00FAD3  4D                 	db	77
   725  00FAD4  47                 	db	71
   726  00FAD5  4C                 	db	76
   727  00FAD6  3D                 	db	61
   728  00FAD7  3F                 	db	63
   729  00FAD8  0D                 	db	13
   730  00FAD9  00                 	db	0
   731  00FADA                     __end_of_smscap:
   732                           	opt stack 0
   733  00FADA                     _ussdrd:
   734                           	opt stack 0
   735  00FADA  41                 	db	65
   736  00FADB  54                 	db	84
   737  00FADC  2B                 	db	43
   738  00FADD  43                 	db	67
   739  00FADE  55                 	db	85
   740  00FADF  53                 	db	83
   741  00FAE0  44                 	db	68
   742  00FAE1  3F                 	db	63
   743  00FAE2  0D                 	db	13
   744  00FAE3  00                 	db	0
   745  00FAE4                     __end_of_ussdrd:
   746                           	opt stack 0
   747  00FAE4                     _engfmt:
   748                           	opt stack 0
   749  00FAE4  41                 	db	65
   750  00FAE5  54                 	db	84
   751  00FAE6  2B                 	db	43
   752  00FAE7  43                 	db	67
   753  00FAE8  45                 	db	69
   754  00FAE9  4E                 	db	78
   755  00FAEA  47                 	db	71
   756  00FAEB  3D                 	db	61
   757  00FAEC  3F                 	db	63
   758  00FAED  00                 	db	0
   759  00FAEE                     __end_of_engfmt:
   760                           	opt stack 0
   761  00FAEE                     _ownnum:
   762                           	opt stack 0
   763  00FAEE  41                 	db	65
   764  00FAEF  54                 	db	84
   765  00FAF0  2B                 	db	43
   766  00FAF1  43                 	db	67
   767  00FAF2  4E                 	db	78
   768  00FAF3  55                 	db	85
   769  00FAF4  4D                 	db	77
   770  00FAF5  0D                 	db	13
   771  00FAF6  00                 	db	0
   772  00FAF7                     __end_of_ownnum:
   773                           	opt stack 0
   774  00FAF7                     _engwrt:
   775                           	opt stack 0
   776  00FAF7  41                 	db	65
   777  00FAF8  54                 	db	84
   778  00FAF9  2B                 	db	43
   779  00FAFA  43                 	db	67
   780  00FAFB  45                 	db	69
   781  00FAFC  4E                 	db	78
   782  00FAFD  47                 	db	71
   783  00FAFE  3F                 	db	63
   784  00FAFF  00                 	db	0
   785  00FB00                     __end_of_engwrt:
   786                           	opt stack 0
   787  00FB00                     _pwrsta:
   788                           	opt stack 0
   789  00FB00  41                 	db	65
   790  00FB01  54                 	db	84
   791  00FB02  2B                 	db	43
   792  00FB03  43                 	db	67
   793  00FB04  42                 	db	66
   794  00FB05  43                 	db	67
   795  00FB06  0D                 	db	13
   796  00FB07  00                 	db	0
   797  00FB08                     __end_of_pwrsta:
   798                           	opt stack 0
   799  00FB08                     _pricemsg:
   800                           	opt stack 0
   801  00FB08  50                 	db	80
   802  00FB09  72                 	db	114
   803  00FB0A  69                 	db	105
   804  00FB0B  63                 	db	99
   805  00FB0C  65                 	db	101
   806  00FB0D  20                 	db	32
   807  00FB0E  52                 	db	82
   808  00FB0F  00                 	db	0
   809  00FB10                     __end_of_pricemsg:
   810                           	opt stack 0
   811  00FB10                     _dconfg:
   812                           	opt stack 0
   813  00FB10  41                 	db	65
   814  00FB11  54                 	db	84
   815  00FB12  26                 	db	38
   816  00FB13  56                 	db	86
   817  00FB14  0D                 	db	13
   818  00FB15  00                 	db	0
   819  00FB16                     __end_of_dconfg:
   820                           	opt stack 0
   821  00FB16                     _prodid:
   822                           	opt stack 0
   823  00FB16  41                 	db	65
   824  00FB17  54                 	db	84
   825  00FB18  49                 	db	73
   826  00FB19  0D                 	db	13
   827  00FB1A  00                 	db	0
   828  00FB1B                     __end_of_prodid:
   829                           	opt stack 0
   830  00FB1B                     _exit:
   831                           	opt stack 0
   832  00FB1B  45                 	db	69
   833  00FB1C  78                 	db	120
   834  00FB1D  69                 	db	105
   835  00FB1E  74                 	db	116
   836  00FB1F  00                 	db	0
   837  00FB20                     __end_of_exit:
   838                           	opt stack 0
   839  00FB20                     _hoperror:
   840                           	opt stack 0
   841  00FB20  002F               	dw	47
   842  00FB22                     __end_of_hoperror:
   843                           	opt stack 0
   844  00FB22                     _nosentime:
   845                           	opt stack 0
   846  00FB22  002E               	dw	46
   847  00FB24                     __end_of_nosentime:
   848                           	opt stack 0
   849  00FB24                     _chan8time:
   850                           	opt stack 0
   851  00FB24  002D               	dw	45
   852  00FB26                     __end_of_chan8time:
   853                           	opt stack 0
   854  00FB26                     _chan7time:
   855                           	opt stack 0
   856  00FB26  002C               	dw	44
   857  00FB28                     __end_of_chan7time:
   858                           	opt stack 0
   859  00FB28                     _chan6time:
   860                           	opt stack 0
   861  00FB28  002B               	dw	43
   862  00FB2A                     __end_of_chan6time:
   863                           	opt stack 0
   864  00FB2A                     _chan5time:
   865                           	opt stack 0
   866  00FB2A  002A               	dw	42
   867  00FB2C                     __end_of_chan5time:
   868                           	opt stack 0
   869  00FB2C                     _chan4time:
   870                           	opt stack 0
   871  00FB2C  0029               	dw	41
   872  00FB2E                     __end_of_chan4time:
   873                           	opt stack 0
   874  00FB2E                     _chan3time:
   875                           	opt stack 0
   876  00FB2E  0028               	dw	40
   877  00FB30                     __end_of_chan3time:
   878                           	opt stack 0
   879  00FB30                     _chan2time:
   880                           	opt stack 0
   881  00FB30  0027               	dw	39
   882  00FB32                     __end_of_chan2time:
   883                           	opt stack 0
   884  00FB32                     _chan1time:
   885                           	opt stack 0
   886  00FB32  0026               	dw	38
   887  00FB34                     __end_of_chan1time:
   888                           	opt stack 0
   889  00FB34                     _sensorflags:
   890                           	opt stack 0
   891  00FB34  0025               	dw	37
   892  00FB36                     __end_of_sensorflags:
   893                           	opt stack 0
   894  00FB36                     _chan8linkbits:
   895                           	opt stack 0
   896  00FB36  0024               	dw	36
   897  00FB38                     __end_of_chan8linkbits:
   898                           	opt stack 0
   899  00FB38                     _chan7linkbits:
   900                           	opt stack 0
   901  00FB38  0023               	dw	35
   902  00FB3A                     __end_of_chan7linkbits:
   903                           	opt stack 0
   904  00FB3A                     _chan6linkbits:
   905                           	opt stack 0
   906  00FB3A  0022               	dw	34
   907  00FB3C                     __end_of_chan6linkbits:
   908                           	opt stack 0
   909  00FB3C                     _chan5linkbits:
   910                           	opt stack 0
   911  00FB3C  0021               	dw	33
   912  00FB3E                     __end_of_chan5linkbits:
   913                           	opt stack 0
   914  00FB3E                     _chan4linkbits:
   915                           	opt stack 0
   916  00FB3E  0020               	dw	32
   917  00FB40                     __end_of_chan4linkbits:
   918                           	opt stack 0
   919  00FB40                     _chan3linkbits:
   920                           	opt stack 0
   921  00FB40  001F               	dw	31
   922  00FB42                     __end_of_chan3linkbits:
   923                           	opt stack 0
   924  00FB42                     _chan2linkbits:
   925                           	opt stack 0
   926  00FB42  001E               	dw	30
   927  00FB44                     __end_of_chan2linkbits:
   928                           	opt stack 0
   929  00FB44                     _chan1linkbits:
   930                           	opt stack 0
   931  00FB44  001D               	dw	29
   932  00FB46                     __end_of_chan1linkbits:
   933                           	opt stack 0
   934  00FB46                     _hopcoin:
   935                           	opt stack 0
   936  00FB46  001C               	dw	28
   937  00FB48                     __end_of_hopcoin:
   938                           	opt stack 0
   939  00FB48                     _cashoutv:
   940                           	opt stack 0
   941  00FB48  001A               	dw	26
   942  00FB4A                     __end_of_cashoutv:
   943                           	opt stack 0
   944  00FB4A                     _sensval:
   945                           	opt stack 0
   946  00FB4A  0019               	dw	25
   947  00FB4C                     __end_of_sensval:
   948                           	opt stack 0
   949  00FB4C                     _notebits:
   950                           	opt stack 0
   951  00FB4C  0018               	dw	24
   952  00FB4E                     __end_of_notebits:
   953                           	opt stack 0
   954  00FB4E                     _venderrors:
   955                           	opt stack 0
   956  00FB4E  0017               	dw	23
   957  00FB50                     __end_of_venderrors:
   958                           	opt stack 0
   959  00FB50                     _pricestore:
   960                           	opt stack 0
   961  00FB50  000F               	dw	15
   962  00FB52                     __end_of_pricestore:
   963                           	opt stack 0
   964  00FB52                     _cashint:
   965                           	opt stack 0
   966  00FB52  000C               	dw	12
   967  00FB54                     __end_of_cashint:
   968                           	opt stack 0
   969  00FB54                     _vendstore:
   970                           	opt stack 0
   971  00FB54  0004               	dw	4
   972  00FB56                     __end_of_vendstore:
   973                           	opt stack 0
   974  00FB56                     _cashinv:
   975                           	opt stack 0
   976  00FB56  0002               	dw	2
   977  00FB58                     __end_of_cashinv:
   978                           	opt stack 0
   979  00FB58                     _credmem:
   980                           	opt stack 0
   981  00FB58  0000               	dw	0
   982  00FB5A                     __end_of_credmem:
   983                           	opt stack 0
   984  00FB5A                     _secondadd:
   985                           	opt stack 0
   986  00FB5A  1E46               	dw	7750
   987  00FB5C                     __end_of_secondadd:
   988                           	opt stack 0
   989  00FB5C                     _second_5:
   990                           	opt stack 0
   991  00FB5C  0F23               	dw	3875
   992  00FB5E                     __end_of_second_5:
   993                           	opt stack 0
   994  00FB5E                     _second1:
   995                           	opt stack 0
   996  00FB5E  E1BA               	dw	57786
   997  00FB60                     __end_of_second1:
   998                           	opt stack 0
   999  00FB60                     _cc_poll:
  1000                           	opt stack 0
  1001  00FB60  FE                 	db	254
  1002  00FB61                     __end_of_cc_poll:
  1003                           	opt stack 0
  1004  00FB61                     _cc_adpoll:
  1005                           	opt stack 0
  1006  00FB61  FD                 	db	253
  1007  00FB62                     __end_of_cc_adpoll:
  1008                           	opt stack 0
  1009  00FB62                     _cc_serial:
  1010                           	opt stack 0
  1011  00FB62  F2                 	db	242
  1012  00FB63                     __end_of_cc_serial:
  1013                           	opt stack 0
  1014  00FB63                     _cc_newpin:
  1015                           	opt stack 0
  1016  00FB63  DB                 	db	219
  1017  00FB64                     __end_of_cc_newpin:
  1018                           	opt stack 0
  1019  00FB64                     _cc_pin:
  1020                           	opt stack 0
  1021  00FB64  DA                 	db	218
  1022  00FB65                     __end_of_cc_pin:
  1023                           	opt stack 0
  1024  00FB65                     _cc_level:
  1025                           	opt stack 0
  1026  00FB65  EC                 	db	236
  1027  00FB66                     __end_of_cc_level:
  1028                           	opt stack 0
  1029  00FB66                     _cc_stop:
  1030                           	opt stack 0
  1031  00FB66  AC                 	db	172
  1032  00FB67                     __end_of_cc_stop:
  1033                           	opt stack 0
  1034  00FB67                     _cc_countrq:
  1035                           	opt stack 0
  1036  00FB67  A8                 	db	168
  1037  00FB68                     __end_of_cc_countrq:
  1038                           	opt stack 0
  1039  00FB68                     _cc_pay:
  1040                           	opt stack 0
  1041  00FB68  A7                 	db	167
  1042  00FB69                     __end_of_cc_pay:
  1043                           	opt stack 0
  1044  00FB69                     _cc_status:
  1045                           	opt stack 0
  1046  00FB69  A6                 	db	166
  1047  00FB6A                     __end_of_cc_status:
  1048                           	opt stack 0
  1049  00FB6A                     _cc_enable:
  1050                           	opt stack 0
  1051  00FB6A  A4                 	db	164
  1052  00FB6B                     __end_of_cc_enable:
  1053                           	opt stack 0
  1054  00FB6B                     _cc_test:
  1055                           	opt stack 0
  1056  00FB6B  A3                 	db	163
  1057  00FB6C                     __end_of_cc_test:
  1058                           	opt stack 0
  1059  00FB6C                     _cc_reset:
  1060                           	opt stack 0
  1061  00FB6C  01                 	db	1
  1062  00FB6D                     __end_of_cc_reset:
  1063                           	opt stack 0
  1064  00FB6D                     _mastadd:
  1065                           	opt stack 0
  1066  00FB6D  01                 	db	1
  1067  00FB6E                     __end_of_mastadd:
  1068                           	opt stack 0
  1069  00FB6E                     _hopadd:
  1070                           	opt stack 0
  1071  00FB6E  03                 	db	3
  1072  00FB6F                     __end_of_hopadd:
  1073                           	opt stack 0
  1074  00FB6F                     _theft_attempt:
  1075                           	opt stack 0
  1076  00FB6F  0C                 	db	12
  1077  00FB70                     __end_of_theft_attempt:
  1078                           	opt stack 0
  1079  00FB70                     _note_rejected:
  1080                           	opt stack 0
  1081  00FB70  0B                 	db	11
  1082  00FB71                     __end_of_note_rejected:
  1083                           	opt stack 0
  1084  00FB71                     _invalid_escrow:
  1085                           	opt stack 0
  1086  00FB71  0A                 	db	10
  1087  00FB72                     __end_of_invalid_escrow:
  1088                           	opt stack 0
  1089  00FB72                     _acept_disabled:
  1090                           	opt stack 0
  1091  00FB72  09                 	db	9
  1092  00FB73                     __end_of_acept_disabled:
  1093                           	opt stack 0
  1094  00FB73                     _cashbox_err:
  1095                           	opt stack 0
  1096  00FB73  08                 	db	8
  1097  00FB74                     __end_of_cashbox_err:
  1098                           	opt stack 0
  1099  00FB74                     _note_removed:
  1100                           	opt stack 0
  1101  00FB74  07                 	db	7
  1102  00FB75                     __end_of_note_removed:
  1103                           	opt stack 0
  1104  00FB75                     _just_reset:
  1105                           	opt stack 0
  1106  00FB75  06                 	db	6
  1107  00FB76                     __end_of_just_reset:
  1108                           	opt stack 0
  1109  00FB76                     _jammed_err:
  1110                           	opt stack 0
  1111  00FB76  05                 	db	5
  1112  00FB77                     __end_of_jammed_err:
  1113                           	opt stack 0
  1114  00FB77                     _rom_error:
  1115                           	opt stack 0
  1116  00FB77  04                 	db	4
  1117  00FB78                     __end_of_rom_error:
  1118                           	opt stack 0
  1119  00FB78                     _just_busy:
  1120                           	opt stack 0
  1121  00FB78  03                 	db	3
  1122  00FB79                     __end_of_just_busy:
  1123                           	opt stack 0
  1124  00FB79                     _sens_error:
  1125                           	opt stack 0
  1126  00FB79  02                 	db	2
  1127  00FB7A                     __end_of_sens_error:
  1128                           	opt stack 0
  1129  00FB7A                     _motr_error:
  1130                           	opt stack 0
  1131  00FB7A  01                 	db	1
  1132  00FB7B                     __end_of_motr_error:
  1133                           	opt stack 0
  1134  00FB7B                     _note_features:
  1135                           	opt stack 0
  1136  00FB7B  33                 	db	51
  1137  00FB7C                     __end_of_note_features:
  1138                           	opt stack 0
  1139  00FB7C                     _note_stacker:
  1140                           	opt stack 0
  1141  00FB7C  36                 	db	54
  1142  00FB7D                     __end_of_note_stacker:
  1143                           	opt stack 0
  1144  00FB7D                     _note_escrow:
  1145                           	opt stack 0
  1146  00FB7D  35                 	db	53
  1147  00FB7E                     __end_of_note_escrow:
  1148                           	opt stack 0
  1149  00FB7E                     _note_type:
  1150                           	opt stack 0
  1151  00FB7E  34                 	db	52
  1152  00FB7F                     __end_of_note_type:
  1153                           	opt stack 0
  1154  00FB7F                     _note_poll:
  1155                           	opt stack 0
  1156  00FB7F  33                 	db	51
  1157  00FB80                     __end_of_note_poll:
  1158                           	opt stack 0
  1159  00FB80                     _note_security:
  1160                           	opt stack 0
  1161  00FB80  32                 	db	50
  1162  00FB81                     __end_of_note_security:
  1163                           	opt stack 0
  1164  00FB81                     _note_setup:
  1165                           	opt stack 0
  1166  00FB81  31                 	db	49
  1167  00FB82                     __end_of_note_setup:
  1168                           	opt stack 0
  1169  00FB82                     _note_reset:
  1170                           	opt stack 0
  1171  00FB82  30                 	db	48
  1172  00FB83                     __end_of_note_reset:
  1173                           	opt stack 0
  1174  00FB83                     _line4:
  1175                           	opt stack 0
  1176  00FB83  54                 	db	84
  1177  00FB84                     __end_of_line4:
  1178                           	opt stack 0
  1179  00FB84                     _line3:
  1180                           	opt stack 0
  1181  00FB84  14                 	db	20
  1182  00FB85                     __end_of_line3:
  1183                           	opt stack 0
  1184  00FB85                     _line2:
  1185                           	opt stack 0
  1186  00FB85  40                 	db	64
  1187  00FB86                     __end_of_line2:
  1188                           	opt stack 0
  1189  00FB86                     _line1:
  1190                           	opt stack 0
  1191  00FB86  00                 	db	0
  1192  00FB87                     __end_of_line1:
  1193                           	opt stack 0
  1194  00FB87                     _dispsl:
  1195                           	opt stack 0
  1196  00FB87  18                 	db	24
  1197  00FB88                     __end_of_dispsl:
  1198                           	opt stack 0
  1199  00FB88                     _dispsr:
  1200                           	opt stack 0
  1201  00FB88  1B                 	db	27
  1202  00FB89                     __end_of_dispsr:
  1203                           	opt stack 0
  1204  00FB89                     _dispoff:
  1205                           	opt stack 0
  1206  00FB89  08                 	db	8
  1207  00FB8A                     __end_of_dispoff:
  1208                           	opt stack 0
  1209  00FB8A                     _dispshleft:
  1210                           	opt stack 0
  1211  00FB8A  07                 	db	7
  1212  00FB8B                     __end_of_dispshleft:
  1213                           	opt stack 0
  1214  00FB8B                     _dispshright:
  1215                           	opt stack 0
  1216  00FB8B  05                 	db	5
  1217  00FB8C                     __end_of_dispshright:
  1218                           	opt stack 0
  1219  00FB8C                     _dispcursor:
  1220                           	opt stack 0
  1221  00FB8C  04                 	db	4
  1222  00FB8D                     __end_of_dispcursor:
  1223                           	opt stack 0
  1224  00FB8D                     _dispnormal:
  1225                           	opt stack 0
  1226  00FB8D  06                 	db	6
  1227  00FB8E                     __end_of_dispnormal:
  1228                           	opt stack 0
  1229  00FB8E                     _dsphome:
  1230                           	opt stack 0
  1231  00FB8E  02                 	db	2
  1232  00FB8F                     __end_of_dsphome:
  1233                           	opt stack 0
  1234  00FB8F                     _dispaddr:
  1235                           	opt stack 0
  1236  00FB8F  A8                 	db	168
  1237  00FB90                     __end_of_dispaddr:
  1238                           	opt stack 0
  1239  00FB90                     _dispclr:
  1240                           	opt stack 0
  1241  00FB90  01                 	db	1
  1242  00FB91                     __end_of_dispclr:
  1243                           	opt stack 0
  1244  00FB91                     _dispon:
  1245                           	opt stack 0
  1246  00FB91  0C                 	db	12
  1247  00FB92                     __end_of_dispon:
  1248                           	opt stack 0
  1249  00FB92                     _dispfunc3:
  1250                           	opt stack 0
  1251  00FB92  2C                 	db	44
  1252  00FB93                     __end_of_dispfunc3:
  1253                           	opt stack 0
  1254  00FB93                     _dispfunc2:
  1255                           	opt stack 0
  1256  00FB93  28                 	db	40
  1257  00FB94                     __end_of_dispfunc2:
  1258                           	opt stack 0
  1259  00FB94                     _dispfunc1:
  1260                           	opt stack 0
  1261  00FB94  24                 	db	36
  1262  00FB95                     __end_of_dispfunc1:
  1263                           	opt stack 0
  1264  00FB95                     _servmsg:
  1265                           	opt stack 0
  1266  00FB95  31                 	db	49
  1267  00FB96  20                 	db	32
  1268  00FB97  3D                 	db	61
  1269  00FB98  20                 	db	32
  1270  00FB99  41                 	db	65
  1271  00FB9A  75                 	db	117
  1272  00FB9B  64                 	db	100
  1273  00FB9C  69                 	db	105
  1274  00FB9D  74                 	db	116
  1275  00FB9E  20                 	db	32
  1276  00FB9F  32                 	db	50
  1277  00FBA0  20                 	db	32
  1278  00FBA1  3D                 	db	61
  1279  00FBA2  20                 	db	32
  1280  00FBA3  53                 	db	83
  1281  00FBA4  65                 	db	101
  1282  00FBA5  6E                 	db	110
  1283  00FBA6  73                 	db	115
  1284  00FBA7  6F                 	db	111
  1285  00FBA8  72                 	db	114
  1286  00FBA9  33                 	db	51
  1287  00FBAA  3D                 	db	61
  1288  00FBAB  48                 	db	72
  1289  00FBAC  6F                 	db	111
  1290  00FBAD  70                 	db	112
  1291  00FBAE  2D                 	db	45
  1292  00FBAF  43                 	db	67
  1293  00FBB0  6F                 	db	111
  1294  00FBB1  69                 	db	105
  1295  00FBB2  6E                 	db	110
  1296  00FBB3  20                 	db	32
  1297  00FBB4  34                 	db	52
  1298  00FBB5  3D                 	db	61
  1299  00FBB6  4E                 	db	78
  1300  00FBB7  6F                 	db	111
  1301  00FBB8  74                 	db	116
  1302  00FBB9  65                 	db	101
  1303  00FBBA  2D                 	db	45
  1304  00FBBB  65                 	db	101
  1305  00FBBC  6E                 	db	110
  1306  00FBBD  35                 	db	53
  1307  00FBBE  3D                 	db	61
  1308  00FBBF  43                 	db	67
  1309  00FBC0  72                 	db	114
  1310  00FBC1  65                 	db	101
  1311  00FBC2  64                 	db	100
  1312  00FBC3  2D                 	db	45
  1313  00FBC4  63                 	db	99
  1314  00FBC5  6C                 	db	108
  1315  00FBC6  72                 	db	114
  1316  00FBC7  20                 	db	32
  1317  00FBC8  36                 	db	54
  1318  00FBC9  3D                 	db	61
  1319  00FBCA  50                 	db	80
  1320  00FBCB  72                 	db	114
  1321  00FBCC  69                 	db	105
  1322  00FBCD  63                 	db	99
  1323  00FBCE  65                 	db	101
  1324  00FBCF  73                 	db	115
  1325  00FBD0  20                 	db	32
  1326  00FBD1  37                 	db	55
  1327  00FBD2  3D                 	db	61
  1328  00FBD3  56                 	db	86
  1329  00FBD4  65                 	db	101
  1330  00FBD5  6E                 	db	110
  1331  00FBD6  64                 	db	100
  1332  00FBD7  20                 	db	32
  1333  00FBD8  73                 	db	115
  1334  00FBD9  65                 	db	101
  1335  00FBDA  74                 	db	116
  1336  00FBDB  75                 	db	117
  1337  00FBDC  70                 	db	112
  1338  00FBDD  20                 	db	32
  1339  00FBDE  38                 	db	56
  1340  00FBDF  3D                 	db	61
  1341  00FBE0  45                 	db	69
  1342  00FBE1  78                 	db	120
  1343  00FBE2  69                 	db	105
  1344  00FBE3  74                 	db	116
  1345  00FBE4  00                 	db	0
  1346  00FBE5                     __end_of_servmsg:
  1347                           	opt stack 0
  1348  00FBE5                     _setnotes:
  1349                           	opt stack 0
  1350  00FBE5  45                 	db	69
  1351  00FBE6  6E                 	db	110
  1352  00FBE7  61                 	db	97
  1353  00FBE8  62                 	db	98
  1354  00FBE9  6C                 	db	108
  1355  00FBEA  65                 	db	101
  1356  00FBEB  20                 	db	32
  1357  00FBEC  2F                 	db	47
  1358  00FBED  20                 	db	32
  1359  00FBEE  44                 	db	68
  1360  00FBEF  69                 	db	105
  1361  00FBF0  73                 	db	115
  1362  00FBF1  61                 	db	97
  1363  00FBF2  62                 	db	98
  1364  00FBF3  6C                 	db	108
  1365  00FBF4  65                 	db	101
  1366  00FBF5  20                 	db	32
  1367  00FBF6  20                 	db	32
  1368  00FBF7  20                 	db	32
  1369  00FBF8  20                 	db	32
  1370  00FBF9  31                 	db	49
  1371  00FBFA  20                 	db	32
  1372  00FBFB  3D                 	db	61
  1373  00FBFC  20                 	db	32
  1374  00FBFD  52                 	db	82
  1375  00FBFE  31                 	db	49
  1376  00FBFF  30                 	db	48
  1377  00FC00  2C                 	db	44
  1378  00FC01  20                 	db	32
  1379  00FC02  32                 	db	50
  1380  00FC03  20                 	db	32
  1381  00FC04  3D                 	db	61
  1382  00FC05  20                 	db	32
  1383  00FC06  52                 	db	82
  1384  00FC07  32                 	db	50
  1385  00FC08  30                 	db	48
  1386  00FC09  20                 	db	32
  1387  00FC0A  20                 	db	32
  1388  00FC0B  20                 	db	32
  1389  00FC0C  20                 	db	32
  1390  00FC0D  33                 	db	51
  1391  00FC0E  20                 	db	32
  1392  00FC0F  3D                 	db	61
  1393  00FC10  20                 	db	32
  1394  00FC11  52                 	db	82
  1395  00FC12  35                 	db	53
  1396  00FC13  30                 	db	48
  1397  00FC14  2C                 	db	44
  1398  00FC15  20                 	db	32
  1399  00FC16  34                 	db	52
  1400  00FC17  20                 	db	32
  1401  00FC18  3D                 	db	61
  1402  00FC19  20                 	db	32
  1403  00FC1A  52                 	db	82
  1404  00FC1B  31                 	db	49
  1405  00FC1C  30                 	db	48
  1406  00FC1D  30                 	db	48
  1407  00FC1E  20                 	db	32
  1408  00FC1F  20                 	db	32
  1409  00FC20  20                 	db	32
  1410  00FC21  35                 	db	53
  1411  00FC22  20                 	db	32
  1412  00FC23  3D                 	db	61
  1413  00FC24  20                 	db	32
  1414  00FC25  52                 	db	82
  1415  00FC26  32                 	db	50
  1416  00FC27  30                 	db	48
  1417  00FC28  30                 	db	48
  1418  00FC29  00                 	db	0
  1419  00FC2A                     __end_of_setnotes:
  1420                           	opt stack 0
  1421  00FC2A                     _vendsetup:
  1422                           	opt stack 0
  1423  00FC2A  50                 	db	80
  1424  00FC2B  75                 	db	117
  1425  00FC2C  73                 	db	115
  1426  00FC2D  68                 	db	104
  1427  00FC2E  20                 	db	32
  1428  00FC2F  31                 	db	49
  1429  00FC30  20                 	db	32
  1430  00FC31  56                 	db	86
  1431  00FC32  65                 	db	101
  1432  00FC33  6E                 	db	110
  1433  00FC34  64                 	db	100
  1434  00FC35  20                 	db	32
  1435  00FC36  54                 	db	84
  1436  00FC37  69                 	db	105
  1437  00FC38  6D                 	db	109
  1438  00FC39  65                 	db	101
  1439  00FC3A  2C                 	db	44
  1440  00FC3B  20                 	db	32
  1441  00FC3C  20                 	db	32
  1442  00FC3D  20                 	db	32
  1443  00FC3E  32                 	db	50
  1444  00FC3F  20                 	db	32
  1445  00FC40  43                 	db	67
  1446  00FC41  68                 	db	104
  1447  00FC42  61                 	db	97
  1448  00FC43  6E                 	db	110
  1449  00FC44  4C                 	db	76
  1450  00FC45  69                 	db	105
  1451  00FC46  6E                 	db	110
  1452  00FC47  6B                 	db	107
  1453  00FC48  20                 	db	32
  1454  00FC49  33                 	db	51
  1455  00FC4A  20                 	db	32
  1456  00FC4B  53                 	db	83
  1457  00FC4C  65                 	db	101
  1458  00FC4D  6E                 	db	110
  1459  00FC4E  73                 	db	115
  1460  00FC4F  4F                 	db	79
  1461  00FC50  66                 	db	102
  1462  00FC51  66                 	db	102
  1463  00FC52  34                 	db	52
  1464  00FC53  20                 	db	32
  1465  00FC54  43                 	db	67
  1466  00FC55  6C                 	db	108
  1467  00FC56  72                 	db	114
  1468  00FC57  54                 	db	84
  1469  00FC58  6F                 	db	111
  1470  00FC59  74                 	db	116
  1471  00FC5A  20                 	db	32
  1472  00FC5B  35                 	db	53
  1473  00FC5C  20                 	db	32
  1474  00FC5D  46                 	db	70
  1475  00FC5E  61                 	db	97
  1476  00FC5F  63                 	db	99
  1477  00FC60  52                 	db	82
  1478  00FC61  65                 	db	101
  1479  00FC62  73                 	db	115
  1480  00FC63  65                 	db	101
  1481  00FC64  74                 	db	116
  1482  00FC65  20                 	db	32
  1483  00FC66  38                 	db	56
  1484  00FC67  20                 	db	32
  1485  00FC68  65                 	db	101
  1486  00FC69  78                 	db	120
  1487  00FC6A  69                 	db	105
  1488  00FC6B  74                 	db	116
  1489  00FC6C  00                 	db	0
  1490  00FC6D                     __end_of_vendsetup:
  1491                           	opt stack 0
  1492  00FC6D                     _pricesetm2:
  1493                           	opt stack 0
  1494  00FC6D  50                 	db	80
  1495  00FC6E  72                 	db	114
  1496  00FC6F  65                 	db	101
  1497  00FC70  73                 	db	115
  1498  00FC71  73                 	db	115
  1499  00FC72  20                 	db	32
  1500  00FC73  63                 	db	99
  1501  00FC74  68                 	db	104
  1502  00FC75  61                 	db	97
  1503  00FC76  6E                 	db	110
  1504  00FC77  6E                 	db	110
  1505  00FC78  65                 	db	101
  1506  00FC79  6C                 	db	108
  1507  00FC7A  20                 	db	32
  1508  00FC7B  62                 	db	98
  1509  00FC7C  75                 	db	117
  1510  00FC7D  74                 	db	116
  1511  00FC7E  74                 	db	116
  1512  00FC7F  6F                 	db	111
  1513  00FC80  6E                 	db	110
  1514  00FC81  20                 	db	32
  1515  00FC82  20                 	db	32
  1516  00FC83  20                 	db	32
  1517  00FC84  20                 	db	32
  1518  00FC85  74                 	db	116
  1519  00FC86  6F                 	db	111
  1520  00FC87  20                 	db	32
  1521  00FC88  73                 	db	115
  1522  00FC89  65                 	db	101
  1523  00FC8A  74                 	db	116
  1524  00FC8B  20                 	db	32
  1525  00FC8C  70                 	db	112
  1526  00FC8D  72                 	db	114
  1527  00FC8E  69                 	db	105
  1528  00FC8F  63                 	db	99
  1529  00FC90  65                 	db	101
  1530  00FC91  20                 	db	32
  1531  00FC92  20                 	db	32
  1532  00FC93  20                 	db	32
  1533  00FC94  20                 	db	32
  1534  00FC95  20                 	db	32
  1535  00FC96  20                 	db	32
  1536  00FC97  53                 	db	83
  1537  00FC98  65                 	db	101
  1538  00FC99  72                 	db	114
  1539  00FC9A  76                 	db	118
  1540  00FC9B  69                 	db	105
  1541  00FC9C  63                 	db	99
  1542  00FC9D  65                 	db	101
  1543  00FC9E  20                 	db	32
  1544  00FC9F  3D                 	db	61
  1545  00FCA0  20                 	db	32
  1546  00FCA1  45                 	db	69
  1547  00FCA2  78                 	db	120
  1548  00FCA3  69                 	db	105
  1549  00FCA4  74                 	db	116
  1550  00FCA5  00                 	db	0
  1551  00FCA6                     __end_of_pricesetm2:
  1552                           	opt stack 0
  1553  00FCA6                     _chanlinkm:
  1554                           	opt stack 0
  1555  00FCA6  50                 	db	80
  1556  00FCA7  72                 	db	114
  1557  00FCA8  65                 	db	101
  1558  00FCA9  73                 	db	115
  1559  00FCAA  73                 	db	115
  1560  00FCAB  20                 	db	32
  1561  00FCAC  63                 	db	99
  1562  00FCAD  68                 	db	104
  1563  00FCAE  61                 	db	97
  1564  00FCAF  6E                 	db	110
  1565  00FCB0  6E                 	db	110
  1566  00FCB1  65                 	db	101
  1567  00FCB2  6C                 	db	108
  1568  00FCB3  20                 	db	32
  1569  00FCB4  62                 	db	98
  1570  00FCB5  75                 	db	117
  1571  00FCB6  74                 	db	116
  1572  00FCB7  74                 	db	116
  1573  00FCB8  6F                 	db	111
  1574  00FCB9  6E                 	db	110
  1575  00FCBA  20                 	db	32
  1576  00FCBB  20                 	db	32
  1577  00FCBC  20                 	db	32
  1578  00FCBD  20                 	db	32
  1579  00FCBE  74                 	db	116
  1580  00FCBF  6F                 	db	111
  1581  00FCC0  20                 	db	32
  1582  00FCC1  6C                 	db	108
  1583  00FCC2  69                 	db	105
  1584  00FCC3  6E                 	db	110
  1585  00FCC4  6B                 	db	107
  1586  00FCC5  20                 	db	32
  1587  00FCC6  74                 	db	116
  1588  00FCC7  6F                 	db	111
  1589  00FCC8  20                 	db	32
  1590  00FCC9  20                 	db	32
  1591  00FCCA  20                 	db	32
  1592  00FCCB  20                 	db	32
  1593  00FCCC  20                 	db	32
  1594  00FCCD  20                 	db	32
  1595  00FCCE  53                 	db	83
  1596  00FCCF  65                 	db	101
  1597  00FCD0  72                 	db	114
  1598  00FCD1  76                 	db	118
  1599  00FCD2  69                 	db	105
  1600  00FCD3  63                 	db	99
  1601  00FCD4  65                 	db	101
  1602  00FCD5  20                 	db	32
  1603  00FCD6  3D                 	db	61
  1604  00FCD7  20                 	db	32
  1605  00FCD8  45                 	db	69
  1606  00FCD9  78                 	db	120
  1607  00FCDA  69                 	db	105
  1608  00FCDB  74                 	db	116
  1609  00FCDC  00                 	db	0
  1610  00FCDD                     __end_of_chanlinkm:
  1611                           	opt stack 0
  1612  00FCDD                     _hoppcoin:
  1613                           	opt stack 0
  1614  00FCDD  48                 	db	72
  1615  00FCDE  6F                 	db	111
  1616  00FCDF  70                 	db	112
  1617  00FCE0  70                 	db	112
  1618  00FCE1  65                 	db	101
  1619  00FCE2  72                 	db	114
  1620  00FCE3  20                 	db	32
  1621  00FCE4  43                 	db	67
  1622  00FCE5  6F                 	db	111
  1623  00FCE6  69                 	db	105
  1624  00FCE7  6E                 	db	110
  1625  00FCE8  20                 	db	32
  1626  00FCE9  20                 	db	32
  1627  00FCEA  20                 	db	32
  1628  00FCEB  20                 	db	32
  1629  00FCEC  20                 	db	32
  1630  00FCED  20                 	db	32
  1631  00FCEE  20                 	db	32
  1632  00FCEF  20                 	db	32
  1633  00FCF0  20                 	db	32
  1634  00FCF1  42                 	db	66
  1635  00FCF2  75                 	db	117
  1636  00FCF3  74                 	db	116
  1637  00FCF4  74                 	db	116
  1638  00FCF5  6F                 	db	111
  1639  00FCF6  6E                 	db	110
  1640  00FCF7  20                 	db	32
  1641  00FCF8  31                 	db	49
  1642  00FCF9  20                 	db	32
  1643  00FCFA  3D                 	db	61
  1644  00FCFB  20                 	db	32
  1645  00FCFC  2B                 	db	43
  1646  00FCFD  20                 	db	32
  1647  00FCFE  26                 	db	38
  1648  00FCFF  20                 	db	32
  1649  00FD00  32                 	db	50
  1650  00FD01  20                 	db	32
  1651  00FD02  3D                 	db	61
  1652  00FD03  20                 	db	32
  1653  00FD04  2D                 	db	45
  1654  00FD05  20                 	db	32
  1655  00FD06  56                 	db	86
  1656  00FD07  61                 	db	97
  1657  00FD08  6C                 	db	108
  1658  00FD09  75                 	db	117
  1659  00FD0A  65                 	db	101
  1660  00FD0B  20                 	db	32
  1661  00FD0C  3D                 	db	61
  1662  00FD0D  20                 	db	32
  1663  00FD0E  52                 	db	82
  1664  00FD0F  00                 	db	0
  1665  00FD10                     __end_of_hoppcoin:
  1666                           	opt stack 0
  1667  00FD10                     _vendtimem:
  1668                           	opt stack 0
  1669  00FD10  50                 	db	80
  1670  00FD11  75                 	db	117
  1671  00FD12  73                 	db	115
  1672  00FD13  68                 	db	104
  1673  00FD14  20                 	db	32
  1674  00FD15  31                 	db	49
  1675  00FD16  20                 	db	32
  1676  00FD17  3D                 	db	61
  1677  00FD18  20                 	db	32
  1678  00FD19  2B                 	db	43
  1679  00FD1A  2E                 	db	46
  1680  00FD1B  35                 	db	53
  1681  00FD1C  20                 	db	32
  1682  00FD1D  73                 	db	115
  1683  00FD1E  65                 	db	101
  1684  00FD1F  63                 	db	99
  1685  00FD20  6F                 	db	111
  1686  00FD21  6E                 	db	110
  1687  00FD22  64                 	db	100
  1688  00FD23  20                 	db	32
  1689  00FD24  50                 	db	80
  1690  00FD25  75                 	db	117
  1691  00FD26  73                 	db	115
  1692  00FD27  68                 	db	104
  1693  00FD28  20                 	db	32
  1694  00FD29  32                 	db	50
  1695  00FD2A  20                 	db	32
  1696  00FD2B  3D                 	db	61
  1697  00FD2C  20                 	db	32
  1698  00FD2D  2D                 	db	45
  1699  00FD2E  2E                 	db	46
  1700  00FD2F  35                 	db	53
  1701  00FD30  20                 	db	32
  1702  00FD31  73                 	db	115
  1703  00FD32  65                 	db	101
  1704  00FD33  63                 	db	99
  1705  00FD34  6F                 	db	111
  1706  00FD35  6E                 	db	110
  1707  00FD36  64                 	db	100
  1708  00FD37  20                 	db	32
  1709  00FD38  00                 	db	0
  1710  00FD39                     __end_of_vendtimem:
  1711                           	opt stack 0
  1712  00FD39                     _setimemsg:
  1713                           	opt stack 0
  1714  00FD39  50                 	db	80
  1715  00FD3A  75                 	db	117
  1716  00FD3B  73                 	db	115
  1717  00FD3C  68                 	db	104
  1718  00FD3D  20                 	db	32
  1719  00FD3E  63                 	db	99
  1720  00FD3F  68                 	db	104
  1721  00FD40  61                 	db	97
  1722  00FD41  6E                 	db	110
  1723  00FD42  6E                 	db	110
  1724  00FD43  65                 	db	101
  1725  00FD44  6C                 	db	108
  1726  00FD45  20                 	db	32
  1727  00FD46  62                 	db	98
  1728  00FD47  75                 	db	117
  1729  00FD48  74                 	db	116
  1730  00FD49  74                 	db	116
  1731  00FD4A  6F                 	db	111
  1732  00FD4B  6E                 	db	110
  1733  00FD4C  20                 	db	32
  1734  00FD4D  50                 	db	80
  1735  00FD4E  75                 	db	117
  1736  00FD4F  73                 	db	115
  1737  00FD50  68                 	db	104
  1738  00FD51  20                 	db	32
  1739  00FD52  73                 	db	115
  1740  00FD53  65                 	db	101
  1741  00FD54  72                 	db	114
  1742  00FD55  76                 	db	118
  1743  00FD56  69                 	db	105
  1744  00FD57  63                 	db	99
  1745  00FD58  65                 	db	101
  1746  00FD59  20                 	db	32
  1747  00FD5A  74                 	db	116
  1748  00FD5B  6F                 	db	111
  1749  00FD5C  20                 	db	32
  1750  00FD5D  65                 	db	101
  1751  00FD5E  78                 	db	120
  1752  00FD5F  69                 	db	105
  1753  00FD60  74                 	db	116
  1754  00FD61  00                 	db	0
  1755  00FD62                     __end_of_setimemsg:
  1756                           	opt stack 0
  1757  00FD62                     _inscoin:
  1758                           	opt stack 0
  1759  00FD62  49                 	db	73
  1760  00FD63  6E                 	db	110
  1761  00FD64  73                 	db	115
  1762  00FD65  65                 	db	101
  1763  00FD66  72                 	db	114
  1764  00FD67  74                 	db	116
  1765  00FD68  20                 	db	32
  1766  00FD69  4E                 	db	78
  1767  00FD6A  6F                 	db	111
  1768  00FD6B  74                 	db	116
  1769  00FD6C  65                 	db	101
  1770  00FD6D  73                 	db	115
  1771  00FD6E  20                 	db	32
  1772  00FD6F  26                 	db	38
  1773  00FD70  20                 	db	32
  1774  00FD71  50                 	db	80
  1775  00FD72  72                 	db	114
  1776  00FD73  65                 	db	101
  1777  00FD74  73                 	db	115
  1778  00FD75  73                 	db	115
  1779  00FD76  4C                 	db	76
  1780  00FD77  69                 	db	105
  1781  00FD78  74                 	db	116
  1782  00FD79  20                 	db	32
  1783  00FD7A  42                 	db	66
  1784  00FD7B  75                 	db	117
  1785  00FD7C  74                 	db	116
  1786  00FD7D  74                 	db	116
  1787  00FD7E  6F                 	db	111
  1788  00FD7F  6E                 	db	110
  1789  00FD80  20                 	db	32
  1790  00FD81  54                 	db	84
  1791  00FD82  6F                 	db	111
  1792  00FD83  20                 	db	32
  1793  00FD84  56                 	db	86
  1794  00FD85  65                 	db	101
  1795  00FD86  6E                 	db	110
  1796  00FD87  64                 	db	100
  1797  00FD88  00                 	db	0
  1798  00FD89                     __end_of_inscoin:
  1799                           	opt stack 0
  1800  00FD89                     _initnote:
  1801                           	opt stack 0
  1802  00FD89  20                 	db	32
  1803  00FD8A  20                 	db	32
  1804  00FD8B  20                 	db	32
  1805  00FD8C  20                 	db	32
  1806  00FD8D  20                 	db	32
  1807  00FD8E  49                 	db	73
  1808  00FD8F  6E                 	db	110
  1809  00FD90  69                 	db	105
  1810  00FD91  74                 	db	116
  1811  00FD92  69                 	db	105
  1812  00FD93  61                 	db	97
  1813  00FD94  6C                 	db	108
  1814  00FD95  69                 	db	105
  1815  00FD96  7A                 	db	122
  1816  00FD97  65                 	db	101
  1817  00FD98  20                 	db	32
  1818  00FD99  20                 	db	32
  1819  00FD9A  20                 	db	32
  1820  00FD9B  20                 	db	32
  1821  00FD9C  20                 	db	32
  1822  00FD9D  20                 	db	32
  1823  00FD9E  20                 	db	32
  1824  00FD9F  20                 	db	32
  1825  00FDA0  20                 	db	32
  1826  00FDA1  20                 	db	32
  1827  00FDA2  4E                 	db	78
  1828  00FDA3  6F                 	db	111
  1829  00FDA4  74                 	db	116
  1830  00FDA5  65                 	db	101
  1831  00FDA6  20                 	db	32
  1832  00FDA7  52                 	db	82
  1833  00FDA8  65                 	db	101
  1834  00FDA9  61                 	db	97
  1835  00FDAA  64                 	db	100
  1836  00FDAB  65                 	db	101
  1837  00FDAC  72                 	db	114
  1838  00FDAD  00                 	db	0
  1839  00FDAE                     __end_of_initnote:
  1840                           	opt stack 0
  1841  00FDAE                     _nochange:
  1842                           	opt stack 0
  1843  00FDAE  4E                 	db	78
  1844  00FDAF  6F                 	db	111
  1845  00FDB0  20                 	db	32
  1846  00FDB1  43                 	db	67
  1847  00FDB2  68                 	db	104
  1848  00FDB3  61                 	db	97
  1849  00FDB4  6E                 	db	110
  1850  00FDB5  67                 	db	103
  1851  00FDB6  65                 	db	101
  1852  00FDB7  20                 	db	32
  1853  00FDB8  55                 	db	85
  1854  00FDB9  73                 	db	115
  1855  00FDBA  65                 	db	101
  1856  00FDBB  20                 	db	32
  1857  00FDBC  45                 	db	69
  1858  00FDBD  78                 	db	120
  1859  00FDBE  61                 	db	97
  1860  00FDBF  63                 	db	99
  1861  00FDC0  74                 	db	116
  1862  00FDC1  20                 	db	32
  1863  00FDC2  20                 	db	32
  1864  00FDC3  20                 	db	32
  1865  00FDC4  20                 	db	32
  1866  00FDC5  20                 	db	32
  1867  00FDC6  20                 	db	32
  1868  00FDC7  41                 	db	65
  1869  00FDC8  6D                 	db	109
  1870  00FDC9  6F                 	db	111
  1871  00FDCA  75                 	db	117
  1872  00FDCB  6E                 	db	110
  1873  00FDCC  74                 	db	116
  1874  00FDCD  21                 	db	33
  1875  00FDCE  00                 	db	0
  1876  00FDCF                     __end_of_nochange:
  1877                           	opt stack 0
  1878  00FDCF                     _chanresetmsg:
  1879                           	opt stack 0
  1880  00FDCF  52                 	db	82
  1881  00FDD0  65                 	db	101
  1882  00FDD1  73                 	db	115
  1883  00FDD2  65                 	db	101
  1884  00FDD3  74                 	db	116
  1885  00FDD4  20                 	db	32
  1886  00FDD5  74                 	db	116
  1887  00FDD6  6F                 	db	111
  1888  00FDD7  20                 	db	32
  1889  00FDD8  44                 	db	68
  1890  00FDD9  65                 	db	101
  1891  00FDDA  66                 	db	102
  1892  00FDDB  61                 	db	97
  1893  00FDDC  75                 	db	117
  1894  00FDDD  6C                 	db	108
  1895  00FDDE  74                 	db	116
  1896  00FDDF  20                 	db	32
  1897  00FDE0  20                 	db	32
  1898  00FDE1  20                 	db	32
  1899  00FDE2  20                 	db	32
  1900  00FDE3  53                 	db	83
  1901  00FDE4  74                 	db	116
  1902  00FDE5  61                 	db	97
  1903  00FDE6  72                 	db	114
  1904  00FDE7  74                 	db	116
  1905  00FDE8  20                 	db	32
  1906  00FDE9  41                 	db	65
  1907  00FDEA  67                 	db	103
  1908  00FDEB  61                 	db	97
  1909  00FDEC  69                 	db	105
  1910  00FDED  6E                 	db	110
  1911  00FDEE  00                 	db	0
  1912  00FDEF                     __end_of_chanresetmsg:
  1913                           	opt stack 0
  1914  00FDEF                     _sensoffmsg:
  1915                           	opt stack 0
  1916  00FDEF  50                 	db	80
  1917  00FDF0  75                 	db	117
  1918  00FDF1  73                 	db	115
  1919  00FDF2  68                 	db	104
  1920  00FDF3  20                 	db	32
  1921  00FDF4  31                 	db	49
  1922  00FDF5  20                 	db	32
  1923  00FDF6  3D                 	db	61
  1924  00FDF7  20                 	db	32
  1925  00FDF8  4F                 	db	79
  1926  00FDF9  6E                 	db	110
  1927  00FDFA  2C                 	db	44
  1928  00FDFB  20                 	db	32
  1929  00FDFC  32                 	db	50
  1930  00FDFD  20                 	db	32
  1931  00FDFE  3D                 	db	61
  1932  00FDFF  20                 	db	32
  1933  00FE00  4F                 	db	79
  1934  00FE01  66                 	db	102
  1935  00FE02  66                 	db	102
  1936  00FE03  2C                 	db	44
  1937  00FE04  20                 	db	32
  1938  00FE05  38                 	db	56
  1939  00FE06  20                 	db	32
  1940  00FE07  3D                 	db	61
  1941  00FE08  20                 	db	32
  1942  00FE09  45                 	db	69
  1943  00FE0A  78                 	db	120
  1944  00FE0B  69                 	db	105
  1945  00FE0C  74                 	db	116
  1946  00FE0D  00                 	db	0
  1947  00FE0E                     __end_of_sensoffmsg:
  1948                           	opt stack 0
  1949  00FE0E                     _noteerr:
  1950                           	opt stack 0
  1951  00FE0E  20                 	db	32
  1952  00FE0F  20                 	db	32
  1953  00FE10  20                 	db	32
  1954  00FE11  4E                 	db	78
  1955  00FE12  6F                 	db	111
  1956  00FE13  74                 	db	116
  1957  00FE14  65                 	db	101
  1958  00FE15  20                 	db	32
  1959  00FE16  65                 	db	101
  1960  00FE17  72                 	db	114
  1961  00FE18  72                 	db	114
  1962  00FE19  6F                 	db	111
  1963  00FE1A  72                 	db	114
  1964  00FE1B  20                 	db	32
  1965  00FE1C  20                 	db	32
  1966  00FE1D  20                 	db	32
  1967  00FE1E  20                 	db	32
  1968  00FE1F  20                 	db	32
  1969  00FE20  63                 	db	99
  1970  00FE21  6F                 	db	111
  1971  00FE22  64                 	db	100
  1972  00FE23  65                 	db	101
  1973  00FE24  20                 	db	32
  1974  00FE25  3D                 	db	61
  1975  00FE26  20                 	db	32
  1976  00FE27  30                 	db	48
  1977  00FE28  78                 	db	120
  1978  00FE29  00                 	db	0
  1979  00FE2A                     __end_of_noteerr:
  1980                           	opt stack 0
  1981  00FE2A                     _ussdwv:
  1982                           	opt stack 0
  1983  00FE2A  41                 	db	65
  1984  00FE2B  54                 	db	84
  1985  00FE2C  2B                 	db	43
  1986  00FE2D  43                 	db	67
  1987  00FE2E  55                 	db	85
  1988  00FE2F  53                 	db	83
  1989  00FE30  44                 	db	68
  1990  00FE31  3D                 	db	61
  1991  00FE32  31                 	db	49
  1992  00FE33  2C                 	db	44
  1993  00FE34  22                 	db	34
  1994  00FE35  2A                 	db	42
  1995  00FE36  31                 	db	49
  1996  00FE37  33                 	db	51
  1997  00FE38  35                 	db	53
  1998  00FE39  2A                 	db	42
  1999  00FE3A  35                 	db	53
  2000  00FE3B  30                 	db	48
  2001  00FE3C  30                 	db	48
  2002  00FE3D  23                 	db	35
  2003  00FE3E  22                 	db	34
  2004  00FE3F  0D                 	db	13
  2005  00FE40  00                 	db	0
  2006  00FE41                     __end_of_ussdwv:
  2007                           	opt stack 0
  2008  00FE41                     _ussdw2:
  2009                           	opt stack 0
  2010  00FE41  41                 	db	65
  2011  00FE42  54                 	db	84
  2012  00FE43  2B                 	db	43
  2013  00FE44  43                 	db	67
  2014  00FE45  55                 	db	85
  2015  00FE46  53                 	db	83
  2016  00FE47  44                 	db	68
  2017  00FE48  3D                 	db	61
  2018  00FE49  31                 	db	49
  2019  00FE4A  2C                 	db	44
  2020  00FE4B  22                 	db	34
  2021  00FE4C  2A                 	db	42
  2022  00FE4D  31                 	db	49
  2023  00FE4E  33                 	db	51
  2024  00FE4F  36                 	db	54
  2025  00FE50  23                 	db	35
  2026  00FE51  22                 	db	34
  2027  00FE52  2C                 	db	44
  2028  00FE53  32                 	db	50
  2029  00FE54  0D                 	db	13
  2030  00FE55  00                 	db	0
  2031  00FE56                     __end_of_ussdw2:
  2032                           	opt stack 0
  2033  00FE56                     _vendispmsg:
  2034                           	opt stack 0
  2035  00FE56  55                 	db	85
  2036  00FE57  73                 	db	115
  2037  00FE58  65                 	db	101
  2038  00FE59  20                 	db	32
  2039  00FE5A  62                 	db	98
  2040  00FE5B  75                 	db	117
  2041  00FE5C  74                 	db	116
  2042  00FE5D  74                 	db	116
  2043  00FE5E  6F                 	db	111
  2044  00FE5F  6E                 	db	110
  2045  00FE60  20                 	db	32
  2046  00FE61  2F                 	db	47
  2047  00FE62  20                 	db	32
  2048  00FE63  53                 	db	83
  2049  00FE64  65                 	db	101
  2050  00FE65  72                 	db	114
  2051  00FE66  76                 	db	118
  2052  00FE67  69                 	db	105
  2053  00FE68  63                 	db	99
  2054  00FE69  65                 	db	101
  2055  00FE6A  00                 	db	0
  2056  00FE6B                     __end_of_vendispmsg:
  2057                           	opt stack 0
  2058  00FE6B                     _clrline:
  2059                           	opt stack 0
  2060  00FE6B  20                 	db	32
  2061  00FE6C  20                 	db	32
  2062  00FE6D  20                 	db	32
  2063  00FE6E  20                 	db	32
  2064  00FE6F  20                 	db	32
  2065  00FE70  20                 	db	32
  2066  00FE71  20                 	db	32
  2067  00FE72  20                 	db	32
  2068  00FE73  20                 	db	32
  2069  00FE74  20                 	db	32
  2070  00FE75  20                 	db	32
  2071  00FE76  20                 	db	32
  2072  00FE77  20                 	db	32
  2073  00FE78  20                 	db	32
  2074  00FE79  20                 	db	32
  2075  00FE7A  20                 	db	32
  2076  00FE7B  20                 	db	32
  2077  00FE7C  20                 	db	32
  2078  00FE7D  20                 	db	32
  2079  00FE7E  20                 	db	32
  2080  00FE7F  00                 	db	0
  2081  00FE80                     __end_of_clrline:
  2082                           	opt stack 0
  2083  00FE80                     _smsdel:
  2084                           	opt stack 0
  2085  00FE80  41                 	db	65
  2086  00FE81  54                 	db	84
  2087  00FE82  2B                 	db	43
  2088  00FE83  43                 	db	67
  2089  00FE84  4D                 	db	77
  2090  00FE85  47                 	db	71
  2091  00FE86  44                 	db	68
  2092  00FE87  41                 	db	65
  2093  00FE88  3D                 	db	61
  2094  00FE89  22                 	db	34
  2095  00FE8A  44                 	db	68
  2096  00FE8B  45                 	db	69
  2097  00FE8C  4C                 	db	76
  2098  00FE8D  20                 	db	32
  2099  00FE8E  41                 	db	65
  2100  00FE8F  4C                 	db	76
  2101  00FE90  4C                 	db	76
  2102  00FE91  22                 	db	34
  2103  00FE92  0D                 	db	13
  2104  00FE93  00                 	db	0
  2105  00FE94                     __end_of_smsdel:
  2106                           	opt stack 0
  2107  00FE94                     _ussdwm:
  2108                           	opt stack 0
  2109  00FE94  41                 	db	65
  2110  00FE95  54                 	db	84
  2111  00FE96  2B                 	db	43
  2112  00FE97  43                 	db	67
  2113  00FE98  55                 	db	85
  2114  00FE99  53                 	db	83
  2115  00FE9A  44                 	db	68
  2116  00FE9B  3D                 	db	61
  2117  00FE9C  31                 	db	49
  2118  00FE9D  2C                 	db	44
  2119  00FE9E  22                 	db	34
  2120  00FE9F  2A                 	db	42
  2121  00FEA0  31                 	db	49
  2122  00FEA1  33                 	db	51
  2123  00FEA2  36                 	db	54
  2124  00FEA3  23                 	db	35
  2125  00FEA4  22                 	db	34
  2126  00FEA5  0D                 	db	13
  2127  00FEA6  00                 	db	0
  2128  00FEA7                     __end_of_ussdwm:
  2129                           	opt stack 0
  2130  00FEA7                     _timemsg:
  2131                           	opt stack 0
  2132  00FEA7  54                 	db	84
  2133  00FEA8  69                 	db	105
  2134  00FEA9  6D                 	db	109
  2135  00FEAA  65                 	db	101
  2136  00FEAB  20                 	db	32
  2137  00FEAC  69                 	db	105
  2138  00FEAD  6E                 	db	110
  2139  00FEAE  20                 	db	32
  2140  00FEAF  31                 	db	49
  2141  00FEB0  2F                 	db	47
  2142  00FEB1  32                 	db	50
  2143  00FEB2  73                 	db	115
  2144  00FEB3  65                 	db	101
  2145  00FEB4  63                 	db	99
  2146  00FEB5  20                 	db	32
  2147  00FEB6  3D                 	db	61
  2148  00FEB7  20                 	db	32
  2149  00FEB8  00                 	db	0
  2150  00FEB9                     __end_of_timemsg:
  2151                           	opt stack 0
  2152  00FEB9                     _pricesetmsg:
  2153                           	opt stack 0
  2154  00FEB9  20                 	db	32
  2155  00FEBA  20                 	db	32
  2156  00FEBB  20                 	db	32
  2157  00FEBC  50                 	db	80
  2158  00FEBD  72                 	db	114
  2159  00FEBE  69                 	db	105
  2160  00FEBF  63                 	db	99
  2161  00FEC0  65                 	db	101
  2162  00FEC1  20                 	db	32
  2163  00FEC2  73                 	db	115
  2164  00FEC3  65                 	db	101
  2165  00FEC4  74                 	db	116
  2166  00FEC5  20                 	db	32
  2167  00FEC6  6D                 	db	109
  2168  00FEC7  6F                 	db	111
  2169  00FEC8  64                 	db	100
  2170  00FEC9  65                 	db	101
  2171  00FECA  00                 	db	0
  2172  00FECB                     __end_of_pricesetmsg:
  2173                           	opt stack 0
  2174  00FECB                     _creditclr:
  2175                           	opt stack 0
  2176  00FECB  43                 	db	67
  2177  00FECC  72                 	db	114
  2178  00FECD  65                 	db	101
  2179  00FECE  64                 	db	100
  2180  00FECF  69                 	db	105
  2181  00FED0  74                 	db	116
  2182  00FED1  73                 	db	115
  2183  00FED2  20                 	db	32
  2184  00FED3  43                 	db	67
  2185  00FED4  6C                 	db	108
  2186  00FED5  65                 	db	101
  2187  00FED6  61                 	db	97
  2188  00FED7  72                 	db	114
  2189  00FED8  65                 	db	101
  2190  00FED9  64                 	db	100
  2191  00FEDA  00                 	db	0
  2192  00FEDB                     __end_of_creditclr:
  2193                           	opt stack 0
  2194  00FEDB                     _setgsm:
  2195                           	opt stack 0
  2196  00FEDB  41                 	db	65
  2197  00FEDC  54                 	db	84
  2198  00FEDD  2B                 	db	43
  2199  00FEDE  43                 	db	67
  2200  00FEDF  53                 	db	83
  2201  00FEE0  43                 	db	67
  2202  00FEE1  53                 	db	83
  2203  00FEE2  3D                 	db	61
  2204  00FEE3  22                 	db	34
  2205  00FEE4  47                 	db	71
  2206  00FEE5  53                 	db	83
  2207  00FEE6  4D                 	db	77
  2208  00FEE7  22                 	db	34
  2209  00FEE8  0D                 	db	13
  2210  00FEE9  00                 	db	0
  2211  00FEEA                     __end_of_setgsm:
  2212                           	opt stack 0
  2213  00FEEA                     _dacmsg:
  2214                           	opt stack 0
  2215  00FEEA  53                 	db	83
  2216  00FEEB  65                 	db	101
  2217  00FEEC  6E                 	db	110
  2218  00FEED  73                 	db	115
  2219  00FEEE  69                 	db	105
  2220  00FEEF  74                 	db	116
  2221  00FEF0  69                 	db	105
  2222  00FEF1  76                 	db	118
  2223  00FEF2  69                 	db	105
  2224  00FEF3  74                 	db	116
  2225  00FEF4  79                 	db	121
  2226  00FEF5  20                 	db	32
  2227  00FEF6  00                 	db	0
  2228  00FEF7                     __end_of_dacmsg:
  2229                           	opt stack 0
  2230  00FEF7                     _credits:
  2231                           	opt stack 0
  2232  00FEF7  20                 	db	32
  2233  00FEF8  20                 	db	32
  2234  00FEF9  43                 	db	67
  2235  00FEFA  72                 	db	114
  2236  00FEFB  65                 	db	101
  2237  00FEFC  64                 	db	100
  2238  00FEFD  69                 	db	105
  2239  00FEFE  74                 	db	116
  2240  00FEFF  20                 	db	32
  2241  00FF00  3D                 	db	61
  2242  00FF01  20                 	db	32
  2243  00FF02  52                 	db	82
  2244  00FF03  00                 	db	0
  2245  00FF04                     __end_of_credits:
  2246                           	opt stack 0
  2247  00FF04                     _engqry:
  2248                           	opt stack 0
  2249  00FF04  41                 	db	65
  2250  00FF05  54                 	db	84
  2251  00FF06  2B                 	db	43
  2252  00FF07  41                 	db	65
  2253  00FF08  54                 	db	84
  2254  00FF09  2B                 	db	43
  2255  00FF0A  43                 	db	67
  2256  00FF0B  45                 	db	69
  2257  00FF0C  45                 	db	69
  2258  00FF0D  52                 	db	82
  2259  00FF0E  0D                 	db	13
  2260  00FF0F  00                 	db	0
  2261  00FF10                     __end_of_engqry:
  2262                           	opt stack 0
  2263  00FF10                     _chanmsg:
  2264                           	opt stack 0
  2265  00FF10  20                 	db	32
  2266  00FF11  20                 	db	32
  2267  00FF12  20                 	db	32
  2268  00FF13  43                 	db	67
  2269  00FF14  68                 	db	104
  2270  00FF15  61                 	db	97
  2271  00FF16  6E                 	db	110
  2272  00FF17  6E                 	db	110
  2273  00FF18  65                 	db	101
  2274  00FF19  6C                 	db	108
  2275  00FF1A  20                 	db	32
  2276  00FF1B  00                 	db	0
  2277  00FF1C                     __end_of_chanmsg:
  2278                           	opt stack 0
  2279  00FF1C                     _linkmsg:
  2280                           	opt stack 0
  2281  00FF1C  6C                 	db	108
  2282  00FF1D  69                 	db	105
  2283  00FF1E  6E                 	db	110
  2284  00FF1F  6B                 	db	107
  2285  00FF20  65                 	db	101
  2286  00FF21  64                 	db	100
  2287  00FF22  20                 	db	32
  2288  00FF23  74                 	db	116
  2289  00FF24  6F                 	db	111
  2290  00FF25  20                 	db	32
  2291  00FF26  3A                 	db	58
  2292  00FF27  00                 	db	0
  2293  00FF28                     __end_of_linkmsg:
  2294                           	opt stack 0
  2295  00FF28                     _netoff:
  2296                           	opt stack 0
  2297  00FF28  41                 	db	65
  2298  00FF29  54                 	db	84
  2299  00FF2A  2B                 	db	43
  2300  00FF2B  43                 	db	67
  2301  00FF2C  4C                 	db	76
  2302  00FF2D  54                 	db	84
  2303  00FF2E  53                 	db	83
  2304  00FF2F  3D                 	db	61
  2305  00FF30  30                 	db	48
  2306  00FF31  0D                 	db	13
  2307  00FF32  00                 	db	0
  2308  00FF33                     __end_of_netoff:
  2309                           	opt stack 0
  2310  00FF33                     _nettst:
  2311                           	opt stack 0
  2312  00FF33  41                 	db	65
  2313  00FF34  54                 	db	84
  2314  00FF35  2B                 	db	43
  2315  00FF36  43                 	db	67
  2316  00FF37  4C                 	db	76
  2317  00FF38  54                 	db	84
  2318  00FF39  53                 	db	83
  2319  00FF3A  3D                 	db	61
  2320  00FF3B  31                 	db	49
  2321  00FF3C  0D                 	db	13
  2322  00FF3D  00                 	db	0
  2323  00FF3E                     __end_of_nettst:
  2324                           	opt stack 0
  2325  00FF3E                     _ussdwc:
  2326                           	opt stack 0
  2327  00FF3E  41                 	db	65
  2328  00FF3F  54                 	db	84
  2329  00FF40  2B                 	db	43
  2330  00FF41  43                 	db	67
  2331  00FF42  55                 	db	85
  2332  00FF43  53                 	db	83
  2333  00FF44  44                 	db	68
  2334  00FF45  3D                 	db	61
  2335  00FF46  32                 	db	50
  2336  00FF47  0D                 	db	13
  2337  00FF48  00                 	db	0
  2338  00FF49                     __end_of_ussdwc:
  2339                           	opt stack 0
  2340  00FF49                     _smstxt:
  2341                           	opt stack 0
  2342  00FF49  41                 	db	65
  2343  00FF4A  54                 	db	84
  2344  00FF4B  2B                 	db	43
  2345  00FF4C  43                 	db	67
  2346  00FF4D  4D                 	db	77
  2347  00FF4E  47                 	db	71
  2348  00FF4F  46                 	db	70
  2349  00FF50  3D                 	db	61
  2350  00FF51  31                 	db	49
  2351  00FF52  0D                 	db	13
  2352  00FF53  00                 	db	0
  2353  00FF54                     __end_of_smstxt:
  2354                           	opt stack 0
  2355  00FF54                     _sensmsg:
  2356                           	opt stack 0
  2357  00FF54  53                 	db	83
  2358  00FF55  65                 	db	101
  2359  00FF56  6E                 	db	110
  2360  00FF57  73                 	db	115
  2361  00FF58  6F                 	db	111
  2362  00FF59  72                 	db	114
  2363  00FF5A  20                 	db	32
  2364  00FF5B  69                 	db	105
  2365  00FF5C  73                 	db	115
  2366  00FF5D  20                 	db	32
  2367  00FF5E  00                 	db	0
  2368  00FF5F                     __end_of_sensmsg:
  2369                           	opt stack 0
  2370  00FF5F                     _clockr:
  2371                           	opt stack 0
  2372  00FF5F  41                 	db	65
  2373  00FF60  54                 	db	84
  2374  00FF61  2B                 	db	43
  2375  00FF62  43                 	db	67
  2376  00FF63  43                 	db	67
  2377  00FF64  4C                 	db	76
  2378  00FF65  4B                 	db	75
  2379  00FF66  3F                 	db	63
  2380  00FF67  0D                 	db	13
  2381  00FF68  00                 	db	0
  2382  00FF69                     __end_of_clockr:
  2383                           	opt stack 0
  2384  00FF69                     _cashinmsg:
  2385                           	opt stack 0
  2386  00FF69  43                 	db	67
  2387  00FF6A  61                 	db	97
  2388  00FF6B  73                 	db	115
  2389  00FF6C  68                 	db	104
  2390  00FF6D  20                 	db	32
  2391  00FF6E  69                 	db	105
  2392  00FF6F  6E                 	db	110
  2393  00FF70  20                 	db	32
  2394  00FF71  52                 	db	82
  2395  00FF72  00                 	db	0
  2396  00FF73                     __end_of_cashinmsg:
  2397                           	opt stack 0
  2398  00FF73                     _clrmsg:
  2399                           	opt stack 0
  2400  00FF73  20                 	db	32
  2401  00FF74  20                 	db	32
  2402  00FF75  20                 	db	32
  2403  00FF76  20                 	db	32
  2404  00FF77  20                 	db	32
  2405  00FF78  20                 	db	32
  2406  00FF79  20                 	db	32
  2407  00FF7A  20                 	db	32
  2408  00FF7B  20                 	db	32
  2409  00FF7C  00                 	db	0
  2410  00FF7D                     __end_of_clrmsg:
  2411                           	opt stack 0
  2412  00FF7D                     _disabled:
  2413                           	opt stack 0
  2414  00FF7D  20                 	db	32
  2415  00FF7E  64                 	db	100
  2416  00FF7F  69                 	db	105
  2417  00FF80  73                 	db	115
  2418  00FF81  61                 	db	97
  2419  00FF82  62                 	db	98
  2420  00FF83  6C                 	db	108
  2421  00FF84  65                 	db	101
  2422  00FF85  64                 	db	100
  2423  00FF86  00                 	db	0
  2424  00FF87                     __end_of_disabled:
  2425                           	opt stack 0
  2426  00FF87                     _enabled:
  2427                           	opt stack 0
  2428  00FF87  20                 	db	32
  2429  00FF88  65                 	db	101
  2430  00FF89  6E                 	db	110
  2431  00FF8A  61                 	db	97
  2432  00FF8B  62                 	db	98
  2433  00FF8C  6C                 	db	108
  2434  00FF8D  65                 	db	101
  2435  00FF8E  64                 	db	100
  2436  00FF8F  20                 	db	32
  2437  00FF90  00                 	db	0
  2438  00FF91                     __end_of_enabled:
  2439                           	opt stack 0
  2440  00FF91                     _clockw:
  2441                           	opt stack 0
  2442  00FF91  41                 	db	65
  2443  00FF92  54                 	db	84
  2444  00FF93  2B                 	db	43
  2445  00FF94  43                 	db	67
  2446  00FF95  43                 	db	67
  2447  00FF96  4C                 	db	76
  2448  00FF97  4B                 	db	75
  2449  00FF98  3D                 	db	61
  2450  00FF99  00                 	db	0
  2451  00FF9A                     __end_of_clockw:
  2452                           	opt stack 0
  2453  00FF9A                     _noecho:
  2454                           	opt stack 0
  2455  00FF9A  41                 	db	65
  2456  00FF9B  54                 	db	84
  2457  00FF9C  45                 	db	69
  2458  00FF9D  30                 	db	48
  2459  00FF9E  3B                 	db	59
  2460  00FF9F  56                 	db	86
  2461  00FFA0  30                 	db	48
  2462  00FFA1  0D                 	db	13
  2463  00FFA2  00                 	db	0
  2464  00FFA3                     __end_of_noecho:
  2465                           	opt stack 0
  2466  00FFA3                     _tenrand:
  2467                           	opt stack 0
  2468  00FFA3  20                 	db	32
  2469  00FFA4  20                 	db	32
  2470  00FFA5  20                 	db	32
  2471  00FFA6  52                 	db	82
  2472  00FFA7  31                 	db	49
  2473  00FFA8  30                 	db	48
  2474  00FFA9  20                 	db	32
  2475  00FFAA  20                 	db	32
  2476  00FFAB  00                 	db	0
  2477  00FFAC                     __end_of_tenrand:
  2478                           	opt stack 0
  2479  00FFAC                     _emptymsg:
  2480                           	opt stack 0
  2481  00FFAC  4E                 	db	78
  2482  00FFAD  6F                 	db	111
  2483  00FFAE  20                 	db	32
  2484  00FFAF  53                 	db	83
  2485  00FFB0  74                 	db	116
  2486  00FFB1  6F                 	db	111
  2487  00FFB2  63                 	db	99
  2488  00FFB3  6B                 	db	107
  2489  00FFB4  00                 	db	0
  2490  00FFB5                     __end_of_emptymsg:
  2491                           	opt stack 0
  2492  00FFB5                     _totalmsg:
  2493                           	opt stack 0
  2494  00FFB5  54                 	db	84
  2495  00FFB6  6F                 	db	111
  2496  00FFB7  74                 	db	116
  2497  00FFB8  61                 	db	97
  2498  00FFB9  6C                 	db	108
  2499  00FFBA  20                 	db	32
  2500  00FFBB  52                 	db	82
  2501  00FFBC  00                 	db	0
  2502  00FFBD                     __end_of_totalmsg:
  2503                           	opt stack 0
  2504  00FFBD                     _twohundredrand:
  2505                           	opt stack 0
  2506  00FFBD  20                 	db	32
  2507  00FFBE  20                 	db	32
  2508  00FFBF  52                 	db	82
  2509  00FFC0  32                 	db	50
  2510  00FFC1  30                 	db	48
  2511  00FFC2  30                 	db	48
  2512  00FFC3  20                 	db	32
  2513  00FFC4  00                 	db	0
  2514  00FFC5                     __end_of_twohundredrand:
  2515                           	opt stack 0
  2516  00FFC5                     _hundredrand:
  2517                           	opt stack 0
  2518  00FFC5  20                 	db	32
  2519  00FFC6  20                 	db	32
  2520  00FFC7  52                 	db	82
  2521  00FFC8  31                 	db	49
  2522  00FFC9  30                 	db	48
  2523  00FFCA  30                 	db	48
  2524  00FFCB  20                 	db	32
  2525  00FFCC  00                 	db	0
  2526  00FFCD                     __end_of_hundredrand:
  2527                           	opt stack 0
  2528  00FFCD                     _fiftyrand:
  2529                           	opt stack 0
  2530  00FFCD  20                 	db	32
  2531  00FFCE  20                 	db	32
  2532  00FFCF  52                 	db	82
  2533  00FFD0  35                 	db	53
  2534  00FFD1  30                 	db	48
  2535  00FFD2  20                 	db	32
  2536  00FFD3  20                 	db	32
  2537  00FFD4  00                 	db	0
  2538  00FFD5                     __end_of_fiftyrand:
  2539                           	opt stack 0
  2540  00FFD5                     _twentyrand:
  2541                           	opt stack 0
  2542  00FFD5  20                 	db	32
  2543  00FFD6  20                 	db	32
  2544  00FFD7  52                 	db	82
  2545  00FFD8  32                 	db	50
  2546  00FFD9  30                 	db	48
  2547  00FFDA  20                 	db	32
  2548  00FFDB  20                 	db	32
  2549  00FFDC  00                 	db	0
  2550  00FFDD                     __end_of_twentyrand:
  2551                           	opt stack 0
  2552  00FFDD                     _facres:
  2553                           	opt stack 0
  2554  00FFDD  41                 	db	65
  2555  00FFDE  54                 	db	84
  2556  00FFDF  26                 	db	38
  2557  00FFE0  46                 	db	70
  2558  00FFE1  30                 	db	48
  2559  00FFE2  0D                 	db	13
  2560  00FFE3  00                 	db	0
  2561  00FFE4                     __end_of_facres:
  2562                           	opt stack 0
  2563  00FFE4                     _totalvendsm:
  2564                           	opt stack 0
  2565  00FFE4  56                 	db	86
  2566  00FFE5  65                 	db	101
  2567  00FFE6  6E                 	db	110
  2568  00FFE7  64                 	db	100
  2569  00FFE8  73                 	db	115
  2570  00FFE9  20                 	db	32
  2571  00FFEA  00                 	db	0
  2572  00FFEB                     __end_of_totalvendsm:
  2573                           	opt stack 0
  2574  00FFEB                     _clockdate:
  2575                           	opt stack 0
  2576  00FFEB  44                 	db	68
  2577  00FFEC  61                 	db	97
  2578  00FFED  74                 	db	116
  2579  00FFEE  65                 	db	101
  2580  00FFEF  20                 	db	32
  2581  00FFF0  00                 	db	0
  2582  00FFF1                     __end_of_clockdate:
  2583                           	opt stack 0
  2584  00FFF1                     _clocktime:
  2585                           	opt stack 0
  2586  00FFF1  54                 	db	84
  2587  00FFF2  69                 	db	105
  2588  00FFF3  6D                 	db	109
  2589  00FFF4  65                 	db	101
  2590  00FFF5  20                 	db	32
  2591  00FFF6  00                 	db	0
  2592  00FFF7                     __end_of_clocktime:
  2593                           	opt stack 0
  2594  00FFF7                     _offmsg:
  2595                           	opt stack 0
  2596  00FFF7  4F                 	db	79
  2597  00FFF8  66                 	db	102
  2598  00FFF9  66                 	db	102
  2599  00FFFA  00                 	db	0
  2600  00FFFB                     __end_of_offmsg:
  2601                           	opt stack 0
  2602  00FFFB                     _onmsg:
  2603                           	opt stack 0
  2604  00FFFB  4F                 	db	79
  2605  00FFFC  6E                 	db	110
  2606  00FFFD  20                 	db	32
  2607  00FFFE  00                 	db	0
  2608  00FFFF                     __end_of_onmsg:
  2609                           	opt stack 0
  2610  00FFFF  00                 	db	0	; dummy byte at the end
  2611  0000                     
  2612                           	psect	nvBANK0
  2613  0000F2                     __pnvBANK0:
  2614                           	opt stack 0
  2615  0000F2                     _EUSART2_RxDefaultInterruptHandler:
  2616                           	opt stack 0
  2617  0000F2                     	ds	3
  2618  0000F5                     _timer0ReloadVal16bit:
  2619                           	opt stack 0
  2620  0000F5                     	ds	2
  2621  0000F7                     _timer5ReloadVal:
  2622                           	opt stack 0
  2623  0000F7                     	ds	2
  2624  0000F9                     _timer3ReloadVal:
  2625                           	opt stack 0
  2626  0000F9                     	ds	2
  2627  0000FB                     _timer1ReloadVal:
  2628                           	opt stack 0
  2629  0000FB                     	ds	2
  2630  0000FD                     _count:
  2631                           	opt stack 0
  2632  0000FD                     	ds	1
  2633  0000                     _RX2PPSbits	set	3725
  2634  0000                     _RX1PPSbits	set	3765
  2635  0000                     _PPSLOCKbits	set	3744
  2636  0000                     _PPSLOCK	set	3744
  2637  0000                     _RC2REG	set	3737
  2638  0000                     _RC2STAbits	set	3741
  2639  0000                     _TX2REG	set	3738
  2640  0000                     _TX2STAbits	set	3742
  2641  0000                     _SP2BRGH	set	3740
  2642  0000                     _SP2BRGL	set	3739
  2643  0000                     _TX2STA	set	3742
  2644  0000                     _RC2STA	set	3741
  2645  0000                     _BAUD2CON	set	3743
  2646  0000                     _PIR0bits	set	3786
  2647  0000                     _PIR4bits	set	3790
  2648  0000                     _PIR7bits	set	3793
  2649  0000                     _PIE3bits	set	3781
  2650  0000                     _PMD5	set	3814
  2651  0000                     _PMD4	set	3813
  2652  0000                     _PMD3	set	3812
  2653  0000                     _PMD2	set	3811
  2654  0000                     _PMD1	set	3810
  2655  0000                     _PMD0	set	3809
  2656  0000                     _OSCTUNE	set	3805
  2657  0000                     _OSCFRQ	set	3806
  2658  0000                     _OSCEN	set	3804
  2659  0000                     _OSCCON3	set	3802
  2660  0000                     _OSCCON1	set	3800
  2661  0000                     _PIR3bits	set	3789
  2662  0000                     _RX2PPS	set	3725
  2663  0000                     _RC6PPS	set	3837
  2664  0000                     _RB5PPS	set	3828
  2665  0000                     _RX1PPS	set	3765
  2666  0000                     _CMOUT	set	3901
  2667  0000                     _DAC1CON1	set	3892
  2668  0000                     _DAC1CON0	set	3891
  2669  0000                     _CMOUTbits	set	3901
  2670  0000                     _CM1PCH	set	3900
  2671  0000                     _CM1NCH	set	3899
  2672  0000                     _CM1CON1	set	3898
  2673  0000                     _CM1CON0	set	3897
  2674  0000                     _SLRCONE	set	3883
  2675  0000                     _SLRCOND	set	3875
  2676  0000                     _SLRCONC	set	3870
  2677  0000                     _SLRCONB	set	3862
  2678  0000                     _SLRCONA	set	3854
  2679  0000                     _ODCOND	set	3876
  2680  0000                     _ODCONC	set	3871
  2681  0000                     _ODCONB	set	3863
  2682  0000                     _ODCONA	set	3855
  2683  0000                     _ODCONE	set	3884
  2684  0000                     _WPUC	set	3872
  2685  0000                     _WPUA	set	3856
  2686  0000                     _WPUB	set	3864
  2687  0000                     _WPUE	set	3885
  2688  0000                     _WPUD	set	3877
  2689  0000                     _ANSELA	set	3857
  2690  0000                     _ANSELE	set	3886
  2691  0000                     _ANSELB	set	3865
  2692  0000                     _ANSELC	set	3873
  2693  0000                     _ANSELD	set	3878
  2694  0000                     _PORTBbits	set	3982
  2695  0000                     _BAUD1CONbits	set	3999
  2696  0000                     _PORTA	set	3981
  2697  0000                     _LATCbits	set	3973
  2698  0000                     _LATAbits	set	3971
  2699  0000                     _PORTD	set	3984
  2700  0000                     _PR4	set	4022
  2701  0000                     _TMR4	set	4021
  2702  0000                     _T4CONbits	set	4023
  2703  0000                     _T4RSTbits	set	4026
  2704  0000                     _T4HLTbits	set	4024
  2705  0000                     _T4CON	set	4023
  2706  0000                     _T4TMR	set	4021
  2707  0000                     _T4PR	set	4022
  2708  0000                     _T4RST	set	4026
  2709  0000                     _T4HLT	set	4024
  2710  0000                     _T4CLKCON	set	4025
  2711  0000                     _PR2	set	4028
  2712  0000                     _TMR2	set	4027
  2713  0000                     _T2CONbits	set	4029
  2714  0000                     _T2RSTbits	set	4032
  2715  0000                     _T2HLTbits	set	4030
  2716  0000                     _T2CON	set	4029
  2717  0000                     _T2TMR	set	4027
  2718  0000                     _T2PR	set	4028
  2719  0000                     _T2RST	set	4032
  2720  0000                     _T2HLT	set	4030
  2721  0000                     _T2CLKCON	set	4031
  2722  0000                     _T0CON0bits	set	4053
  2723  0000                     _T0CON0	set	4053
  2724  0000                     _TMR0L	set	4051
  2725  0000                     _TMR0H	set	4052
  2726  0000                     _T0CON1	set	4054
  2727  0000                     _T5GCONbits	set	4036
  2728  0000                     _T5CONbits	set	4035
  2729  0000                     _T5CON	set	4035
  2730  0000                     _TMR5L	set	4033
  2731  0000                     _TMR5H	set	4034
  2732  0000                     _T5CLK	set	4038
  2733  0000                     _T5GATE	set	4037
  2734  0000                     _T5GCON	set	4036
  2735  0000                     _T3GCONbits	set	4042
  2736  0000                     _T3CONbits	set	4041
  2737  0000                     _T3CON	set	4041
  2738  0000                     _TMR3L	set	4039
  2739  0000                     _TMR3H	set	4040
  2740  0000                     _T3CLK	set	4044
  2741  0000                     _T3GATE	set	4043
  2742  0000                     _T3GCON	set	4042
  2743  0000                     _T1GCONbits	set	4048
  2744  0000                     _T1CONbits	set	4047
  2745  0000                     _T1CON	set	4047
  2746  0000                     _TMR1L	set	4045
  2747  0000                     _TMR1H	set	4046
  2748  0000                     _T1CLK	set	4050
  2749  0000                     _T1GATE	set	4049
  2750  0000                     _T1GCON	set	4048
  2751  0000                     _NVMDAT	set	3968
  2752  0000                     _NVMADRL	set	3966
  2753  0000                     _NVMADRH	set	3967
  2754  0000                     _NVMCON2	set	3970
  2755  0000                     _TABLAT	set	4085
  2756  0000                     _TBLPTRL	set	4086
  2757  0000                     _TBLPTRH	set	4087
  2758  0000                     _TBLPTRU	set	4088
  2759  0000                     _NVMCON1bits	set	3969
  2760  0000                     _INTCONbits	set	4082
  2761  0000                     _TX1REG	set	3994
  2762  0000                     _RC1REG	set	3993
  2763  0000                     _RC1STAbits	set	3997
  2764  0000                     _TX1STAbits	set	3998
  2765  0000                     _SP1BRGH	set	3996
  2766  0000                     _SP1BRGL	set	3995
  2767  0000                     _TX1STA	set	3998
  2768  0000                     _RC1STA	set	3997
  2769  0000                     _BAUD1CON	set	3999
  2770  0000                     _TRISD	set	3979
  2771  0000                     _TRISC	set	3978
  2772  0000                     _TRISB	set	3977
  2773  0000                     _TRISA	set	3976
  2774  0000                     _TRISE	set	3980
  2775  0000                     _LATC	set	3973
  2776  0000                     _LATB	set	3972
  2777  0000                     _LATA	set	3971
  2778  0000                     _LATD	set	3974
  2779  0000                     _LATE	set	3975
  2780  0000                     _LATA6	set	31774
  2781  0000                     _LATA7	set	31775
  2782                           
  2783                           ; #config settings
  2784  0000                     
  2785                           	psect	cinit
  2786  0128B4                     __pcinit:
  2787                           	opt stack 0
  2788  0128B4                     start_initialization:
  2789                           	opt stack 0
  2790  0128B4                     __initialization:
  2791                           	opt stack 0
  2792                           
  2793                           ; Initialize objects allocated to BANK0 (2 bytes)
  2794                           ; load TBLPTR registers with __pidataBANK0
  2795  0128B4  0EAE               	movlw	low __pidataBANK0
  2796  0128B6  6EF6               	movwf	tblptrl,c
  2797  0128B8  0E37               	movlw	high __pidataBANK0
  2798  0128BA  6EF7               	movwf	tblptrh,c
  2799  0128BC  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  2800  0128BE  6EF8               	movwf	tblptru,c
  2801  0128C0  0009               	tblrd		*+	;fetch initializer
  2802  0128C2  CFF5 F0FE          	movff	tablat,__pdataBANK0
  2803  0128C6  0009               	tblrd		*+	;fetch initializer
  2804  0128C8  CFF5 F0FF          	movff	tablat,__pdataBANK0+1
  2805                           
  2806                           ; Clear objects allocated to BIGRAMh (1536 bytes)
  2807  0128CC  EE02  F002         	lfsr	0,__pbssBIGRAMh
  2808  0128D0  EE16 F000          	lfsr	1,1536
  2809  0128D4                     clear_0:
  2810  0128D4  6AEE               	clrf	postinc0,c
  2811  0128D6  50E5               	movf	postdec1,w,c
  2812  0128D8  50E1               	movf	fsr1l,w,c
  2813  0128DA  E1FC               	bnz	clear_0
  2814  0128DC  50E2               	movf	fsr1h,w,c
  2815  0128DE  E1FA               	bnz	clear_0
  2816                           
  2817                           ; Clear objects allocated to BANK1 (256 bytes)
  2818  0128E0  EE01  F000         	lfsr	0,__pbssBANK1
  2819  0128E4  EE11 F000          	lfsr	1,256
  2820  0128E8                     clear_1:
  2821  0128E8  6AEE               	clrf	postinc0,c
  2822  0128EA  50E5               	movf	postdec1,w,c
  2823  0128EC  50E1               	movf	fsr1l,w,c
  2824  0128EE  E1FC               	bnz	clear_1
  2825  0128F0  50E2               	movf	fsr1h,w,c
  2826  0128F2  E1FA               	bnz	clear_1
  2827                           
  2828                           ; Clear objects allocated to BANK0 (129 bytes)
  2829  0128F4  EE00  F060         	lfsr	0,__pbssBANK0
  2830  0128F8  0E81               	movlw	129
  2831  0128FA                     clear_2:
  2832  0128FA  6AEE               	clrf	postinc0,c
  2833  0128FC  06E8               	decf	wreg,f,c
  2834  0128FE  E1FD               	bnz	clear_2
  2835                           
  2836                           ; Clear objects allocated to COMRAMh (33 bytes)
  2837  012900  EE00  F02D         	lfsr	0,__pbssCOMRAMh
  2838  012904  0E21               	movlw	33
  2839  012906                     clear_3:
  2840  012906  6AEE               	clrf	postinc0,c
  2841  012908  06E8               	decf	wreg,f,c
  2842  01290A  E1FD               	bnz	clear_3
  2843                           
  2844                           ; Clear objects allocated to COMRAMl (1 bytes)
  2845  01290C  6A4E               	clrf	__pbssCOMRAMl& (0+255),c
  2846  01290E                     end_of_initialization:
  2847                           	opt stack 0
  2848  01290E                     __end_of__initialization:
  2849                           	opt stack 0
  2850  01290E  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2851  012910  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2852  012912  0100               	movlb	0
  2853  012914  EF06  F085         	goto	_main	;jump to C main() function
  2854                           tblptru	equ	0xFF8
  2855                           tblptrh	equ	0xFF7
  2856                           tblptrl	equ	0xFF6
  2857                           tablat	equ	0xFF5
  2858                           postinc0	equ	0xFEE
  2859                           wreg	equ	0xFE8
  2860                           postdec1	equ	0xFE5
  2861                           fsr1h	equ	0xFE2
  2862                           fsr1l	equ	0xFE1
  2863                           
  2864                           	psect	bssCOMRAMh
  2865  00002D                     __pbssCOMRAMh:
  2866                           	opt stack 0
  2867  00002D                     _venflags:
  2868                           	opt stack 0
  2869  00002D                     	ds	3
  2870  000030                     _gsmflags:
  2871                           	opt stack 0
  2872  000030                     	ds	1
  2873  000031                     _gsmbyte:
  2874                           	opt stack 0
  2875  000031                     	ds	1
  2876  000032                     _channel:
  2877                           	opt stack 0
  2878  000032                     	ds	1
  2879  000033                     _errormask:
  2880                           	opt stack 0
  2881  000033                     	ds	1
  2882  000034                     _chanmask:
  2883                           	opt stack 0
  2884  000034                     	ds	1
  2885  000035                     _lowprice:
  2886                           	opt stack 0
  2887  000035                     	ds	1
  2888  000036                     _highprice:
  2889                           	opt stack 0
  2890  000036                     	ds	1
  2891  000037                     _senspos:
  2892                           	opt stack 0
  2893  000037                     	ds	1
  2894  000038                     _sensorval:
  2895                           	opt stack 0
  2896  000038                     	ds	1
  2897  000039                     _vendprice:
  2898                           	opt stack 0
  2899  000039                     	ds	1
  2900  00003A                     _buttons:
  2901                           	opt stack 0
  2902  00003A                     	ds	1
  2903  00003B                     _cash:
  2904                           	opt stack 0
  2905  00003B                     	ds	1
  2906  00003C                     _credit:
  2907                           	opt stack 0
  2908  00003C                     	ds	1
  2909  00003D                     _outcoins:
  2910                           	opt stack 0
  2911  00003D                     	ds	1
  2912  00003E                     _change:
  2913                           	opt stack 0
  2914  00003E                     	ds	1
  2915  00003F                     _noteen_byte:
  2916                           	opt stack 0
  2917  00003F                     	ds	1
  2918  000040                     _mdbflags:
  2919                           	opt stack 0
  2920  000040                     	ds	1
  2921  000041                     _chkbyte:
  2922                           	opt stack 0
  2923  000041                     	ds	1
  2924  000042                     _dspposition:
  2925                           	opt stack 0
  2926  000042                     	ds	1
  2927  000043                     _stradd:
  2928                           	opt stack 0
  2929  000043                     	ds	1
  2930  000044                     _lcdata:
  2931                           	opt stack 0
  2932  000044                     	ds	1
  2933  000045                     _bflag:
  2934                           	opt stack 0
  2935  000045                     	ds	1
  2936  000046                     _eusart2RxCount:
  2937                           	opt stack 0
  2938  000046                     	ds	1
  2939  000047                     _eusart2RxTail:
  2940                           	opt stack 0
  2941  000047                     	ds	1
  2942  000048                     _eusart2RxHead:
  2943                           	opt stack 0
  2944  000048                     	ds	1
  2945  000049                     _pnvcash:
  2946                           	opt stack 0
  2947  000049                     	ds	3
  2948  00004C                     _pvcash:
  2949                           	opt stack 0
  2950  00004C                     	ds	2
  2951                           tblptru	equ	0xFF8
  2952                           tblptrh	equ	0xFF7
  2953                           tblptrl	equ	0xFF6
  2954                           tablat	equ	0xFF5
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           postdec1	equ	0xFE5
  2958                           fsr1h	equ	0xFE2
  2959                           fsr1l	equ	0xFE1
  2960                           
  2961                           	psect	bssCOMRAMl
  2962  00004E                     __pbssCOMRAMl:
  2963                           	opt stack 0
  2964  00004E                     _cctflags:
  2965                           	opt stack 0
  2966  00004E                     	ds	1
  2967                           tblptru	equ	0xFF8
  2968                           tblptrh	equ	0xFF7
  2969                           tblptrl	equ	0xFF6
  2970                           tablat	equ	0xFF5
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           postdec1	equ	0xFE5
  2974                           fsr1h	equ	0xFE2
  2975                           fsr1l	equ	0xFE1
  2976                           
  2977                           	psect	bssBANK0
  2978  000060                     __pbssBANK0:
  2979                           	opt stack 0
  2980  000060                     _mdbdata:
  2981                           	opt stack 0
  2982  000060                     	ds	31
  2983  00007F                     _pricevend:
  2984                           	opt stack 0
  2985  00007F                     	ds	8
  2986  000087                     _dummy:
  2987                           	opt stack 0
  2988  000087                     	ds	8
  2989  00008F                     _tvends:
  2990                           	opt stack 0
  2991  00008F                     	ds	8
  2992  000097                     _nvcash:
  2993                           	opt stack 0
  2994  000097                     	ds	3
  2995  00009A                     _hpserial:
  2996                           	opt stack 0
  2997  00009A                     	ds	3
  2998  00009D                     _hexnum:
  2999                           	opt stack 0
  3000  00009D                     	ds	3
  3001  0000A0                     _vcashout:
  3002                           	opt stack 0
  3003  0000A0                     	ds	2
  3004  0000A2                     _vcash:
  3005                           	opt stack 0
  3006  0000A2                     	ds	2
  3007  0000A4                     _dbcount:
  3008                           	opt stack 0
  3009  0000A4                     	ds	2
  3010  0000A6                     _noofline:
  3011                           	opt stack 0
  3012  0000A6                     	ds	1
  3013  0000A7                     _venderr:
  3014                           	opt stack 0
  3015  0000A7                     	ds	1
  3016  0000A8                     _senschk:
  3017                           	opt stack 0
  3018  0000A8                     	ds	1
  3019  0000A9                     _command:
  3020                           	opt stack 0
  3021  0000A9                     	ds	1
  3022  0000AA                     _nobytes:
  3023                           	opt stack 0
  3024  0000AA                     	ds	1
  3025  0000AB                     _dest:
  3026                           	opt stack 0
  3027  0000AB                     	ds	1
  3028  0000AC                     _mdbtxbyte:
  3029                           	opt stack 0
  3030  0000AC                     	ds	1
  3031  0000AD                     _errorflags:
  3032                           	opt stack 0
  3033  0000AD                     	ds	1
  3034  0000AE                     _noteen:
  3035                           	opt stack 0
  3036  0000AE                     	ds	1
  3037  0000AF                     _notebyte:
  3038                           	opt stack 0
  3039  0000AF                     	ds	1
  3040  0000B0                     _mcount:
  3041                           	opt stack 0
  3042  0000B0                     	ds	1
  3043  0000B1                     _slvadd:
  3044                           	opt stack 0
  3045  0000B1                     	ds	1
  3046  0000B2                     _lcdaddress:
  3047                           	opt stack 0
  3048  0000B2                     	ds	1
  3049  0000B3                     _ercode:
  3050                           	opt stack 0
  3051  0000B3                     	ds	1
  3052  0000B4                     _lcdline:
  3053                           	opt stack 0
  3054  0000B4                     	ds	1
  3055  0000B5                     _lcdfunc:
  3056                           	opt stack 0
  3057  0000B5                     	ds	1
  3058  0000B6                     _gsmtim:
  3059                           	opt stack 0
  3060  0000B6                     	ds	23
  3061  0000CD                     _gstime:
  3062                           	opt stack 0
  3063  0000CD                     	ds	10
  3064  0000D7                     _gsdate:
  3065                           	opt stack 0
  3066  0000D7                     	ds	10
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           postinc0	equ	0xFEE
  3072                           wreg	equ	0xFE8
  3073                           postdec1	equ	0xFE5
  3074                           fsr1h	equ	0xFE2
  3075                           fsr1l	equ	0xFE1
  3076                           
  3077                           	psect	dataBANK0
  3078  0000FE                     __pdataBANK0:
  3079                           	opt stack 0
  3080  0000FE                     _hopercount:
  3081                           	opt stack 0
  3082  0000FE                     	ds	1
  3083  0000FF                     _notenum:
  3084                           	opt stack 0
  3085  0000FF                     	ds	1
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           fsr1h	equ	0xFE2
  3094                           fsr1l	equ	0xFE1
  3095                           
  3096                           	psect	bssBANK1
  3097  000100                     __pbssBANK1:
  3098                           	opt stack 0
  3099  000100                     _gsmusm:
  3100                           	opt stack 0
  3101  000100                     	ds	256
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           fsr1h	equ	0xFE2
  3110                           fsr1l	equ	0xFE1
  3111                           
  3112                           	psect	bssBIGRAMh
  3113  000202                     __pbssBIGRAMh:
  3114                           	opt stack 0
  3115  000202                     _eusart2RxBuffer:
  3116                           	opt stack 0
  3117  000202                     	ds	512
  3118  000402                     _gsmums:
  3119                           	opt stack 0
  3120  000402                     	ds	512
  3121  000602                     _gsmmsg:
  3122                           	opt stack 0
  3123  000602                     	ds	512
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           postinc0	equ	0xFEE
  3129                           wreg	equ	0xFE8
  3130                           postdec1	equ	0xFE5
  3131                           fsr1h	equ	0xFE2
  3132                           fsr1l	equ	0xFE1
  3133                           
  3134                           	psect	cstackBANK2
  3135  000200                     __pcstackBANK2:
  3136                           	opt stack 0
  3137  000200                     ??_main:
  3138                           
  3139                           ; 1 bytes @ 0x0
  3140  000200                     	ds	2
  3141                           tblptru	equ	0xFF8
  3142                           tblptrh	equ	0xFF7
  3143                           tblptrl	equ	0xFF6
  3144                           tablat	equ	0xFF5
  3145                           postinc0	equ	0xFEE
  3146                           wreg	equ	0xFE8
  3147                           postdec1	equ	0xFE5
  3148                           fsr1h	equ	0xFE2
  3149                           fsr1l	equ	0xFE1
  3150                           
  3151                           	psect	cstackBANK0
  3152  0000E1                     __pcstackBANK0:
  3153                           	opt stack 0
  3154  0000E1                     ??_gsm_init:
  3155  0000E1                     ??_Link_chan:
  3156  0000E1                     off_sens@channel:
  3157                           	opt stack 0
  3158  0000E1                     dispense@sensmask:
  3159                           	opt stack 0
  3160  0000E1                     Reset_settings@chanlinkbits:
  3161                           	opt stack 0
  3162  0000E1                     displ_hex@value:
  3163                           	opt stack 0
  3164                           
  3165                           ; 8 bytes @ 0x0
  3166  0000E1                     	ds	1
  3167  0000E2                     off_sens@chanbit:
  3168                           	opt stack 0
  3169  0000E2                     dispense@chanel:
  3170                           	opt stack 0
  3171                           
  3172                           ; 1 bytes @ 0x1
  3173  0000E2                     	ds	1
  3174  0000E3                     ??_price_check:
  3175  0000E3                     Link_chan@chanbit:
  3176                           	opt stack 0
  3177  0000E3                     off_sens@senseflags:
  3178                           	opt stack 0
  3179  0000E3                     Reset_settings@chantimebits:
  3180                           	opt stack 0
  3181                           
  3182                           ; 2 bytes @ 0x2
  3183  0000E3                     	ds	1
  3184  0000E4                     ??_Sens_off:
  3185  0000E4                     Link_chan@channel:
  3186                           	opt stack 0
  3187                           
  3188                           ; 1 bytes @ 0x3
  3189  0000E4                     	ds	1
  3190  0000E5                     Link_chan@linkflags:
  3191                           	opt stack 0
  3192  0000E5                     price_check@savechan:
  3193                           	opt stack 0
  3194                           
  3195                           ; 1 bytes @ 0x4
  3196  0000E5                     	ds	1
  3197  0000E6                     ??_Chan_link:
  3198  0000E6                     price_check@savebut:
  3199                           	opt stack 0
  3200                           
  3201                           ; 1 bytes @ 0x5
  3202  0000E6                     	ds	1
  3203  0000E7                     price_check@chanlinkbit:
  3204                           	opt stack 0
  3205                           
  3206                           ; 1 bytes @ 0x6
  3207  0000E7                     	ds	1
  3208  0000E8                     price_check@i:
  3209                           	opt stack 0
  3210                           
  3211                           ; 1 bytes @ 0x7
  3212  0000E8                     	ds	1
  3213  0000E9                     displ_hex@hexnumsave:
  3214                           	opt stack 0
  3215                           
  3216                           ; 3 bytes @ 0x8
  3217  0000E9                     	ds	3
  3218  0000EC                     displ_hex@i:
  3219                           	opt stack 0
  3220                           
  3221                           ; 1 bytes @ 0xB
  3222  0000EC                     	ds	1
  3223  0000ED                     ??_Vend_timeset:
  3224  0000ED                     set_price@buttons:
  3225                           	opt stack 0
  3226                           
  3227                           ; 1 bytes @ 0xC
  3228  0000ED                     	ds	1
  3229  0000EE                     set_price@channel:
  3230                           	opt stack 0
  3231                           
  3232                           ; 1 bytes @ 0xD
  3233  0000EE                     	ds	1
  3234  0000EF                     Vend_timeset@chantime:
  3235                           	opt stack 0
  3236                           
  3237                           ; 1 bytes @ 0xE
  3238  0000EF                     	ds	1
  3239  0000F0                     Vend_timeset@channel:
  3240                           	opt stack 0
  3241                           
  3242                           ; 1 bytes @ 0xF
  3243  0000F0                     	ds	1
  3244  0000F1                     main@channel:
  3245                           	opt stack 0
  3246                           
  3247                           ; 1 bytes @ 0x10
  3248  0000F1                     	ds	1
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           postinc0	equ	0xFEE
  3254                           wreg	equ	0xFE8
  3255                           postdec1	equ	0xFE5
  3256                           fsr1h	equ	0xFE2
  3257                           fsr1l	equ	0xFE1
  3258                           
  3259                           	psect	cstackCOMRAMh
  3260  00000B                     __pcstackCOMRAMh:
  3261                           	opt stack 0
  3262  00000B                     ??_INTERRUPT_InterruptManager:
  3263  00000B                     
  3264                           ; 1 bytes @ 0x0
  3265  00000B                     	ds	18
  3266  00001D                     ??_TMR0_Initialize:
  3267  00001D                     ??_TMR3_Initialize:
  3268  00001D                     ??_TMR5_Initialize:
  3269  00001D                     ??_TMR1_Initialize:
  3270  00001D                     ??_butin:
  3271  00001D                     ??_switch_read:
  3272  00001D                     ??_Reset_hopper:
  3273  00001D                     ?___wmul:
  3274                           	opt stack 0
  3275  00001D                     ?___awdiv:
  3276                           	opt stack 0
  3277  00001D                     ?___ltdiv:
  3278                           	opt stack 0
  3279  00001D                     ?___ltmod:
  3280                           	opt stack 0
  3281  00001D                     EUSART1_Write@txData:
  3282                           	opt stack 0
  3283  00001D                     DAC1_SetOutput@inputData:
  3284                           	opt stack 0
  3285  00001D                     EUSART2_Write@txData:
  3286                           	opt stack 0
  3287  00001D                     read_busy@savelate:
  3288                           	opt stack 0
  3289  00001D                     Read_Service@senval:
  3290                           	opt stack 0
  3291  00001D                     get_channel@butons:
  3292                           	opt stack 0
  3293  00001D                     gsm_netwait@x:
  3294                           	opt stack 0
  3295  00001D                     ___lbdiv@divisor:
  3296                           	opt stack 0
  3297  00001D                     DATAEE_WriteByte@bAdd:
  3298                           	opt stack 0
  3299  00001D                     DATAEE_ReadByte@bAdd:
  3300                           	opt stack 0
  3301  00001D                     TMR0_WriteTimer@timerVal:
  3302                           	opt stack 0
  3303  00001D                     gsm_zerobuff@gsmsgbuf:
  3304                           	opt stack 0
  3305  00001D                     ___wmul@multiplier:
  3306                           	opt stack 0
  3307  00001D                     ___awdiv@dividend:
  3308                           	opt stack 0
  3309  00001D                     EUSART2_SetRxInterruptHandler@interruptHandler:
  3310                           	opt stack 0
  3311  00001D                     ___ltdiv@dividend:
  3312                           	opt stack 0
  3313  00001D                     ___ltmod@dividend:
  3314                           	opt stack 0
  3315                           
  3316                           ; 3 bytes @ 0x12
  3317  00001D                     	ds	1
  3318  00001E                     read_busy@savelatd:
  3319                           	opt stack 0
  3320  00001E                     mdb_transmit@txbyte:
  3321                           	opt stack 0
  3322  00001E                     find_highprice@i:
  3323                           	opt stack 0
  3324  00001E                     find_lowprice@i:
  3325                           	opt stack 0
  3326  00001E                     gsm_transmit@txbyte:
  3327                           	opt stack 0
  3328  00001E                     ___lbdiv@dividend:
  3329                           	opt stack 0
  3330                           
  3331                           ; 1 bytes @ 0x13
  3332  00001E                     	ds	1
  3333  00001F                     ??_mdb_unlock:
  3334  00001F                     ??_init_pricestore:
  3335  00001F                     ??_Init_vendmem:
  3336  00001F                     DATAEE_WriteByte@bData:
  3337                           	opt stack 0
  3338  00001F                     lcd_write@savelatd:
  3339                           	opt stack 0
  3340  00001F                     butin@butons:
  3341                           	opt stack 0
  3342  00001F                     ___lbdiv@counter:
  3343                           	opt stack 0
  3344  00001F                     Read_NVstore@storeadd:
  3345                           	opt stack 0
  3346  00001F                     gsm_zerobuff@count:
  3347                           	opt stack 0
  3348  00001F                     gsm_msg@msgadd:
  3349                           	opt stack 0
  3350  00001F                     ___wmul@multiplicand:
  3351                           	opt stack 0
  3352  00001F                     ___awdiv@divisor:
  3353                           	opt stack 0
  3354                           
  3355                           ; 2 bytes @ 0x14
  3356  00001F                     	ds	1
  3357  000020                     ??_butindb:
  3358  000020                     DATAEE_WriteByte@GIEBitValue:
  3359                           	opt stack 0
  3360  000020                     lcd_write@lcdata:
  3361                           	opt stack 0
  3362  000020                     ___lbdiv@quotient:
  3363                           	opt stack 0
  3364  000020                     ___ltdiv@divisor:
  3365                           	opt stack 0
  3366  000020                     ___ltmod@divisor:
  3367                           	opt stack 0
  3368                           
  3369                           ; 3 bytes @ 0x15
  3370  000020                     	ds	1
  3371  000021                     ??_vend_nosense:
  3372  000021                     ??_update_vends:
  3373  000021                     ??_disable_channel:
  3374  000021                     ??_gsm_msg:
  3375  000021                     lcd_dispadd@lcdaddress:
  3376                           	opt stack 0
  3377  000021                     credit_subtract@credit:
  3378                           	opt stack 0
  3379  000021                     init_pricestore@i:
  3380                           	opt stack 0
  3381  000021                     ___awdiv@counter:
  3382                           	opt stack 0
  3383  000021                     Init_vendmem@chanlinkbits:
  3384                           	opt stack 0
  3385  000021                     Write_NVstore@storeadd:
  3386                           	opt stack 0
  3387  000021                     Read_NVstore@storemem:
  3388                           	opt stack 0
  3389  000021                     Clear_Totals@eeaddress:
  3390                           	opt stack 0
  3391  000021                     gsm_zerobuff@x:
  3392                           	opt stack 0
  3393  000021                     ___wmul@product:
  3394                           	opt stack 0
  3395                           
  3396                           ; 2 bytes @ 0x16
  3397  000021                     	ds	1
  3398  000022                     lcd_dispadd@lcdatasave:
  3399                           	opt stack 0
  3400  000022                     butindb@butval:
  3401                           	opt stack 0
  3402  000022                     init_mdbdata@initdata:
  3403                           	opt stack 0
  3404  000022                     ___awdiv@sign:
  3405                           	opt stack 0
  3406                           
  3407                           ; 1 bytes @ 0x17
  3408  000022                     	ds	1
  3409  000023                     ??_set_motortime:
  3410  000023                     lcd_writeC@lcdata:
  3411                           	opt stack 0
  3412  000023                     Read_NVstore@storesize:
  3413                           	opt stack 0
  3414  000023                     butindb@butt:
  3415                           	opt stack 0
  3416  000023                     init_mdbdata@i:
  3417                           	opt stack 0
  3418  000023                     vend_nosense@chanel:
  3419                           	opt stack 0
  3420  000023                     disable_channel@channel:
  3421                           	opt stack 0
  3422  000023                     update_vends@x:
  3423                           	opt stack 0
  3424  000023                     ___ltmod@counter:
  3425                           	opt stack 0
  3426  000023                     Init_vendmem@chanlink:
  3427                           	opt stack 0
  3428  000023                     Write_NVstore@storemem:
  3429                           	opt stack 0
  3430  000023                     gsm_receive@messagebuf:
  3431                           	opt stack 0
  3432  000023                     ___awdiv@quotient:
  3433                           	opt stack 0
  3434  000023                     gsm_msg@msgbkup:
  3435                           	opt stack 0
  3436  000023                     ___ltdiv@quotient:
  3437                           	opt stack 0
  3438                           
  3439                           ; 3 bytes @ 0x18
  3440  000023                     	ds	1
  3441  000024                     ??_displ_code:
  3442  000024                     lcd_test@character:
  3443                           	opt stack 0
  3444  000024                     Read_NVstore@i:
  3445                           	opt stack 0
  3446  000024                     mdb_comm@mcount:
  3447                           	opt stack 0
  3448  000024                     disable_channel@errormask:
  3449                           	opt stack 0
  3450  000024                     update_vends@chanel:
  3451                           	opt stack 0
  3452  000024                     lcd_string@lcdstring:
  3453                           	opt stack 0
  3454                           
  3455                           ; 2 bytes @ 0x19
  3456  000024                     	ds	1
  3457  000025                     ??_lcd_init:
  3458  000025                     ??_parse_date_time:
  3459  000025                     Init_vendmem@i:
  3460                           	opt stack 0
  3461  000025                     Write_NVstore@storesize:
  3462                           	opt stack 0
  3463  000025                     mdb_comm@slvadd:
  3464                           	opt stack 0
  3465  000025                     set_motortime@chanel:
  3466                           	opt stack 0
  3467  000025                     gsm_receive@noofline:
  3468                           	opt stack 0
  3469                           
  3470                           ; 1 bytes @ 0x1A
  3471  000025                     	ds	1
  3472  000026                     displ_code@ercode:
  3473                           	opt stack 0
  3474  000026                     lcd_string@lcdline:
  3475                           	opt stack 0
  3476  000026                     Write_NVstore@i:
  3477                           	opt stack 0
  3478  000026                     mdb_comm@i:
  3479                           	opt stack 0
  3480  000026                     set_motortime@i:
  3481                           	opt stack 0
  3482  000026                     gsm_msg@gsmstr:
  3483                           	opt stack 0
  3484  000026                     gsm_receive@x:
  3485                           	opt stack 0
  3486  000026                     ___ltdiv@counter:
  3487                           	opt stack 0
  3488                           
  3489                           ; 1 bytes @ 0x1B
  3490  000026                     	ds	1
  3491  000027                     ??_lcd_string:
  3492  000027                     ??_mdb_reset:
  3493  000027                     ??_gsm_setime:
  3494  000027                     Update_cashaudit@addcash:
  3495                           	opt stack 0
  3496  000027                     mdb_poll@i:
  3497                           	opt stack 0
  3498  000027                     Update_coinsout@coinsout:
  3499                           	opt stack 0
  3500  000027                     set_motortime@time:
  3501                           	opt stack 0
  3502  000027                     displ_hex@hexnum:
  3503                           	opt stack 0
  3504                           
  3505                           ; 3 bytes @ 0x1C
  3506  000027                     	ds	1
  3507  000028                     ??_hopper_pay:
  3508  000028                     credit_add@credit:
  3509                           	opt stack 0
  3510  000028                     mdb_reset@i:
  3511                           	opt stack 0
  3512                           
  3513                           ; 1 bytes @ 0x1D
  3514  000028                     	ds	1
  3515  000029                     ??_Clear_cred:
  3516  000029                     ??_Reset_settings:
  3517  000029                     ??_vend_dispense:
  3518  000029                     displ_lflags@linkflgs:
  3519                           	opt stack 0
  3520  000029                     displ_sflags@chanel:
  3521                           	opt stack 0
  3522  000029                     displ_nendis@note2disp:
  3523                           	opt stack 0
  3524  000029                     mdb_reset@i_4246:
  3525                           	opt stack 0
  3526  000029                     hopper_pay@change:
  3527                           	opt stack 0
  3528  000029                     parse_date_time@hhour:
  3529                           	opt stack 0
  3530  000029                     displ_note@notestring:
  3531                           	opt stack 0
  3532                           
  3533                           ; 2 bytes @ 0x1E
  3534  000029                     	ds	1
  3535  00002A                     ??_mdb_init:
  3536  00002A                     ??_Audit:
  3537  00002A                     displ_sens@dmsgpos:
  3538                           	opt stack 0
  3539  00002A                     displ_lflags@chanel:
  3540                           	opt stack 0
  3541  00002A                     displ_sflags@chanbit:
  3542                           	opt stack 0
  3543  00002A                     displ_time@channel:
  3544                           	opt stack 0
  3545  00002A                     displ_nendis@x:
  3546                           	opt stack 0
  3547  00002A                     displ_credit@cash:
  3548                           	opt stack 0
  3549  00002A                     displ_price@vendprice:
  3550                           	opt stack 0
  3551  00002A                     Update_Hopcoin@direction:
  3552                           	opt stack 0
  3553  00002A                     give_change@paycash:
  3554                           	opt stack 0
  3555  00002A                     parse_date_time@hour:
  3556                           	opt stack 0
  3557                           
  3558                           ; 1 bytes @ 0x1F
  3559  00002A                     	ds	1
  3560  00002B                     ??_set_price:
  3561  00002B                     displ_sens@smsgpos:
  3562                           	opt stack 0
  3563  00002B                     displ_lflags@lchan:
  3564                           	opt stack 0
  3565  00002B                     displ_sflags@senseflags:
  3566                           	opt stack 0
  3567  00002B                     displ_time@motortime:
  3568                           	opt stack 0
  3569  00002B                     Update_Hopcoin@newval:
  3570                           	opt stack 0
  3571  00002B                     enable_notes@notenum:
  3572                           	opt stack 0
  3573  00002B                     give_change@i:
  3574                           	opt stack 0
  3575  00002B                     vend_dispense@chanel:
  3576                           	opt stack 0
  3577  00002B                     parse_date_time@x:
  3578                           	opt stack 0
  3579  00002B                     gsm_setime@x:
  3580                           	opt stack 0
  3581                           
  3582                           ; 1 bytes @ 0x20
  3583  00002B                     	ds	1
  3584  00002C                     Audit@vends:
  3585                           	opt stack 0
  3586  00002C                     Hopper_coin@coinval:
  3587                           	opt stack 0
  3588  00002C                     Sensor_set@dacpos:
  3589                           	opt stack 0
  3590  00002C                     mdb_init@i:
  3591                           	opt stack 0
  3592  00002C                     parse_date_time@i:
  3593                           	opt stack 0
  3594  00002C                     gsm_setime@i:
  3595                           	opt stack 0
  3596                           
  3597                           ; 1 bytes @ 0x21
  3598  00002C                     	ds	1
  3599  00002D                     tblptru	equ	0xFF8
  3600                           tblptrh	equ	0xFF7
  3601                           tblptrl	equ	0xFF6
  3602                           tablat	equ	0xFF5
  3603                           postinc0	equ	0xFEE
  3604                           wreg	equ	0xFE8
  3605                           postdec1	equ	0xFE5
  3606                           fsr1h	equ	0xFE2
  3607                           fsr1l	equ	0xFE1
  3608                           
  3609                           ; 1 bytes @ 0x22
  3610                           
  3611                           	psect	cstackCOMRAMl
  3612  000000                     __pcstackCOMRAMl:
  3613                           	opt stack 0
  3614  000000                     tblptru	equ	0xFF8
  3615                           tblptrh	equ	0xFF7
  3616                           tblptrl	equ	0xFF6
  3617                           tablat	equ	0xFF5
  3618                           postinc0	equ	0xFEE
  3619                           wreg	equ	0xFE8
  3620                           postdec1	equ	0xFE5
  3621                           fsr1h	equ	0xFE2
  3622                           fsr1l	equ	0xFE1
  3623                           
  3624                           ; 1 bytes @ 0x0
  3625 ;;
  3626 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3627 ;;
  3628 ;; *************** function _main *****************
  3629 ;; Defined at:
  3630 ;;		line 58 in file "main.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;		None
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  channel         1   16[BANK0 ] unsigned char 
  3635 ;; Return value:  Size  Location     Type
  3636 ;;                  1    wreg      void 
  3637 ;; Registers used:
  3638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3639 ;; Tracked objects:
  3640 ;;		On entry : 0/0
  3641 ;;		On exit  : 0/0
  3642 ;;		Unchanged: 0/0
  3643 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Totals:         0       0       1       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;Total ram usage:        3 bytes
  3649 ;; Hardware stack levels required when called:   13
  3650 ;; This function calls:
  3651 ;;		_CMP1_GetOutputStatus
  3652 ;;		_DATAEE_ReadByte
  3653 ;;		_SYSTEM_Initialize
  3654 ;;		_butin
  3655 ;;		_credit_add
  3656 ;;		_displ_credit
  3657 ;;		_displ_nochange
  3658 ;;		_displ_noteer
  3659 ;;		_displ_price
  3660 ;;		_enter_service
  3661 ;;		_get_channel
  3662 ;;		_gsm_init
  3663 ;;		_gsm_off
  3664 ;;		_gsm_on
  3665 ;;		_lcd_init
  3666 ;;		_lcd_string
  3667 ;;		_mdb_init
  3668 ;;		_mdb_poll
  3669 ;;		_price_check
  3670 ;;		_vend_init
  3671 ;; This function is called by:
  3672 ;;		Startup code after reset
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text0
  3677  010A0C                     __ptext0:
  3678                           	opt stack 0
  3679  010A0C                     _main:
  3680                           	opt stack 18
  3681                           
  3682                           ;main.c: 61: SYSTEM_Initialize();
  3683                           
  3684                           ;incstack = 0
  3685  010A0C  ECAA  F098         	call	_SYSTEM_Initialize	;wreg free
  3686                           
  3687                           ;main.c: 63: gsm_off();
  3688  010A10  ECCF  F09B         	call	_gsm_off	;wreg free
  3689                           
  3690                           ;main.c: 65: lcd_init();
  3691  010A14  EC60  F08E         	call	_lcd_init	;wreg free
  3692                           
  3693                           ;main.c: 66: gsm_on();
  3694  010A18  ECBA  F09B         	call	_gsm_on	;wreg free
  3695                           
  3696                           ;main.c: 67: gsm_init();
  3697  010A1C  EC50  F084         	call	_gsm_init	;wreg free
  3698                           
  3699                           ;main.c: 68: vend_init();
  3700  010A20  ECD2  F08A         	call	_vend_init	;wreg free
  3701  010A24                     l1248:
  3702  010A24  F000               	nop		;# 
  3703                           
  3704                           ;main.c: 74: DAC1CON1 = 0x01;
  3705  010A26  0E01               	movlw	1
  3706  010A28  010F               	movlb	15	; () banked
  3707  010A2A  6F34               	movwf	52,b	;volatile
  3708                           
  3709                           ; BSR set to: 15
  3710                           ;main.c: 75: if (!CMP1_GetOutputStatus())
  3711  010A2C  EC90  F09B         	call	_CMP1_GetOutputStatus	;wreg free
  3712  010A30  0900               	iorlw	0
  3713  010A32  B4D8               	btfsc	status,2,c
  3714                           
  3715                           ;main.c: 76: {
  3716                           ;main.c: 77: venflags.service = 1;
  3717  010A34  8E2D               	bsf	_venflags,7,c
  3718                           
  3719                           ;main.c: 79: }
  3720                           ;main.c: 80: DAC1CON1 = sensorval;
  3721  010A36  C038  FF34         	movff	_sensorval,3892	;volatile
  3722                           
  3723                           ;main.c: 82: if(venflags.service == 1)
  3724  010A3A  BE2D               	btfsc	_venflags,7,c
  3725                           
  3726                           ;main.c: 83: {
  3727                           ;main.c: 84: enter_service();
  3728  010A3C  ECB9  F08E         	call	_enter_service	;wreg free
  3729                           
  3730                           ;main.c: 85: }
  3731                           ;main.c: 87: if(venflags.inscoin == 1)
  3732  010A40  A42D               	btfss	_venflags,2,c
  3733  010A42  D013               	goto	l1252
  3734                           
  3735                           ;main.c: 88: {
  3736                           ;main.c: 89: lcd_string(inscoin, line1);
  3737  010A44  0E62               	movlw	low _inscoin
  3738  010A46  6E24               	movwf	lcd_string@lcdstring,c
  3739  010A48  0EFD               	movlw	high _inscoin
  3740  010A4A  6E25               	movwf	lcd_string@lcdstring+1,c
  3741  010A4C  0E86               	movlw	low _line1
  3742  010A4E  6EF6               	movwf	tblptrl,c
  3743  010A50                     	if	1	;There is more than 1 active tblptr byte
  3744  010A50  0EFB               	movlw	high _line1
  3745  010A52  6EF7               	movwf	tblptrh,c
  3746  010A54                     	endif
  3747  010A54                     	if	1	;There are 3 active tblptr bytes
  3748  010A54  0E00               	movlw	low (_line1 shr (0+16))
  3749  010A56  6EF8               	movwf	tblptru,c
  3750  010A58                     	endif
  3751  010A58  0008               	tblrd		*
  3752  010A5A  CFF5 F026          	movff	tablat,lcd_string@lcdline
  3753  010A5E  EC5D  F08A         	call	_lcd_string	;wreg free
  3754                           
  3755                           ;main.c: 90: venflags.inscoin = 0;
  3756  010A62  942D               	bcf	_venflags,2,c
  3757                           
  3758                           ;main.c: 91: if(venflags.nochange)
  3759  010A64  B62D               	btfsc	_venflags,3,c
  3760                           
  3761                           ;main.c: 92: {
  3762                           ;main.c: 93: displ_nochange();
  3763  010A66  EC86  F099         	call	_displ_nochange	;wreg free
  3764  010A6A                     l1252:
  3765                           
  3766                           ;main.c: 94: }
  3767                           ;main.c: 95: }
  3768                           ;main.c: 96: if(venflags.initialrun == 1)
  3769  010A6A  BA2D               	btfsc	_venflags,5,c
  3770                           
  3771                           ;main.c: 97: {
  3772                           ;main.c: 98: venflags.initialrun = 0;
  3773  010A6C  9A2D               	bcf	_venflags,5,c
  3774                           
  3775                           ;main.c: 100: }
  3776                           ;main.c: 101: if(venflags.credisplay == 1)
  3777  010A6E  A82D               	btfss	_venflags,4,c
  3778  010A70  D005               	goto	l1255
  3779                           
  3780                           ;main.c: 102: {
  3781                           ;main.c: 103: displ_credit();
  3782  010A72  ECA0  F099         	call	_displ_credit	;wreg free
  3783                           
  3784                           ;main.c: 104: if(venflags.nochange)
  3785  010A76  B62D               	btfsc	_venflags,3,c
  3786                           
  3787                           ;main.c: 105: {
  3788                           ;main.c: 106: displ_nochange();
  3789  010A78  EC86  F099         	call	_displ_nochange	;wreg free
  3790  010A7C                     l1255:
  3791                           
  3792                           ;main.c: 107: }
  3793                           ;main.c: 108: }
  3794                           ;main.c: 110: if(PIR4bits.TMR3IF)
  3795  010A7C  010E               	movlb	14	; () banked
  3796  010A7E  A5CE               	btfss	206,2,b	;volatile
  3797  010A80  D02B               	goto	l1270
  3798                           
  3799                           ; BSR set to: 14
  3800                           ;main.c: 111: {
  3801                           ;main.c: 112: credit = mdb_poll();
  3802  010A82  ECBB  F085         	call	_mdb_poll	;wreg free
  3803  010A86  6E3C               	movwf	_credit,c	;volatile
  3804                           
  3805                           ;main.c: 113: if(credit != 0x00)
  3806  010A88  503C               	movf	_credit,w,c	;volatile
  3807  010A8A  B4D8               	btfsc	status,2,c
  3808  010A8C  D022               	goto	l1257
  3809                           
  3810                           ;main.c: 114: {
  3811                           ;main.c: 115: if(mdbflags.noteerr == 1)
  3812  010A8E  B240               	btfsc	_mdbflags,1,c
  3813  010A90  D00D               	goto	l1259
  3814  010A92  D01A               	goto	l1258
  3815  010A94  ECBD  F093         	call	_mdb_init	;wreg free
  3816  010A98  D003               	goto	l1265
  3817  010A9A                     l1262:
  3818                           
  3819                           ;main.c: 126: if(mdbflags.vending)
  3820  010A9A  A840               	btfss	_mdbflags,4,c
  3821                           
  3822                           ;main.c: 130: else
  3823                           ;main.c: 131: {
  3824                           ;main.c: 132: mdb_init();
  3825                           
  3826                           ;main.c: 129: }
  3827                           
  3828                           ;main.c: 127: {
  3829                           ;main.c: 128: credit = 0;
  3830  010A9C  ECBD  F093         	call	_mdb_init	;wreg free
  3831  010AA0                     l1265:
  3832                           
  3833                           ;main.c: 140: credit = 0;
  3834                           
  3835                           ;main.c: 139: case 0x0C : mdbflags.noteerr == 0;
  3836                           
  3837                           ;main.c: 138: break;
  3838                           
  3839                           ;main.c: 137: credit = 0;
  3840  010AA0  0E00               	movlw	0
  3841  010AA2  6E3C               	movwf	_credit,c	;volatile
  3842                           
  3843                           ;main.c: 141: break;
  3844  010AA4  D019               	goto	l1270
  3845  010AA6  ECEC  F099         	call	_displ_noteer	;wreg free
  3846                           
  3847                           ;main.c: 143: }
  3848  010AAA  D016               	goto	l1270
  3849  010AAC                     l1259:
  3850  010AAC  503C               	movf	_credit,w,c	;volatile
  3851                           
  3852                           ; Switch size 1, requested type "space"
  3853                           ; Number of cases is 4, Range of values is 6 to 16
  3854                           ; switch strategies available:
  3855                           ; Name         Instructions Cycles
  3856                           ; simple_byte           13     7 (average)
  3857                           ;	Chosen strategy is simple_byte
  3858  010AAE  0A06               	xorlw	6	; case 6
  3859  010AB0  B4D8               	btfsc	status,2,c
  3860  010AB2  D7F0               	goto	l1260
  3861  010AB4  0A0F               	xorlw	15	; case 9
  3862  010AB6  B4D8               	btfsc	status,2,c
  3863  010AB8  D7F0               	goto	l1262
  3864  010ABA  0A05               	xorlw	5	; case 12
  3865  010ABC  B4D8               	btfsc	status,2,c
  3866  010ABE  D7F0               	goto	l1265
  3867  010AC0  0A1C               	xorlw	28	; case 16
  3868  010AC2  B4D8               	btfsc	status,2,c
  3869  010AC4  D7ED               	goto	l1265
  3870  010AC6  D7EF               	goto	l1267
  3871  010AC8                     l1258:
  3872                           
  3873                           ;main.c: 145: else
  3874                           ;main.c: 146: {
  3875                           ;main.c: 147: credit_add(credit);
  3876  010AC8  503C               	movf	_credit,w,c	;volatile
  3877  010ACA  ECDA  F095         	call	_credit_add
  3878                           
  3879                           ;main.c: 148: venflags.iscredit = 1;
  3880  010ACE  802D               	bsf	_venflags,0,c
  3881                           
  3882                           ;main.c: 149: }
  3883                           ;main.c: 150: }
  3884  010AD0  D003               	goto	l1270
  3885  010AD2                     l1257:
  3886                           
  3887                           ;main.c: 151: else
  3888                           ;main.c: 152: {
  3889                           ;main.c: 153: if(mdbflags.noteerr == 1)
  3890  010AD2  B240               	btfsc	_mdbflags,1,c
  3891                           
  3892                           ;main.c: 154: {
  3893                           ;main.c: 155: displ_noteer();
  3894  010AD4  ECEC  F099         	call	_displ_noteer	;wreg free
  3895  010AD8                     l1270:
  3896                           
  3897                           ;main.c: 156: }
  3898                           ;main.c: 159: }
  3899                           ;main.c: 160: }
  3900                           ;main.c: 161: if(venflags.iscredit)
  3901  010AD8  A02D               	btfss	_venflags,0,c
  3902  010ADA  D007               	goto	l1271
  3903                           
  3904                           ;main.c: 162: {
  3905                           ;main.c: 163: if(price_check())
  3906  010ADC  ECD9  F082         	call	_price_check	;wreg free
  3907  010AE0  0900               	iorlw	0
  3908  010AE2  B4D8               	btfsc	status,2,c
  3909  010AE4  D79F               	goto	l1248
  3910  010AE6  00FF               	reset		;# 
  3911                           
  3912                           ;main.c: 166: }
  3913                           ;main.c: 167: }
  3914  010AE8  D79D               	goto	l1248
  3915  010AEA                     l1271:
  3916                           
  3917                           ;main.c: 168: else
  3918                           ;main.c: 169: {
  3919                           ;main.c: 170: if(butin() != 0)
  3920  010AEA  EC4F  F095         	call	_butin	;wreg free
  3921  010AEE  0900               	iorlw	0
  3922  010AF0  B4D8               	btfsc	status,2,c
  3923  010AF2  D03C               	goto	l1274
  3924                           
  3925                           ;main.c: 171: {
  3926                           ;main.c: 173: buttons = butin();
  3927  010AF4  EC4F  F095         	call	_butin	;wreg free
  3928  010AF8  6E3A               	movwf	_buttons,c	;volatile
  3929                           
  3930                           ;main.c: 174: if(((buttons & ~errormask) == 0x00) && !venflags.pricedisplay)
  3931  010AFA  5033               	movf	_errormask,w,c	;volatile
  3932  010AFC  0AFF               	xorlw	255
  3933  010AFE  143A               	andwf	_buttons,w,c	;volatile
  3934  010B00  0900               	iorlw	0
  3935  010B02  B4D8               	btfsc	status,2,c
  3936  010B04  B42F               	btfsc	_venflags+2,2,c
  3937  010B06  D010               	goto	l1275
  3938                           
  3939                           ;main.c: 175: {
  3940                           ;main.c: 176: lcd_string(emptymsg, line1);
  3941  010B08  0EAC               	movlw	low _emptymsg
  3942  010B0A  6E24               	movwf	lcd_string@lcdstring,c
  3943  010B0C  0EFF               	movlw	high _emptymsg
  3944  010B0E  6E25               	movwf	lcd_string@lcdstring+1,c
  3945  010B10  0E86               	movlw	low _line1
  3946  010B12  6EF6               	movwf	tblptrl,c
  3947  010B14                     	if	1	;There is more than 1 active tblptr byte
  3948  010B14  0EFB               	movlw	high _line1
  3949  010B16  6EF7               	movwf	tblptrh,c
  3950  010B18                     	endif
  3951  010B18                     	if	1	;There are 3 active tblptr bytes
  3952  010B18  0E00               	movlw	low (_line1 shr (0+16))
  3953  010B1A  6EF8               	movwf	tblptru,c
  3954  010B1C                     	endif
  3955  010B1C  0008               	tblrd		*
  3956  010B1E  CFF5 F026          	movff	tablat,lcd_string@lcdline
  3957  010B22  EC5D  F08A         	call	_lcd_string	;wreg free
  3958                           
  3959                           ;main.c: 177: venflags.pricedisplay = 1;
  3960  010B26  842F               	bsf	_venflags+2,2,c
  3961  010B28                     l1275:
  3962                           
  3963                           ;main.c: 178: }
  3964                           ;main.c: 179: if(!venflags.pricedisplay)
  3965  010B28  B42F               	btfsc	_venflags+2,2,c
  3966  010B2A  D77C               	goto	l1248
  3967                           
  3968                           ;main.c: 180: {
  3969                           ;main.c: 181: uint8_t channel = get_channel(buttons);
  3970  010B2C  503A               	movf	_buttons,w,c	;volatile
  3971  010B2E  ECCB  F09A         	call	_get_channel
  3972  010B32  0100               	movlb	0	; () banked
  3973  010B34  6FF1               	movwf	main@channel& (0+255),b
  3974                           
  3975                           ; BSR set to: 0
  3976                           ;main.c: 182: vendprice = DATAEE_ReadByte(pricestore + channel);
  3977  010B36  0E50               	movlw	low _pricestore
  3978  010B38  6EF6               	movwf	tblptrl,c
  3979  010B3A                     	if	1	;There is more than 1 active tblptr byte
  3980  010B3A  0EFB               	movlw	high _pricestore
  3981  010B3C  6EF7               	movwf	tblptrh,c
  3982  010B3E                     	endif
  3983  010B3E                     	if	1	;There are 3 active tblptr bytes
  3984  010B3E  0E00               	movlw	low (_pricestore shr (0+16))
  3985  010B40  6EF8               	movwf	tblptru,c
  3986  010B42                     	endif
  3987  010B42  0009               	tblrd		*+
  3988  010B44  CFF5 F200          	movff	tablat,??_main
  3989  010B48  0009               	tblrd		*+
  3990  010B4A  CFF5 F201          	movff	tablat,??_main+1
  3991  010B4E  51F1               	movf	main@channel& (0+255),w,b
  3992  010B50  0102               	movlb	2	; () banked
  3993  010B52  2500               	addwf	??_main& (0+255),w,b
  3994  010B54  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  3995  010B56  0E00               	movlw	0
  3996  010B58  2101               	addwfc	(??_main+1)& (0+255),w,b
  3997  010B5A  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  3998  010B5C  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  3999  010B60  6E39               	movwf	_vendprice,c	;volatile
  4000                           
  4001                           ;main.c: 183: displ_price(vendprice);
  4002  010B62  5039               	movf	_vendprice,w,c	;volatile
  4003  010B64  ECF4  F097         	call	_displ_price
  4004                           
  4005                           ;main.c: 184: venflags.pricedisplay = 1;
  4006  010B68  842F               	bsf	_venflags+2,2,c
  4007                           
  4008                           ;main.c: 185: }
  4009                           ;main.c: 186: }
  4010  010B6A  D75C               	goto	l1248
  4011  010B6C                     l1274:
  4012                           
  4013                           ;main.c: 187: else
  4014                           ;main.c: 188: {
  4015                           ;main.c: 189: if(venflags.pricedisplay)
  4016  010B6C  A42F               	btfss	_venflags+2,2,c
  4017  010B6E  D75A               	goto	l1248
  4018                           
  4019                           ;main.c: 190: {
  4020                           ;main.c: 191: venflags.pricedisplay = 0;
  4021  010B70  942F               	bcf	_venflags+2,2,c
  4022                           
  4023                           ;main.c: 192: venflags.inscoin = 1;
  4024  010B72  842D               	bsf	_venflags,2,c
  4025  010B74  D757               	goto	l1248
  4026  010B76                     __end_of_main:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           postinc0	equ	0xFEE
  4033                           wreg	equ	0xFE8
  4034                           postdec1	equ	0xFE5
  4035                           fsr1h	equ	0xFE2
  4036                           fsr1l	equ	0xFE1
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _vend_init *****************
  4040 ;; Defined at:
  4041 ;;		line 33 in file "vend.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;		None
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;		None
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;Total ram usage:        0 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    8
  4062 ;; This function calls:
  4063 ;;		_DAC1_SetOutput
  4064 ;;		_DATAEE_ReadByte
  4065 ;;		_Init_vendmem
  4066 ;;		_credit_check
  4067 ;;		_find_highprice
  4068 ;;		_find_lowprice
  4069 ;;		_lcd_string
  4070 ;;		_mdb_init
  4071 ;; This function is called by:
  4072 ;;		_main
  4073 ;; This function uses a non-reentrant model
  4074 ;;
  4075                           
  4076                           	psect	text1
  4077  0115A4                     __ptext1:
  4078                           	opt stack 0
  4079  0115A4                     _vend_init:
  4080                           	opt stack 22
  4081                           
  4082                           ;vend.c: 36: ((uint8_t*) &venderr)[0] = DATAEE_ReadByte(venderrors);
  4083                           
  4084                           ;incstack = 0
  4085  0115A4  0E4E               	movlw	low _venderrors
  4086  0115A6  6EF6               	movwf	tblptrl,c
  4087  0115A8                     	if	1	;There is more than 1 active tblptr byte
  4088  0115A8  0EFB               	movlw	high _venderrors
  4089  0115AA  6EF7               	movwf	tblptrh,c
  4090  0115AC                     	endif
  4091  0115AC                     	if	1	;There are 3 active tblptr bytes
  4092  0115AC  0E00               	movlw	low (_venderrors shr (0+16))
  4093  0115AE  6EF8               	movwf	tblptru,c
  4094  0115B0                     	endif
  4095  0115B0  0009               	tblrd		*+
  4096  0115B2  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  4097  0115B6  000A               	tblrd		*-
  4098  0115B8  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  4099  0115BC  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  4100  0115C0  0100               	movlb	0	; () banked
  4101  0115C2  6FA7               	movwf	_venderr& (0+255),b
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;vend.c: 37: venflags.hiprice = 0;
  4105  0115C4  982F               	bcf	_venflags+2,4,c
  4106                           
  4107                           ;vend.c: 39: if(DATAEE_ReadByte(hoperror) != 0)
  4108  0115C6  0E20               	movlw	low _hoperror
  4109  0115C8  6EF6               	movwf	tblptrl,c
  4110  0115CA                     	if	1	;There is more than 1 active tblptr byte
  4111  0115CA  0EFB               	movlw	high _hoperror
  4112  0115CC  6EF7               	movwf	tblptrh,c
  4113  0115CE                     	endif
  4114  0115CE                     	if	1	;There are 3 active tblptr bytes
  4115  0115CE  0E00               	movlw	low (_hoperror shr (0+16))
  4116  0115D0  6EF8               	movwf	tblptru,c
  4117  0115D2                     	endif
  4118  0115D2  0009               	tblrd		*+
  4119  0115D4  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  4120  0115D8  000A               	tblrd		*-
  4121  0115DA  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  4122  0115DE  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  4123  0115E2  0900               	iorlw	0
  4124  0115E4  B4D8               	btfsc	status,2,c
  4125  0115E6  D002               	goto	l2429
  4126                           
  4127                           ;vend.c: 40: {
  4128                           ;vend.c: 41: venflags.nochange = 1;
  4129  0115E8  862D               	bsf	_venflags,3,c
  4130                           
  4131                           ;vend.c: 42: }
  4132  0115EA  D001               	goto	l2430
  4133  0115EC                     l2429:
  4134                           
  4135                           ;vend.c: 43: else
  4136                           ;vend.c: 44: {
  4137                           ;vend.c: 45: venflags.nochange = 0;
  4138  0115EC  962D               	bcf	_venflags,3,c
  4139  0115EE                     l2430:
  4140                           
  4141                           ;vend.c: 46: }
  4142                           ;vend.c: 48: Init_vendmem();
  4143  0115EE  EC4E  F08D         	call	_Init_vendmem	;wreg free
  4144                           
  4145                           ;vend.c: 49: find_highprice();
  4146  0115F2  ECD4  F097         	call	_find_highprice	;wreg free
  4147                           
  4148                           ;vend.c: 50: find_lowprice();
  4149  0115F6  ECB4  F097         	call	_find_lowprice	;wreg free
  4150                           
  4151                           ;vend.c: 52: sensorval = DATAEE_ReadByte(sensval);
  4152  0115FA  0E4A               	movlw	low _sensval
  4153  0115FC  6EF6               	movwf	tblptrl,c
  4154  0115FE                     	if	1	;There is more than 1 active tblptr byte
  4155  0115FE  0EFB               	movlw	high _sensval
  4156  011600  6EF7               	movwf	tblptrh,c
  4157  011602                     	endif
  4158  011602                     	if	1	;There are 3 active tblptr bytes
  4159  011602  0E00               	movlw	low (_sensval shr (0+16))
  4160  011604  6EF8               	movwf	tblptru,c
  4161  011606                     	endif
  4162  011606  0009               	tblrd		*+
  4163  011608  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  4164  01160C  000A               	tblrd		*-
  4165  01160E  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  4166  011612  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  4167  011616  6E38               	movwf	_sensorval,c	;volatile
  4168                           
  4169                           ;vend.c: 53: DAC1_SetOutput(sensorval);
  4170  011618  5038               	movf	_sensorval,w,c	;volatile
  4171  01161A  ECBF  F09B         	call	_DAC1_SetOutput
  4172                           
  4173                           ;vend.c: 54: errormask = DATAEE_ReadByte(venderrors);
  4174  01161E  0E4E               	movlw	low _venderrors
  4175  011620  6EF6               	movwf	tblptrl,c
  4176  011622                     	if	1	;There is more than 1 active tblptr byte
  4177  011622  0EFB               	movlw	high _venderrors
  4178  011624  6EF7               	movwf	tblptrh,c
  4179  011626                     	endif
  4180  011626                     	if	1	;There are 3 active tblptr bytes
  4181  011626  0E00               	movlw	low (_venderrors shr (0+16))
  4182  011628  6EF8               	movwf	tblptru,c
  4183  01162A                     	endif
  4184  01162A  0009               	tblrd		*+
  4185  01162C  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  4186  011630  000A               	tblrd		*-
  4187  011632  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  4188  011636  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  4189  01163A  6E33               	movwf	_errormask,c	;volatile
  4190                           
  4191                           ;vend.c: 59: lcd_string(initnote, line1);
  4192  01163C  0E89               	movlw	low _initnote
  4193  01163E  6E24               	movwf	lcd_string@lcdstring,c
  4194  011640  0EFD               	movlw	high _initnote
  4195  011642  6E25               	movwf	lcd_string@lcdstring+1,c
  4196  011644  0E86               	movlw	low _line1
  4197  011646  6EF6               	movwf	tblptrl,c
  4198  011648                     	if	1	;There is more than 1 active tblptr byte
  4199  011648  0EFB               	movlw	high _line1
  4200  01164A  6EF7               	movwf	tblptrh,c
  4201  01164C                     	endif
  4202  01164C                     	if	1	;There are 3 active tblptr bytes
  4203  01164C  0E00               	movlw	low (_line1 shr (0+16))
  4204  01164E  6EF8               	movwf	tblptru,c
  4205  011650                     	endif
  4206  011650  0008               	tblrd		*
  4207  011652  CFF5 F026          	movff	tablat,lcd_string@lcdline
  4208  011656  EC5D  F08A         	call	_lcd_string	;wreg free
  4209                           
  4210                           ;vend.c: 60: mdb_init();
  4211  01165A  ECBD  F093         	call	_mdb_init	;wreg free
  4212                           
  4213                           ;vend.c: 62: venflags.pricedisplay = 0;
  4214  01165E  942F               	bcf	_venflags+2,2,c
  4215                           
  4216                           ;vend.c: 63: venflags.service = 0;
  4217  011660  9E2D               	bcf	_venflags,7,c
  4218                           
  4219                           ;vend.c: 64: venflags.initialrun = 1;
  4220  011662  8A2D               	bsf	_venflags,5,c
  4221                           
  4222                           ;vend.c: 65: if(credit_check() == 0)
  4223  011664  EC7C  F09A         	call	_credit_check	;wreg free
  4224  011668  0900               	iorlw	0
  4225  01166A  A4D8               	btfss	status,2,c
  4226  01166C  D004               	goto	l2431
  4227                           
  4228                           ;vend.c: 66: {
  4229                           ;vend.c: 67: venflags.iscredit = 0;
  4230  01166E  902D               	bcf	_venflags,0,c
  4231                           
  4232                           ;vend.c: 68: venflags.inscoin = 1;
  4233  011670  842D               	bsf	_venflags,2,c
  4234                           
  4235                           ;vend.c: 69: venflags.credisplay = 0;
  4236  011672  982D               	bcf	_venflags,4,c
  4237  011674  D003               	goto	L1
  4238  011676                     l2431:
  4239                           
  4240                           ;vend.c: 72: else
  4241                           ;vend.c: 73: {
  4242                           ;vend.c: 74: venflags.iscredit = 1;
  4243  011676  802D               	bsf	_venflags,0,c
  4244                           
  4245                           ;vend.c: 75: venflags.inscoin = 0;
  4246  011678  942D               	bcf	_venflags,2,c
  4247                           
  4248                           ;vend.c: 76: venflags.credisplay = 1;
  4249  01167A  882D               	bsf	_venflags,4,c
  4250  01167C                     L1:
  4251                           
  4252                           ;vend.c: 77: mdbflags.noteerr = 0;
  4253  01167C  9240               	bcf	_mdbflags,1,c
  4254                           
  4255                           ;vend.c: 78: }
  4256                           ;vend.c: 80: LATAbits.LA5 = 0;
  4257  01167E  9A83               	bcf	3971,5,c	;volatile
  4258                           
  4259                           ;vend.c: 82: LATCbits.LC2 = 1;
  4260  011680  8485               	bsf	3973,2,c	;volatile
  4261  011682  0012               	return		;funcret
  4262  011684                     __end_of_vend_init:
  4263                           	opt stack 0
  4264                           tblptru	equ	0xFF8
  4265                           tblptrh	equ	0xFF7
  4266                           tblptrl	equ	0xFF6
  4267                           tablat	equ	0xFF5
  4268                           postinc0	equ	0xFEE
  4269                           wreg	equ	0xFE8
  4270                           postdec1	equ	0xFE5
  4271                           fsr1h	equ	0xFE2
  4272                           fsr1l	equ	0xFE1
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _mdb_init *****************
  4276 ;; Defined at:
  4277 ;;		line 24 in file "mdb.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  i               1   33[COMRAM] unsigned char 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;Total ram usage:        3 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    7
  4298 ;; This function calls:
  4299 ;;		_DATAEE_ReadByte
  4300 ;;		_eusartmdb_Initialize
  4301 ;;		_mdb_comm
  4302 ;;		_mdb_noten
  4303 ;;		_mdb_reset
  4304 ;;		_mdb_security
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;;		_vend_init
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text2
  4312  01277A                     __ptext2:
  4313                           	opt stack 0
  4314  01277A                     _mdb_init:
  4315                           	opt stack 22
  4316                           
  4317                           ;mdb.c: 26: _delay((unsigned long)((250)*(64000000/4000.0)));
  4318                           
  4319                           ;incstack = 0
  4320  01277A  0E15               	movlw	21
  4321  01277C  6E2B               	movwf	(??_mdb_init+1)& (0+255),c
  4322  01277E  0E4B               	movlw	75
  4323  012780  6E2A               	movwf	??_mdb_init& (0+255),c
  4324  012782  0EBE               	movlw	190
  4325  012784                     u7267:
  4326  012784  2EE8               	decfsz	wreg,f,c
  4327  012786  D7FE               	bra	u7267
  4328  012788  2E2A               	decfsz	??_mdb_init& (0+255),f,c
  4329  01278A  D7FC               	bra	u7267
  4330  01278C  2E2B               	decfsz	(??_mdb_init+1)& (0+255),f,c
  4331  01278E  D7FA               	bra	u7267
  4332  012790  D000               	nop2	
  4333                           
  4334                           ;mdb.c: 27: noteen_byte = DATAEE_ReadByte(notebits);
  4335  012792  0E4C               	movlw	low _notebits
  4336  012794  6EF6               	movwf	tblptrl,c
  4337  012796                     	if	1	;There is more than 1 active tblptr byte
  4338  012796  0EFB               	movlw	high _notebits
  4339  012798  6EF7               	movwf	tblptrh,c
  4340  01279A                     	endif
  4341  01279A                     	if	1	;There are 3 active tblptr bytes
  4342  01279A  0E00               	movlw	low (_notebits shr (0+16))
  4343  01279C  6EF8               	movwf	tblptru,c
  4344  01279E                     	endif
  4345  01279E  0009               	tblrd		*+
  4346  0127A0  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  4347  0127A4  000A               	tblrd		*-
  4348  0127A6  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  4349  0127AA  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  4350  0127AE  6E3F               	movwf	_noteen_byte,c	;volatile
  4351                           
  4352                           ;mdb.c: 28: ((uint8_t*) &noteen)[0] = noteen_byte;
  4353  0127B0  C03F  F0AE         	movff	_noteen_byte,_noteen	;volatile
  4354                           
  4355                           ;mdb.c: 29: eusartmdb_Initialize();
  4356  0127B4  EC18  F09B         	call	_eusartmdb_Initialize	;wreg free
  4357                           
  4358                           ;mdb.c: 30: mdbflags.noteerr = 0;
  4359  0127B8  9240               	bcf	_mdbflags,1,c
  4360                           
  4361                           ;mdb.c: 31: mdbflags.isdata = 0;
  4362  0127BA  9040               	bcf	_mdbflags,0,c
  4363                           
  4364                           ;mdb.c: 32: mdb_reset();
  4365  0127BC  EC0B  F091         	call	_mdb_reset	;wreg free
  4366                           
  4367                           ;mdb.c: 33: mdb_noten();
  4368  0127C0  EC50  F097         	call	_mdb_noten	;wreg free
  4369                           
  4370                           ;mdb.c: 34: mdb_security();
  4371  0127C4  EC8D  F09A         	call	_mdb_security	;wreg free
  4372                           
  4373                           ;mdb.c: 35: uint8_t i = mdb_comm(note_poll, 0x00);
  4374  0127C8  0E00               	movlw	0
  4375  0127CA  6E24               	movwf	mdb_comm@mcount,c
  4376  0127CC  0E7F               	movlw	low _note_poll
  4377  0127CE  6EF6               	movwf	tblptrl,c
  4378  0127D0                     	if	1	;There is more than 1 active tblptr byte
  4379  0127D0  0EFB               	movlw	high _note_poll
  4380  0127D2  6EF7               	movwf	tblptrh,c
  4381  0127D4                     	endif
  4382  0127D4                     	if	1	;There are 3 active tblptr bytes
  4383  0127D4  0E00               	movlw	low (_note_poll shr (0+16))
  4384  0127D6  6EF8               	movwf	tblptru,c
  4385  0127D8                     	endif
  4386  0127D8  0008               	tblrd		*
  4387  0127DA  50F5               	movf	tablat,w,c
  4388  0127DC  EC72  F088         	call	_mdb_comm
  4389  0127E0  6E2C               	movwf	mdb_init@i,c
  4390  0127E2  0012               	return		;funcret
  4391  0127E4                     __end_of_mdb_init:
  4392                           	opt stack 0
  4393                           tblptru	equ	0xFF8
  4394                           tblptrh	equ	0xFF7
  4395                           tblptrl	equ	0xFF6
  4396                           tablat	equ	0xFF5
  4397                           postinc0	equ	0xFEE
  4398                           wreg	equ	0xFE8
  4399                           postdec1	equ	0xFE5
  4400                           fsr1h	equ	0xFE2
  4401                           fsr1l	equ	0xFE1
  4402                           status	equ	0xFD8
  4403                           
  4404 ;; *************** function _mdb_security *****************
  4405 ;; Defined at:
  4406 ;;		line 158 in file "mdb.c"
  4407 ;; Parameters:    Size  Location     Type
  4408 ;;		None
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;		None
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  1    wreg      void 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;Total ram usage:        0 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    6
  4427 ;; This function calls:
  4428 ;;		_init_mdbdata
  4429 ;;		_mdb_comm
  4430 ;; This function is called by:
  4431 ;;		_mdb_init
  4432 ;; This function uses a non-reentrant model
  4433 ;;
  4434                           
  4435                           	psect	text3
  4436  01351A                     __ptext3:
  4437                           	opt stack 0
  4438  01351A                     _mdb_security:
  4439                           	opt stack 22
  4440                           
  4441                           ;mdb.c: 160: init_mdbdata(0x00);
  4442                           
  4443                           ;incstack = 0
  4444  01351A  0E00               	movlw	0
  4445  01351C  EC31  F09A         	call	_init_mdbdata
  4446                           
  4447                           ;mdb.c: 161: mdb_comm(note_security, 0x01);
  4448  013520  0E01               	movlw	1
  4449  013522  6E24               	movwf	mdb_comm@mcount,c
  4450  013524  0E80               	movlw	low _note_security
  4451  013526  6EF6               	movwf	tblptrl,c
  4452  013528                     	if	1	;There is more than 1 active tblptr byte
  4453  013528  0EFB               	movlw	high _note_security
  4454  01352A  6EF7               	movwf	tblptrh,c
  4455  01352C                     	endif
  4456  01352C                     	if	1	;There are 3 active tblptr bytes
  4457  01352C  0E00               	movlw	low (_note_security shr (0+16))
  4458  01352E  6EF8               	movwf	tblptru,c
  4459  013530                     	endif
  4460  013530  0008               	tblrd		*
  4461  013532  50F5               	movf	tablat,w,c
  4462  013534  EC72  F088         	call	_mdb_comm
  4463  013538  0012               	return		;funcret
  4464  01353A                     __end_of_mdb_security:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           postinc0	equ	0xFEE
  4471                           wreg	equ	0xFE8
  4472                           postdec1	equ	0xFE5
  4473                           fsr1h	equ	0xFE2
  4474                           fsr1l	equ	0xFE1
  4475                           status	equ	0xFD8
  4476                           
  4477 ;; *************** function _mdb_reset *****************
  4478 ;; Defined at:
  4479 ;;		line 39 in file "mdb.c"
  4480 ;; Parameters:    Size  Location     Type
  4481 ;;		None
  4482 ;; Auto vars:     Size  Location     Type
  4483 ;;  i               1   29[COMRAM] unsigned char 
  4484 ;;  i               1   30[COMRAM] unsigned char 
  4485 ;; Return value:  Size  Location     Type
  4486 ;;                  1    wreg      unsigned char 
  4487 ;; Registers used:
  4488 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4489 ;; Tracked objects:
  4490 ;;		On entry : 0/0
  4491 ;;		On exit  : 0/0
  4492 ;;		Unchanged: 0/0
  4493 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;Total ram usage:        3 bytes
  4499 ;; Hardware stack levels used:    1
  4500 ;; Hardware stack levels required when called:    6
  4501 ;; This function calls:
  4502 ;;		_mdb_comm
  4503 ;; This function is called by:
  4504 ;;		_mdb_init
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text4
  4509  012216                     __ptext4:
  4510                           	opt stack 0
  4511  012216                     _mdb_reset:
  4512                           	opt stack 22
  4513                           
  4514                           ;mdb.c: 44: mdbflags.timeout = 1;
  4515                           
  4516                           ;incstack = 0
  4517  012216  8640               	bsf	_mdbflags,3,c
  4518                           
  4519                           ;mdb.c: 45: while(mdbflags.timeout)
  4520  012218  D00D               	goto	l3188
  4521  01221A                     
  4522                           ;mdb.c: 46: {
  4523                           ;mdb.c: 47: uint8_t i = mdb_comm(note_reset, 0x00);
  4524  01221A  0E00               	movlw	0
  4525  01221C  6E24               	movwf	mdb_comm@mcount,c
  4526  01221E  0E82               	movlw	low _note_reset
  4527  012220  6EF6               	movwf	tblptrl,c
  4528  012222                     	if	1	;There is more than 1 active tblptr byte
  4529  012222  0EFB               	movlw	high _note_reset
  4530  012224  6EF7               	movwf	tblptrh,c
  4531  012226                     	endif
  4532  012226                     	if	1	;There are 3 active tblptr bytes
  4533  012226  0E00               	movlw	low (_note_reset shr (0+16))
  4534  012228  6EF8               	movwf	tblptru,c
  4535  01222A                     	endif
  4536  01222A  0008               	tblrd		*
  4537  01222C  50F5               	movf	tablat,w,c
  4538  01222E  EC72  F088         	call	_mdb_comm
  4539  012232  6E28               	movwf	mdb_reset@i,c
  4540  012234                     l3188:
  4541  012234  B640               	btfsc	_mdbflags,3,c
  4542  012236  D7F1               	goto	l3189
  4543  012238  F000               	nop		;# 
  4544                           
  4545                           ;mdb.c: 50: uint8_t i = mdb_comm(note_poll, 0x00);
  4546  01223A  0E00               	movlw	0
  4547  01223C  6E24               	movwf	mdb_comm@mcount,c
  4548  01223E  0E7F               	movlw	low _note_poll
  4549  012240  6EF6               	movwf	tblptrl,c
  4550  012242                     	if	1	;There is more than 1 active tblptr byte
  4551  012242  0EFB               	movlw	high _note_poll
  4552  012244  6EF7               	movwf	tblptrh,c
  4553  012246                     	endif
  4554  012246                     	if	1	;There are 3 active tblptr bytes
  4555  012246  0E00               	movlw	low (_note_poll shr (0+16))
  4556  012248  6EF8               	movwf	tblptru,c
  4557  01224A                     	endif
  4558  01224A  0008               	tblrd		*
  4559  01224C  50F5               	movf	tablat,w,c
  4560  01224E  EC72  F088         	call	_mdb_comm
  4561  012252  6E29               	movwf	mdb_reset@i_4246,c
  4562                           
  4563                           ;mdb.c: 51: if(mdbdata[--i] == just_reset)
  4564  012254  0629               	decf	mdb_reset@i_4246,f,c
  4565  012256  5029               	movf	mdb_reset@i_4246,w,c
  4566  012258  0D01               	mullw	1
  4567  01225A  0E60               	movlw	low _mdbdata
  4568  01225C  24F3               	addwf	prodl,w,c
  4569  01225E  6ED9               	movwf	fsr2l,c
  4570  012260  0E00               	movlw	high _mdbdata
  4571  012262  20F4               	addwfc	prodh,w,c
  4572  012264  6EDA               	movwf	fsr2h,c
  4573  012266  50DF               	movf	indf2,w,c
  4574  012268  6E27               	movwf	??_mdb_reset& (0+255),c
  4575  01226A  0E75               	movlw	low _just_reset
  4576  01226C  6EF6               	movwf	tblptrl,c
  4577  01226E                     	if	1	;There is more than 1 active tblptr byte
  4578  01226E  0EFB               	movlw	high _just_reset
  4579  012270  6EF7               	movwf	tblptrh,c
  4580  012272                     	endif
  4581  012272                     	if	1	;There are 3 active tblptr bytes
  4582  012272  0E00               	movlw	low (_just_reset shr (0+16))
  4583  012274  6EF8               	movwf	tblptru,c
  4584  012276                     	endif
  4585  012276  0008               	tblrd		*
  4586  012278  50F5               	movf	tablat,w,c
  4587  01227A  1827               	xorwf	??_mdb_reset,w,c
  4588  01227C  A4D8               	btfss	status,2,c
  4589  01227E  0012               	return	
  4590                           
  4591                           ;mdb.c: 52: {
  4592                           ;mdb.c: 54: i = mdb_comm(note_poll, 0x00);
  4593  012280  0E00               	movlw	0
  4594  012282  6E24               	movwf	mdb_comm@mcount,c
  4595  012284  0E7F               	movlw	low _note_poll
  4596  012286  6EF6               	movwf	tblptrl,c
  4597  012288                     	if	1	;There is more than 1 active tblptr byte
  4598  012288  0EFB               	movlw	high _note_poll
  4599  01228A  6EF7               	movwf	tblptrh,c
  4600  01228C                     	endif
  4601  01228C                     	if	1	;There are 3 active tblptr bytes
  4602  01228C  0E00               	movlw	low (_note_poll shr (0+16))
  4603  01228E  6EF8               	movwf	tblptru,c
  4604  012290                     	endif
  4605  012290  0008               	tblrd		*
  4606  012292  50F5               	movf	tablat,w,c
  4607  012294  EC72  F088         	call	_mdb_comm
  4608  012298  6E29               	movwf	mdb_reset@i_4246,c
  4609  01229A  0012               	return	
  4610  01229C                     __end_of_mdb_reset:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           tblptrh	equ	0xFF7
  4614                           tblptrl	equ	0xFF6
  4615                           tablat	equ	0xFF5
  4616                           prodh	equ	0xFF4
  4617                           prodl	equ	0xFF3
  4618                           postinc0	equ	0xFEE
  4619                           wreg	equ	0xFE8
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           indf2	equ	0xFDF
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _eusartmdb_Initialize *****************
  4629 ;; Defined at:
  4630 ;;		line 55 in file "eusart_mdb.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;		None
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, status,2
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;Total ram usage:        0 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    2
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_mdb_init
  4655 ;;		_cctalk_init
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text5
  4660  013630                     __ptext5:
  4661                           	opt stack 0
  4662  013630                     _eusartmdb_Initialize:
  4663                           	opt stack 26
  4664                           
  4665                           ;eusart_mdb.c: 60: BAUD1CON = 0x08;
  4666                           
  4667                           ;incstack = 0
  4668  013630  0E08               	movlw	8
  4669  013632  6E9F               	movwf	3999,c	;volatile
  4670                           
  4671                           ;eusart_mdb.c: 63: RC1STA = 0xD0;
  4672  013634  0ED0               	movlw	208
  4673  013636  6E9D               	movwf	3997,c	;volatile
  4674                           
  4675                           ;eusart_mdb.c: 66: TX1STA = 0xEC;
  4676  013638  0EEC               	movlw	236
  4677  01363A  6E9E               	movwf	3998,c	;volatile
  4678                           
  4679                           ;eusart_mdb.c: 69: SP1BRGL = 0x38;
  4680  01363C  0E38               	movlw	56
  4681  01363E  6E9B               	movwf	3995,c	;volatile
  4682                           
  4683                           ;eusart_mdb.c: 72: SP1BRGH = 0x01;
  4684  013640  0E01               	movlw	1
  4685  013642  6E9C               	movwf	3996,c	;volatile
  4686  013644  0012               	return		;funcret
  4687  013646                     __end_of_eusartmdb_Initialize:
  4688                           	opt stack 0
  4689                           tblptru	equ	0xFF8
  4690                           tblptrh	equ	0xFF7
  4691                           tblptrl	equ	0xFF6
  4692                           tablat	equ	0xFF5
  4693                           prodh	equ	0xFF4
  4694                           prodl	equ	0xFF3
  4695                           postinc0	equ	0xFEE
  4696                           wreg	equ	0xFE8
  4697                           postdec1	equ	0xFE5
  4698                           fsr1h	equ	0xFE2
  4699                           fsr1l	equ	0xFE1
  4700                           indf2	equ	0xFDF
  4701                           fsr2h	equ	0xFDA
  4702                           fsr2l	equ	0xFD9
  4703                           status	equ	0xFD8
  4704                           
  4705 ;; *************** function _find_lowprice *****************
  4706 ;; Defined at:
  4707 ;;		line 201 in file "dispense.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;		None
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  i               1   19[COMRAM] unsigned char 
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;Total ram usage:        2 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    2
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_vend_init
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           	psect	text6
  4736  012F68                     __ptext6:
  4737                           	opt stack 0
  4738  012F68                     _find_lowprice:
  4739                           	opt stack 27
  4740                           
  4741                           ;dispense.c: 203: char i = 0;
  4742                           
  4743                           ;incstack = 0
  4744  012F68  0E00               	movlw	0
  4745  012F6A  6E1E               	movwf	find_lowprice@i,c
  4746                           
  4747                           ;dispense.c: 204: lowprice = pricevend[0];
  4748  012F6C  C07F  F035         	movff	_pricevend,_lowprice	;volatile
  4749                           
  4750                           ;dispense.c: 205: while(i < 8)
  4751  012F70  D017               	goto	l4815
  4752  012F72                     
  4753                           ;dispense.c: 206: {
  4754                           ;dispense.c: 207: if(lowprice > pricevend[i])
  4755  012F72  501E               	movf	find_lowprice@i,w,c
  4756  012F74  0D01               	mullw	1
  4757  012F76  0E7F               	movlw	low _pricevend
  4758  012F78  24F3               	addwf	prodl,w,c
  4759  012F7A  6ED9               	movwf	fsr2l,c
  4760  012F7C  0E00               	movlw	high _pricevend
  4761  012F7E  20F4               	addwfc	prodh,w,c
  4762  012F80  6EDA               	movwf	fsr2h,c
  4763  012F82  5035               	movf	_lowprice,w,c	;volatile
  4764  012F84  5CDE               	subwf	postinc2,w,c
  4765  012F86  B0D8               	btfsc	status,0,c
  4766  012F88  D00A               	goto	l4817
  4767                           
  4768                           ;dispense.c: 208: {
  4769                           ;dispense.c: 209: lowprice = pricevend[i];
  4770  012F8A  501E               	movf	find_lowprice@i,w,c
  4771  012F8C  0D01               	mullw	1
  4772  012F8E  0E7F               	movlw	low _pricevend
  4773  012F90  24F3               	addwf	prodl,w,c
  4774  012F92  6ED9               	movwf	fsr2l,c
  4775  012F94  0E00               	movlw	high _pricevend
  4776  012F96  20F4               	addwfc	prodh,w,c
  4777  012F98  6EDA               	movwf	fsr2h,c
  4778  012F9A  50DF               	movf	indf2,w,c
  4779  012F9C  6E35               	movwf	_lowprice,c	;volatile
  4780  012F9E                     l4817:
  4781                           
  4782                           ;dispense.c: 210: }
  4783                           ;dispense.c: 211: i++;
  4784  012F9E  2A1E               	incf	find_lowprice@i,f,c
  4785  012FA0                     l4815:
  4786  012FA0  0E07               	movlw	7
  4787  012FA2  641E               	cpfsgt	find_lowprice@i,c
  4788  012FA4  D7E6               	goto	l4816
  4789  012FA6  0012               	return	
  4790  012FA8                     __end_of_find_lowprice:
  4791                           	opt stack 0
  4792                           tblptru	equ	0xFF8
  4793                           tblptrh	equ	0xFF7
  4794                           tblptrl	equ	0xFF6
  4795                           tablat	equ	0xFF5
  4796                           prodh	equ	0xFF4
  4797                           prodl	equ	0xFF3
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           postdec1	equ	0xFE5
  4801                           fsr1h	equ	0xFE2
  4802                           fsr1l	equ	0xFE1
  4803                           indf2	equ	0xFDF
  4804                           postinc2	equ	0xFDE
  4805                           fsr2h	equ	0xFDA
  4806                           fsr2l	equ	0xFD9
  4807                           status	equ	0xFD8
  4808                           
  4809 ;; *************** function _find_highprice *****************
  4810 ;; Defined at:
  4811 ;;		line 187 in file "dispense.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;		None
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  i               1   19[COMRAM] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;                  1    wreg      void 
  4818 ;; Registers used:
  4819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;Total ram usage:        2 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    2
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_vend_init
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text7
  4840  012FA8                     __ptext7:
  4841                           	opt stack 0
  4842  012FA8                     _find_highprice:
  4843                           	opt stack 27
  4844                           
  4845                           ;dispense.c: 189: char i = 0;
  4846                           
  4847                           ;incstack = 0
  4848  012FA8  0E00               	movlw	0
  4849  012FAA  6E1E               	movwf	find_highprice@i,c
  4850                           
  4851                           ;dispense.c: 190: highprice = pricevend[0];
  4852  012FAC  C07F  F036         	movff	_pricevend,_highprice	;volatile
  4853                           
  4854                           ;dispense.c: 191: while(i < 8)
  4855  012FB0  D017               	goto	l4808
  4856  012FB2                     
  4857                           ;dispense.c: 192: {
  4858                           ;dispense.c: 193: if(highprice < pricevend[i])
  4859  012FB2  501E               	movf	find_highprice@i,w,c
  4860  012FB4  0D01               	mullw	1
  4861  012FB6  0E7F               	movlw	low _pricevend
  4862  012FB8  24F3               	addwf	prodl,w,c
  4863  012FBA  6ED9               	movwf	fsr2l,c
  4864  012FBC  0E00               	movlw	high _pricevend
  4865  012FBE  20F4               	addwfc	prodh,w,c
  4866  012FC0  6EDA               	movwf	fsr2h,c
  4867  012FC2  50DE               	movf	postinc2,w,c
  4868  012FC4  5C36               	subwf	_highprice,w,c	;volatile
  4869  012FC6  B0D8               	btfsc	status,0,c
  4870  012FC8  D00A               	goto	l4810
  4871                           
  4872                           ;dispense.c: 194: {
  4873                           ;dispense.c: 195: highprice = pricevend[i];
  4874  012FCA  501E               	movf	find_highprice@i,w,c
  4875  012FCC  0D01               	mullw	1
  4876  012FCE  0E7F               	movlw	low _pricevend
  4877  012FD0  24F3               	addwf	prodl,w,c
  4878  012FD2  6ED9               	movwf	fsr2l,c
  4879  012FD4  0E00               	movlw	high _pricevend
  4880  012FD6  20F4               	addwfc	prodh,w,c
  4881  012FD8  6EDA               	movwf	fsr2h,c
  4882  012FDA  50DF               	movf	indf2,w,c
  4883  012FDC  6E36               	movwf	_highprice,c	;volatile
  4884  012FDE                     l4810:
  4885                           
  4886                           ;dispense.c: 196: }
  4887                           ;dispense.c: 197: i++;
  4888  012FDE  2A1E               	incf	find_highprice@i,f,c
  4889  012FE0                     l4808:
  4890  012FE0  0E07               	movlw	7
  4891  012FE2  641E               	cpfsgt	find_highprice@i,c
  4892  012FE4  D7E6               	goto	l4809
  4893  012FE6  0012               	return	
  4894  012FE8                     __end_of_find_highprice:
  4895                           	opt stack 0
  4896                           tblptru	equ	0xFF8
  4897                           tblptrh	equ	0xFF7
  4898                           tblptrl	equ	0xFF6
  4899                           tablat	equ	0xFF5
  4900                           prodh	equ	0xFF4
  4901                           prodl	equ	0xFF3
  4902                           postinc0	equ	0xFEE
  4903                           wreg	equ	0xFE8
  4904                           postdec1	equ	0xFE5
  4905                           fsr1h	equ	0xFE2
  4906                           fsr1l	equ	0xFE1
  4907                           indf2	equ	0xFDF
  4908                           postinc2	equ	0xFDE
  4909                           fsr2h	equ	0xFDA
  4910                           fsr2l	equ	0xFD9
  4911                           status	equ	0xFD8
  4912                           
  4913 ;; *************** function _DAC1_SetOutput *****************
  4914 ;; Defined at:
  4915 ;;		line 66 in file "mcc_generated_files/dac1.c"
  4916 ;; Parameters:    Size  Location     Type
  4917 ;;  inputData       1    wreg     unsigned char 
  4918 ;; Auto vars:     Size  Location     Type
  4919 ;;  inputData       1   18[COMRAM] unsigned char 
  4920 ;; Return value:  Size  Location     Type
  4921 ;;                  1    wreg      void 
  4922 ;; Registers used:
  4923 ;;		wreg
  4924 ;; Tracked objects:
  4925 ;;		On entry : 0/0
  4926 ;;		On exit  : 0/0
  4927 ;;		Unchanged: 0/0
  4928 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4933 ;;Total ram usage:        1 bytes
  4934 ;; Hardware stack levels used:    1
  4935 ;; Hardware stack levels required when called:    2
  4936 ;; This function calls:
  4937 ;;		Nothing
  4938 ;; This function is called by:
  4939 ;;		_vend_init
  4940 ;; This function uses a non-reentrant model
  4941 ;;
  4942                           
  4943                           	psect	text8
  4944  01377E                     __ptext8:
  4945                           	opt stack 0
  4946  01377E                     _DAC1_SetOutput:
  4947                           	opt stack 27
  4948                           
  4949                           ;incstack = 0
  4950                           ;DAC1_SetOutput@inputData stored from wreg
  4951  01377E  6E1D               	movwf	DAC1_SetOutput@inputData,c
  4952                           
  4953                           ;dac1.c: 68: DAC1CON1 = inputData;
  4954  013780  C01D  FF34         	movff	DAC1_SetOutput@inputData,3892	;volatile
  4955  013784  0012               	return		;funcret
  4956  013786                     __end_of_DAC1_SetOutput:
  4957                           	opt stack 0
  4958                           tblptru	equ	0xFF8
  4959                           tblptrh	equ	0xFF7
  4960                           tblptrl	equ	0xFF6
  4961                           tablat	equ	0xFF5
  4962                           prodh	equ	0xFF4
  4963                           prodl	equ	0xFF3
  4964                           postinc0	equ	0xFEE
  4965                           wreg	equ	0xFE8
  4966                           postdec1	equ	0xFE5
  4967                           fsr1h	equ	0xFE2
  4968                           fsr1l	equ	0xFE1
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _price_check *****************
  4976 ;; Defined at:
  4977 ;;		line 10 in file "dispense.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  chanlinkbit     1    6[BANK0 ] unsigned char 
  4982 ;;  savebut         1    5[BANK0 ] unsigned char 
  4983 ;;  savechan        1    4[BANK0 ] unsigned char 
  4984 ;;  i               1    7[BANK0 ] unsigned char 
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      unsigned char 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:        6 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    8
  5001 ;; This function calls:
  5002 ;;		_DATAEE_ReadByte
  5003 ;;		_butin
  5004 ;;		_credit_check
  5005 ;;		_credit_subtract
  5006 ;;		_dispense
  5007 ;;		_get_channel
  5008 ;;		_give_change
  5009 ;;		_lcd_string
  5010 ;;		_note_disable
  5011 ;; This function is called by:
  5012 ;;		_main
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           	psect	text9
  5017  0105B2                     __ptext9:
  5018                           	opt stack 0
  5019  0105B2                     _price_check:
  5020                           	opt stack 22
  5021                           
  5022                           ;dispense.c: 13: channel = 0x00;
  5023                           
  5024                           ;incstack = 0
  5025  0105B2  0E00               	movlw	0
  5026  0105B4  6E32               	movwf	_channel,c	;volatile
  5027                           
  5028                           ;dispense.c: 14: cash = credit_check();
  5029  0105B6  EC7C  F09A         	call	_credit_check	;wreg free
  5030  0105BA  6E3B               	movwf	_cash,c	;volatile
  5031                           
  5032                           ;dispense.c: 15: if(lowprice > cash)
  5033  0105BC  5035               	movf	_lowprice,w,c	;volatile
  5034  0105BE  5C3B               	subwf	_cash,w,c	;volatile
  5035  0105C0  B0D8               	btfsc	status,0,c
  5036  0105C2  D002               	goto	l4764
  5037                           
  5038                           ;dispense.c: 16: {
  5039                           ;dispense.c: 17: return 0;
  5040  0105C4  0E00               	movlw	0
  5041  0105C6  0012               	return	
  5042  0105C8                     l4764:
  5043                           
  5044                           ;dispense.c: 18: }
  5045                           ;dispense.c: 19: if(highprice <= cash && !venflags.hiprice)
  5046  0105C8  5036               	movf	_highprice,w,c	;volatile
  5047  0105CA  5C3B               	subwf	_cash,w,c	;volatile
  5048  0105CC  B0D8               	btfsc	status,0,c
  5049  0105CE  B82F               	btfsc	_venflags+2,4,c
  5050  0105D0  D003               	goto	l4766
  5051                           
  5052                           ;dispense.c: 20: {
  5053                           ;dispense.c: 21: note_disable();
  5054  0105D2  ECB0  F09B         	call	_note_disable	;wreg free
  5055                           
  5056                           ;dispense.c: 22: venflags.hiprice = 1;
  5057  0105D6  882F               	bsf	_venflags+2,4,c
  5058  0105D8                     l4766:
  5059                           
  5060                           ;dispense.c: 23: }
  5061                           ;dispense.c: 24: chanmask = 0;
  5062  0105D8  0E00               	movlw	0
  5063  0105DA  6E34               	movwf	_chanmask,c	;volatile
  5064                           
  5065                           ;dispense.c: 25: char i = 7;
  5066  0105DC  0E07               	movlw	7
  5067  0105DE  0100               	movlb	0	; () banked
  5068  0105E0  6FE8               	movwf	price_check@i& (0+255),b
  5069                           
  5070                           ;dispense.c: 26: while(i > 0x00)
  5071  0105E2  D013               	goto	l4767
  5072  0105E4                     
  5073                           ; BSR set to: 0
  5074                           ;dispense.c: 27: {
  5075                           ;dispense.c: 28: if(pricevend[i] <= cash)
  5076                           
  5077                           ; BSR set to: 0
  5078  0105E4  51E8               	movf	price_check@i& (0+255),w,b
  5079  0105E6  0D01               	mullw	1
  5080  0105E8  0E7F               	movlw	low _pricevend
  5081  0105EA  24F3               	addwf	prodl,w,c
  5082  0105EC  6ED9               	movwf	fsr2l,c
  5083  0105EE  0E00               	movlw	high _pricevend
  5084  0105F0  20F4               	addwfc	prodh,w,c
  5085  0105F2  6EDA               	movwf	fsr2h,c
  5086  0105F4  50DE               	movf	postinc2,w,c
  5087  0105F6  5C3B               	subwf	_cash,w,c	;volatile
  5088  0105F8  A0D8               	btfss	status,0,c
  5089  0105FA  D003               	goto	l4769
  5090                           
  5091                           ; BSR set to: 0
  5092                           ;dispense.c: 29: {
  5093                           ;dispense.c: 30: chanmask = chanmask | 0x01;
  5094  0105FC  5034               	movf	_chanmask,w,c	;volatile
  5095  0105FE  0901               	iorlw	1
  5096  010600  6E34               	movwf	_chanmask,c	;volatile
  5097  010602                     l4769:
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;dispense.c: 31: }
  5101                           ;dispense.c: 32: chanmask = chanmask << 1;
  5102  010602  5034               	movf	_chanmask,w,c	;volatile
  5103  010604  2434               	addwf	_chanmask,w,c	;volatile
  5104  010606  6E34               	movwf	_chanmask,c	;volatile
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;dispense.c: 33: i--;
  5108  010608  07E8               	decf	price_check@i& (0+255),f,b
  5109  01060A                     l4767:
  5110                           
  5111                           ; BSR set to: 0
  5112                           
  5113                           ; BSR set to: 0
  5114  01060A  51E8               	movf	price_check@i& (0+255),w,b
  5115  01060C  A4D8               	btfss	status,2,c
  5116  01060E  D7EA               	goto	l4768
  5117                           
  5118                           ; BSR set to: 0
  5119                           ;dispense.c: 34: }
  5120                           ;dispense.c: 35: if(pricevend[0] <= cash)
  5121                           
  5122                           ; BSR set to: 0
  5123  010610  517F               	movf	_pricevend& (0+255),w,b	;volatile
  5124  010612  5C3B               	subwf	_cash,w,c	;volatile
  5125  010614  A0D8               	btfss	status,0,c
  5126  010616  D003               	goto	l4771
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;dispense.c: 36: {
  5130                           ;dispense.c: 37: chanmask = chanmask | 0x01;
  5131  010618  5034               	movf	_chanmask,w,c	;volatile
  5132  01061A  0901               	iorlw	1
  5133  01061C  6E34               	movwf	_chanmask,c	;volatile
  5134  01061E                     l4771:
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;dispense.c: 38: }
  5138                           ;dispense.c: 39: chanmask = chanmask & ~errormask;
  5139  01061E  5033               	movf	_errormask,w,c	;volatile
  5140  010620  0AFF               	xorlw	255
  5141  010622  1434               	andwf	_chanmask,w,c	;volatile
  5142  010624  6E34               	movwf	_chanmask,c	;volatile
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;dispense.c: 40: venflags.error = 0;
  5146  010626  922D               	bcf	_venflags,1,c
  5147                           
  5148                           ; BSR set to: 0
  5149                           ;dispense.c: 44: LATCbits.LC2 = 1;
  5150  010628  8485               	bsf	3973,2,c	;volatile
  5151                           
  5152                           ;dispense.c: 45: LATB = chanmask & 0x0F;
  5153  01062A  5034               	movf	_chanmask,w,c	;volatile
  5154  01062C  0B0F               	andlw	15
  5155  01062E  6E84               	movwf	3972,c	;volatile
  5156                           
  5157                           ;dispense.c: 46: LATD = chanmask & 0xF0;
  5158  010630  5034               	movf	_chanmask,w,c	;volatile
  5159  010632  0BF0               	andlw	240
  5160  010634  6E86               	movwf	3974,c	;volatile
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;dispense.c: 47: buttons = butin();
  5164  010636  EC4F  F095         	call	_butin	;wreg free
  5165  01063A  6E3A               	movwf	_buttons,c	;volatile
  5166                           
  5167                           ;dispense.c: 48: if((buttons & errormask) != 0x00)
  5168  01063C  503A               	movf	_buttons,w,c	;volatile
  5169  01063E  1433               	andwf	_errormask,w,c	;volatile
  5170  010640  0900               	iorlw	0
  5171  010642  B4D8               	btfsc	status,2,c
  5172  010644  D014               	goto	l4772
  5173                           
  5174                           ;dispense.c: 49: {
  5175                           ;dispense.c: 50: if(!venflags.pricedisplay)
  5176  010646  B42F               	btfsc	_venflags+2,2,c
  5177  010648  D010               	goto	l4773
  5178                           
  5179                           ;dispense.c: 51: {
  5180                           ;dispense.c: 52: lcd_string(emptymsg, line1);
  5181  01064A  0EAC               	movlw	low _emptymsg
  5182  01064C  6E24               	movwf	lcd_string@lcdstring,c
  5183  01064E  0EFF               	movlw	high _emptymsg
  5184  010650  6E25               	movwf	lcd_string@lcdstring+1,c
  5185  010652  0E86               	movlw	low _line1
  5186  010654  6EF6               	movwf	tblptrl,c
  5187  010656                     	if	1	;There is more than 1 active tblptr byte
  5188  010656  0EFB               	movlw	high _line1
  5189  010658  6EF7               	movwf	tblptrh,c
  5190  01065A                     	endif
  5191  01065A                     	if	1	;There are 3 active tblptr bytes
  5192  01065A  0E00               	movlw	low (_line1 shr (0+16))
  5193  01065C  6EF8               	movwf	tblptru,c
  5194  01065E                     	endif
  5195  01065E  0008               	tblrd		*
  5196  010660  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5197  010664  EC5D  F08A         	call	_lcd_string	;wreg free
  5198                           
  5199                           ;dispense.c: 53: venflags.pricedisplay = 1;
  5200  010668  842F               	bsf	_venflags+2,2,c
  5201  01066A                     l4773:
  5202                           
  5203                           ;dispense.c: 54: }
  5204                           ;dispense.c: 56: return 0;
  5205  01066A  0E00               	movlw	0
  5206  01066C  0012               	return	
  5207  01066E                     l4772:
  5208                           
  5209                           ;dispense.c: 57: }
  5210                           ;dispense.c: 58: buttons = buttons & chanmask;
  5211  01066E  503A               	movf	_buttons,w,c	;volatile
  5212  010670  1434               	andwf	_chanmask,w,c	;volatile
  5213  010672  6E3A               	movwf	_buttons,c	;volatile
  5214                           
  5215                           ;dispense.c: 59: if(buttons != 0)
  5216  010674  503A               	movf	_buttons,w,c	;volatile
  5217  010676  B4D8               	btfsc	status,2,c
  5218  010678  D056               	goto	l4774
  5219                           
  5220                           ;dispense.c: 60: {
  5221                           ;dispense.c: 61: channel = get_channel(buttons);
  5222  01067A  503A               	movf	_buttons,w,c	;volatile
  5223  01067C  ECCB  F09A         	call	_get_channel
  5224  010680  6E32               	movwf	_channel,c	;volatile
  5225                           
  5226                           ;dispense.c: 62: vendprice = pricevend[channel];
  5227  010682  5032               	movf	_channel,w,c	;volatile
  5228  010684  0D01               	mullw	1
  5229  010686  0E7F               	movlw	low _pricevend
  5230  010688  24F3               	addwf	prodl,w,c
  5231  01068A  6ED9               	movwf	fsr2l,c
  5232  01068C  0E00               	movlw	high _pricevend
  5233  01068E  20F4               	addwfc	prodh,w,c
  5234  010690  6EDA               	movwf	fsr2h,c
  5235  010692  50DF               	movf	indf2,w,c
  5236  010694  6E39               	movwf	_vendprice,c	;volatile
  5237                           
  5238                           ;dispense.c: 63: uint8_t savechan = channel;
  5239  010696  C032  F0E5         	movff	_channel,price_check@savechan	;volatile
  5240                           
  5241                           ;dispense.c: 64: uint8_t savebut = buttons;
  5242  01069A  C03A  F0E6         	movff	_buttons,price_check@savebut	;volatile
  5243                           
  5244                           ;dispense.c: 66: if(channel > 0x03)
  5245  01069E  0E03               	movlw	3
  5246  0106A0  6432               	cpfsgt	_channel,c	;volatile
  5247  0106A2  D004               	goto	l4775
  5248                           
  5249                           ;dispense.c: 67: {
  5250                           ;dispense.c: 68: buttons = 0x80;
  5251  0106A4  0E80               	movlw	128
  5252  0106A6  6E3A               	movwf	_buttons,c	;volatile
  5253                           
  5254                           ;dispense.c: 69: channel = 0x07;
  5255  0106A8  0E07               	movlw	7
  5256  0106AA  6E32               	movwf	_channel,c	;volatile
  5257  0106AC                     l4775:
  5258                           
  5259                           ;dispense.c: 70: }
  5260                           ;dispense.c: 71: dispense(channel);
  5261  0106AC  5032               	movf	_channel,w,c	;volatile
  5262  0106AE  ECDD  F096         	call	_dispense
  5263                           
  5264                           ;dispense.c: 72: channel = savechan;
  5265  0106B2  C0E5  F032         	movff	price_check@savechan,_channel	;volatile
  5266                           
  5267                           ;dispense.c: 73: buttons = savebut;
  5268  0106B6  C0E6  F03A         	movff	price_check@savebut,_buttons	;volatile
  5269                           
  5270                           ;dispense.c: 74: uint8_t chanlinkbit = DATAEE_ReadByte(chan1linkbits + channel);
  5271  0106BA  0E44               	movlw	low _chan1linkbits
  5272  0106BC  6EF6               	movwf	tblptrl,c
  5273  0106BE                     	if	1	;There is more than 1 active tblptr byte
  5274  0106BE  0EFB               	movlw	high _chan1linkbits
  5275  0106C0  6EF7               	movwf	tblptrh,c
  5276  0106C2                     	endif
  5277  0106C2                     	if	1	;There are 3 active tblptr bytes
  5278  0106C2  0E00               	movlw	low (_chan1linkbits shr (0+16))
  5279  0106C4  6EF8               	movwf	tblptru,c
  5280  0106C6                     	endif
  5281  0106C6  0009               	tblrd		*+
  5282  0106C8  CFF5 F0E3          	movff	tablat,??_price_check
  5283  0106CC  0009               	tblrd		*+
  5284  0106CE  CFF5 F0E4          	movff	tablat,??_price_check+1
  5285  0106D2  5032               	movf	_channel,w,c	;volatile
  5286  0106D4  0100               	movlb	0	; () banked
  5287  0106D6  25E3               	addwf	??_price_check& (0+255),w,b
  5288  0106D8  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  5289  0106DA  0E00               	movlw	0
  5290  0106DC  21E4               	addwfc	(??_price_check+1)& (0+255),w,b
  5291  0106DE  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  5292  0106E0  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  5293  0106E4  0100               	movlb	0	; () banked
  5294  0106E6  6FE7               	movwf	price_check@chanlinkbit& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;dispense.c: 75: if(chanlinkbit != 0x00 && !venflags.error)
  5298  0106E8  51E7               	movf	price_check@chanlinkbit& (0+255),w,b
  5299  0106EA  A4D8               	btfss	status,2,c
  5300                           
  5301                           ; BSR set to: 0
  5302  0106EC  B22D               	btfsc	_venflags,1,c
  5303  0106EE  D007               	goto	l4776
  5304                           
  5305                           ; BSR set to: 0
  5306                           ;dispense.c: 76: {
  5307                           ;dispense.c: 77: channel = get_channel(chanlinkbit);
  5308  0106F0  51E7               	movf	price_check@chanlinkbit& (0+255),w,b
  5309  0106F2  ECCB  F09A         	call	_get_channel
  5310  0106F6  6E32               	movwf	_channel,c	;volatile
  5311                           
  5312                           ;dispense.c: 78: dispense(channel);
  5313  0106F8  5032               	movf	_channel,w,c	;volatile
  5314  0106FA  ECDD  F096         	call	_dispense
  5315  0106FE                     l4776:
  5316                           
  5317                           ;dispense.c: 79: }
  5318                           ;dispense.c: 80: credit_subtract(vendprice);
  5319  0106FE  5039               	movf	_vendprice,w,c	;volatile
  5320  010700  EC33  F096         	call	_credit_subtract
  5321                           
  5322                           ;dispense.c: 81: venflags.hiprice = 0;
  5323  010704  982F               	bcf	_venflags+2,4,c
  5324                           
  5325                           ;dispense.c: 82: cash = credit_check();
  5326  010706  EC7C  F09A         	call	_credit_check	;wreg free
  5327  01070A  6E3B               	movwf	_cash,c	;volatile
  5328                           
  5329                           ;dispense.c: 83: if(cash > 0 && !venflags.nochange && !venflags.error)
  5330  01070C  503B               	movf	_cash,w,c	;volatile
  5331  01070E  A4D8               	btfss	status,2,c
  5332  010710  B62D               	btfsc	_venflags,3,c
  5333  010712  D005               	goto	l4777
  5334  010714  B22D               	btfsc	_venflags,1,c
  5335  010716  D003               	goto	l4777
  5336                           
  5337                           ;dispense.c: 84: {
  5338                           ;dispense.c: 86: give_change(cash);
  5339  010718  503B               	movf	_cash,w,c	;volatile
  5340  01071A  EC89  F096         	call	_give_change
  5341  01071E                     l4777:
  5342                           
  5343                           ;dispense.c: 87: }
  5344                           ;dispense.c: 88: LATAbits.LA5 = 0;
  5345  01071E  9A83               	bcf	3971,5,c	;volatile
  5346                           
  5347                           ;dispense.c: 89: LATCbits.LC2 = 1;
  5348  010720  8485               	bsf	3973,2,c	;volatile
  5349                           
  5350                           ;dispense.c: 90: return 1;
  5351  010722  0E01               	movlw	1
  5352  010724  0012               	return	
  5353  010726                     l4774:
  5354                           
  5355                           ;dispense.c: 92: else
  5356                           ;dispense.c: 93: {
  5357                           ;dispense.c: 94: venflags.pricedisplay = 0;
  5358  010726  942F               	bcf	_venflags+2,2,c
  5359                           
  5360                           ;dispense.c: 95: venflags.credisplay = 1;
  5361  010728  882D               	bsf	_venflags,4,c
  5362                           
  5363                           ;dispense.c: 96: }
  5364                           ;dispense.c: 97: return 0;
  5365  01072A  0E00               	movlw	0
  5366  01072C  0012               	return	
  5367  01072E                     __end_of_price_check:
  5368                           	opt stack 0
  5369                           tblptru	equ	0xFF8
  5370                           tblptrh	equ	0xFF7
  5371                           tblptrl	equ	0xFF6
  5372                           tablat	equ	0xFF5
  5373                           prodh	equ	0xFF4
  5374                           prodl	equ	0xFF3
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           postdec1	equ	0xFE5
  5378                           fsr1h	equ	0xFE2
  5379                           fsr1l	equ	0xFE1
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function _note_disable *****************
  5387 ;; Defined at:
  5388 ;;		line 126 in file "mdb.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;		None
  5391 ;; Auto vars:     Size  Location     Type
  5392 ;;		None
  5393 ;; Return value:  Size  Location     Type
  5394 ;;                  1    wreg      void 
  5395 ;; Registers used:
  5396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5397 ;; Tracked objects:
  5398 ;;		On entry : 0/0
  5399 ;;		On exit  : 0/0
  5400 ;;		Unchanged: 0/0
  5401 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;Total ram usage:        0 bytes
  5407 ;; Hardware stack levels used:    1
  5408 ;; Hardware stack levels required when called:    7
  5409 ;; This function calls:
  5410 ;;		_mdb_noten
  5411 ;; This function is called by:
  5412 ;;		_price_check
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text10
  5417  013760                     __ptext10:
  5418                           	opt stack 0
  5419  013760                     _note_disable:
  5420                           	opt stack 22
  5421                           
  5422                           ;mdb.c: 128: noteen_byte = 0x00;
  5423                           
  5424                           ;incstack = 0
  5425  013760  0E00               	movlw	0
  5426  013762  6E3F               	movwf	_noteen_byte,c	;volatile
  5427                           
  5428                           ;mdb.c: 129: mdb_noten();
  5429  013764  EC50  F097         	call	_mdb_noten	;wreg free
  5430  013768  0012               	return		;funcret
  5431  01376A                     __end_of_note_disable:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           postinc0	equ	0xFEE
  5440                           wreg	equ	0xFE8
  5441                           postdec1	equ	0xFE5
  5442                           fsr1h	equ	0xFE2
  5443                           fsr1l	equ	0xFE1
  5444                           indf2	equ	0xFDF
  5445                           postinc2	equ	0xFDE
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _mdb_noten *****************
  5451 ;; Defined at:
  5452 ;;		line 138 in file "mdb.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;		None
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  1    wreg      void 
  5459 ;; Registers used:
  5460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        0 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:    6
  5473 ;; This function calls:
  5474 ;;		_init_mdbdata
  5475 ;;		_mdb_comm
  5476 ;; This function is called by:
  5477 ;;		_mdb_init
  5478 ;;		_note_disable
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           	psect	text11
  5483  012EA0                     __ptext11:
  5484                           	opt stack 0
  5485  012EA0                     _mdb_noten:
  5486                           	opt stack 22
  5487                           
  5488                           ;mdb.c: 140: if(venflags.hiprice)
  5489                           
  5490                           ;incstack = 0
  5491  012EA0  A82F               	btfss	_venflags+2,4,c
  5492  012EA2  D002               	goto	l3228
  5493                           
  5494                           ;mdb.c: 141: {
  5495                           ;mdb.c: 142: noteen_byte = 0x00;
  5496  012EA4  0E00               	movlw	0
  5497  012EA6  6E3F               	movwf	_noteen_byte,c	;volatile
  5498  012EA8                     l3228:
  5499                           
  5500                           ;mdb.c: 143: }
  5501                           ;mdb.c: 145: init_mdbdata(0x00);
  5502  012EA8  0E00               	movlw	0
  5503  012EAA  EC31  F09A         	call	_init_mdbdata
  5504                           
  5505                           ;mdb.c: 147: mcount = 3;
  5506  012EAE  0E03               	movlw	3
  5507  012EB0  0100               	movlb	0	; () banked
  5508  012EB2  6FB0               	movwf	_mcount& (0+255),b
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;mdb.c: 149: mdbdata[0] = 0x00;
  5512  012EB4  0E00               	movlw	0
  5513  012EB6  6F60               	movwf	_mdbdata& (0+255),b
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;mdb.c: 150: mdbdata[1] = 0x00;
  5517  012EB8  0E00               	movlw	0
  5518  012EBA  6F61               	movwf	(_mdbdata+1)& (0+255),b
  5519                           
  5520                           ; BSR set to: 0
  5521                           ;mdb.c: 152: mdbdata[2] = noteen_byte;
  5522  012EBC  C03F  F062         	movff	_noteen_byte,_mdbdata+2	;volatile
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;mdb.c: 154: mdbdata[3] = 0x00;
  5526  012EC0  0E00               	movlw	0
  5527  012EC2  6F63               	movwf	(_mdbdata+3)& (0+255),b
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;mdb.c: 155: mcount = mdb_comm(note_type, mcount);
  5531  012EC4  C0B0  F024         	movff	_mcount,mdb_comm@mcount
  5532  012EC8  0E7E               	movlw	low _note_type
  5533  012ECA  6EF6               	movwf	tblptrl,c
  5534  012ECC                     	if	1	;There is more than 1 active tblptr byte
  5535  012ECC  0EFB               	movlw	high _note_type
  5536  012ECE  6EF7               	movwf	tblptrh,c
  5537  012ED0                     	endif
  5538  012ED0                     	if	1	;There are 3 active tblptr bytes
  5539  012ED0  0E00               	movlw	low (_note_type shr (0+16))
  5540  012ED2  6EF8               	movwf	tblptru,c
  5541  012ED4                     	endif
  5542  012ED4  0008               	tblrd		*
  5543  012ED6  50F5               	movf	tablat,w,c
  5544  012ED8  EC72  F088         	call	_mdb_comm
  5545  012EDC  0100               	movlb	0	; () banked
  5546  012EDE  6FB0               	movwf	_mcount& (0+255),b
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;mdb.c: 156: mdbflags.vending = 0;
  5550  012EE0  9840               	bcf	_mdbflags,4,c
  5551                           
  5552                           ; BSR set to: 0
  5553  012EE2  0012               	return		;funcret
  5554  012EE4                     __end_of_mdb_noten:
  5555                           	opt stack 0
  5556                           tblptru	equ	0xFF8
  5557                           tblptrh	equ	0xFF7
  5558                           tblptrl	equ	0xFF6
  5559                           tablat	equ	0xFF5
  5560                           prodh	equ	0xFF4
  5561                           prodl	equ	0xFF3
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           postdec1	equ	0xFE5
  5565                           fsr1h	equ	0xFE2
  5566                           fsr1l	equ	0xFE1
  5567                           indf2	equ	0xFDF
  5568                           postinc2	equ	0xFDE
  5569                           fsr2h	equ	0xFDA
  5570                           fsr2l	equ	0xFD9
  5571                           status	equ	0xFD8
  5572                           
  5573 ;; *************** function _give_change *****************
  5574 ;; Defined at:
  5575 ;;		line 21 in file "hopper.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  paycash         1    wreg     unsigned char 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  paycash         1   31[COMRAM] unsigned char 
  5580 ;;  i               1   32[COMRAM] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;                  1    wreg      void 
  5583 ;; Registers used:
  5584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5594 ;;Total ram usage:        2 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    6
  5597 ;; This function calls:
  5598 ;;		_DATAEE_ReadByte
  5599 ;;		___lbdiv
  5600 ;;		_credit_add
  5601 ;;		_credit_subtract
  5602 ;;		_hopper_pay
  5603 ;; This function is called by:
  5604 ;;		_price_check
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           	psect	text12
  5609  012D12                     __ptext12:
  5610                           	opt stack 0
  5611  012D12                     _give_change:
  5612                           	opt stack 23
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;incstack = 0
  5616                           ;give_change@paycash stored from wreg
  5617  012D12  6E2A               	movwf	give_change@paycash,c
  5618                           
  5619                           ;hopper.c: 23: cash = paycash;
  5620  012D14  C02A  F03B         	movff	give_change@paycash,_cash	;volatile
  5621                           
  5622                           ;hopper.c: 24: credit_subtract(cash);
  5623  012D18  503B               	movf	_cash,w,c	;volatile
  5624  012D1A  EC33  F096         	call	_credit_subtract
  5625                           
  5626                           ;hopper.c: 25: uint8_t i = DATAEE_ReadByte(hopcoin);
  5627  012D1E  0E46               	movlw	low _hopcoin
  5628  012D20  6EF6               	movwf	tblptrl,c
  5629  012D22                     	if	1	;There is more than 1 active tblptr byte
  5630  012D22  0EFB               	movlw	high _hopcoin
  5631  012D24  6EF7               	movwf	tblptrh,c
  5632  012D26                     	endif
  5633  012D26                     	if	1	;There are 3 active tblptr bytes
  5634  012D26  0E00               	movlw	low (_hopcoin shr (0+16))
  5635  012D28  6EF8               	movwf	tblptru,c
  5636  012D2A                     	endif
  5637  012D2A  0009               	tblrd		*+
  5638  012D2C  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  5639  012D30  000A               	tblrd		*-
  5640  012D32  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  5641  012D36  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  5642  012D3A  6E2B               	movwf	give_change@i,c
  5643                           
  5644                           ;hopper.c: 26: change = paycash / i;
  5645  012D3C  C02B  F01D         	movff	give_change@i,___lbdiv@divisor
  5646  012D40  502A               	movf	give_change@paycash,w,c
  5647  012D42  EC70  F098         	call	___lbdiv
  5648  012D46  6E3E               	movwf	_change,c
  5649                           
  5650                           ;hopper.c: 27: change = hopper_pay(change);
  5651  012D48  503E               	movf	_change,w,c
  5652  012D4A  EC86  F093         	call	_hopper_pay
  5653  012D4E  6E3E               	movwf	_change,c
  5654                           
  5655                           ;hopper.c: 28: if(change > 0)
  5656  012D50  503E               	movf	_change,w,c
  5657  012D52  B4D8               	btfsc	status,2,c
  5658  012D54  0012               	return	
  5659                           
  5660                           ;hopper.c: 29: {
  5661                           ;hopper.c: 30: change = change * i;
  5662  012D56  503E               	movf	_change,w,c
  5663  012D58  022B               	mulwf	give_change@i,c
  5664  012D5A  CFF3 F03E          	movff	prodl,_change
  5665                           
  5666                           ;hopper.c: 31: credit_add(change);
  5667  012D5E  503E               	movf	_change,w,c
  5668  012D60  ECDA  F095         	call	_credit_add
  5669  012D64  0012               	return	
  5670  012D66                     __end_of_give_change:
  5671                           	opt stack 0
  5672                           tblptru	equ	0xFF8
  5673                           tblptrh	equ	0xFF7
  5674                           tblptrl	equ	0xFF6
  5675                           tablat	equ	0xFF5
  5676                           prodh	equ	0xFF4
  5677                           prodl	equ	0xFF3
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           postdec1	equ	0xFE5
  5681                           fsr1h	equ	0xFE2
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _credit_subtract *****************
  5690 ;; Defined at:
  5691 ;;		line 136 in file "vend.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;  credit          1    wreg     unsigned char 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;  credit          1   22[COMRAM] unsigned char 
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1    wreg      void 
  5698 ;; Registers used:
  5699 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;Total ram usage:        1 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:    3
  5712 ;; This function calls:
  5713 ;;		_DATAEE_ReadByte
  5714 ;;		_DATAEE_WriteByte
  5715 ;; This function is called by:
  5716 ;;		_give_change
  5717 ;;		_price_check
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           	psect	text13
  5722  012C66                     __ptext13:
  5723                           	opt stack 0
  5724  012C66                     _credit_subtract:
  5725                           	opt stack 25
  5726                           
  5727                           ;incstack = 0
  5728                           ;credit_subtract@credit stored from wreg
  5729  012C66  6E21               	movwf	credit_subtract@credit,c
  5730                           
  5731                           ;vend.c: 138: cash = DATAEE_ReadByte(credmem);
  5732  012C68  0E58               	movlw	low _credmem
  5733  012C6A  6EF6               	movwf	tblptrl,c
  5734  012C6C                     	if	1	;There is more than 1 active tblptr byte
  5735  012C6C  0EFB               	movlw	high _credmem
  5736  012C6E  6EF7               	movwf	tblptrh,c
  5737  012C70                     	endif
  5738  012C70                     	if	1	;There are 3 active tblptr bytes
  5739  012C70  0E00               	movlw	low (_credmem shr (0+16))
  5740  012C72  6EF8               	movwf	tblptru,c
  5741  012C74                     	endif
  5742  012C74  0009               	tblrd		*+
  5743  012C76  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  5744  012C7A  000A               	tblrd		*-
  5745  012C7C  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  5746  012C80  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  5747  012C84  6E3B               	movwf	_cash,c	;volatile
  5748                           
  5749                           ;vend.c: 139: cash = (cash - credit) & 0xFF;
  5750  012C86  5021               	movf	credit_subtract@credit,w,c
  5751  012C88  0800               	sublw	0
  5752  012C8A  243B               	addwf	_cash,w,c	;volatile
  5753  012C8C  6E3B               	movwf	_cash,c	;volatile
  5754                           
  5755                           ;vend.c: 140: DATAEE_WriteByte(credmem, cash);
  5756  012C8E  0E58               	movlw	low _credmem
  5757  012C90  6EF6               	movwf	tblptrl,c
  5758  012C92                     	if	1	;There is more than 1 active tblptr byte
  5759  012C92  0EFB               	movlw	high _credmem
  5760  012C94  6EF7               	movwf	tblptrh,c
  5761  012C96                     	endif
  5762  012C96                     	if	1	;There are 3 active tblptr bytes
  5763  012C96  0E00               	movlw	low (_credmem shr (0+16))
  5764  012C98  6EF8               	movwf	tblptru,c
  5765  012C9A                     	endif
  5766  012C9A  0009               	tblrd		*+
  5767  012C9C  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  5768  012CA0  000A               	tblrd		*-
  5769  012CA2  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  5770  012CA6  C03B  F01F         	movff	_cash,DATAEE_WriteByte@bData	;volatile
  5771  012CAA  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
  5772                           
  5773                           ;vend.c: 141: if(cash == 0)
  5774  012CAE  503B               	movf	_cash,w,c	;volatile
  5775  012CB0  A4D8               	btfss	status,2,c
  5776  012CB2  0012               	return	
  5777                           
  5778                           ;vend.c: 142: {
  5779                           ;vend.c: 143: venflags.iscredit = 0;
  5780  012CB4  902D               	bcf	_venflags,0,c
  5781                           
  5782                           ;vend.c: 144: venflags.inscoin = 1;
  5783  012CB6  842D               	bsf	_venflags,2,c
  5784                           
  5785                           ;vend.c: 145: venflags.credisplay = 0;
  5786  012CB8  982D               	bcf	_venflags,4,c
  5787  012CBA  0012               	return	
  5788  012CBC                     __end_of_credit_subtract:
  5789                           	opt stack 0
  5790                           tblptru	equ	0xFF8
  5791                           tblptrh	equ	0xFF7
  5792                           tblptrl	equ	0xFF6
  5793                           tablat	equ	0xFF5
  5794                           prodh	equ	0xFF4
  5795                           prodl	equ	0xFF3
  5796                           postinc0	equ	0xFEE
  5797                           wreg	equ	0xFE8
  5798                           postdec1	equ	0xFE5
  5799                           fsr1h	equ	0xFE2
  5800                           fsr1l	equ	0xFE1
  5801                           indf2	equ	0xFDF
  5802                           postinc2	equ	0xFDE
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _credit_add *****************
  5808 ;; Defined at:
  5809 ;;		line 121 in file "vend.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  credit          1    wreg     unsigned char 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  credit          1   29[COMRAM] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:        1 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    5
  5830 ;; This function calls:
  5831 ;;		_DATAEE_ReadByte
  5832 ;;		_DATAEE_WriteByte
  5833 ;;		_Update_cashaudit
  5834 ;; This function is called by:
  5835 ;;		_main
  5836 ;;		_give_change
  5837 ;; This function uses a non-reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text14
  5841  012BB4                     __ptext14:
  5842                           	opt stack 0
  5843  012BB4                     _credit_add:
  5844                           	opt stack 23
  5845                           
  5846                           ;incstack = 0
  5847                           ;credit_add@credit stored from wreg
  5848  012BB4  6E28               	movwf	credit_add@credit,c
  5849                           
  5850                           ;vend.c: 123: cash = DATAEE_ReadByte(credmem);
  5851  012BB6  0E58               	movlw	low _credmem
  5852  012BB8  6EF6               	movwf	tblptrl,c
  5853  012BBA                     	if	1	;There is more than 1 active tblptr byte
  5854  012BBA  0EFB               	movlw	high _credmem
  5855  012BBC  6EF7               	movwf	tblptrh,c
  5856  012BBE                     	endif
  5857  012BBE                     	if	1	;There are 3 active tblptr bytes
  5858  012BBE  0E00               	movlw	low (_credmem shr (0+16))
  5859  012BC0  6EF8               	movwf	tblptru,c
  5860  012BC2                     	endif
  5861  012BC2  0009               	tblrd		*+
  5862  012BC4  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  5863  012BC8  000A               	tblrd		*-
  5864  012BCA  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  5865  012BCE  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  5866  012BD2  6E3B               	movwf	_cash,c	;volatile
  5867                           
  5868                           ;vend.c: 124: cash = cash + credit;
  5869  012BD4  503B               	movf	_cash,w,c	;volatile
  5870  012BD6  2428               	addwf	credit_add@credit,w,c
  5871  012BD8  6E3B               	movwf	_cash,c	;volatile
  5872                           
  5873                           ;vend.c: 125: DATAEE_WriteByte(credmem, cash);
  5874  012BDA  0E58               	movlw	low _credmem
  5875  012BDC  6EF6               	movwf	tblptrl,c
  5876  012BDE                     	if	1	;There is more than 1 active tblptr byte
  5877  012BDE  0EFB               	movlw	high _credmem
  5878  012BE0  6EF7               	movwf	tblptrh,c
  5879  012BE2                     	endif
  5880  012BE2                     	if	1	;There are 3 active tblptr bytes
  5881  012BE2  0E00               	movlw	low (_credmem shr (0+16))
  5882  012BE4  6EF8               	movwf	tblptru,c
  5883  012BE6                     	endif
  5884  012BE6  0009               	tblrd		*+
  5885  012BE8  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  5886  012BEC  000A               	tblrd		*-
  5887  012BEE  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  5888  012BF2  C03B  F01F         	movff	_cash,DATAEE_WriteByte@bData	;volatile
  5889  012BF6  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
  5890                           
  5891                           ;vend.c: 126: if(cash != 0)
  5892  012BFA  503B               	movf	_cash,w,c	;volatile
  5893  012BFC  B4D8               	btfsc	status,2,c
  5894  012BFE  D003               	goto	l2451
  5895                           
  5896                           ;vend.c: 127: {
  5897                           ;vend.c: 128: venflags.iscredit = 1;
  5898  012C00  802D               	bsf	_venflags,0,c
  5899                           
  5900                           ;vend.c: 129: venflags.inscoin = 0;
  5901  012C02  942D               	bcf	_venflags,2,c
  5902                           
  5903                           ;vend.c: 130: venflags.credisplay = 1;
  5904  012C04  882D               	bsf	_venflags,4,c
  5905  012C06                     l2451:
  5906                           
  5907                           ;vend.c: 132: }
  5908                           ;vend.c: 133: Update_cashaudit(credit);
  5909  012C06  5028               	movf	credit_add@credit,w,c
  5910  012C08  ECEC  F08C         	call	_Update_cashaudit
  5911  012C0C  0012               	return		;funcret
  5912  012C0E                     __end_of_credit_add:
  5913                           	opt stack 0
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           postinc0	equ	0xFEE
  5921                           wreg	equ	0xFE8
  5922                           postdec1	equ	0xFE5
  5923                           fsr1h	equ	0xFE2
  5924                           fsr1l	equ	0xFE1
  5925                           indf2	equ	0xFDF
  5926                           postinc2	equ	0xFDE
  5927                           fsr2h	equ	0xFDA
  5928                           fsr2l	equ	0xFD9
  5929                           status	equ	0xFD8
  5930                           
  5931 ;; *************** function _Update_cashaudit *****************
  5932 ;; Defined at:
  5933 ;;		line 106 in file "vend.c"
  5934 ;; Parameters:    Size  Location     Type
  5935 ;;  addcash         1    wreg     unsigned char 
  5936 ;; Auto vars:     Size  Location     Type
  5937 ;;  addcash         1   28[COMRAM] unsigned char 
  5938 ;; Return value:  Size  Location     Type
  5939 ;;                  1    wreg      void 
  5940 ;; Registers used:
  5941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5942 ;; Tracked objects:
  5943 ;;		On entry : 0/0
  5944 ;;		On exit  : 0/0
  5945 ;;		Unchanged: 0/0
  5946 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5950 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5951 ;;Total ram usage:        1 bytes
  5952 ;; Hardware stack levels used:    1
  5953 ;; Hardware stack levels required when called:    4
  5954 ;; This function calls:
  5955 ;;		_Read_NVstore
  5956 ;;		_Write_NVstore
  5957 ;; This function is called by:
  5958 ;;		_credit_add
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text15
  5963  0119D8                     __ptext15:
  5964                           	opt stack 0
  5965  0119D8                     _Update_cashaudit:
  5966                           	opt stack 23
  5967                           
  5968                           ;incstack = 0
  5969                           ;Update_cashaudit@addcash stored from wreg
  5970  0119D8  6E27               	movwf	Update_cashaudit@addcash,c
  5971                           
  5972                           ;vend.c: 108: Read_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
  5973  0119DA  0E56               	movlw	low _cashinv
  5974  0119DC  6EF6               	movwf	tblptrl,c
  5975  0119DE                     	if	1	;There is more than 1 active tblptr byte
  5976  0119DE  0EFB               	movlw	high _cashinv
  5977  0119E0  6EF7               	movwf	tblptrh,c
  5978  0119E2                     	endif
  5979  0119E2                     	if	1	;There are 3 active tblptr bytes
  5980  0119E2  0E00               	movlw	low (_cashinv shr (0+16))
  5981  0119E4  6EF8               	movwf	tblptru,c
  5982  0119E6                     	endif
  5983  0119E6  0009               	tblrd		*+
  5984  0119E8  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
  5985  0119EC  000A               	tblrd		*-
  5986  0119EE  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
  5987  0119F2  0E4C               	movlw	low _pvcash
  5988  0119F4  6E21               	movwf	Read_NVstore@storemem,c
  5989  0119F6  0E00               	movlw	high _pvcash
  5990  0119F8  6E22               	movwf	Read_NVstore@storemem+1,c
  5991  0119FA  0E02               	movlw	2
  5992  0119FC  6E23               	movwf	Read_NVstore@storesize,c
  5993  0119FE  EC6C  F099         	call	_Read_NVstore	;wreg free
  5994                           
  5995                           ;vend.c: 109: Read_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
  5996  011A02  0E52               	movlw	low _cashint
  5997  011A04  6EF6               	movwf	tblptrl,c
  5998  011A06                     	if	1	;There is more than 1 active tblptr byte
  5999  011A06  0EFB               	movlw	high _cashint
  6000  011A08  6EF7               	movwf	tblptrh,c
  6001  011A0A                     	endif
  6002  011A0A                     	if	1	;There are 3 active tblptr bytes
  6003  011A0A  0E00               	movlw	low (_cashint shr (0+16))
  6004  011A0C  6EF8               	movwf	tblptru,c
  6005  011A0E                     	endif
  6006  011A0E  0009               	tblrd		*+
  6007  011A10  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
  6008  011A14  000A               	tblrd		*-
  6009  011A16  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
  6010  011A1A  0E49               	movlw	low _pnvcash
  6011  011A1C  6E21               	movwf	Read_NVstore@storemem,c
  6012  011A1E  0E00               	movlw	high _pnvcash
  6013  011A20  6E22               	movwf	Read_NVstore@storemem+1,c
  6014  011A22  0E03               	movlw	3
  6015  011A24  6E23               	movwf	Read_NVstore@storesize,c
  6016  011A26  EC6C  F099         	call	_Read_NVstore	;wreg free
  6017                           
  6018                           ;vend.c: 111: pvcash = pvcash + (uint16_t)addcash;
  6019  011A2A  5027               	movf	Update_cashaudit@addcash,w,c
  6020  011A2C  244C               	addwf	_pvcash,w,c	;volatile
  6021  011A2E  6E4C               	movwf	_pvcash,c	;volatile
  6022  011A30  0E00               	movlw	0
  6023  011A32  204D               	addwfc	_pvcash+1,w,c	;volatile
  6024  011A34  6E4D               	movwf	_pvcash+1,c	;volatile
  6025                           
  6026                           ;vend.c: 113: pnvcash = pnvcash + (uint24_t)addcash;
  6027  011A36  5027               	movf	Update_cashaudit@addcash,w,c
  6028  011A38  2449               	addwf	_pnvcash,w,c	;volatile
  6029  011A3A  6E49               	movwf	_pnvcash,c	;volatile
  6030  011A3C  0E00               	movlw	0
  6031  011A3E  204A               	addwfc	_pnvcash+1,w,c	;volatile
  6032  011A40  6E4A               	movwf	_pnvcash+1,c	;volatile
  6033  011A42  0E00               	movlw	0
  6034  011A44  204B               	addwfc	_pnvcash+2,w,c	;volatile
  6035  011A46  6E4B               	movwf	_pnvcash+2,c	;volatile
  6036                           
  6037                           ;vend.c: 115: Write_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
  6038  011A48  0E56               	movlw	low _cashinv
  6039  011A4A  6EF6               	movwf	tblptrl,c
  6040  011A4C                     	if	1	;There is more than 1 active tblptr byte
  6041  011A4C  0EFB               	movlw	high _cashinv
  6042  011A4E  6EF7               	movwf	tblptrh,c
  6043  011A50                     	endif
  6044  011A50                     	if	1	;There are 3 active tblptr bytes
  6045  011A50  0E00               	movlw	low (_cashinv shr (0+16))
  6046  011A52  6EF8               	movwf	tblptru,c
  6047  011A54                     	endif
  6048  011A54  0009               	tblrd		*+
  6049  011A56  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
  6050  011A5A  000A               	tblrd		*-
  6051  011A5C  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
  6052  011A60  0E4C               	movlw	low _pvcash
  6053  011A62  6E23               	movwf	Write_NVstore@storemem,c
  6054  011A64  0E00               	movlw	high _pvcash
  6055  011A66  6E24               	movwf	Write_NVstore@storemem+1,c
  6056  011A68  0E02               	movlw	2
  6057  011A6A  6E25               	movwf	Write_NVstore@storesize,c
  6058  011A6C  EC00  F099         	call	_Write_NVstore	;wreg free
  6059                           
  6060                           ;vend.c: 116: Write_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
  6061  011A70  0E52               	movlw	low _cashint
  6062  011A72  6EF6               	movwf	tblptrl,c
  6063  011A74                     	if	1	;There is more than 1 active tblptr byte
  6064  011A74  0EFB               	movlw	high _cashint
  6065  011A76  6EF7               	movwf	tblptrh,c
  6066  011A78                     	endif
  6067  011A78                     	if	1	;There are 3 active tblptr bytes
  6068  011A78  0E00               	movlw	low (_cashint shr (0+16))
  6069  011A7A  6EF8               	movwf	tblptru,c
  6070  011A7C                     	endif
  6071  011A7C  0009               	tblrd		*+
  6072  011A7E  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
  6073  011A82  000A               	tblrd		*-
  6074  011A84  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
  6075  011A88  0E49               	movlw	low _pnvcash
  6076  011A8A  6E23               	movwf	Write_NVstore@storemem,c
  6077  011A8C  0E00               	movlw	high _pnvcash
  6078  011A8E  6E24               	movwf	Write_NVstore@storemem+1,c
  6079  011A90  0E03               	movlw	3
  6080  011A92  6E25               	movwf	Write_NVstore@storesize,c
  6081  011A94  EC00  F099         	call	_Write_NVstore	;wreg free
  6082  011A98  F000               	nop		;# 
  6083  011A9A  0012               	return		;funcret
  6084  011A9C                     __end_of_Update_cashaudit:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           postinc0	equ	0xFEE
  6093                           wreg	equ	0xFE8
  6094                           postdec1	equ	0xFE5
  6095                           fsr1h	equ	0xFE2
  6096                           fsr1l	equ	0xFE1
  6097                           indf2	equ	0xFDF
  6098                           postinc2	equ	0xFDE
  6099                           fsr2h	equ	0xFDA
  6100                           fsr2l	equ	0xFD9
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function ___lbdiv *****************
  6104 ;; Defined at:
  6105 ;;		line 4 in file "/opt/microchip/xc8/v1.45/sources/common/lbdiv.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;  dividend        1    wreg     unsigned char 
  6108 ;;  divisor         1   18[COMRAM] unsigned char 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;  dividend        1   19[COMRAM] unsigned char 
  6111 ;;  quotient        1   21[COMRAM] unsigned char 
  6112 ;;  counter         1   20[COMRAM] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      unsigned char 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6122 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;Total ram usage:        4 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    2
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_give_change
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text16
  6137  0130E0                     __ptext16:
  6138                           	opt stack 0
  6139  0130E0                     ___lbdiv:
  6140                           	opt stack 26
  6141                           
  6142                           ;incstack = 0
  6143                           ;___lbdiv@dividend stored from wreg
  6144  0130E0  6E1E               	movwf	___lbdiv@dividend,c
  6145  0130E2  0E00               	movlw	0
  6146  0130E4  6E20               	movwf	___lbdiv@quotient,c
  6147  0130E6  501D               	movf	___lbdiv@divisor,w,c
  6148  0130E8  B4D8               	btfsc	status,2,c
  6149  0130EA  D015               	goto	l5852
  6150  0130EC  0E01               	movlw	1
  6151  0130EE  6E1F               	movwf	___lbdiv@counter,c
  6152  0130F0  D003               	goto	l5847
  6153  0130F2  90D8               	bcf	status,0,c
  6154  0130F4  361D               	rlcf	___lbdiv@divisor,f,c
  6155  0130F6  2A1F               	incf	___lbdiv@counter,f,c
  6156  0130F8                     l5847:
  6157  0130F8  AE1D               	btfss	___lbdiv@divisor,7,c
  6158  0130FA  D7FB               	goto	l5848
  6159  0130FC                     u6260:
  6160  0130FC  90D8               	bcf	status,0,c
  6161  0130FE  3620               	rlcf	___lbdiv@quotient,f,c
  6162  013100  501D               	movf	___lbdiv@divisor,w,c
  6163  013102  5C1E               	subwf	___lbdiv@dividend,w,c
  6164  013104  A0D8               	btfss	status,0,c
  6165  013106  D003               	goto	l5851
  6166  013108  501D               	movf	___lbdiv@divisor,w,c
  6167  01310A  5E1E               	subwf	___lbdiv@dividend,f,c
  6168  01310C  8020               	bsf	___lbdiv@quotient,0,c
  6169  01310E                     l5851:
  6170  01310E  90D8               	bcf	status,0,c
  6171  013110  321D               	rrcf	___lbdiv@divisor,f,c
  6172  013112  2E1F               	decfsz	___lbdiv@counter,f,c
  6173  013114  D7F3               	goto	u6260
  6174  013116                     l5852:
  6175  013116  5020               	movf	___lbdiv@quotient,w,c
  6176  013118  0012               	return	
  6177  01311A                     __end_of___lbdiv:
  6178                           	opt stack 0
  6179                           tblptru	equ	0xFF8
  6180                           tblptrh	equ	0xFF7
  6181                           tblptrl	equ	0xFF6
  6182                           tablat	equ	0xFF5
  6183                           prodh	equ	0xFF4
  6184                           prodl	equ	0xFF3
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           postdec1	equ	0xFE5
  6188                           fsr1h	equ	0xFE2
  6189                           fsr1l	equ	0xFE1
  6190                           indf2	equ	0xFDF
  6191                           postinc2	equ	0xFDE
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function _dispense *****************
  6197 ;; Defined at:
  6198 ;;		line 100 in file "dispense.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;  chanel          1    wreg     unsigned char 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  chanel          1    1[BANK0 ] unsigned char 
  6203 ;;  sensmask        1    0[BANK0 ] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        2 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    5
  6220 ;; This function calls:
  6221 ;;		_DATAEE_ReadByte
  6222 ;;		_update_vends
  6223 ;;		_vend_dispense
  6224 ;;		_vend_nosense
  6225 ;; This function is called by:
  6226 ;;		_price_check
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text17
  6231  012DBA                     __ptext17:
  6232                           	opt stack 0
  6233  012DBA                     _dispense:
  6234                           	opt stack 24
  6235                           
  6236                           ;incstack = 0
  6237                           ;dispense@chanel stored from wreg
  6238  012DBA  0100               	movlb	0	; () banked
  6239  012DBC  6FE2               	movwf	dispense@chanel& (0+255),b
  6240                           
  6241                           ;dispense.c: 102: channel = chanel;
  6242  012DBE  C0E2  F032         	movff	dispense@chanel,_channel	;volatile
  6243                           
  6244                           ;dispense.c: 103: uint8_t sensmask = DATAEE_ReadByte(sensorflags);
  6245  012DC2  0E34               	movlw	low _sensorflags
  6246  012DC4  6EF6               	movwf	tblptrl,c
  6247  012DC6                     	if	1	;There is more than 1 active tblptr byte
  6248  012DC6  0EFB               	movlw	high _sensorflags
  6249  012DC8  6EF7               	movwf	tblptrh,c
  6250  012DCA                     	endif
  6251  012DCA                     	if	1	;There are 3 active tblptr bytes
  6252  012DCA  0E00               	movlw	low (_sensorflags shr (0+16))
  6253  012DCC  6EF8               	movwf	tblptru,c
  6254  012DCE                     	endif
  6255  012DCE  0009               	tblrd		*+
  6256  012DD0  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  6257  012DD4  000A               	tblrd		*-
  6258  012DD6  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  6259  012DDA  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  6260  012DDE  0100               	movlb	0	; () banked
  6261  012DE0  6FE1               	movwf	dispense@sensmask& (0+255),b
  6262                           
  6263                           ; BSR set to: 0
  6264                           ;dispense.c: 104: if((buttons & sensmask) != 0)
  6265  012DE2  503A               	movf	_buttons,w,c	;volatile
  6266  012DE4  15E1               	andwf	dispense@sensmask& (0+255),w,b
  6267  012DE6  0900               	iorlw	0
  6268  012DE8  B4D8               	btfsc	status,2,c
  6269  012DEA  D004               	goto	l4781
  6270                           
  6271                           ; BSR set to: 0
  6272                           ;dispense.c: 105: {
  6273                           ;dispense.c: 106: vend_nosense(chanel);
  6274  012DEC  51E2               	movf	dispense@chanel& (0+255),w,b
  6275  012DEE  EC7E  F095         	call	_vend_nosense
  6276                           
  6277                           ;dispense.c: 107: }
  6278  012DF2  D004               	goto	l4782
  6279  012DF4                     l4781:
  6280                           
  6281                           ;dispense.c: 108: else
  6282                           ;dispense.c: 109: {
  6283                           ;dispense.c: 110: vend_dispense(chanel);
  6284  012DF4  0100               	movlb	0	; () banked
  6285  012DF6  51E2               	movf	dispense@chanel& (0+255),w,b
  6286  012DF8  EC4E  F091         	call	_vend_dispense
  6287  012DFC                     l4782:
  6288                           
  6289                           ;dispense.c: 111: }
  6290                           ;dispense.c: 112: if(!venflags.error)
  6291  012DFC  B22D               	btfsc	_venflags,1,c
  6292  012DFE  0012               	return	
  6293                           
  6294                           ;dispense.c: 113: {
  6295                           ;dispense.c: 114: update_vends(channel);
  6296  012E00  5032               	movf	_channel,w,c	;volatile
  6297  012E02  ECAC  F095         	call	_update_vends
  6298  012E06  0012               	return	
  6299  012E08                     __end_of_dispense:
  6300                           	opt stack 0
  6301                           tblptru	equ	0xFF8
  6302                           tblptrh	equ	0xFF7
  6303                           tblptrl	equ	0xFF6
  6304                           tablat	equ	0xFF5
  6305                           prodh	equ	0xFF4
  6306                           prodl	equ	0xFF3
  6307                           postinc0	equ	0xFEE
  6308                           wreg	equ	0xFE8
  6309                           postdec1	equ	0xFE5
  6310                           fsr1h	equ	0xFE2
  6311                           fsr1l	equ	0xFE1
  6312                           indf2	equ	0xFDF
  6313                           postinc2	equ	0xFDE
  6314                           fsr2h	equ	0xFDA
  6315                           fsr2l	equ	0xFD9
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _vend_nosense *****************
  6319 ;; Defined at:
  6320 ;;		line 119 in file "dispense.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  chanel          1    wreg     unsigned char 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  chanel          1   24[COMRAM] unsigned char 
  6325 ;; Return value:  Size  Location     Type
  6326 ;;                  1    wreg      void 
  6327 ;; Registers used:
  6328 ;;		wreg, status,2, status,0, cstack
  6329 ;; Tracked objects:
  6330 ;;		On entry : 0/0
  6331 ;;		On exit  : 0/0
  6332 ;;		Unchanged: 0/0
  6333 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6335 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6336 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6337 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6338 ;;Total ram usage:        3 bytes
  6339 ;; Hardware stack levels used:    1
  6340 ;; Hardware stack levels required when called:    4
  6341 ;; This function calls:
  6342 ;;		_mdb_unlock
  6343 ;; This function is called by:
  6344 ;;		_dispense
  6345 ;; This function uses a non-reentrant model
  6346 ;;
  6347                           
  6348                           	psect	text18
  6349  012AFC                     __ptext18:
  6350                           	opt stack 0
  6351  012AFC                     _vend_nosense:
  6352                           	opt stack 24
  6353                           
  6354                           ;incstack = 0
  6355                           ;vend_nosense@chanel stored from wreg
  6356  012AFC  6E23               	movwf	vend_nosense@chanel,c
  6357                           
  6358                           ;dispense.c: 121: LATB = 0x00;
  6359  012AFE  0E00               	movlw	0
  6360  012B00  6E84               	movwf	3972,c	;volatile
  6361                           
  6362                           ;dispense.c: 122: LATD = 0x00;
  6363  012B02  0E00               	movlw	0
  6364  012B04  6E86               	movwf	3974,c	;volatile
  6365                           
  6366                           ;dispense.c: 124: LATCbits.LC2 = 0;
  6367  012B06  9485               	bcf	3973,2,c	;volatile
  6368                           
  6369                           ;dispense.c: 126: chanmask = 0x01;
  6370  012B08  0E01               	movlw	1
  6371  012B0A  6E34               	movwf	_chanmask,c	;volatile
  6372                           
  6373                           ;dispense.c: 127: chanmask = chanmask << chanel;
  6374  012B0C  C023  F021         	movff	vend_nosense@chanel,??_vend_nosense
  6375  012B10  C034  F022         	movff	_chanmask,??_vend_nosense+1	;volatile
  6376  012B14  2A21               	incf	??_vend_nosense,f,c
  6377  012B16  D002               	goto	u6174
  6378  012B18                     u6175:
  6379  012B18  90D8               	bcf	status,0,c
  6380  012B1A  3622               	rlcf	??_vend_nosense+1,f,c
  6381  012B1C                     u6174:
  6382  012B1C  2E21               	decfsz	??_vend_nosense,f,c
  6383  012B1E  D7FC               	goto	u6175
  6384  012B20  5022               	movf	??_vend_nosense+1,w,c
  6385  012B22  6E34               	movwf	_chanmask,c	;volatile
  6386                           
  6387                           ;dispense.c: 128: mdb_unlock();
  6388  012B24  EC84  F08C         	call	_mdb_unlock	;wreg free
  6389                           
  6390                           ;dispense.c: 130: LATAbits.LA5 = 1;
  6391  012B28  8A83               	bsf	3971,5,c	;volatile
  6392                           
  6393                           ;dispense.c: 131: LATB = chanmask & 0x0F;
  6394  012B2A  5034               	movf	_chanmask,w,c	;volatile
  6395  012B2C  0B0F               	andlw	15
  6396  012B2E  6E84               	movwf	3972,c	;volatile
  6397                           
  6398                           ;dispense.c: 132: LATD = chanmask & 0xF0;
  6399  012B30  5034               	movf	_chanmask,w,c	;volatile
  6400  012B32  0BF0               	andlw	240
  6401  012B34  6E86               	movwf	3974,c	;volatile
  6402                           
  6403                           ;dispense.c: 133: _delay((unsigned long)((250)*(64000000/4000.0)));
  6404  012B36  0E15               	movlw	21
  6405  012B38  6E22               	movwf	(??_vend_nosense+1)& (0+255),c
  6406  012B3A  0E4B               	movlw	75
  6407  012B3C  6E21               	movwf	??_vend_nosense& (0+255),c
  6408  012B3E  0EBE               	movlw	190
  6409  012B40                     u7277:
  6410  012B40  2EE8               	decfsz	wreg,f,c
  6411  012B42  D7FE               	bra	u7277
  6412  012B44  2E21               	decfsz	??_vend_nosense& (0+255),f,c
  6413  012B46  D7FC               	bra	u7277
  6414  012B48  2E22               	decfsz	(??_vend_nosense+1)& (0+255),f,c
  6415  012B4A  D7FA               	bra	u7277
  6416  012B4C  D000               	nop2	
  6417                           
  6418                           ;dispense.c: 134: LATB = 0;
  6419  012B4E  0E00               	movlw	0
  6420  012B50  6E84               	movwf	3972,c	;volatile
  6421                           
  6422                           ;dispense.c: 135: LATD = 0;
  6423  012B52  0E00               	movlw	0
  6424  012B54  6E86               	movwf	3974,c	;volatile
  6425  012B56  0012               	return		;funcret
  6426  012B58                     __end_of_vend_nosense:
  6427                           	opt stack 0
  6428                           tblptru	equ	0xFF8
  6429                           tblptrh	equ	0xFF7
  6430                           tblptrl	equ	0xFF6
  6431                           tablat	equ	0xFF5
  6432                           prodh	equ	0xFF4
  6433                           prodl	equ	0xFF3
  6434                           postinc0	equ	0xFEE
  6435                           wreg	equ	0xFE8
  6436                           postdec1	equ	0xFE5
  6437                           fsr1h	equ	0xFE2
  6438                           fsr1l	equ	0xFE1
  6439                           indf2	equ	0xFDF
  6440                           postinc2	equ	0xFDE
  6441                           fsr2h	equ	0xFDA
  6442                           fsr2l	equ	0xFD9
  6443                           status	equ	0xFD8
  6444                           
  6445 ;; *************** function _vend_dispense *****************
  6446 ;; Defined at:
  6447 ;;		line 138 in file "dispense.c"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;  chanel          1    wreg     unsigned char 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  chanel          1   32[COMRAM] unsigned char 
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  1    wreg      void 
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;Total ram usage:        3 bytes
  6466 ;; Hardware stack levels used:    1
  6467 ;; Hardware stack levels required when called:    4
  6468 ;; This function calls:
  6469 ;;		_TMR0_StopTimer
  6470 ;;		_disable_channel
  6471 ;;		_mdb_unlock
  6472 ;;		_set_motortime
  6473 ;; This function is called by:
  6474 ;;		_dispense
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text19
  6479  01229C                     __ptext19:
  6480                           	opt stack 0
  6481  01229C                     _vend_dispense:
  6482                           	opt stack 24
  6483                           
  6484                           ;incstack = 0
  6485                           ;vend_dispense@chanel stored from wreg
  6486  01229C  6E2B               	movwf	vend_dispense@chanel,c
  6487                           
  6488                           ;dispense.c: 140: mdb_unlock();
  6489  01229E  EC84  F08C         	call	_mdb_unlock	;wreg free
  6490                           
  6491                           ;dispense.c: 141: LATB = 0x00;
  6492  0122A2  0E00               	movlw	0
  6493  0122A4  6E84               	movwf	3972,c	;volatile
  6494                           
  6495                           ;dispense.c: 142: LATD = 0x00;
  6496  0122A6  0E00               	movlw	0
  6497  0122A8  6E86               	movwf	3974,c	;volatile
  6498                           
  6499                           ;dispense.c: 144: LATAbits.LA5 = 1;
  6500  0122AA  8A83               	bsf	3971,5,c	;volatile
  6501                           
  6502                           ;dispense.c: 146: LATCbits.LC2 = 0;
  6503  0122AC  9485               	bcf	3973,2,c	;volatile
  6504                           
  6505                           ;dispense.c: 148: chanmask = 0x01;
  6506  0122AE  0E01               	movlw	1
  6507  0122B0  6E34               	movwf	_chanmask,c	;volatile
  6508                           
  6509                           ;dispense.c: 149: chanmask = chanmask << chanel;
  6510  0122B2  C02B  F029         	movff	vend_dispense@chanel,??_vend_dispense
  6511  0122B6  C034  F02A         	movff	_chanmask,??_vend_dispense+1	;volatile
  6512  0122BA  2A29               	incf	??_vend_dispense,f,c
  6513  0122BC  D002               	goto	u6184
  6514  0122BE                     u6185:
  6515  0122BE  90D8               	bcf	status,0,c
  6516  0122C0  362A               	rlcf	??_vend_dispense+1,f,c
  6517  0122C2                     u6184:
  6518  0122C2  2E29               	decfsz	??_vend_dispense,f,c
  6519  0122C4  D7FC               	goto	u6185
  6520  0122C6  502A               	movf	??_vend_dispense+1,w,c
  6521  0122C8  6E34               	movwf	_chanmask,c	;volatile
  6522                           
  6523                           ;dispense.c: 150: set_motortime(chanel);
  6524  0122CA  502B               	movf	vend_dispense@chanel,w,c
  6525  0122CC  ECA4  F08F         	call	_set_motortime
  6526                           
  6527                           ;dispense.c: 151: while(!CMOUTbits.MC1OUT && !PIR0bits.TMR0IF)
  6528  0122D0  D006               	goto	l4790
  6529  0122D2                     
  6530                           ;dispense.c: 152: {
  6531                           ;dispense.c: 153: LATB = chanmask & 0x0F;
  6532  0122D2  5034               	movf	_chanmask,w,c	;volatile
  6533  0122D4  0B0F               	andlw	15
  6534  0122D6  6E84               	movwf	3972,c	;volatile
  6535                           
  6536                           ;dispense.c: 154: LATD = chanmask & 0xF0;
  6537  0122D8  5034               	movf	_chanmask,w,c	;volatile
  6538  0122DA  0BF0               	andlw	240
  6539  0122DC  6E86               	movwf	3974,c	;volatile
  6540  0122DE                     l4790:
  6541  0122DE  010F               	movlb	15	; () banked
  6542  0122E0  B13D               	btfsc	61,0,b	;volatile
  6543  0122E2  D003               	goto	u6200
  6544                           
  6545                           ; BSR set to: 15
  6546  0122E4  010E               	movlb	14	; () banked
  6547  0122E6  ABCA               	btfss	202,5,b	;volatile
  6548  0122E8  D7F4               	goto	l4791
  6549  0122EA                     u6200:
  6550                           
  6551                           ;dispense.c: 155: }
  6552                           ;dispense.c: 156: LATB = 0;
  6553                           
  6554                           ; BSR set to: 14
  6555                           
  6556                           ; BSR set to: 14
  6557  0122EA  0E00               	movlw	0
  6558  0122EC  6E84               	movwf	3972,c	;volatile
  6559                           
  6560                           ;dispense.c: 157: LATD = 0;
  6561  0122EE  0E00               	movlw	0
  6562  0122F0  6E86               	movwf	3974,c	;volatile
  6563                           
  6564                           ;dispense.c: 158: TMR0_StopTimer();
  6565  0122F2  ECC9  F09B         	call	_TMR0_StopTimer	;wreg free
  6566                           
  6567                           ;dispense.c: 159: if(PIR0bits.TMR0IF)
  6568  0122F6  010E               	movlb	14	; () banked
  6569  0122F8  ABCA               	btfss	202,5,b	;volatile
  6570  0122FA  0012               	return	
  6571                           
  6572                           ; BSR set to: 14
  6573                           ;dispense.c: 160: {
  6574                           ;dispense.c: 161: set_motortime(chanel);
  6575  0122FC  502B               	movf	vend_dispense@chanel,w,c
  6576  0122FE  ECA4  F08F         	call	_set_motortime
  6577  012302  010F               	movlb	15	; () banked
  6578  012304  B13D               	btfsc	61,0,b	;volatile
  6579  012306  D003               	goto	u6230
  6580                           
  6581                           ; BSR set to: 15
  6582  012308  010E               	movlb	14	; () banked
  6583  01230A  ABCA               	btfss	202,5,b	;volatile
  6584  01230C  D7FA               	goto	l4797
  6585  01230E                     u6230:
  6586                           
  6587                           ;dispense.c: 164: if(PIR0bits.TMR0IF)
  6588                           
  6589                           ; BSR set to: 14
  6590  01230E  010E               	movlb	14	; () banked
  6591  012310  ABCA               	btfss	202,5,b	;volatile
  6592  012312  0012               	return	
  6593                           
  6594                           ; BSR set to: 14
  6595                           ;dispense.c: 165: {
  6596                           ;dispense.c: 166: venflags.error = 1;
  6597  012314  822D               	bsf	_venflags,1,c
  6598                           
  6599                           ; BSR set to: 14
  6600                           ;dispense.c: 167: disable_channel(chanel);
  6601  012316  502B               	movf	vend_dispense@chanel,w,c
  6602  012318  ECEF  F094         	call	_disable_channel
  6603                           
  6604                           ;dispense.c: 169: vendprice = 0x00;
  6605  01231C  0E00               	movlw	0
  6606  01231E  6E39               	movwf	_vendprice,c	;volatile
  6607  012320  0012               	return	
  6608  012322                     __end_of_vend_dispense:
  6609                           	opt stack 0
  6610                           tblptru	equ	0xFF8
  6611                           tblptrh	equ	0xFF7
  6612                           tblptrl	equ	0xFF6
  6613                           tablat	equ	0xFF5
  6614                           prodh	equ	0xFF4
  6615                           prodl	equ	0xFF3
  6616                           postinc0	equ	0xFEE
  6617                           wreg	equ	0xFE8
  6618                           postdec1	equ	0xFE5
  6619                           fsr1h	equ	0xFE2
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           fsr2h	equ	0xFDA
  6624                           fsr2l	equ	0xFD9
  6625                           status	equ	0xFD8
  6626                           
  6627 ;; *************** function _set_motortime *****************
  6628 ;; Defined at:
  6629 ;;		line 175 in file "dispense.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  chanel          1    wreg     unsigned char 
  6632 ;; Auto vars:     Size  Location     Type
  6633 ;;  chanel          1   26[COMRAM] unsigned char 
  6634 ;;  time            2   28[COMRAM] unsigned int 
  6635 ;;  i               1   27[COMRAM] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  1    wreg      void 
  6638 ;; Registers used:
  6639 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6646 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;Total ram usage:        6 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    3
  6652 ;; This function calls:
  6653 ;;		_DATAEE_ReadByte
  6654 ;;		_TMR0_StartTimer
  6655 ;;		_TMR0_StopTimer
  6656 ;;		_TMR0_WriteTimer
  6657 ;;		___wmul
  6658 ;; This function is called by:
  6659 ;;		_vend_dispense
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           	psect	text20
  6664  011F48                     __ptext20:
  6665                           	opt stack 0
  6666  011F48                     _set_motortime:
  6667                           	opt stack 24
  6668                           
  6669                           ;incstack = 0
  6670                           ;set_motortime@chanel stored from wreg
  6671  011F48  6E25               	movwf	set_motortime@chanel,c
  6672                           
  6673                           ;dispense.c: 177: uint8_t i = DATAEE_ReadByte(chan1time + chanel);
  6674  011F4A  0E32               	movlw	low _chan1time
  6675  011F4C  6EF6               	movwf	tblptrl,c
  6676  011F4E                     	if	1	;There is more than 1 active tblptr byte
  6677  011F4E  0EFB               	movlw	high _chan1time
  6678  011F50  6EF7               	movwf	tblptrh,c
  6679  011F52                     	endif
  6680  011F52                     	if	1	;There are 3 active tblptr bytes
  6681  011F52  0E00               	movlw	low (_chan1time shr (0+16))
  6682  011F54  6EF8               	movwf	tblptru,c
  6683  011F56                     	endif
  6684  011F56  0009               	tblrd		*+
  6685  011F58  CFF5 F023          	movff	tablat,??_set_motortime
  6686  011F5C  0009               	tblrd		*+
  6687  011F5E  CFF5 F024          	movff	tablat,??_set_motortime+1
  6688  011F62  5025               	movf	set_motortime@chanel,w,c
  6689  011F64  2423               	addwf	??_set_motortime,w,c
  6690  011F66  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  6691  011F68  0E00               	movlw	0
  6692  011F6A  2024               	addwfc	??_set_motortime+1,w,c
  6693  011F6C  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  6694  011F6E  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  6695  011F72  6E26               	movwf	set_motortime@i,c
  6696                           
  6697                           ;dispense.c: 178: TMR0_StopTimer();
  6698  011F74  ECC9  F09B         	call	_TMR0_StopTimer	;wreg free
  6699                           
  6700                           ;dispense.c: 179: PIR0bits.TMR0IF = 0;
  6701  011F78  010E               	movlb	14	; () banked
  6702  011F7A  9BCA               	bcf	202,5,b	;volatile
  6703                           
  6704                           ; BSR set to: 14
  6705                           ;dispense.c: 181: uint16_t time = second1;
  6706  011F7C  0E5E               	movlw	low _second1
  6707  011F7E  6EF6               	movwf	tblptrl,c
  6708  011F80                     	if	1	;There is more than 1 active tblptr byte
  6709  011F80  0EFB               	movlw	high _second1
  6710  011F82  6EF7               	movwf	tblptrh,c
  6711  011F84                     	endif
  6712  011F84                     	if	1	;There are 3 active tblptr bytes
  6713  011F84  0E00               	movlw	low (_second1 shr (0+16))
  6714  011F86  6EF8               	movwf	tblptru,c
  6715  011F88                     	endif
  6716  011F88  0009               	tblrd		*+
  6717  011F8A  CFF5 F027          	movff	tablat,set_motortime@time
  6718  011F8E  000A               	tblrd		*-
  6719  011F90  CFF5 F028          	movff	tablat,set_motortime@time+1
  6720                           
  6721                           ; BSR set to: 14
  6722                           ;dispense.c: 182: time = time - (second_5 * i);
  6723  011F94  C026  F01D         	movff	set_motortime@i,___wmul@multiplier
  6724  011F98  6A1E               	clrf	___wmul@multiplier+1,c
  6725  011F9A  0E5C               	movlw	low _second_5
  6726  011F9C  6EF6               	movwf	tblptrl,c
  6727  011F9E                     	if	1	;There is more than 1 active tblptr byte
  6728  011F9E  0EFB               	movlw	high _second_5
  6729  011FA0  6EF7               	movwf	tblptrh,c
  6730  011FA2                     	endif
  6731  011FA2                     	if	1	;There are 3 active tblptr bytes
  6732  011FA2  0E00               	movlw	low (_second_5 shr (0+16))
  6733  011FA4  6EF8               	movwf	tblptru,c
  6734  011FA6                     	endif
  6735  011FA6  0009               	tblrd		*+
  6736  011FA8  CFF5 F01F          	movff	tablat,___wmul@multiplicand
  6737  011FAC  000A               	tblrd		*-
  6738  011FAE  CFF5 F020          	movff	tablat,___wmul@multiplicand+1
  6739  011FB2  EC46  F09A         	call	___wmul	;wreg free
  6740  011FB6  1E1D               	comf	?___wmul,f,c
  6741  011FB8  1E1E               	comf	?___wmul+1,f,c
  6742  011FBA  4A1D               	infsnz	?___wmul,f,c
  6743  011FBC  2A1E               	incf	?___wmul+1,f,c
  6744  011FBE  5027               	movf	set_motortime@time,w,c
  6745  011FC0  241D               	addwf	?___wmul,w,c
  6746  011FC2  6E27               	movwf	set_motortime@time,c
  6747  011FC4  5028               	movf	set_motortime@time+1,w,c
  6748  011FC6  201E               	addwfc	?___wmul+1,w,c
  6749  011FC8  6E28               	movwf	set_motortime@time+1,c
  6750                           
  6751                           ;dispense.c: 183: TMR0_WriteTimer(time);
  6752  011FCA  C027  F01D         	movff	set_motortime@time,TMR0_WriteTimer@timerVal
  6753  011FCE  C028  F01E         	movff	set_motortime@time+1,TMR0_WriteTimer@timerVal+1
  6754  011FD2  ECB5  F09B         	call	_TMR0_WriteTimer	;wreg free
  6755                           
  6756                           ;dispense.c: 184: TMR0_StartTimer();
  6757  011FD6  ECCB  F09B         	call	_TMR0_StartTimer	;wreg free
  6758  011FDA  0012               	return		;funcret
  6759  011FDC                     __end_of_set_motortime:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           postinc0	equ	0xFEE
  6768                           wreg	equ	0xFE8
  6769                           postdec1	equ	0xFE5
  6770                           fsr1h	equ	0xFE2
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           fsr2h	equ	0xFDA
  6775                           fsr2l	equ	0xFD9
  6776                           status	equ	0xFD8
  6777                           
  6778 ;; *************** function ___wmul *****************
  6779 ;; Defined at:
  6780 ;;		line 15 in file "/opt/microchip/xc8/v1.45/sources/common/Umul16.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  multiplier      2   18[COMRAM] unsigned int 
  6783 ;;  multiplicand    2   20[COMRAM] unsigned int 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  product         2   22[COMRAM] unsigned int 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  2   18[COMRAM] unsigned int 
  6788 ;; Registers used:
  6789 ;;		wreg, status,2, status,0, prodl, prodh
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6795 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6796 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6798 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6799 ;;Total ram usage:        6 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    2
  6802 ;; This function calls:
  6803 ;;		Nothing
  6804 ;; This function is called by:
  6805 ;;		_set_motortime
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text21
  6810  01348C                     __ptext21:
  6811                           	opt stack 0
  6812  01348C                     ___wmul:
  6813                           	opt stack 24
  6814                           
  6815                           ;incstack = 0
  6816  01348C  501D               	movf	___wmul@multiplier,w,c
  6817  01348E  021F               	mulwf	___wmul@multiplicand,c
  6818  013490  CFF3 F021          	movff	prodl,___wmul@product
  6819  013494  CFF4 F022          	movff	prodh,___wmul@product+1
  6820  013498  501D               	movf	___wmul@multiplier,w,c
  6821  01349A  0220               	mulwf	___wmul@multiplicand+1,c
  6822  01349C  50F3               	movf	prodl,w,c
  6823  01349E  2622               	addwf	___wmul@product+1,f,c
  6824  0134A0  501E               	movf	___wmul@multiplier+1,w,c
  6825  0134A2  021F               	mulwf	___wmul@multiplicand,c
  6826  0134A4  50F3               	movf	prodl,w,c
  6827  0134A6  2622               	addwf	___wmul@product+1,f,c
  6828  0134A8  C021  F01D         	movff	___wmul@product,?___wmul
  6829  0134AC  C022  F01E         	movff	___wmul@product+1,?___wmul+1
  6830  0134B0  0012               	return	
  6831  0134B2                     __end_of___wmul:
  6832                           	opt stack 0
  6833                           tblptru	equ	0xFF8
  6834                           tblptrh	equ	0xFF7
  6835                           tblptrl	equ	0xFF6
  6836                           tablat	equ	0xFF5
  6837                           prodh	equ	0xFF4
  6838                           prodl	equ	0xFF3
  6839                           postinc0	equ	0xFEE
  6840                           wreg	equ	0xFE8
  6841                           postdec1	equ	0xFE5
  6842                           fsr1h	equ	0xFE2
  6843                           fsr1l	equ	0xFE1
  6844                           indf2	equ	0xFDF
  6845                           postinc2	equ	0xFDE
  6846                           fsr2h	equ	0xFDA
  6847                           fsr2l	equ	0xFD9
  6848                           status	equ	0xFD8
  6849                           
  6850 ;; *************** function _TMR0_WriteTimer *****************
  6851 ;; Defined at:
  6852 ;;		line 113 in file "mcc_generated_files/tmr0.c"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;  timerVal        2   18[COMRAM] unsigned int 
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      void 
  6859 ;; Registers used:
  6860 ;;		wreg, status,2
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;Total ram usage:        2 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    2
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_set_motortime
  6877 ;; This function uses a non-reentrant model
  6878 ;;
  6879                           
  6880                           	psect	text22
  6881  01376A                     __ptext22:
  6882                           	opt stack 0
  6883  01376A                     _TMR0_WriteTimer:
  6884                           	opt stack 24
  6885                           
  6886                           ;tmr0.c: 116: TMR0H = timerVal >> 8;
  6887                           
  6888                           ;incstack = 0
  6889  01376A  501E               	movf	TMR0_WriteTimer@timerVal+1,w,c
  6890  01376C  6ED4               	movwf	4052,c	;volatile
  6891                           
  6892                           ;tmr0.c: 117: TMR0L = (uint8_t) timerVal;
  6893  01376E  C01D  FFD3         	movff	TMR0_WriteTimer@timerVal,4051	;volatile
  6894  013772  0012               	return		;funcret
  6895  013774                     __end_of_TMR0_WriteTimer:
  6896                           	opt stack 0
  6897                           tblptru	equ	0xFF8
  6898                           tblptrh	equ	0xFF7
  6899                           tblptrl	equ	0xFF6
  6900                           tablat	equ	0xFF5
  6901                           prodh	equ	0xFF4
  6902                           prodl	equ	0xFF3
  6903                           postinc0	equ	0xFEE
  6904                           wreg	equ	0xFE8
  6905                           postdec1	equ	0xFE5
  6906                           fsr1h	equ	0xFE2
  6907                           fsr1l	equ	0xFE1
  6908                           indf2	equ	0xFDF
  6909                           postinc2	equ	0xFDE
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _TMR0_StopTimer *****************
  6915 ;; Defined at:
  6916 ;;		line 94 in file "mcc_generated_files/tmr0.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      void 
  6923 ;; Registers used:
  6924 ;;		None
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    2
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_vend_dispense
  6941 ;;		_set_motortime
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text23
  6946  013792                     __ptext23:
  6947                           	opt stack 0
  6948  013792                     _TMR0_StopTimer:
  6949                           	opt stack 24
  6950                           
  6951                           ;tmr0.c: 97: T0CON0bits.T0EN = 0;
  6952                           
  6953                           ;incstack = 0
  6954  013792  9ED5               	bcf	4053,7,c	;volatile
  6955  013794  0012               	return		;funcret
  6956  013796                     __end_of_TMR0_StopTimer:
  6957                           	opt stack 0
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           prodh	equ	0xFF4
  6963                           prodl	equ	0xFF3
  6964                           postinc0	equ	0xFEE
  6965                           wreg	equ	0xFE8
  6966                           postdec1	equ	0xFE5
  6967                           fsr1h	equ	0xFE2
  6968                           fsr1l	equ	0xFE1
  6969                           indf2	equ	0xFDF
  6970                           postinc2	equ	0xFDE
  6971                           fsr2h	equ	0xFDA
  6972                           fsr2l	equ	0xFD9
  6973                           status	equ	0xFD8
  6974                           
  6975 ;; *************** function _TMR0_StartTimer *****************
  6976 ;; Defined at:
  6977 ;;		line 88 in file "mcc_generated_files/tmr0.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;		None
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;		None
  6982 ;; Return value:  Size  Location     Type
  6983 ;;                  1    wreg      void 
  6984 ;; Registers used:
  6985 ;;		None
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;Total ram usage:        0 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    2
  6998 ;; This function calls:
  6999 ;;		Nothing
  7000 ;; This function is called by:
  7001 ;;		_set_motortime
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           	psect	text24
  7006  013796                     __ptext24:
  7007                           	opt stack 0
  7008  013796                     _TMR0_StartTimer:
  7009                           	opt stack 24
  7010                           
  7011                           ;tmr0.c: 91: T0CON0bits.T0EN = 1;
  7012                           
  7013                           ;incstack = 0
  7014  013796  8ED5               	bsf	4053,7,c	;volatile
  7015  013798  0012               	return		;funcret
  7016  01379A                     __end_of_TMR0_StartTimer:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           postdec1	equ	0xFE5
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _disable_channel *****************
  7036 ;; Defined at:
  7037 ;;		line 233 in file "dispense.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  channel         1    wreg     unsigned char 
  7040 ;; Auto vars:     Size  Location     Type
  7041 ;;  channel         1   24[COMRAM] unsigned char 
  7042 ;;  errormask       1   25[COMRAM] unsigned char 
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7053 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;Total ram usage:        4 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; Hardware stack levels required when called:    3
  7059 ;; This function calls:
  7060 ;;		_DATAEE_ReadByte
  7061 ;;		_DATAEE_WriteByte
  7062 ;; This function is called by:
  7063 ;;		_vend_dispense
  7064 ;; This function uses a non-reentrant model
  7065 ;;
  7066                           
  7067                           	psect	text25
  7068  0129DE                     __ptext25:
  7069                           	opt stack 0
  7070  0129DE                     _disable_channel:
  7071                           	opt stack 24
  7072                           
  7073                           ;incstack = 0
  7074                           ;disable_channel@channel stored from wreg
  7075  0129DE  6E23               	movwf	disable_channel@channel,c
  7076                           
  7077                           ;dispense.c: 235: uint8_t errormask = 0x01;
  7078  0129E0  0E01               	movlw	1
  7079  0129E2  6E24               	movwf	disable_channel@errormask,c
  7080                           
  7081                           ;dispense.c: 236: uint8_t errormask = errormask << channel;
  7082  0129E4  C023  F021         	movff	disable_channel@channel,??_disable_channel
  7083  0129E8  C024  F022         	movff	disable_channel@errormask,??_disable_channel+1
  7084  0129EC  2A21               	incf	??_disable_channel,f,c
  7085  0129EE  D002               	goto	u5754
  7086  0129F0                     u5755:
  7087  0129F0  90D8               	bcf	status,0,c
  7088  0129F2  3622               	rlcf	??_disable_channel+1,f,c
  7089  0129F4                     u5754:
  7090  0129F4  2E21               	decfsz	??_disable_channel,f,c
  7091  0129F6  D7FC               	goto	u5755
  7092  0129F8  5022               	movf	??_disable_channel+1,w,c
  7093  0129FA  6E24               	movwf	disable_channel@errormask,c
  7094                           
  7095                           ;dispense.c: 237: errormask = errormask | DATAEE_ReadByte(venderrors);
  7096  0129FC  0E4E               	movlw	low _venderrors
  7097  0129FE  6EF6               	movwf	tblptrl,c
  7098  012A00                     	if	1	;There is more than 1 active tblptr byte
  7099  012A00  0EFB               	movlw	high _venderrors
  7100  012A02  6EF7               	movwf	tblptrh,c
  7101  012A04                     	endif
  7102  012A04                     	if	1	;There are 3 active tblptr bytes
  7103  012A04  0E00               	movlw	low (_venderrors shr (0+16))
  7104  012A06  6EF8               	movwf	tblptru,c
  7105  012A08                     	endif
  7106  012A08  0009               	tblrd		*+
  7107  012A0A  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  7108  012A0E  000A               	tblrd		*-
  7109  012A10  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  7110  012A14  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  7111  012A18  1024               	iorwf	disable_channel@errormask,w,c
  7112  012A1A  6E24               	movwf	disable_channel@errormask,c
  7113                           
  7114                           ;dispense.c: 238: DATAEE_WriteByte(venderrors, errormask);
  7115  012A1C  0E4E               	movlw	low _venderrors
  7116  012A1E  6EF6               	movwf	tblptrl,c
  7117  012A20                     	if	1	;There is more than 1 active tblptr byte
  7118  012A20  0EFB               	movlw	high _venderrors
  7119  012A22  6EF7               	movwf	tblptrh,c
  7120  012A24                     	endif
  7121  012A24                     	if	1	;There are 3 active tblptr bytes
  7122  012A24  0E00               	movlw	low (_venderrors shr (0+16))
  7123  012A26  6EF8               	movwf	tblptru,c
  7124  012A28                     	endif
  7125  012A28  0009               	tblrd		*+
  7126  012A2A  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  7127  012A2E  000A               	tblrd		*-
  7128  012A30  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  7129  012A34  C024  F01F         	movff	disable_channel@errormask,DATAEE_WriteByte@bData
  7130  012A38  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
  7131  012A3C  0012               	return		;funcret
  7132  012A3E                     __end_of_disable_channel:
  7133                           	opt stack 0
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           postdec1	equ	0xFE5
  7143                           fsr1h	equ	0xFE2
  7144                           fsr1l	equ	0xFE1
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _update_vends *****************
  7152 ;; Defined at:
  7153 ;;		line 241 in file "dispense.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;  chanel          1    wreg     unsigned char 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  chanel          1   25[COMRAM] unsigned char 
  7158 ;;  x               1   24[COMRAM] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  1    wreg      void 
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;Total ram usage:        4 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    3
  7175 ;; This function calls:
  7176 ;;		_DATAEE_ReadByte
  7177 ;;		_DATAEE_WriteByte
  7178 ;; This function is called by:
  7179 ;;		_dispense
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	text26
  7184  012B58                     __ptext26:
  7185                           	opt stack 0
  7186  012B58                     _update_vends:
  7187                           	opt stack 25
  7188                           
  7189                           ;incstack = 0
  7190                           ;update_vends@chanel stored from wreg
  7191  012B58  6E24               	movwf	update_vends@chanel,c
  7192                           
  7193                           ;dispense.c: 243: uint8_t x = DATAEE_ReadByte(vendstore + chanel);
  7194  012B5A  0E54               	movlw	low _vendstore
  7195  012B5C  6EF6               	movwf	tblptrl,c
  7196  012B5E                     	if	1	;There is more than 1 active tblptr byte
  7197  012B5E  0EFB               	movlw	high _vendstore
  7198  012B60  6EF7               	movwf	tblptrh,c
  7199  012B62                     	endif
  7200  012B62                     	if	1	;There are 3 active tblptr bytes
  7201  012B62  0E00               	movlw	low (_vendstore shr (0+16))
  7202  012B64  6EF8               	movwf	tblptru,c
  7203  012B66                     	endif
  7204  012B66  0009               	tblrd		*+
  7205  012B68  CFF5 F021          	movff	tablat,??_update_vends
  7206  012B6C  0009               	tblrd		*+
  7207  012B6E  CFF5 F022          	movff	tablat,??_update_vends+1
  7208  012B72  5024               	movf	update_vends@chanel,w,c
  7209  012B74  2421               	addwf	??_update_vends,w,c
  7210  012B76  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7211  012B78  0E00               	movlw	0
  7212  012B7A  2022               	addwfc	??_update_vends+1,w,c
  7213  012B7C  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  7214  012B7E  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  7215  012B82  6E23               	movwf	update_vends@x,c
  7216                           
  7217                           ;dispense.c: 244: x++;
  7218  012B84  2A23               	incf	update_vends@x,f,c
  7219                           
  7220                           ;dispense.c: 245: DATAEE_WriteByte(vendstore + chanel, x);
  7221  012B86  0E54               	movlw	low _vendstore
  7222  012B88  6EF6               	movwf	tblptrl,c
  7223  012B8A                     	if	1	;There is more than 1 active tblptr byte
  7224  012B8A  0EFB               	movlw	high _vendstore
  7225  012B8C  6EF7               	movwf	tblptrh,c
  7226  012B8E                     	endif
  7227  012B8E                     	if	1	;There are 3 active tblptr bytes
  7228  012B8E  0E00               	movlw	low (_vendstore shr (0+16))
  7229  012B90  6EF8               	movwf	tblptru,c
  7230  012B92                     	endif
  7231  012B92  0009               	tblrd		*+
  7232  012B94  CFF5 F021          	movff	tablat,??_update_vends
  7233  012B98  0009               	tblrd		*+
  7234  012B9A  CFF5 F022          	movff	tablat,??_update_vends+1
  7235  012B9E  5024               	movf	update_vends@chanel,w,c
  7236  012BA0  2421               	addwf	??_update_vends,w,c
  7237  012BA2  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  7238  012BA4  0E00               	movlw	0
  7239  012BA6  2022               	addwfc	??_update_vends+1,w,c
  7240  012BA8  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  7241  012BAA  C023  F01F         	movff	update_vends@x,DATAEE_WriteByte@bData
  7242  012BAE  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
  7243  012BB2  0012               	return		;funcret
  7244  012BB4                     __end_of_update_vends:
  7245                           	opt stack 0
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           postinc0	equ	0xFEE
  7253                           wreg	equ	0xFE8
  7254                           postdec1	equ	0xFE5
  7255                           fsr1h	equ	0xFE2
  7256                           fsr1l	equ	0xFE1
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           fsr2h	equ	0xFDA
  7260                           fsr2l	equ	0xFD9
  7261                           status	equ	0xFD8
  7262                           
  7263 ;; *************** function _mdb_poll *****************
  7264 ;; Defined at:
  7265 ;;		line 164 in file "mdb.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;		None
  7268 ;; Auto vars:     Size  Location     Type
  7269 ;;  i               1   28[COMRAM] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  1    wreg      unsigned char 
  7272 ;; Registers used:
  7273 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;Total ram usage:        1 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    6
  7286 ;; This function calls:
  7287 ;;		_TMR3_Initialize
  7288 ;;		_mdb_comm
  7289 ;; This function is called by:
  7290 ;;		_main
  7291 ;; This function uses a non-reentrant model
  7292 ;;
  7293                           
  7294                           	psect	text27
  7295  010B76                     __ptext27:
  7296                           	opt stack 0
  7297  010B76                     _mdb_poll:
  7298                           	opt stack 24
  7299                           
  7300                           ;mdb.c: 168: TMR3_Initialize();
  7301                           
  7302                           ;incstack = 0
  7303  010B76  EC36  F099         	call	_TMR3_Initialize	;wreg free
  7304                           
  7305                           ;mdb.c: 169: uint8_t i = mdb_comm(note_poll, 0x00);
  7306  010B7A  0E00               	movlw	0
  7307  010B7C  6E24               	movwf	mdb_comm@mcount,c
  7308  010B7E  0E7F               	movlw	low _note_poll
  7309  010B80  6EF6               	movwf	tblptrl,c
  7310  010B82                     	if	1	;There is more than 1 active tblptr byte
  7311  010B82  0EFB               	movlw	high _note_poll
  7312  010B84  6EF7               	movwf	tblptrh,c
  7313  010B86                     	endif
  7314  010B86                     	if	1	;There are 3 active tblptr bytes
  7315  010B86  0E00               	movlw	low (_note_poll shr (0+16))
  7316  010B88  6EF8               	movwf	tblptru,c
  7317  010B8A                     	endif
  7318  010B8A  0008               	tblrd		*
  7319  010B8C  50F5               	movf	tablat,w,c
  7320  010B8E  EC72  F088         	call	_mdb_comm
  7321  010B92  6E27               	movwf	mdb_poll@i,c
  7322                           
  7323                           ;mdb.c: 170: notebyte = mdbdata[0];
  7324  010B94  C060  F0AF         	movff	_mdbdata,_notebyte
  7325                           
  7326                           ;mdb.c: 172: if((mdbdata[0] & 0x80) != 0)
  7327  010B98  0100               	movlb	0	; () banked
  7328  010B9A  AF60               	btfss	_mdbdata& (0+255),7,b
  7329  010B9C  D050               	goto	l3246
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;mdb.c: 173: {
  7333                           ;mdb.c: 174: notebyte = mdbdata[0] & 0x7F;
  7334  010B9E  5160               	movf	_mdbdata& (0+255),w,b
  7335  010BA0  0B7F               	andlw	127
  7336  010BA2  6FAF               	movwf	_notebyte& (0+255),b
  7337                           
  7338                           ;mdb.c: 175: switch(notebyte)
  7339  010BA4  D019               	goto	l3236
  7340  010BA6                     
  7341                           ; BSR set to: 0
  7342                           
  7343                           ; BSR set to: 0
  7344  010BA6  0E0A               	movlw	10
  7345  010BA8  6E3C               	movwf	_credit,c	;volatile
  7346                           
  7347                           ;mdb.c: 178: return credit;
  7348  010BAA  503C               	movf	_credit,w,c	;volatile
  7349                           
  7350                           ; BSR set to: 0
  7351  010BAC  0012               	return	
  7352  010BAE                     
  7353                           ; BSR set to: 0
  7354                           
  7355                           ; BSR set to: 0
  7356  010BAE  0E14               	movlw	20
  7357  010BB0  6E3C               	movwf	_credit,c	;volatile
  7358                           
  7359                           ;mdb.c: 180: return credit;
  7360  010BB2  503C               	movf	_credit,w,c	;volatile
  7361                           
  7362                           ; BSR set to: 0
  7363  010BB4  0012               	return	
  7364  010BB6                     
  7365                           ; BSR set to: 0
  7366                           
  7367                           ; BSR set to: 0
  7368  010BB6  0E32               	movlw	50
  7369  010BB8  6E3C               	movwf	_credit,c	;volatile
  7370                           
  7371                           ;mdb.c: 182: return credit;
  7372  010BBA  503C               	movf	_credit,w,c	;volatile
  7373                           
  7374                           ; BSR set to: 0
  7375  010BBC  0012               	return	
  7376  010BBE                     
  7377                           ; BSR set to: 0
  7378                           
  7379                           ; BSR set to: 0
  7380  010BBE  0E64               	movlw	100
  7381  010BC0  6E3C               	movwf	_credit,c	;volatile
  7382                           
  7383                           ;mdb.c: 184: return credit;
  7384  010BC2  503C               	movf	_credit,w,c	;volatile
  7385                           
  7386                           ; BSR set to: 0
  7387  010BC4  0012               	return	
  7388  010BC6                     
  7389                           ; BSR set to: 0
  7390                           
  7391                           ; BSR set to: 0
  7392  010BC6  0EC8               	movlw	200
  7393  010BC8  6E3C               	movwf	_credit,c	;volatile
  7394                           
  7395                           ;mdb.c: 186: return credit;
  7396  010BCA  503C               	movf	_credit,w,c	;volatile
  7397                           
  7398                           ; BSR set to: 0
  7399  010BCC  0012               	return	
  7400  010BCE                     
  7401                           ; BSR set to: 0
  7402                           
  7403                           ; BSR set to: 0
  7404  010BCE  0E10               	movlw	16
  7405  010BD0  6E3C               	movwf	_credit,c	;volatile
  7406                           
  7407                           ; BSR set to: 0
  7408                           ;mdb.c: 188: mdbflags.noteerr = 1;
  7409  010BD2  8240               	bsf	_mdbflags,1,c
  7410                           
  7411                           ;mdb.c: 189: return credit;
  7412  010BD4  503C               	movf	_credit,w,c	;volatile
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;mdb.c: 190: }
  7416                           
  7417                           ; BSR set to: 0
  7418  010BD6  0012               	return	
  7419  010BD8                     l3236:
  7420                           
  7421                           ; BSR set to: 0
  7422                           
  7423                           ; BSR set to: 0
  7424  010BD8  51AF               	movf	_notebyte& (0+255),w,b
  7425                           
  7426                           ; Switch size 1, requested type "space"
  7427                           ; Number of cases is 5, Range of values is 0 to 4
  7428                           ; switch strategies available:
  7429                           ; Name         Instructions Cycles
  7430                           ; simple_byte           16     9 (average)
  7431                           ;	Chosen strategy is simple_byte
  7432  010BDA  0A00               	xorlw	0	; case 0
  7433  010BDC  B4D8               	btfsc	status,2,c
  7434  010BDE  D7E3               	goto	l3237
  7435  010BE0  0A01               	xorlw	1	; case 1
  7436  010BE2  B4D8               	btfsc	status,2,c
  7437  010BE4  D7E4               	goto	l3239
  7438  010BE6  0A03               	xorlw	3	; case 2
  7439  010BE8  B4D8               	btfsc	status,2,c
  7440  010BEA  D7E5               	goto	l3240
  7441  010BEC  0A01               	xorlw	1	; case 3
  7442  010BEE  B4D8               	btfsc	status,2,c
  7443  010BF0  D7E6               	goto	l3241
  7444  010BF2  0A07               	xorlw	7	; case 4
  7445  010BF4  B4D8               	btfsc	status,2,c
  7446  010BF6  D7E7               	goto	l3242
  7447  010BF8  D7EA               	goto	l3243
  7448  010BFA                     
  7449                           ; BSR set to: 0
  7450                           
  7451                           ; BSR set to: 0
  7452  010BFA  0E00               	movlw	0
  7453  010BFC  6E3C               	movwf	_credit,c	;volatile
  7454                           
  7455                           ;mdb.c: 198: return credit;
  7456  010BFE  503C               	movf	_credit,w,c	;volatile
  7457                           
  7458                           ; BSR set to: 0
  7459  010C00  0012               	return	
  7460  010C02                     
  7461                           ; BSR set to: 0
  7462                           
  7463                           ; BSR set to: 0
  7464  010C02  0E01               	movlw	1
  7465  010C04  D01A               	goto	L12
  7466  010C06                     
  7467                           ; BSR set to: 0
  7468                           
  7469                           ; BSR set to: 0
  7470  010C06  0E02               	movlw	2
  7471  010C08  D018               	goto	L12
  7472  010C0A                     
  7473                           ; BSR set to: 0
  7474                           
  7475                           ; BSR set to: 0
  7476  010C0A  0E00               	movlw	0
  7477  010C0C  6E3C               	movwf	_credit,c	;volatile
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;mdb.c: 207: mdbflags.noteerr = 0;
  7481  010C0E  9240               	bcf	_mdbflags,1,c
  7482                           
  7483                           ;mdb.c: 208: return credit;
  7484  010C10  503C               	movf	_credit,w,c	;volatile
  7485                           
  7486                           ; BSR set to: 0
  7487  010C12  0012               	return	
  7488  010C14                     
  7489                           ; BSR set to: 0
  7490                           
  7491                           ; BSR set to: 0
  7492  010C14  0E04               	movlw	4
  7493  010C16  D011               	goto	L12
  7494  010C18                     
  7495                           ; BSR set to: 0
  7496                           
  7497                           ; BSR set to: 0
  7498  010C18  0E05               	movlw	5
  7499  010C1A  D00F               	goto	L12
  7500  010C1C                     
  7501                           ; BSR set to: 0
  7502                           
  7503                           ; BSR set to: 0
  7504  010C1C  0E06               	movlw	6
  7505  010C1E  D00D               	goto	L12
  7506  010C20                     
  7507                           ; BSR set to: 0
  7508                           
  7509                           ; BSR set to: 0
  7510  010C20  0E07               	movlw	7
  7511  010C22  D00B               	goto	L12
  7512  010C24                     
  7513                           ; BSR set to: 0
  7514                           
  7515                           ; BSR set to: 0
  7516  010C24  0E08               	movlw	8
  7517  010C26  D009               	goto	L12
  7518  010C28                     
  7519                           ; BSR set to: 0
  7520                           
  7521                           ; BSR set to: 0
  7522  010C28  0E09               	movlw	9
  7523  010C2A  D007               	goto	L12
  7524  010C2C                     
  7525                           ; BSR set to: 0
  7526                           
  7527                           ; BSR set to: 0
  7528  010C2C  0E0A               	movlw	10
  7529  010C2E  D005               	goto	L12
  7530  010C30                     
  7531                           ; BSR set to: 0
  7532                           
  7533                           ; BSR set to: 0
  7534  010C30  0E0B               	movlw	11
  7535  010C32  D003               	goto	L12
  7536  010C34                     
  7537                           ; BSR set to: 0
  7538                           
  7539                           ; BSR set to: 0
  7540  010C34  0E0C               	movlw	12
  7541  010C36  D001               	goto	L12
  7542  010C38                     
  7543                           ; BSR set to: 0
  7544                           
  7545                           ; BSR set to: 0
  7546  010C38  0E00               	movlw	0
  7547  010C3A                     L12:
  7548  010C3A  6E3C               	movwf	_credit,c	;volatile
  7549                           
  7550                           ;mdb.c: 237: }
  7551  010C3C  D029               	goto	l3249
  7552  010C3E                     l3246:
  7553                           
  7554                           ; BSR set to: 0
  7555                           
  7556                           ; BSR set to: 0
  7557  010C3E  5160               	movf	_mdbdata& (0+255),w,b
  7558                           
  7559                           ; Switch size 1, requested type "space"
  7560                           ; Number of cases is 13, Range of values is 0 to 12
  7561                           ; switch strategies available:
  7562                           ; Name         Instructions Cycles
  7563                           ; simple_byte           40    21 (average)
  7564                           ;	Chosen strategy is simple_byte
  7565  010C40  0A00               	xorlw	0	; case 0
  7566  010C42  B4D8               	btfsc	status,2,c
  7567  010C44  D7DA               	goto	l3247
  7568  010C46  0A01               	xorlw	1	; case 1
  7569  010C48  B4D8               	btfsc	status,2,c
  7570  010C4A  D7DB               	goto	l3248
  7571  010C4C  0A03               	xorlw	3	; case 2
  7572  010C4E  B4D8               	btfsc	status,2,c
  7573  010C50  D7DA               	goto	l3250
  7574  010C52  0A01               	xorlw	1	; case 3
  7575  010C54  B4D8               	btfsc	status,2,c
  7576  010C56  D7D9               	goto	l3251
  7577  010C58  0A07               	xorlw	7	; case 4
  7578  010C5A  B4D8               	btfsc	status,2,c
  7579  010C5C  D7DB               	goto	l3252
  7580  010C5E  0A01               	xorlw	1	; case 5
  7581  010C60  B4D8               	btfsc	status,2,c
  7582  010C62  D7DA               	goto	l3253
  7583  010C64  0A03               	xorlw	3	; case 6
  7584  010C66  B4D8               	btfsc	status,2,c
  7585  010C68  D7D9               	goto	l3254
  7586  010C6A  0A01               	xorlw	1	; case 7
  7587  010C6C  B4D8               	btfsc	status,2,c
  7588  010C6E  D7D8               	goto	l3255
  7589  010C70  0A0F               	xorlw	15	; case 8
  7590  010C72  B4D8               	btfsc	status,2,c
  7591  010C74  D7D7               	goto	l3256
  7592  010C76  0A01               	xorlw	1	; case 9
  7593  010C78  B4D8               	btfsc	status,2,c
  7594  010C7A  D7D6               	goto	l3257
  7595  010C7C  0A03               	xorlw	3	; case 10
  7596  010C7E  B4D8               	btfsc	status,2,c
  7597  010C80  D7D5               	goto	l3258
  7598  010C82  0A01               	xorlw	1	; case 11
  7599  010C84  B4D8               	btfsc	status,2,c
  7600  010C86  D7D4               	goto	l3259
  7601  010C88  0A07               	xorlw	7	; case 12
  7602  010C8A  B4D8               	btfsc	status,2,c
  7603  010C8C  D7D3               	goto	l3260
  7604  010C8E  D7D4               	goto	l3261
  7605  010C90                     l3249:
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;mdb.c: 238: mdbflags.noteerr = 1;
  7609  010C90  8240               	bsf	_mdbflags,1,c
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;mdb.c: 239: return credit;
  7613  010C92  503C               	movf	_credit,w,c	;volatile
  7614                           
  7615                           ; BSR set to: 0
  7616  010C94  0012               	return	
  7617  010C96                     __end_of_mdb_poll:
  7618                           	opt stack 0
  7619                           tblptru	equ	0xFF8
  7620                           tblptrh	equ	0xFF7
  7621                           tblptrl	equ	0xFF6
  7622                           tablat	equ	0xFF5
  7623                           prodh	equ	0xFF4
  7624                           prodl	equ	0xFF3
  7625                           postinc0	equ	0xFEE
  7626                           wreg	equ	0xFE8
  7627                           postdec1	equ	0xFE5
  7628                           fsr1h	equ	0xFE2
  7629                           fsr1l	equ	0xFE1
  7630                           indf2	equ	0xFDF
  7631                           postinc2	equ	0xFDE
  7632                           fsr2h	equ	0xFDA
  7633                           fsr2l	equ	0xFD9
  7634                           status	equ	0xFD8
  7635                           
  7636 ;; *************** function _mdb_comm *****************
  7637 ;; Defined at:
  7638 ;;		line 244 in file "mdb.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;  slvadd          1    wreg     unsigned char 
  7641 ;;  mcount          1   25[COMRAM] unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  slvadd          1   26[COMRAM] unsigned char 
  7644 ;;  i               1   27[COMRAM] unsigned char 
  7645 ;; Return value:  Size  Location     Type
  7646 ;;                  1    wreg      unsigned char 
  7647 ;; Registers used:
  7648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7649 ;; Tracked objects:
  7650 ;;		On entry : 0/0
  7651 ;;		On exit  : 0/0
  7652 ;;		Unchanged: 0/0
  7653 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7654 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7658 ;;Total ram usage:        3 bytes
  7659 ;; Hardware stack levels used:    1
  7660 ;; Hardware stack levels required when called:    5
  7661 ;; This function calls:
  7662 ;;		_EUSART1_Read
  7663 ;;		_TMR1_Initialize
  7664 ;;		_init_mdbdata
  7665 ;;		_mdb_on
  7666 ;;		_mdb_transmit
  7667 ;;		_mdb_waitr
  7668 ;; This function is called by:
  7669 ;;		_mdb_init
  7670 ;;		_mdb_reset
  7671 ;;		_mdb_noten
  7672 ;;		_mdb_security
  7673 ;;		_mdb_poll
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           	psect	text28
  7678  0110E4                     __ptext28:
  7679                           	opt stack 0
  7680  0110E4                     _mdb_comm:
  7681                           	opt stack 22
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;incstack = 0
  7685                           ;mdb_comm@slvadd stored from wreg
  7686  0110E4  6E25               	movwf	mdb_comm@slvadd,c
  7687                           
  7688                           ;mdb.c: 247: uint8_t i = 0;
  7689  0110E6  0E00               	movlw	0
  7690  0110E8  6E26               	movwf	mdb_comm@i,c
  7691                           
  7692                           ;mdb.c: 249: TX1STAbits.TX9D = 1;
  7693  0110EA  809E               	bsf	3998,0,c	;volatile
  7694                           
  7695                           ;mdb.c: 250: mdb_on();
  7696  0110EC  ECCD  F09B         	call	_mdb_on	;wreg free
  7697                           
  7698                           ;mdb.c: 254: mdb_transmit(slvadd);
  7699  0110F0  5025               	movf	mdb_comm@slvadd,w,c
  7700  0110F2  EC74  F09B         	call	_mdb_transmit
  7701                           
  7702                           ;mdb.c: 255: TX1STAbits.TX9D = 0;
  7703  0110F6  909E               	bcf	3998,0,c	;volatile
  7704                           
  7705                           ;mdb.c: 259: chkbyte = slvadd;
  7706  0110F8  C025  F041         	movff	mdb_comm@slvadd,_chkbyte
  7707                           
  7708                           ;mdb.c: 260: if(mcount != 0)
  7709  0110FC  5024               	movf	mdb_comm@mcount,w,c
  7710  0110FE  B4D8               	btfsc	status,2,c
  7711  011100  D01E               	goto	u5560
  7712                           
  7713                           ;mdb.c: 261: {
  7714                           ;mdb.c: 262: i = mcount + 1;
  7715  011102  2824               	incf	mdb_comm@mcount,w,c
  7716  011104  6E26               	movwf	mdb_comm@i,c
  7717                           
  7718                           ;mdb.c: 263: while(i != 0)
  7719  011106  D018               	goto	l3265
  7720  011108                     
  7721                           ;mdb.c: 264: {
  7722                           ;mdb.c: 265: mdb_transmit(mdbdata[mcount]);
  7723  011108  5024               	movf	mdb_comm@mcount,w,c
  7724  01110A  0D01               	mullw	1
  7725  01110C  0E60               	movlw	low _mdbdata
  7726  01110E  24F3               	addwf	prodl,w,c
  7727  011110  6ED9               	movwf	fsr2l,c
  7728  011112  0E00               	movlw	high _mdbdata
  7729  011114  20F4               	addwfc	prodh,w,c
  7730  011116  6EDA               	movwf	fsr2h,c
  7731  011118  50DF               	movf	indf2,w,c
  7732  01111A  EC74  F09B         	call	_mdb_transmit
  7733                           
  7734                           ;mdb.c: 268: chkbyte = chkbyte + mdbdata[mcount];
  7735  01111E  5024               	movf	mdb_comm@mcount,w,c
  7736  011120  0D01               	mullw	1
  7737  011122  0E60               	movlw	low _mdbdata
  7738  011124  24F3               	addwf	prodl,w,c
  7739  011126  6ED9               	movwf	fsr2l,c
  7740  011128  0E00               	movlw	high _mdbdata
  7741  01112A  20F4               	addwfc	prodh,w,c
  7742  01112C  6EDA               	movwf	fsr2h,c
  7743  01112E  50DF               	movf	indf2,w,c
  7744  011130  2441               	addwf	_chkbyte,w,c
  7745  011132  6E41               	movwf	_chkbyte,c
  7746                           
  7747                           ;mdb.c: 269: i--;
  7748  011134  0626               	decf	mdb_comm@i,f,c
  7749                           
  7750                           ;mdb.c: 270: mcount--;
  7751  011136  0624               	decf	mdb_comm@mcount,f,c
  7752  011138                     l3265:
  7753  011138  5026               	movf	mdb_comm@i,w,c
  7754  01113A  A4D8               	btfss	status,2,c
  7755  01113C  D7E5               	goto	l3266
  7756  01113E                     u5560:
  7757                           
  7758                           ;mdb.c: 271: }
  7759                           ;mdb.c: 272: }
  7760                           ;mdb.c: 273: mdb_transmit(chkbyte);
  7761  01113E  5041               	movf	_chkbyte,w,c
  7762  011140  EC74  F09B         	call	_mdb_transmit
  7763                           
  7764                           ;mdb.c: 280: init_mdbdata(0xFF);
  7765  011144  0EFF               	movlw	255
  7766  011146  EC31  F09A         	call	_init_mdbdata
  7767                           
  7768                           ;mdb.c: 281: TMR1_Initialize();
  7769  01114A  EC51  F099         	call	_TMR1_Initialize	;wreg free
  7770                           
  7771                           ;mdb.c: 282: dbcount = 0;
  7772  01114E  0E00               	movlw	0
  7773  011150  0100               	movlb	0	; () banked
  7774  011152  6FA5               	movwf	(_dbcount+1)& (0+255),b
  7775  011154  0E00               	movlw	0
  7776  011156  6FA4               	movwf	_dbcount& (0+255),b
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;mdb.c: 283: mdbflags.isdata = 0;
  7780  011158  9040               	bcf	_mdbflags,0,c
  7781                           
  7782                           ; BSR set to: 0
  7783                           ;mdb.c: 284: i = 0;
  7784  01115A  0E00               	movlw	0
  7785  01115C  6E26               	movwf	mdb_comm@i,c
  7786                           
  7787                           ;mdb.c: 286: while(!PIR4bits.TMR1IF && !mdbflags.isdata)
  7788  01115E  D01F               	goto	u5590
  7789  011160                     
  7790                           ;mdb.c: 287: {
  7791                           ;mdb.c: 289: dbcount++;
  7792                           
  7793                           ; BSR set to: 0
  7794  011160  0100               	movlb	0	; () banked
  7795  011162  4BA4               	infsnz	_dbcount& (0+255),f,b
  7796  011164  2BA5               	incf	(_dbcount+1)& (0+255),f,b
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;mdb.c: 290: mdbflags.isdata = 0;
  7800  011166  9040               	bcf	_mdbflags,0,c
  7801                           
  7802                           ;mdb.c: 293: while(PIR3bits.RC1IF && !mdbflags.isdata)
  7803  011168  D015               	goto	l3270
  7804  01116A                     
  7805                           ;mdb.c: 294: {
  7806                           ;mdb.c: 297: mdbdata[i] = EUSART1_Read();
  7807                           
  7808                           ; BSR set to: 0
  7809  01116A  5026               	movf	mdb_comm@i,w,c
  7810  01116C  0D01               	mullw	1
  7811  01116E  0E60               	movlw	low _mdbdata
  7812  011170  24F3               	addwf	prodl,w,c
  7813  011172  6ED9               	movwf	fsr2l,c
  7814  011174  0E00               	movlw	high _mdbdata
  7815  011176  20F4               	addwfc	prodh,w,c
  7816  011178  6EDA               	movwf	fsr2h,c
  7817  01117A  EC62  F09B         	call	_EUSART1_Read	;wreg free
  7818  01117E  6EDF               	movwf	indf2,c
  7819                           
  7820                           ;mdb.c: 298: mdb_waitr();
  7821  011180  ECC3  F09B         	call	_mdb_waitr	;wreg free
  7822                           
  7823                           ;mdb.c: 300: mdbflags.isdata = RC1STAbits.RX9D;
  7824  011184  A09D               	btfss	3997,0,c	;volatile
  7825  011186  D002               	bra	u5575
  7826  011188  8040               	bsf	_mdbflags,0,c
  7827  01118A  D001               	bra	u5577
  7828  01118C                     u5575:
  7829  01118C  9040               	bcf	_mdbflags,0,c
  7830  01118E                     u5577:
  7831                           
  7832                           ;mdb.c: 301: TMR1_Initialize();
  7833  01118E  EC51  F099         	call	_TMR1_Initialize	;wreg free
  7834                           
  7835                           ;mdb.c: 302: i++;
  7836  011192  2A26               	incf	mdb_comm@i,f,c
  7837  011194                     l3270:
  7838  011194  010E               	movlb	14	; () banked
  7839  011196  ABCD               	btfss	205,5,b	;volatile
  7840  011198  D002               	goto	u5590
  7841                           
  7842                           ; BSR set to: 14
  7843  01119A  A040               	btfss	_mdbflags,0,c
  7844  01119C  D7E6               	goto	l3271
  7845  01119E                     u5590:
  7846                           
  7847                           ; BSR set to: 14
  7848                           
  7849                           ; BSR set to: 14
  7850  01119E  010E               	movlb	14	; () banked
  7851  0111A0  B1CE               	btfsc	206,0,b	;volatile
  7852  0111A2  D002               	goto	u5610
  7853                           
  7854                           ; BSR set to: 14
  7855  0111A4  A040               	btfss	_mdbflags,0,c
  7856  0111A6  D7DC               	goto	l3269
  7857  0111A8                     u5610:
  7858                           
  7859                           ; BSR set to: 14
  7860                           ;mdb.c: 304: }
  7861                           ;mdb.c: 306: }
  7862                           ;mdb.c: 308: i--;
  7863                           
  7864                           ; BSR set to: 14
  7865                           
  7866                           ; BSR set to: 14
  7867  0111A8  0626               	decf	mdb_comm@i,f,c
  7868                           
  7869                           ; BSR set to: 14
  7870                           ;mdb.c: 310: mdbflags.timeout = PIR4bits.TMR1IF;
  7871  0111AA  A1CE               	btfss	206,0,b	;volatile
  7872  0111AC  D002               	bra	u5625
  7873  0111AE  8640               	bsf	_mdbflags,3,c
  7874  0111B0  D001               	bra	u5627
  7875  0111B2                     u5625:
  7876  0111B2  9640               	bcf	_mdbflags,3,c
  7877  0111B4                     u5627:
  7878                           
  7879                           ;mdb.c: 312: if(mdbflags.isdata == 1 && mdbdata[i] != 0x00)
  7880  0111B4  A040               	btfss	_mdbflags,0,c
  7881  0111B6  D011               	goto	l3278
  7882  0111B8  5026               	movf	mdb_comm@i,w,c
  7883  0111BA  0D01               	mullw	1
  7884  0111BC  0E60               	movlw	low _mdbdata
  7885  0111BE  24F3               	addwf	prodl,w,c
  7886  0111C0  6ED9               	movwf	fsr2l,c
  7887  0111C2  0E00               	movlw	high _mdbdata
  7888  0111C4  20F4               	addwfc	prodh,w,c
  7889  0111C6  6EDA               	movwf	fsr2h,c
  7890  0111C8  50DF               	movf	indf2,w,c
  7891  0111CA  B4D8               	btfsc	status,2,c
  7892  0111CC  D006               	goto	l3278
  7893                           
  7894                           ;mdb.c: 313: {
  7895                           ;mdb.c: 314: TX1STAbits.TX9D = 1;
  7896  0111CE  809E               	bsf	3998,0,c	;volatile
  7897                           
  7898                           ;mdb.c: 315: mdb_on();
  7899  0111D0  ECCD  F09B         	call	_mdb_on	;wreg free
  7900                           
  7901                           ;mdb.c: 316: mdb_transmit(0x00);
  7902  0111D4  0E00               	movlw	0
  7903  0111D6  EC74  F09B         	call	_mdb_transmit
  7904  0111DA                     l3278:
  7905                           
  7906                           ;mdb.c: 318: }
  7907                           ;mdb.c: 320: mdb_on();
  7908  0111DA  ECCD  F09B         	call	_mdb_on	;wreg free
  7909                           
  7910                           ;mdb.c: 322: return(i);
  7911  0111DE  5026               	movf	mdb_comm@i,w,c
  7912  0111E0  0012               	return	
  7913  0111E2                     __end_of_mdb_comm:
  7914                           	opt stack 0
  7915                           tblptru	equ	0xFF8
  7916                           tblptrh	equ	0xFF7
  7917                           tblptrl	equ	0xFF6
  7918                           tablat	equ	0xFF5
  7919                           prodh	equ	0xFF4
  7920                           prodl	equ	0xFF3
  7921                           postinc0	equ	0xFEE
  7922                           wreg	equ	0xFE8
  7923                           postdec1	equ	0xFE5
  7924                           fsr1h	equ	0xFE2
  7925                           fsr1l	equ	0xFE1
  7926                           indf2	equ	0xFDF
  7927                           postinc2	equ	0xFDE
  7928                           fsr2h	equ	0xFDA
  7929                           fsr2l	equ	0xFD9
  7930                           status	equ	0xFD8
  7931                           
  7932 ;; *************** function _mdb_waitr *****************
  7933 ;; Defined at:
  7934 ;;		line 346 in file "mdb.c"
  7935 ;; Parameters:    Size  Location     Type
  7936 ;;		None
  7937 ;; Auto vars:     Size  Location     Type
  7938 ;;		None
  7939 ;; Return value:  Size  Location     Type
  7940 ;;                  1    wreg      void 
  7941 ;; Registers used:
  7942 ;;		None
  7943 ;; Tracked objects:
  7944 ;;		On entry : 0/0
  7945 ;;		On exit  : 0/0
  7946 ;;		Unchanged: 0/0
  7947 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7952 ;;Total ram usage:        0 bytes
  7953 ;; Hardware stack levels used:    1
  7954 ;; Hardware stack levels required when called:    2
  7955 ;; This function calls:
  7956 ;;		Nothing
  7957 ;; This function is called by:
  7958 ;;		_mdb_comm
  7959 ;;		_cctalk_read
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           	psect	text29
  7964  013786                     __ptext29:
  7965                           	opt stack 0
  7966  013786                     _mdb_waitr:
  7967                           	opt stack 24
  7968                           
  7969                           ;mdb.c: 349: {
  7970                           
  7971                           ;mdb.c: 348: while(BAUD1CONbits.RCIDL == 0)
  7972                           
  7973                           ;incstack = 0
  7974  013786  BC9F               	btfsc	3999,6,c	;volatile
  7975  013788  0012               	return	
  7976  01378A  D7FD               	goto	_mdb_waitr
  7977  01378C                     __end_of_mdb_waitr:
  7978                           	opt stack 0
  7979                           tblptru	equ	0xFF8
  7980                           tblptrh	equ	0xFF7
  7981                           tblptrl	equ	0xFF6
  7982                           tablat	equ	0xFF5
  7983                           prodh	equ	0xFF4
  7984                           prodl	equ	0xFF3
  7985                           postinc0	equ	0xFEE
  7986                           wreg	equ	0xFE8
  7987                           postdec1	equ	0xFE5
  7988                           fsr1h	equ	0xFE2
  7989                           fsr1l	equ	0xFE1
  7990                           indf2	equ	0xFDF
  7991                           postinc2	equ	0xFDE
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _mdb_transmit *****************
  7997 ;; Defined at:
  7998 ;;		line 447 in file "mdb.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  txbyte          1    wreg     unsigned char 
  8001 ;; Auto vars:     Size  Location     Type
  8002 ;;  txbyte          1   19[COMRAM] unsigned char 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  1    wreg      void 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        1 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    3
  8019 ;; This function calls:
  8020 ;;		_EUSART1_Write
  8021 ;;		_mdb_waitx
  8022 ;; This function is called by:
  8023 ;;		_mdb_comm
  8024 ;;		_mdb_test
  8025 ;;		_cctalk_comm
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text30
  8030  0136E8                     __ptext30:
  8031                           	opt stack 0
  8032  0136E8                     _mdb_transmit:
  8033                           	opt stack 23
  8034                           
  8035                           ;incstack = 0
  8036                           ;mdb_transmit@txbyte stored from wreg
  8037  0136E8  6E1E               	movwf	mdb_transmit@txbyte,c
  8038                           
  8039                           ;mdb.c: 449: EUSART1_Write(txbyte);
  8040  0136EA  501E               	movf	mdb_transmit@txbyte,w,c
  8041  0136EC  EC7B  F09B         	call	_EUSART1_Write
  8042                           
  8043                           ;mdb.c: 450: mdb_waitx();
  8044  0136F0  ECC6  F09B         	call	_mdb_waitx	;wreg free
  8045  0136F4  0012               	return		;funcret
  8046  0136F6                     __end_of_mdb_transmit:
  8047                           	opt stack 0
  8048                           tblptru	equ	0xFF8
  8049                           tblptrh	equ	0xFF7
  8050                           tblptrl	equ	0xFF6
  8051                           tablat	equ	0xFF5
  8052                           prodh	equ	0xFF4
  8053                           prodl	equ	0xFF3
  8054                           postinc0	equ	0xFEE
  8055                           wreg	equ	0xFE8
  8056                           postdec1	equ	0xFE5
  8057                           fsr1h	equ	0xFE2
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _mdb_waitx *****************
  8066 ;; Defined at:
  8067 ;;		line 338 in file "mdb.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;		None
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;		None
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		None
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;Total ram usage:        0 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    2
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_mdb_transmit
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text31
  8096  01378C                     __ptext31:
  8097                           	opt stack 0
  8098  01378C                     _mdb_waitx:
  8099                           	opt stack 23
  8100                           
  8101                           ;mdb.c: 341: {
  8102                           
  8103                           ;mdb.c: 340: while(TX1STAbits.TRMT == 0)
  8104                           
  8105                           ;incstack = 0
  8106  01378C  B29E               	btfsc	3998,1,c	;volatile
  8107  01378E  0012               	return	
  8108  013790  D7FD               	goto	_mdb_waitx
  8109  013792                     __end_of_mdb_waitx:
  8110                           	opt stack 0
  8111                           tblptru	equ	0xFF8
  8112                           tblptrh	equ	0xFF7
  8113                           tblptrl	equ	0xFF6
  8114                           tablat	equ	0xFF5
  8115                           prodh	equ	0xFF4
  8116                           prodl	equ	0xFF3
  8117                           postinc0	equ	0xFEE
  8118                           wreg	equ	0xFE8
  8119                           postdec1	equ	0xFE5
  8120                           fsr1h	equ	0xFE2
  8121                           fsr1l	equ	0xFE1
  8122                           indf2	equ	0xFDF
  8123                           postinc2	equ	0xFDE
  8124                           fsr2h	equ	0xFDA
  8125                           fsr2l	equ	0xFD9
  8126                           status	equ	0xFD8
  8127                           
  8128 ;; *************** function _EUSART1_Write *****************
  8129 ;; Defined at:
  8130 ;;		line 111 in file "mcc_generated_files/eusart1.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;  txData          1    wreg     unsigned char 
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;  txData          1   18[COMRAM] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      void 
  8137 ;; Registers used:
  8138 ;;		wreg
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;Total ram usage:        1 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    2
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_mdb_transmit
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           	psect	text32
  8159  0136F6                     __ptext32:
  8160                           	opt stack 0
  8161  0136F6                     _EUSART1_Write:
  8162                           	opt stack 23
  8163                           
  8164                           ;incstack = 0
  8165                           ;EUSART1_Write@txData stored from wreg
  8166  0136F6  6E1D               	movwf	EUSART1_Write@txData,c
  8167  0136F8                     
  8168                           ;eusart1.c: 114: {
  8169                           
  8170                           ;eusart1.c: 113: while(0 == PIR3bits.TX1IF)
  8171  0136F8  010E               	movlb	14	; () banked
  8172  0136FA  A9CD               	btfss	205,4,b	;volatile
  8173  0136FC  D7FD               	goto	l12029
  8174                           
  8175                           ; BSR set to: 14
  8176                           ;eusart1.c: 115: }
  8177                           ;eusart1.c: 117: TX1REG = txData;
  8178                           
  8179                           ; BSR set to: 14
  8180  0136FE  C01D  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  8181                           
  8182                           ; BSR set to: 14
  8183  013702  0012               	return		;funcret
  8184  013704                     __end_of_EUSART1_Write:
  8185                           	opt stack 0
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           prodh	equ	0xFF4
  8191                           prodl	equ	0xFF3
  8192                           postinc0	equ	0xFEE
  8193                           wreg	equ	0xFE8
  8194                           postdec1	equ	0xFE5
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           fsr2h	equ	0xFDA
  8200                           fsr2l	equ	0xFD9
  8201                           status	equ	0xFD8
  8202                           
  8203 ;; *************** function _mdb_on *****************
  8204 ;; Defined at:
  8205 ;;		line 325 in file "mdb.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;		None
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;		None
  8210 ;; Return value:  Size  Location     Type
  8211 ;;                  1    wreg      void 
  8212 ;; Registers used:
  8213 ;;		None
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8223 ;;Total ram usage:        0 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    2
  8226 ;; This function calls:
  8227 ;;		Nothing
  8228 ;; This function is called by:
  8229 ;;		_mdb_comm
  8230 ;;		_mdb_test
  8231 ;;		_cctalk_init
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text33
  8236  01379A                     __ptext33:
  8237                           	opt stack 0
  8238  01379A                     _mdb_on:
  8239                           	opt stack 24
  8240                           
  8241                           ;mdb.c: 331: LATCbits.LATC0 = 1;
  8242                           
  8243                           ; BSR set to: 14
  8244                           ;incstack = 0
  8245  01379A  8085               	bsf	3973,0,c	;volatile
  8246  01379C  0012               	return		;funcret
  8247  01379E                     __end_of_mdb_on:
  8248                           	opt stack 0
  8249                           tblptru	equ	0xFF8
  8250                           tblptrh	equ	0xFF7
  8251                           tblptrl	equ	0xFF6
  8252                           tablat	equ	0xFF5
  8253                           prodh	equ	0xFF4
  8254                           prodl	equ	0xFF3
  8255                           postinc0	equ	0xFEE
  8256                           wreg	equ	0xFE8
  8257                           postdec1	equ	0xFE5
  8258                           fsr1h	equ	0xFE2
  8259                           fsr1l	equ	0xFE1
  8260                           indf2	equ	0xFDF
  8261                           postinc2	equ	0xFDE
  8262                           fsr2h	equ	0xFDA
  8263                           fsr2l	equ	0xFD9
  8264                           status	equ	0xFD8
  8265                           
  8266 ;; *************** function _init_mdbdata *****************
  8267 ;; Defined at:
  8268 ;;		line 13 in file "mdb.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;  initdata        1    wreg     unsigned char 
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;  initdata        1   23[COMRAM] unsigned char 
  8273 ;;  i               1   24[COMRAM] unsigned char 
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      void 
  8276 ;; Registers used:
  8277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8287 ;;Total ram usage:        2 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    4
  8290 ;; This function calls:
  8291 ;;		_init_pricestore
  8292 ;; This function is called by:
  8293 ;;		_mdb_noten
  8294 ;;		_mdb_security
  8295 ;;		_mdb_comm
  8296 ;;		_cctalk_pinenter
  8297 ;;		_cctalk_comm
  8298 ;; This function uses a non-reentrant model
  8299 ;;
  8300                           
  8301                           	psect	text34
  8302  013462                     __ptext34:
  8303                           	opt stack 0
  8304  013462                     _init_mdbdata:
  8305                           	opt stack 22
  8306                           
  8307                           ;incstack = 0
  8308                           ;init_mdbdata@initdata stored from wreg
  8309  013462  6E22               	movwf	init_mdbdata@initdata,c
  8310                           
  8311                           ;mdb.c: 15: char i = 0;
  8312  013464  0E00               	movlw	0
  8313  013466  6E23               	movwf	init_mdbdata@i,c
  8314                           
  8315                           ;mdb.c: 16: while(i < 32)
  8316  013468  D00B               	goto	l3179
  8317  01346A                     
  8318                           ;mdb.c: 17: {
  8319                           ;mdb.c: 18: mdbdata[i] = initdata;
  8320  01346A  5023               	movf	init_mdbdata@i,w,c
  8321  01346C  0D01               	mullw	1
  8322  01346E  0E60               	movlw	low _mdbdata
  8323  013470  24F3               	addwf	prodl,w,c
  8324  013472  6ED9               	movwf	fsr2l,c
  8325  013474  0E00               	movlw	high _mdbdata
  8326  013476  20F4               	addwfc	prodh,w,c
  8327  013478  6EDA               	movwf	fsr2h,c
  8328  01347A  C022  FFDF         	movff	init_mdbdata@initdata,indf2
  8329                           
  8330                           ;mdb.c: 19: i++;
  8331  01347E  2A23               	incf	init_mdbdata@i,f,c
  8332  013480                     l3179:
  8333  013480  0E1F               	movlw	31
  8334  013482  6423               	cpfsgt	init_mdbdata@i,c
  8335  013484  D7F2               	goto	l3180
  8336                           
  8337                           ;mdb.c: 20: }
  8338                           ;mdb.c: 21: init_pricestore();
  8339  013486  EC2B  F097         	call	_init_pricestore	;wreg free
  8340  01348A  0012               	return		;funcret
  8341  01348C                     __end_of_init_mdbdata:
  8342                           	opt stack 0
  8343                           tblptru	equ	0xFF8
  8344                           tblptrh	equ	0xFF7
  8345                           tblptrl	equ	0xFF6
  8346                           tablat	equ	0xFF5
  8347                           prodh	equ	0xFF4
  8348                           prodl	equ	0xFF3
  8349                           postinc0	equ	0xFEE
  8350                           wreg	equ	0xFE8
  8351                           postdec1	equ	0xFE5
  8352                           fsr1h	equ	0xFE2
  8353                           fsr1l	equ	0xFE1
  8354                           indf2	equ	0xFDF
  8355                           postinc2	equ	0xFDE
  8356                           fsr2h	equ	0xFDA
  8357                           fsr2l	equ	0xFD9
  8358                           status	equ	0xFD8
  8359                           
  8360 ;; *************** function _init_pricestore *****************
  8361 ;; Defined at:
  8362 ;;		line 221 in file "dispense.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;		None
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;  i               1   22[COMRAM] unsigned char 
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  1    wreg      void 
  8369 ;; Registers used:
  8370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;Total ram usage:        3 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    3
  8383 ;; This function calls:
  8384 ;;		_DATAEE_ReadByte
  8385 ;; This function is called by:
  8386 ;;		_init_mdbdata
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           	psect	text35
  8391  012E56                     __ptext35:
  8392                           	opt stack 0
  8393  012E56                     _init_pricestore:
  8394                           	opt stack 22
  8395                           
  8396                           ;dispense.c: 224: char i = 0;
  8397                           
  8398                           ;incstack = 0
  8399  012E56  0E00               	movlw	0
  8400  012E58  6E21               	movwf	init_pricestore@i,c
  8401                           
  8402                           ;dispense.c: 225: while(i < 8)
  8403  012E5A  D01E               	goto	l4825
  8404  012E5C                     
  8405                           ;dispense.c: 226: {
  8406                           ;dispense.c: 227: pricevend[i] = DATAEE_ReadByte(pricestore + i);
  8407  012E5C  5021               	movf	init_pricestore@i,w,c
  8408  012E5E  0D01               	mullw	1
  8409  012E60  0E7F               	movlw	low _pricevend
  8410  012E62  24F3               	addwf	prodl,w,c
  8411  012E64  6ED9               	movwf	fsr2l,c
  8412  012E66  0E00               	movlw	high _pricevend
  8413  012E68  20F4               	addwfc	prodh,w,c
  8414  012E6A  6EDA               	movwf	fsr2h,c
  8415  012E6C  0E50               	movlw	low _pricestore
  8416  012E6E  6EF6               	movwf	tblptrl,c
  8417  012E70                     	if	1	;There is more than 1 active tblptr byte
  8418  012E70  0EFB               	movlw	high _pricestore
  8419  012E72  6EF7               	movwf	tblptrh,c
  8420  012E74                     	endif
  8421  012E74                     	if	1	;There are 3 active tblptr bytes
  8422  012E74  0E00               	movlw	low (_pricestore shr (0+16))
  8423  012E76  6EF8               	movwf	tblptru,c
  8424  012E78                     	endif
  8425  012E78  0009               	tblrd		*+
  8426  012E7A  CFF5 F01F          	movff	tablat,??_init_pricestore
  8427  012E7E  0009               	tblrd		*+
  8428  012E80  CFF5 F020          	movff	tablat,??_init_pricestore+1
  8429  012E84  5021               	movf	init_pricestore@i,w,c
  8430  012E86  241F               	addwf	??_init_pricestore,w,c
  8431  012E88  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  8432  012E8A  0E00               	movlw	0
  8433  012E8C  2020               	addwfc	??_init_pricestore+1,w,c
  8434  012E8E  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  8435  012E90  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
  8436  012E94  6EDF               	movwf	indf2,c
  8437                           
  8438                           ;dispense.c: 228: i++;
  8439  012E96  2A21               	incf	init_pricestore@i,f,c
  8440  012E98                     l4825:
  8441  012E98  0E07               	movlw	7
  8442  012E9A  6421               	cpfsgt	init_pricestore@i,c
  8443  012E9C  D7DF               	goto	l4826
  8444  012E9E  0012               	return	
  8445  012EA0                     __end_of_init_pricestore:
  8446                           	opt stack 0
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           postinc0	equ	0xFEE
  8454                           wreg	equ	0xFE8
  8455                           postdec1	equ	0xFE5
  8456                           fsr1h	equ	0xFE2
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           fsr2h	equ	0xFDA
  8461                           fsr2l	equ	0xFD9
  8462                           status	equ	0xFD8
  8463                           
  8464 ;; *************** function _EUSART1_Read *****************
  8465 ;; Defined at:
  8466 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  8467 ;; Parameters:    Size  Location     Type
  8468 ;;		None
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;		None
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      unsigned char 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;Total ram usage:        0 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    2
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_mdb_comm
  8491 ;;		_cctalk_read
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text36
  8496  0136C4                     __ptext36:
  8497                           	opt stack 0
  8498  0136C4                     _EUSART1_Read:
  8499                           	opt stack 24
  8500                           
  8501                           ;eusart1.c: 96: {
  8502                           
  8503                           ;eusart1.c: 95: while(!PIR3bits.RC1IF)
  8504                           
  8505                           ;incstack = 0
  8506  0136C4  010E               	movlb	14	; () banked
  8507  0136C6  ABCD               	btfss	205,5,b	;volatile
  8508  0136C8  D7FD               	goto	_EUSART1_Read
  8509                           
  8510                           ; BSR set to: 14
  8511                           ;eusart1.c: 97: }
  8512                           ;eusart1.c: 100: if(1 == RC1STAbits.OERR)
  8513  0136CA  A29D               	btfss	3997,1,c	;volatile
  8514  0136CC  D002               	goto	l114
  8515                           
  8516                           ; BSR set to: 14
  8517                           ;eusart1.c: 101: {
  8518                           ;eusart1.c: 104: RC1STAbits.CREN = 0;
  8519  0136CE  989D               	bcf	3997,4,c	;volatile
  8520                           
  8521                           ;eusart1.c: 105: RC1STAbits.CREN = 1;
  8522  0136D0  889D               	bsf	3997,4,c	;volatile
  8523  0136D2                     l114:
  8524                           
  8525                           ; BSR set to: 14
  8526                           ;eusart1.c: 106: }
  8527                           ;eusart1.c: 108: return RC1REG;
  8528                           
  8529                           ; BSR set to: 14
  8530  0136D2  5099               	movf	3993,w,c	;volatile
  8531  0136D4  0012               	return	
  8532  0136D6                     __end_of_EUSART1_Read:
  8533                           	opt stack 0
  8534                           tblptru	equ	0xFF8
  8535                           tblptrh	equ	0xFF7
  8536                           tblptrl	equ	0xFF6
  8537                           tablat	equ	0xFF5
  8538                           prodh	equ	0xFF4
  8539                           prodl	equ	0xFF3
  8540                           postinc0	equ	0xFEE
  8541                           wreg	equ	0xFE8
  8542                           postdec1	equ	0xFE5
  8543                           fsr1h	equ	0xFE2
  8544                           fsr1l	equ	0xFE1
  8545                           indf2	equ	0xFDF
  8546                           postinc2	equ	0xFDE
  8547                           fsr2h	equ	0xFDA
  8548                           fsr2l	equ	0xFD9
  8549                           status	equ	0xFD8
  8550                           
  8551 ;; *************** function _lcd_init *****************
  8552 ;; Defined at:
  8553 ;;		line 12 in file "lcd.c"
  8554 ;; Parameters:    Size  Location     Type
  8555 ;;		None
  8556 ;; Auto vars:     Size  Location     Type
  8557 ;;		None
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  1    wreg      void 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:        2 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    8
  8574 ;; This function calls:
  8575 ;;		_lcd_clockE
  8576 ;;		_lcd_test
  8577 ;;		_lcd_write
  8578 ;; This function is called by:
  8579 ;;		_main
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           	psect	text37
  8584  011CC0                     __ptext37:
  8585                           	opt stack 0
  8586  011CC0                     _lcd_init:
  8587                           	opt stack 22
  8588                           
  8589                           ;lcd.c: 14: LATE = 0x00;
  8590                           
  8591                           ; BSR set to: 14
  8592                           ;incstack = 0
  8593  011CC0  0E00               	movlw	0
  8594  011CC2  6E87               	movwf	3975,c	;volatile
  8595                           
  8596                           ;lcd.c: 16: LATD = 0x03;
  8597  011CC4  0E03               	movlw	3
  8598  011CC6  6E86               	movwf	3974,c	;volatile
  8599                           
  8600                           ;lcd.c: 17: for(count = 3; count > 0; count-- )
  8601  011CC8  0E03               	movlw	3
  8602  011CCA  0100               	movlb	0	; () banked
  8603  011CCC  6FFD               	movwf	_count& (0+255),b
  8604  011CCE                     l13873:
  8605                           
  8606                           ; BSR set to: 0
  8607  011CCE  51FD               	movf	_count& (0+255),w,b
  8608  011CD0  0A80               	xorlw	128
  8609  011CD2  0F7F               	addlw	-129
  8610  011CD4  A0D8               	btfss	status,0,c
  8611  011CD6  D00D               	goto	u6690
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;lcd.c: 18: {
  8615                           ;lcd.c: 19: lcd_clockE();
  8616                           
  8617                           ; BSR set to: 0
  8618                           
  8619                           ; BSR set to: 0
  8620  011CD8  EC2E  F09B         	call	_lcd_clockE	;wreg free
  8621                           
  8622                           ;lcd.c: 20: _delay((unsigned long)((5)*(64000000/4000.0)));
  8623  011CDC  0E68               	movlw	104
  8624  011CDE  6E25               	movwf	??_lcd_init& (0+255),c
  8625  011CE0  0EE4               	movlw	228
  8626  011CE2                     u7287:
  8627  011CE2  2EE8               	decfsz	wreg,f,c
  8628  011CE4  D7FE               	bra	u7287
  8629  011CE6  2E25               	decfsz	??_lcd_init& (0+255),f,c
  8630  011CE8  D7FC               	bra	u7287
  8631  011CEA  D000               	nop2	
  8632  011CEC  0100               	movlb	0	; () banked
  8633  011CEE  07FD               	decf	_count& (0+255),f,b
  8634  011CF0  D7EE               	goto	l13873
  8635  011CF2                     u6690:
  8636                           
  8637                           ; BSR set to: 0
  8638                           ;lcd.c: 22: }
  8639                           ;lcd.c: 23: _delay((unsigned long)((50)*(64000000/4000000.0)));
  8640                           
  8641                           ; BSR set to: 0
  8642  011CF2  0EA0               	movlw	160
  8643  011CF4                     u7297:
  8644  011CF4  D000               	nop2	
  8645  011CF6  2EE8               	decfsz	wreg,f,c
  8646  011CF8  D7FD               	bra	u7297
  8647                           
  8648                           ;lcd.c: 24: LATD = 0x02;
  8649  011CFA  0E02               	movlw	2
  8650  011CFC  6E86               	movwf	3974,c	;volatile
  8651                           
  8652                           ;lcd.c: 25: lcd_clockE();
  8653  011CFE  EC2E  F09B         	call	_lcd_clockE	;wreg free
  8654                           
  8655                           ;lcd.c: 28: lcd_write(dispfunc3);
  8656  011D02  0E92               	movlw	low _dispfunc3
  8657  011D04  6EF6               	movwf	tblptrl,c
  8658  011D06                     	if	1	;There is more than 1 active tblptr byte
  8659  011D06  0EFB               	movlw	high _dispfunc3
  8660  011D08  6EF7               	movwf	tblptrh,c
  8661  011D0A                     	endif
  8662  011D0A                     	if	1	;There are 3 active tblptr bytes
  8663  011D0A  0E00               	movlw	low (_dispfunc3 shr (0+16))
  8664  011D0C  6EF8               	movwf	tblptru,c
  8665  011D0E                     	endif
  8666  011D0E  0008               	tblrd		*
  8667  011D10  50F5               	movf	tablat,w,c
  8668  011D12  ECD3  F099         	call	_lcd_write
  8669                           
  8670                           ;lcd.c: 30: lcd_write(dispon);
  8671  011D16  0E91               	movlw	low _dispon
  8672  011D18  6EF6               	movwf	tblptrl,c
  8673  011D1A                     	if	1	;There is more than 1 active tblptr byte
  8674  011D1A  0EFB               	movlw	high _dispon
  8675  011D1C  6EF7               	movwf	tblptrh,c
  8676  011D1E                     	endif
  8677  011D1E                     	if	1	;There are 3 active tblptr bytes
  8678  011D1E  0E00               	movlw	low (_dispon shr (0+16))
  8679  011D20  6EF8               	movwf	tblptru,c
  8680  011D22                     	endif
  8681  011D22  0008               	tblrd		*
  8682  011D24  50F5               	movf	tablat,w,c
  8683  011D26  ECD3  F099         	call	_lcd_write
  8684                           
  8685                           ;lcd.c: 32: lcd_write(dispnormal);
  8686  011D2A  0E8D               	movlw	low _dispnormal
  8687  011D2C  6EF6               	movwf	tblptrl,c
  8688  011D2E                     	if	1	;There is more than 1 active tblptr byte
  8689  011D2E  0EFB               	movlw	high _dispnormal
  8690  011D30  6EF7               	movwf	tblptrh,c
  8691  011D32                     	endif
  8692  011D32                     	if	1	;There are 3 active tblptr bytes
  8693  011D32  0E00               	movlw	low (_dispnormal shr (0+16))
  8694  011D34  6EF8               	movwf	tblptru,c
  8695  011D36                     	endif
  8696  011D36  0008               	tblrd		*
  8697  011D38  50F5               	movf	tablat,w,c
  8698  011D3A  ECD3  F099         	call	_lcd_write
  8699                           
  8700                           ;lcd.c: 34: lcd_write(dispclr);
  8701  011D3E  0E90               	movlw	low _dispclr
  8702  011D40  6EF6               	movwf	tblptrl,c
  8703  011D42                     	if	1	;There is more than 1 active tblptr byte
  8704  011D42  0EFB               	movlw	high _dispclr
  8705  011D44  6EF7               	movwf	tblptrh,c
  8706  011D46                     	endif
  8707  011D46                     	if	1	;There are 3 active tblptr bytes
  8708  011D46  0E00               	movlw	low (_dispclr shr (0+16))
  8709  011D48  6EF8               	movwf	tblptru,c
  8710  011D4A                     	endif
  8711  011D4A  0008               	tblrd		*
  8712  011D4C  50F5               	movf	tablat,w,c
  8713  011D4E  ECD3  F099         	call	_lcd_write
  8714                           
  8715                           ;lcd.c: 36: lcd_test();
  8716  011D52  EC23  F09B         	call	_lcd_test	;wreg free
  8717                           
  8718                           ;lcd.c: 37: _delay((unsigned long)((250)*(64000000/4000.0)));
  8719  011D56  0E15               	movlw	21
  8720  011D58  6E26               	movwf	(??_lcd_init+1)& (0+255),c
  8721  011D5A  0E4B               	movlw	75
  8722  011D5C  6E25               	movwf	??_lcd_init& (0+255),c
  8723  011D5E  0EBE               	movlw	190
  8724  011D60                     u7307:
  8725  011D60  2EE8               	decfsz	wreg,f,c
  8726  011D62  D7FE               	bra	u7307
  8727  011D64  2E25               	decfsz	??_lcd_init& (0+255),f,c
  8728  011D66  D7FC               	bra	u7307
  8729  011D68  2E26               	decfsz	(??_lcd_init+1)& (0+255),f,c
  8730  011D6A  D7FA               	bra	u7307
  8731  011D6C  D000               	nop2	
  8732  011D6E  F000               	nop		;# 
  8733  011D70  0012               	return		;funcret
  8734  011D72                     __end_of_lcd_init:
  8735                           	opt stack 0
  8736                           tblptru	equ	0xFF8
  8737                           tblptrh	equ	0xFF7
  8738                           tblptrl	equ	0xFF6
  8739                           tablat	equ	0xFF5
  8740                           prodh	equ	0xFF4
  8741                           prodl	equ	0xFF3
  8742                           postinc0	equ	0xFEE
  8743                           wreg	equ	0xFE8
  8744                           postdec1	equ	0xFE5
  8745                           fsr1h	equ	0xFE2
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           fsr2h	equ	0xFDA
  8750                           fsr2l	equ	0xFD9
  8751                           status	equ	0xFD8
  8752                           
  8753 ;; *************** function _lcd_test *****************
  8754 ;; Defined at:
  8755 ;;		line 311 in file "lcd.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;  character       1   25[COMRAM] unsigned char 
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      void 
  8762 ;; Registers used:
  8763 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;Total ram usage:        1 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    7
  8776 ;; This function calls:
  8777 ;;		_lcd_writeC
  8778 ;; This function is called by:
  8779 ;;		_lcd_init
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text38
  8784  013646                     __ptext38:
  8785                           	opt stack 0
  8786  013646                     _lcd_test:
  8787                           	opt stack 22
  8788                           
  8789                           ;lcd.c: 313: uint8_t character = 0x30;
  8790                           
  8791                           ;incstack = 0
  8792  013646  0E30               	movlw	48
  8793  013648  D004               	goto	L13
  8794  01364A                     
  8795                           ;lcd.c: 315: {
  8796                           ;lcd.c: 316: lcd_writeC(character);
  8797  01364A  5024               	movf	lcd_test@character,w,c
  8798  01364C  EC27  F094         	call	_lcd_writeC
  8799                           
  8800                           ;lcd.c: 317: character = character+ 1;
  8801  013650  2824               	incf	lcd_test@character,w,c
  8802  013652                     L13:
  8803  013652  6E24               	movwf	lcd_test@character,c
  8804  013654  0E7F               	movlw	127
  8805  013656  6424               	cpfsgt	lcd_test@character,c
  8806  013658  D7F8               	goto	l1925
  8807  01365A  0012               	return	
  8808  01365C                     __end_of_lcd_test:
  8809                           	opt stack 0
  8810                           tblptru	equ	0xFF8
  8811                           tblptrh	equ	0xFF7
  8812                           tblptrl	equ	0xFF6
  8813                           tablat	equ	0xFF5
  8814                           prodh	equ	0xFF4
  8815                           prodl	equ	0xFF3
  8816                           postinc0	equ	0xFEE
  8817                           wreg	equ	0xFE8
  8818                           postdec1	equ	0xFE5
  8819                           fsr1h	equ	0xFE2
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           fsr2h	equ	0xFDA
  8824                           fsr2l	equ	0xFD9
  8825                           status	equ	0xFD8
  8826                           
  8827 ;; *************** function _gsm_off *****************
  8828 ;; Defined at:
  8829 ;;		line 424 in file "gsm.c"
  8830 ;; Parameters:    Size  Location     Type
  8831 ;;		None
  8832 ;; Auto vars:     Size  Location     Type
  8833 ;;		None
  8834 ;; Return value:  Size  Location     Type
  8835 ;;                  1    wreg      void 
  8836 ;; Registers used:
  8837 ;;		None
  8838 ;; Tracked objects:
  8839 ;;		On entry : 0/0
  8840 ;;		On exit  : 0/0
  8841 ;;		Unchanged: 0/0
  8842 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8847 ;;Total ram usage:        0 bytes
  8848 ;; Hardware stack levels used:    1
  8849 ;; Hardware stack levels required when called:    2
  8850 ;; This function calls:
  8851 ;;		Nothing
  8852 ;; This function is called by:
  8853 ;;		_main
  8854 ;; This function uses a non-reentrant model
  8855 ;;
  8856                           
  8857                           	psect	text39
  8858  01379E                     __ptext39:
  8859                           	opt stack 0
  8860  01379E                     _gsm_off:
  8861                           	opt stack 28
  8862                           
  8863                           ;gsm.c: 426: LATCbits.LC3 = 0;
  8864                           
  8865                           ;incstack = 0
  8866  01379E  9685               	bcf	3973,3,c	;volatile
  8867  0137A0  0012               	return		;funcret
  8868  0137A2                     __end_of_gsm_off:
  8869                           	opt stack 0
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           postinc0	equ	0xFEE
  8877                           wreg	equ	0xFE8
  8878                           postdec1	equ	0xFE5
  8879                           fsr1h	equ	0xFE2
  8880                           fsr1l	equ	0xFE1
  8881                           indf2	equ	0xFDF
  8882                           postinc2	equ	0xFDE
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function _gsm_init *****************
  8888 ;; Defined at:
  8889 ;;		line 64 in file "gsm.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;		None
  8892 ;; Auto vars:     Size  Location     Type
  8893 ;;		None
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  1    wreg      void 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;Total ram usage:        2 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; Hardware stack levels required when called:   10
  8910 ;; This function calls:
  8911 ;;		_clock_display
  8912 ;;		_gsm_getbalance
  8913 ;;		_gsm_msg
  8914 ;;		_gsm_netwait
  8915 ;;		_gsm_on
  8916 ;;		_gsm_receive
  8917 ;;		_gsm_setime
  8918 ;;		_gsm_transmit
  8919 ;;		_gsm_txAT
  8920 ;;		_gsm_zerobuff
  8921 ;; This function is called by:
  8922 ;;		_main
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           	psect	text40
  8927  0108A0                     __ptext40:
  8928                           	opt stack 0
  8929  0108A0                     _gsm_init:
  8930                           	opt stack 20
  8931                           
  8932                           ;gsm.c: 66: PIE3bits.RC2IE =1;
  8933                           
  8934                           ;incstack = 0
  8935  0108A0  010E               	movlb	14	; () banked
  8936  0108A2  8FC5               	bsf	197,7,b	;volatile
  8937                           
  8938                           ;gsm.c: 67: gsmflags.meerror = 0;
  8939  0108A4  9230               	bcf	_gsmflags,1,c
  8940                           
  8941                           ; BSR set to: 14
  8942                           ;gsm.c: 68: eusart2RxCount = 512;
  8943  0108A6  0E00               	movlw	0
  8944  0108A8  6E46               	movwf	_eusart2RxCount,c	;volatile
  8945  0108AA                     
  8946                           ;gsm.c: 71: gsm_zerobuff(gsmmsg, 0x200);
  8947                           
  8948                           ; BSR set to: 14
  8949  0108AA  0E02               	movlw	low _gsmmsg
  8950  0108AC  6E1D               	movwf	gsm_zerobuff@gsmsgbuf,c
  8951  0108AE  0E06               	movlw	high _gsmmsg
  8952  0108B0  6E1E               	movwf	gsm_zerobuff@gsmsgbuf+1,c
  8953  0108B2  0E02               	movlw	2
  8954  0108B4  6E20               	movwf	gsm_zerobuff@count+1,c
  8955  0108B6  0E00               	movlw	0
  8956  0108B8  6E1F               	movwf	gsm_zerobuff@count,c
  8957  0108BA  EC1B  F09A         	call	_gsm_zerobuff	;wreg free
  8958  0108BE                     
  8959                           ;gsm.c: 74: {
  8960  0108BE  010E               	movlb	14	; () banked
  8961  0108C0  A7CE               	btfss	206,3,b	;volatile
  8962  0108C2  D7FD               	goto	l5401
  8963                           
  8964                           ; BSR set to: 14
  8965                           ;gsm.c: 76: }
  8966                           ;gsm.c: 80: gsm_txAT();
  8967                           
  8968                           ; BSR set to: 14
  8969  0108C4  EC82  F09B         	call	_gsm_txAT	;wreg free
  8970                           
  8971                           ;gsm.c: 81: gsm_transmit(0x0D);
  8972  0108C8  0E0D               	movlw	13
  8973  0108CA  EC44  F09B         	call	_gsm_transmit
  8974                           
  8975                           ;gsm.c: 83: gsm_receive(2, gsmmsg);
  8976  0108CE  0E02               	movlw	low _gsmmsg
  8977  0108D0  6E23               	movwf	gsm_receive@messagebuf,c
  8978  0108D2  0E06               	movlw	high _gsmmsg
  8979  0108D4  6E24               	movwf	gsm_receive@messagebuf+1,c
  8980  0108D6  0E02               	movlw	2
  8981  0108D8  EC5E  F096         	call	_gsm_receive
  8982                           
  8983                           ;gsm.c: 84: gsm_msg(noecho);
  8984  0108DC  0E9A               	movlw	low _noecho
  8985  0108DE  6E1F               	movwf	gsm_msg@msgadd,c
  8986  0108E0  0EFF               	movlw	high _noecho
  8987  0108E2  6E20               	movwf	gsm_msg@msgadd+1,c
  8988  0108E4  EC0A  F08F         	call	_gsm_msg	;wreg free
  8989                           
  8990                           ;gsm.c: 85: gsm_receive(1, gsmmsg);
  8991  0108E8  0E02               	movlw	low _gsmmsg
  8992  0108EA  6E23               	movwf	gsm_receive@messagebuf,c
  8993  0108EC  0E06               	movlw	high _gsmmsg
  8994  0108EE  6E24               	movwf	gsm_receive@messagebuf+1,c
  8995  0108F0  0E01               	movlw	1
  8996  0108F2  EC5E  F096         	call	_gsm_receive
  8997                           
  8998                           ;gsm.c: 86: gsm_netwait();
  8999  0108F6  EC8C  F094         	call	_gsm_netwait	;wreg free
  9000                           
  9001                           ;gsm.c: 88: if(gsmflags.meerror)
  9002  0108FA  A230               	btfss	_gsmflags,1,c
  9003  0108FC  D011               	goto	l5403
  9004                           
  9005                           ;gsm.c: 89: {
  9006                           ;gsm.c: 90: LATCbits.LC3 = 0;
  9007  0108FE  9685               	bcf	3973,3,c	;volatile
  9008                           
  9009                           ;gsm.c: 91: _delay((unsigned long)((2000)*(64000000/4000.0)));
  9010  010900  0EA3               	movlw	163
  9011  010902  0100               	movlb	0	; () banked
  9012  010904  6FE2               	movwf	(??_gsm_init+1)& (0+255),b
  9013  010906  0E57               	movlw	87
  9014  010908  6FE1               	movwf	??_gsm_init& (0+255),b
  9015  01090A  0E02               	movlw	2
  9016  01090C                     u7317:
  9017  01090C  2EE8               	decfsz	wreg,f,c
  9018  01090E  D7FE               	bra	u7317
  9019  010910  2FE1               	decfsz	??_gsm_init& (0+255),f,b
  9020  010912  D7FC               	bra	u7317
  9021  010914  2FE2               	decfsz	(??_gsm_init+1)& (0+255),f,b
  9022  010916  D7FA               	bra	u7317
  9023  010918  F000               	nop	
  9024                           
  9025                           ;gsm.c: 92: gsm_on();
  9026  01091A  ECBA  F09B         	call	_gsm_on	;wreg free
  9027                           
  9028                           ;gsm.c: 93: goto gsminit;
  9029  01091E  D7C5               	goto	l5399
  9030  010920                     l5403:
  9031                           
  9032                           ;gsm.c: 94: }
  9033                           ;gsm.c: 103: gsm_setime();
  9034  010920  EC00  F080         	call	_gsm_setime	;wreg free
  9035                           
  9036                           ;gsm.c: 104: if(gsmflags.meerror)
  9037  010924  A230               	btfss	_gsmflags,1,c
  9038  010926  D011               	goto	l5404
  9039                           
  9040                           ;gsm.c: 105: {
  9041                           ;gsm.c: 106: LATCbits.LC3 = 0;
  9042  010928  9685               	bcf	3973,3,c	;volatile
  9043                           
  9044                           ;gsm.c: 107: _delay((unsigned long)((2000)*(64000000/4000.0)));
  9045  01092A  0EA3               	movlw	163
  9046  01092C  0100               	movlb	0	; () banked
  9047  01092E  6FE2               	movwf	(??_gsm_init+1)& (0+255),b
  9048  010930  0E57               	movlw	87
  9049  010932  6FE1               	movwf	??_gsm_init& (0+255),b
  9050  010934  0E02               	movlw	2
  9051  010936                     u7327:
  9052  010936  2EE8               	decfsz	wreg,f,c
  9053  010938  D7FE               	bra	u7327
  9054  01093A  2FE1               	decfsz	??_gsm_init& (0+255),f,b
  9055  01093C  D7FC               	bra	u7327
  9056  01093E  2FE2               	decfsz	(??_gsm_init+1)& (0+255),f,b
  9057  010940  D7FA               	bra	u7327
  9058  010942  F000               	nop	
  9059                           
  9060                           ;gsm.c: 108: gsm_on();
  9061  010944  ECBA  F09B         	call	_gsm_on	;wreg free
  9062                           
  9063                           ;gsm.c: 109: goto gsminit;
  9064  010948  D7B0               	goto	l5399
  9065  01094A                     l5404:
  9066                           
  9067                           ;gsm.c: 110: }
  9068                           ;gsm.c: 114: gsm_getbalance();
  9069  01094A  EC4E  F093         	call	_gsm_getbalance	;wreg free
  9070                           
  9071                           ;gsm.c: 119: clock_display();
  9072  01094E  EC14  F098         	call	_clock_display	;wreg free
  9073                           
  9074                           ;gsm.c: 122: gsm_msg(smstxt);
  9075  010952  0E49               	movlw	low _smstxt
  9076  010954  6E1F               	movwf	gsm_msg@msgadd,c
  9077  010956  0EFF               	movlw	high _smstxt
  9078  010958  6E20               	movwf	gsm_msg@msgadd+1,c
  9079  01095A  EC0A  F08F         	call	_gsm_msg	;wreg free
  9080                           
  9081                           ;gsm.c: 123: gsm_receive(2, gsmmsg);
  9082  01095E  0E02               	movlw	low _gsmmsg
  9083  010960  6E23               	movwf	gsm_receive@messagebuf,c
  9084  010962  0E06               	movlw	high _gsmmsg
  9085  010964  6E24               	movwf	gsm_receive@messagebuf+1,c
  9086  010966  0E02               	movlw	2
  9087  010968  EC5E  F096         	call	_gsm_receive
  9088                           
  9089                           ;gsm.c: 125: gsm_msg(smsdel);
  9090  01096C  0E80               	movlw	low _smsdel
  9091  01096E  6E1F               	movwf	gsm_msg@msgadd,c
  9092  010970  0EFE               	movlw	high _smsdel
  9093  010972  6E20               	movwf	gsm_msg@msgadd+1,c
  9094  010974  EC0A  F08F         	call	_gsm_msg	;wreg free
  9095                           
  9096                           ;gsm.c: 126: gsm_receive(1, gsmmsg);
  9097  010978  0E02               	movlw	low _gsmmsg
  9098  01097A  6E23               	movwf	gsm_receive@messagebuf,c
  9099  01097C  0E06               	movlw	high _gsmmsg
  9100  01097E  6E24               	movwf	gsm_receive@messagebuf+1,c
  9101  010980  0E01               	movlw	1
  9102  010982  EC5E  F096         	call	_gsm_receive
  9103                           
  9104                           ;gsm.c: 128: gsm_msg(setgsm);
  9105  010986  0EDB               	movlw	low _setgsm
  9106  010988  6E1F               	movwf	gsm_msg@msgadd,c
  9107  01098A  0EFE               	movlw	high _setgsm
  9108  01098C  6E20               	movwf	gsm_msg@msgadd+1,c
  9109  01098E  EC0A  F08F         	call	_gsm_msg	;wreg free
  9110                           
  9111                           ;gsm.c: 129: gsm_receive(1,gsmmsg);
  9112  010992  0E02               	movlw	low _gsmmsg
  9113  010994  6E23               	movwf	gsm_receive@messagebuf,c
  9114  010996  0E06               	movlw	high _gsmmsg
  9115  010998  6E24               	movwf	gsm_receive@messagebuf+1,c
  9116  01099A  0E01               	movlw	1
  9117  01099C  EC5E  F096         	call	_gsm_receive
  9118                           
  9119                           ;gsm.c: 131: gsm_msg(ussdw2);
  9120  0109A0  0E41               	movlw	low _ussdw2
  9121  0109A2  6E1F               	movwf	gsm_msg@msgadd,c
  9122  0109A4  0EFE               	movlw	high _ussdw2
  9123  0109A6  6E20               	movwf	gsm_msg@msgadd+1,c
  9124  0109A8  EC0A  F08F         	call	_gsm_msg	;wreg free
  9125                           
  9126                           ;gsm.c: 132: gsm_receive(2, gsmmsg);
  9127  0109AC  0E02               	movlw	low _gsmmsg
  9128  0109AE  6E23               	movwf	gsm_receive@messagebuf,c
  9129  0109B0  0E06               	movlw	high _gsmmsg
  9130  0109B2  6E24               	movwf	gsm_receive@messagebuf+1,c
  9131  0109B4  0E02               	movlw	2
  9132  0109B6  EC5E  F096         	call	_gsm_receive
  9133                           
  9134                           ;gsm.c: 134: gsm_msg(engqry);
  9135  0109BA  0E04               	movlw	low _engqry
  9136  0109BC  6E1F               	movwf	gsm_msg@msgadd,c
  9137  0109BE  0EFF               	movlw	high _engqry
  9138  0109C0  6E20               	movwf	gsm_msg@msgadd+1,c
  9139  0109C2  EC0A  F08F         	call	_gsm_msg	;wreg free
  9140                           
  9141                           ;gsm.c: 135: gsm_receive(2, gsmmsg);
  9142  0109C6  0E02               	movlw	low _gsmmsg
  9143  0109C8  6E23               	movwf	gsm_receive@messagebuf,c
  9144  0109CA  0E06               	movlw	high _gsmmsg
  9145  0109CC  6E24               	movwf	gsm_receive@messagebuf+1,c
  9146  0109CE  0E02               	movlw	2
  9147  0109D0  EC5E  F096         	call	_gsm_receive
  9148                           
  9149                           ;gsm.c: 137: gsm_msg(netoff);
  9150  0109D4  0E28               	movlw	low _netoff
  9151  0109D6  6E1F               	movwf	gsm_msg@msgadd,c
  9152  0109D8  0EFF               	movlw	high _netoff
  9153  0109DA  6E20               	movwf	gsm_msg@msgadd+1,c
  9154  0109DC  EC0A  F08F         	call	_gsm_msg	;wreg free
  9155                           
  9156                           ;gsm.c: 138: gsm_receive(2, gsmmsg);
  9157  0109E0  0E02               	movlw	low _gsmmsg
  9158  0109E2  6E23               	movwf	gsm_receive@messagebuf,c
  9159  0109E4  0E06               	movlw	high _gsmmsg
  9160  0109E6  6E24               	movwf	gsm_receive@messagebuf+1,c
  9161  0109E8  0E02               	movlw	2
  9162  0109EA  EC5E  F096         	call	_gsm_receive
  9163                           
  9164                           ;gsm.c: 140: gsm_msg(facres);
  9165  0109EE  0EDD               	movlw	low _facres
  9166  0109F0  6E1F               	movwf	gsm_msg@msgadd,c
  9167  0109F2  0EFF               	movlw	high _facres
  9168  0109F4  6E20               	movwf	gsm_msg@msgadd+1,c
  9169  0109F6  EC0A  F08F         	call	_gsm_msg	;wreg free
  9170                           
  9171                           ;gsm.c: 141: gsm_receive(1, gsmmsg);
  9172  0109FA  0E02               	movlw	low _gsmmsg
  9173  0109FC  6E23               	movwf	gsm_receive@messagebuf,c
  9174  0109FE  0E06               	movlw	high _gsmmsg
  9175  010A00  6E24               	movwf	gsm_receive@messagebuf+1,c
  9176  010A02  0E01               	movlw	1
  9177  010A04  EC5E  F096         	call	_gsm_receive
  9178  010A08  F000               	nop		;# 
  9179  010A0A  0012               	return		;funcret
  9180  010A0C                     __end_of_gsm_init:
  9181                           	opt stack 0
  9182                           tblptru	equ	0xFF8
  9183                           tblptrh	equ	0xFF7
  9184                           tblptrl	equ	0xFF6
  9185                           tablat	equ	0xFF5
  9186                           prodh	equ	0xFF4
  9187                           prodl	equ	0xFF3
  9188                           postinc0	equ	0xFEE
  9189                           wreg	equ	0xFE8
  9190                           postdec1	equ	0xFE5
  9191                           fsr1h	equ	0xFE2
  9192                           fsr1l	equ	0xFE1
  9193                           indf2	equ	0xFDF
  9194                           postinc2	equ	0xFDE
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8
  9198                           
  9199 ;; *************** function _gsm_txAT *****************
  9200 ;; Defined at:
  9201 ;;		line 388 in file "gsm.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;		None
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;		None
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  1    wreg      void 
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9218 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9219 ;;Total ram usage:        0 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    4
  9222 ;; This function calls:
  9223 ;;		_gsm_transmit
  9224 ;; This function is called by:
  9225 ;;		_gsm_init
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           	psect	text41
  9230  013704                     __ptext41:
  9231                           	opt stack 0
  9232  013704                     _gsm_txAT:
  9233                           	opt stack 25
  9234                           
  9235                           ;gsm.c: 390: gsm_transmit('A');
  9236                           
  9237                           ;incstack = 0
  9238  013704  0E41               	movlw	65
  9239  013706  EC44  F09B         	call	_gsm_transmit
  9240                           
  9241                           ;gsm.c: 391: gsm_transmit('T');
  9242  01370A  0E54               	movlw	84
  9243  01370C  EC44  F09B         	call	_gsm_transmit
  9244  013710  0012               	return		;funcret
  9245  013712                     __end_of_gsm_txAT:
  9246                           	opt stack 0
  9247                           tblptru	equ	0xFF8
  9248                           tblptrh	equ	0xFF7
  9249                           tblptrl	equ	0xFF6
  9250                           tablat	equ	0xFF5
  9251                           prodh	equ	0xFF4
  9252                           prodl	equ	0xFF3
  9253                           postinc0	equ	0xFEE
  9254                           wreg	equ	0xFE8
  9255                           postdec1	equ	0xFE5
  9256                           fsr1h	equ	0xFE2
  9257                           fsr1l	equ	0xFE1
  9258                           indf2	equ	0xFDF
  9259                           postinc2	equ	0xFDE
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function _gsm_setime *****************
  9265 ;; Defined at:
  9266 ;;		line 246 in file "gsm.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  i               1   33[COMRAM] unsigned char 
  9271 ;;  x               1   32[COMRAM] unsigned char 
  9272 ;; Return value:  Size  Location     Type
  9273 ;;                  1    wreg      void 
  9274 ;; Registers used:
  9275 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9282 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9283 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;Total ram usage:        6 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    5
  9288 ;; This function calls:
  9289 ;;		_EUSARTG_Read
  9290 ;;		_gsm_msg
  9291 ;;		_gsm_receive
  9292 ;;		_gsm_zerobuff
  9293 ;; This function is called by:
  9294 ;;		_gsm_init
  9295 ;; This function uses a non-reentrant model
  9296 ;;
  9297                           
  9298                           	psect	text42
  9299  010000                     __ptext42:
  9300                           	opt stack 0
  9301  010000                     _gsm_setime:
  9302                           	opt stack 24
  9303                           
  9304                           ;gsm.c: 248: gsm_zerobuff(gsmmsg, 0x200);
  9305                           
  9306                           ;incstack = 0
  9307  010000  0E02               	movlw	low _gsmmsg
  9308  010002  6E1D               	movwf	gsm_zerobuff@gsmsgbuf,c
  9309  010004  0E06               	movlw	high _gsmmsg
  9310  010006  6E1E               	movwf	gsm_zerobuff@gsmsgbuf+1,c
  9311  010008  0E02               	movlw	2
  9312  01000A  6E20               	movwf	gsm_zerobuff@count+1,c
  9313  01000C  0E00               	movlw	0
  9314  01000E  6E1F               	movwf	gsm_zerobuff@count,c
  9315  010010  EC1B  F09A         	call	_gsm_zerobuff	;wreg free
  9316                           
  9317                           ;gsm.c: 249: gsm_msg(nettst);
  9318  010014  0E33               	movlw	low _nettst
  9319  010016  6E1F               	movwf	gsm_msg@msgadd,c
  9320  010018  0EFF               	movlw	high _nettst
  9321  01001A  6E20               	movwf	gsm_msg@msgadd+1,c
  9322  01001C  EC0A  F08F         	call	_gsm_msg	;wreg free
  9323  010020                     
  9324                           ;gsm.c: 252: gsmbyte = 0;
  9325  010020  0E00               	movlw	0
  9326  010022  6E31               	movwf	_gsmbyte,c
  9327                           
  9328                           ;gsm.c: 253: uint8_t x = 0;
  9329  010024  0E00               	movlw	0
  9330  010026  6E2B               	movwf	gsm_setime@x,c
  9331                           
  9332                           ;gsm.c: 255: while(gsmbyte != '*')
  9333  010028  D005               	goto	l5443
  9334  01002A                     
  9335                           ;gsm.c: 256: {
  9336                           ;gsm.c: 257: gsmbyte = EUSARTG_Read();
  9337  01002A  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
  9338  01002E  6E31               	movwf	_gsmbyte,c
  9339                           
  9340                           ;gsm.c: 258: if(gsmflags.meerror)
  9341  010030  B230               	btfsc	_gsmflags,1,c
  9342  010032  D1AE               	goto	l5444
  9343  010034                     l5443:
  9344  010034  0E2A               	movlw	42
  9345  010036  1831               	xorwf	_gsmbyte,w,c
  9346  010038  A4D8               	btfss	status,2,c
  9347  01003A  D7F7               	goto	l5442
  9348                           
  9349                           ;gsm.c: 261: }
  9350                           ;gsm.c: 262: }
  9351                           ;gsm.c: 263: gsmbyte = EUSARTG_Read();
  9352  01003C  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
  9353  010040  6E31               	movwf	_gsmbyte,c
  9354                           
  9355                           ;gsm.c: 264: gsmbyte = EUSARTG_Read();
  9356  010042  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
  9357  010046  6E31               	movwf	_gsmbyte,c
  9358                           
  9359                           ;gsm.c: 265: gsmbyte = EUSARTG_Read();
  9360  010048  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
  9361  01004C  6E31               	movwf	_gsmbyte,c
  9362                           
  9363                           ;gsm.c: 266: if(gsmbyte != 'U')
  9364  01004E  0E55               	movlw	85
  9365  010050  1831               	xorwf	_gsmbyte,w,c
  9366  010052  A4D8               	btfss	status,2,c
  9367  010054  D7E5               	goto	l5440
  9368  010056  D003               	goto	l5447
  9369  010058                     
  9370                           ;gsm.c: 271: {
  9371                           ;gsm.c: 272: gsmbyte = EUSARTG_Read();
  9372  010058  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
  9373  01005C  6E31               	movwf	_gsmbyte,c
  9374  01005E                     l5447:
  9375  01005E  0E3A               	movlw	58
  9376  010060  1831               	xorwf	_gsmbyte,w,c
  9377  010062  B4D8               	btfsc	status,2,c
  9378  010064  D00F               	goto	l5450
  9379  010066  D7F8               	goto	l5448
  9380  010068                     
  9381                           ;gsm.c: 275: {
  9382                           ;gsm.c: 276: gsmbyte = EUSARTG_Read();
  9383  010068  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
  9384  01006C  6E31               	movwf	_gsmbyte,c
  9385                           
  9386                           ;gsm.c: 277: gsmmsg[x++] = gsmbyte;
  9387  01006E  502B               	movf	gsm_setime@x,w,c
  9388  010070  0D01               	mullw	1
  9389  010072  0E02               	movlw	low _gsmmsg
  9390  010074  24F3               	addwf	prodl,w,c
  9391  010076  6ED9               	movwf	fsr2l,c
  9392  010078  0E06               	movlw	high _gsmmsg
  9393  01007A  20F4               	addwfc	prodh,w,c
  9394  01007C  6EDA               	movwf	fsr2h,c
  9395  01007E  C031  FFDF         	movff	_gsmbyte,indf2
  9396  010082  2A2B               	incf	gsm_setime@x,f,c
  9397  010084                     l5450:
  9398  010084  0E0A               	movlw	10
  9399  010086  1831               	xorwf	_gsmbyte,w,c
  9400  010088  A4D8               	btfss	status,2,c
  9401  01008A  D7EE               	goto	l5451
  9402                           
  9403                           ;gsm.c: 278: }
  9404                           ;gsm.c: 280: _delay((unsigned long)((5)*(64000000/4000.0)));
  9405  01008C  0E68               	movlw	104
  9406  01008E  6E27               	movwf	??_gsm_setime& (0+255),c
  9407  010090  0EE4               	movlw	228
  9408  010092                     u7337:
  9409  010092  2EE8               	decfsz	wreg,f,c
  9410  010094  D7FE               	bra	u7337
  9411  010096  2E27               	decfsz	??_gsm_setime& (0+255),f,c
  9412  010098  D7FC               	bra	u7337
  9413  01009A  D000               	nop2	
  9414                           
  9415                           ;gsm.c: 283: x = 0x03;
  9416  01009C  0E03               	movlw	3
  9417  01009E  6E2B               	movwf	gsm_setime@x,c
  9418                           
  9419                           ;gsm.c: 284: gsmtim[0] = '"';
  9420  0100A0  0E22               	movlw	34
  9421  0100A2  0100               	movlb	0	; () banked
  9422  0100A4  6FB6               	movwf	_gsmtim& (0+255),b
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;gsm.c: 285: uint8_t i = 0x01;
  9426  0100A6  0E01               	movlw	1
  9427  0100A8  6E2C               	movwf	gsm_setime@i,c
  9428                           
  9429                           ;gsm.c: 286: while(i < 0x09)
  9430  0100AA  D076               	goto	l5453
  9431  0100AC                     
  9432                           ;gsm.c: 287: {
  9433                           ;gsm.c: 288: gsmtim[i] = gsmmsg[x];
  9434                           
  9435                           ; BSR set to: 0
  9436  0100AC  502B               	movf	gsm_setime@x,w,c
  9437  0100AE  0D01               	mullw	1
  9438  0100B0  0E02               	movlw	low _gsmmsg
  9439  0100B2  24F3               	addwf	prodl,w,c
  9440  0100B4  6ED9               	movwf	fsr2l,c
  9441  0100B6  0E06               	movlw	high _gsmmsg
  9442  0100B8  20F4               	addwfc	prodh,w,c
  9443  0100BA  6EDA               	movwf	fsr2h,c
  9444  0100BC  502C               	movf	gsm_setime@i,w,c
  9445  0100BE  0D01               	mullw	1
  9446  0100C0  0EB6               	movlw	low _gsmtim
  9447  0100C2  24F3               	addwf	prodl,w,c
  9448  0100C4  6EE1               	movwf	fsr1l,c
  9449  0100C6  0E00               	movlw	high _gsmtim
  9450  0100C8  20F4               	addwfc	prodh,w,c
  9451  0100CA  6EE2               	movwf	fsr1h,c
  9452  0100CC  CFDF FFE7          	movff	indf2,indf1
  9453                           
  9454                           ;gsm.c: 289: gsmtim[i+1] = gsmmsg[x+1];
  9455  0100D0  502B               	movf	gsm_setime@x,w,c
  9456  0100D2  6E27               	movwf	??_gsm_setime& (0+255),c
  9457  0100D4  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9458  0100D6  0E01               	movlw	1
  9459  0100D8  2627               	addwf	??_gsm_setime,f,c
  9460  0100DA  0E00               	movlw	0
  9461  0100DC  2228               	addwfc	??_gsm_setime+1,f,c
  9462  0100DE  0E02               	movlw	low _gsmmsg
  9463  0100E0  2427               	addwf	??_gsm_setime,w,c
  9464  0100E2  6ED9               	movwf	fsr2l,c
  9465  0100E4  0E06               	movlw	high _gsmmsg
  9466  0100E6  2028               	addwfc	??_gsm_setime+1,w,c
  9467  0100E8  6EDA               	movwf	fsr2h,c
  9468  0100EA  502C               	movf	gsm_setime@i,w,c
  9469  0100EC  6E29               	movwf	(??_gsm_setime+2)& (0+255),c
  9470  0100EE  6A2A               	clrf	(??_gsm_setime+3)& (0+255),c
  9471  0100F0  0E01               	movlw	1
  9472  0100F2  2629               	addwf	??_gsm_setime+2,f,c
  9473  0100F4  0E00               	movlw	0
  9474  0100F6  222A               	addwfc	??_gsm_setime+3,f,c
  9475  0100F8  0EB6               	movlw	low _gsmtim
  9476  0100FA  2429               	addwf	??_gsm_setime+2,w,c
  9477  0100FC  6EE1               	movwf	fsr1l,c
  9478  0100FE  0E00               	movlw	high _gsmtim
  9479  010100  202A               	addwfc	??_gsm_setime+3,w,c
  9480  010102  6EE2               	movwf	fsr1h,c
  9481  010104  CFDF FFE7          	movff	indf2,indf1
  9482                           
  9483                           ;gsm.c: 290: if(gsmmsg[x+1] == ',')
  9484  010108  502B               	movf	gsm_setime@x,w,c
  9485  01010A  6E27               	movwf	??_gsm_setime& (0+255),c
  9486  01010C  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9487  01010E  0E01               	movlw	1
  9488  010110  2627               	addwf	??_gsm_setime,f,c
  9489  010112  0E00               	movlw	0
  9490  010114  2228               	addwfc	??_gsm_setime+1,f,c
  9491  010116  0E02               	movlw	low _gsmmsg
  9492  010118  2427               	addwf	??_gsm_setime,w,c
  9493  01011A  6ED9               	movwf	fsr2l,c
  9494  01011C  0E06               	movlw	high _gsmmsg
  9495  01011E  2028               	addwfc	??_gsm_setime+1,w,c
  9496  010120  6EDA               	movwf	fsr2h,c
  9497  010122  0E2C               	movlw	44
  9498  010124  18DE               	xorwf	postinc2,w,c
  9499  010126  A4D8               	btfss	status,2,c
  9500  010128  D022               	goto	l5455
  9501                           
  9502                           ;gsm.c: 291: {
  9503                           ;gsm.c: 292: gsmtim[i+1] = gsmmsg[x];
  9504  01012A  502B               	movf	gsm_setime@x,w,c
  9505  01012C  0D01               	mullw	1
  9506  01012E  0E02               	movlw	low _gsmmsg
  9507  010130  24F3               	addwf	prodl,w,c
  9508  010132  6ED9               	movwf	fsr2l,c
  9509  010134  0E06               	movlw	high _gsmmsg
  9510  010136  20F4               	addwfc	prodh,w,c
  9511  010138  6EDA               	movwf	fsr2h,c
  9512  01013A  502C               	movf	gsm_setime@i,w,c
  9513  01013C  6E27               	movwf	??_gsm_setime& (0+255),c
  9514  01013E  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9515  010140  0E01               	movlw	1
  9516  010142  2627               	addwf	??_gsm_setime,f,c
  9517  010144  0E00               	movlw	0
  9518  010146  2228               	addwfc	??_gsm_setime+1,f,c
  9519  010148  0EB6               	movlw	low _gsmtim
  9520  01014A  2427               	addwf	??_gsm_setime,w,c
  9521  01014C  6EE1               	movwf	fsr1l,c
  9522  01014E  0E00               	movlw	high _gsmtim
  9523  010150  2028               	addwfc	??_gsm_setime+1,w,c
  9524  010152  6EE2               	movwf	fsr1h,c
  9525  010154  CFDF FFE7          	movff	indf2,indf1
  9526                           
  9527                           ;gsm.c: 293: gsmtim[i] = '0';
  9528  010158  502C               	movf	gsm_setime@i,w,c
  9529  01015A  0D01               	mullw	1
  9530  01015C  0EB6               	movlw	low _gsmtim
  9531  01015E  24F3               	addwf	prodl,w,c
  9532  010160  6ED9               	movwf	fsr2l,c
  9533  010162  0E00               	movlw	high _gsmtim
  9534  010164  20F4               	addwfc	prodh,w,c
  9535  010166  6EDA               	movwf	fsr2h,c
  9536  010168  0E30               	movlw	48
  9537  01016A  6EDF               	movwf	indf2,c
  9538                           
  9539                           ;gsm.c: 294: x--;
  9540  01016C  062B               	decf	gsm_setime@x,f,c
  9541  01016E                     l5455:
  9542                           
  9543                           ;gsm.c: 295: }
  9544                           ;gsm.c: 296: gsmtim[i+2] = '/';
  9545  01016E  502C               	movf	gsm_setime@i,w,c
  9546  010170  6E27               	movwf	??_gsm_setime& (0+255),c
  9547  010172  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9548  010174  0E02               	movlw	2
  9549  010176  2627               	addwf	??_gsm_setime,f,c
  9550  010178  0E00               	movlw	0
  9551  01017A  2228               	addwfc	??_gsm_setime+1,f,c
  9552  01017C  0EB6               	movlw	low _gsmtim
  9553  01017E  2427               	addwf	??_gsm_setime,w,c
  9554  010180  6ED9               	movwf	fsr2l,c
  9555  010182  0E00               	movlw	high _gsmtim
  9556  010184  2028               	addwfc	??_gsm_setime+1,w,c
  9557  010186  6EDA               	movwf	fsr2h,c
  9558  010188  0E2F               	movlw	47
  9559  01018A  6EDF               	movwf	indf2,c
  9560                           
  9561                           ;gsm.c: 297: i = i + 3;
  9562  01018C  502C               	movf	gsm_setime@i,w,c
  9563  01018E  0F03               	addlw	3
  9564  010190  6E2C               	movwf	gsm_setime@i,c
  9565                           
  9566                           ;gsm.c: 298: x = x + 3;
  9567  010192  502B               	movf	gsm_setime@x,w,c
  9568  010194  0F03               	addlw	3
  9569  010196  6E2B               	movwf	gsm_setime@x,c
  9570  010198                     l5453:
  9571  010198  0E08               	movlw	8
  9572  01019A  642C               	cpfsgt	gsm_setime@i,c
  9573  01019C  D787               	goto	l5454
  9574                           
  9575                           ;gsm.c: 299: }
  9576                           ;gsm.c: 300: gsmtim[i-1] = ',';
  9577  01019E  0EFF               	movlw	255
  9578  0101A0  6E27               	movwf	??_gsm_setime& (0+255),c
  9579  0101A2  0EFF               	movlw	255
  9580  0101A4  6E28               	movwf	(??_gsm_setime+1)& (0+255),c
  9581  0101A6  502C               	movf	gsm_setime@i,w,c
  9582  0101A8  6E29               	movwf	(??_gsm_setime+2)& (0+255),c
  9583  0101AA  6A2A               	clrf	(??_gsm_setime+3)& (0+255),c
  9584  0101AC  5027               	movf	??_gsm_setime,w,c
  9585  0101AE  2629               	addwf	??_gsm_setime+2,f,c
  9586  0101B0  5028               	movf	??_gsm_setime+1,w,c
  9587  0101B2  222A               	addwfc	??_gsm_setime+3,f,c
  9588  0101B4  0EB6               	movlw	low _gsmtim
  9589  0101B6  2429               	addwf	??_gsm_setime+2,w,c
  9590  0101B8  6ED9               	movwf	fsr2l,c
  9591  0101BA  0E00               	movlw	high _gsmtim
  9592  0101BC  202A               	addwfc	??_gsm_setime+3,w,c
  9593  0101BE  6EDA               	movwf	fsr2h,c
  9594  0101C0  0E2C               	movlw	44
  9595  0101C2  6EDF               	movwf	indf2,c
  9596                           
  9597                           ;gsm.c: 303: while(i < 0x11)
  9598  0101C4  D076               	goto	l5457
  9599  0101C6                     
  9600                           ;gsm.c: 304: {
  9601                           ;gsm.c: 305: gsmtim[i] = gsmmsg[x];
  9602  0101C6  502B               	movf	gsm_setime@x,w,c
  9603  0101C8  0D01               	mullw	1
  9604  0101CA  0E02               	movlw	low _gsmmsg
  9605  0101CC  24F3               	addwf	prodl,w,c
  9606  0101CE  6ED9               	movwf	fsr2l,c
  9607  0101D0  0E06               	movlw	high _gsmmsg
  9608  0101D2  20F4               	addwfc	prodh,w,c
  9609  0101D4  6EDA               	movwf	fsr2h,c
  9610  0101D6  502C               	movf	gsm_setime@i,w,c
  9611  0101D8  0D01               	mullw	1
  9612  0101DA  0EB6               	movlw	low _gsmtim
  9613  0101DC  24F3               	addwf	prodl,w,c
  9614  0101DE  6EE1               	movwf	fsr1l,c
  9615  0101E0  0E00               	movlw	high _gsmtim
  9616  0101E2  20F4               	addwfc	prodh,w,c
  9617  0101E4  6EE2               	movwf	fsr1h,c
  9618  0101E6  CFDF FFE7          	movff	indf2,indf1
  9619                           
  9620                           ;gsm.c: 306: gsmtim[i+1] = gsmmsg[x+1];
  9621  0101EA  502B               	movf	gsm_setime@x,w,c
  9622  0101EC  6E27               	movwf	??_gsm_setime& (0+255),c
  9623  0101EE  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9624  0101F0  0E01               	movlw	1
  9625  0101F2  2627               	addwf	??_gsm_setime,f,c
  9626  0101F4  0E00               	movlw	0
  9627  0101F6  2228               	addwfc	??_gsm_setime+1,f,c
  9628  0101F8  0E02               	movlw	low _gsmmsg
  9629  0101FA  2427               	addwf	??_gsm_setime,w,c
  9630  0101FC  6ED9               	movwf	fsr2l,c
  9631  0101FE  0E06               	movlw	high _gsmmsg
  9632  010200  2028               	addwfc	??_gsm_setime+1,w,c
  9633  010202  6EDA               	movwf	fsr2h,c
  9634  010204  502C               	movf	gsm_setime@i,w,c
  9635  010206  6E29               	movwf	(??_gsm_setime+2)& (0+255),c
  9636  010208  6A2A               	clrf	(??_gsm_setime+3)& (0+255),c
  9637  01020A  0E01               	movlw	1
  9638  01020C  2629               	addwf	??_gsm_setime+2,f,c
  9639  01020E  0E00               	movlw	0
  9640  010210  222A               	addwfc	??_gsm_setime+3,f,c
  9641  010212  0EB6               	movlw	low _gsmtim
  9642  010214  2429               	addwf	??_gsm_setime+2,w,c
  9643  010216  6EE1               	movwf	fsr1l,c
  9644  010218  0E00               	movlw	high _gsmtim
  9645  01021A  202A               	addwfc	??_gsm_setime+3,w,c
  9646  01021C  6EE2               	movwf	fsr1h,c
  9647  01021E  CFDF FFE7          	movff	indf2,indf1
  9648                           
  9649                           ;gsm.c: 307: if(gsmmsg[x+1] == ',')
  9650  010222  502B               	movf	gsm_setime@x,w,c
  9651  010224  6E27               	movwf	??_gsm_setime& (0+255),c
  9652  010226  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9653  010228  0E01               	movlw	1
  9654  01022A  2627               	addwf	??_gsm_setime,f,c
  9655  01022C  0E00               	movlw	0
  9656  01022E  2228               	addwfc	??_gsm_setime+1,f,c
  9657  010230  0E02               	movlw	low _gsmmsg
  9658  010232  2427               	addwf	??_gsm_setime,w,c
  9659  010234  6ED9               	movwf	fsr2l,c
  9660  010236  0E06               	movlw	high _gsmmsg
  9661  010238  2028               	addwfc	??_gsm_setime+1,w,c
  9662  01023A  6EDA               	movwf	fsr2h,c
  9663  01023C  0E2C               	movlw	44
  9664  01023E  18DE               	xorwf	postinc2,w,c
  9665  010240  A4D8               	btfss	status,2,c
  9666  010242  D022               	goto	l5459
  9667                           
  9668                           ;gsm.c: 308: {
  9669                           ;gsm.c: 309: gsmtim[i+1] = gsmmsg[x];
  9670  010244  502B               	movf	gsm_setime@x,w,c
  9671  010246  0D01               	mullw	1
  9672  010248  0E02               	movlw	low _gsmmsg
  9673  01024A  24F3               	addwf	prodl,w,c
  9674  01024C  6ED9               	movwf	fsr2l,c
  9675  01024E  0E06               	movlw	high _gsmmsg
  9676  010250  20F4               	addwfc	prodh,w,c
  9677  010252  6EDA               	movwf	fsr2h,c
  9678  010254  502C               	movf	gsm_setime@i,w,c
  9679  010256  6E27               	movwf	??_gsm_setime& (0+255),c
  9680  010258  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9681  01025A  0E01               	movlw	1
  9682  01025C  2627               	addwf	??_gsm_setime,f,c
  9683  01025E  0E00               	movlw	0
  9684  010260  2228               	addwfc	??_gsm_setime+1,f,c
  9685  010262  0EB6               	movlw	low _gsmtim
  9686  010264  2427               	addwf	??_gsm_setime,w,c
  9687  010266  6EE1               	movwf	fsr1l,c
  9688  010268  0E00               	movlw	high _gsmtim
  9689  01026A  2028               	addwfc	??_gsm_setime+1,w,c
  9690  01026C  6EE2               	movwf	fsr1h,c
  9691  01026E  CFDF FFE7          	movff	indf2,indf1
  9692                           
  9693                           ;gsm.c: 310: gsmtim[i] = '0';
  9694  010272  502C               	movf	gsm_setime@i,w,c
  9695  010274  0D01               	mullw	1
  9696  010276  0EB6               	movlw	low _gsmtim
  9697  010278  24F3               	addwf	prodl,w,c
  9698  01027A  6ED9               	movwf	fsr2l,c
  9699  01027C  0E00               	movlw	high _gsmtim
  9700  01027E  20F4               	addwfc	prodh,w,c
  9701  010280  6EDA               	movwf	fsr2h,c
  9702  010282  0E30               	movlw	48
  9703  010284  6EDF               	movwf	indf2,c
  9704                           
  9705                           ;gsm.c: 311: x--;
  9706  010286  062B               	decf	gsm_setime@x,f,c
  9707  010288                     l5459:
  9708                           
  9709                           ;gsm.c: 312: }
  9710                           ;gsm.c: 313: gsmtim[i+2] = ':';
  9711  010288  502C               	movf	gsm_setime@i,w,c
  9712  01028A  6E27               	movwf	??_gsm_setime& (0+255),c
  9713  01028C  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9714  01028E  0E02               	movlw	2
  9715  010290  2627               	addwf	??_gsm_setime,f,c
  9716  010292  0E00               	movlw	0
  9717  010294  2228               	addwfc	??_gsm_setime+1,f,c
  9718  010296  0EB6               	movlw	low _gsmtim
  9719  010298  2427               	addwf	??_gsm_setime,w,c
  9720  01029A  6ED9               	movwf	fsr2l,c
  9721  01029C  0E00               	movlw	high _gsmtim
  9722  01029E  2028               	addwfc	??_gsm_setime+1,w,c
  9723  0102A0  6EDA               	movwf	fsr2h,c
  9724  0102A2  0E3A               	movlw	58
  9725  0102A4  6EDF               	movwf	indf2,c
  9726                           
  9727                           ;gsm.c: 314: i = i + 3;
  9728  0102A6  502C               	movf	gsm_setime@i,w,c
  9729  0102A8  0F03               	addlw	3
  9730  0102AA  6E2C               	movwf	gsm_setime@i,c
  9731                           
  9732                           ;gsm.c: 315: x = x + 3;
  9733  0102AC  502B               	movf	gsm_setime@x,w,c
  9734  0102AE  0F03               	addlw	3
  9735  0102B0  6E2B               	movwf	gsm_setime@x,c
  9736  0102B2                     l5457:
  9737  0102B2  0E10               	movlw	16
  9738  0102B4  642C               	cpfsgt	gsm_setime@i,c
  9739  0102B6  D787               	goto	l5458
  9740                           
  9741                           ;gsm.c: 316: }
  9742                           ;gsm.c: 318: i--;
  9743  0102B8  062C               	decf	gsm_setime@i,f,c
  9744                           
  9745                           ;gsm.c: 319: x++;
  9746  0102BA  2A2B               	incf	gsm_setime@x,f,c
  9747                           
  9748                           ;gsm.c: 320: gsmtim[i] = gsmmsg[x];
  9749  0102BC  502B               	movf	gsm_setime@x,w,c
  9750  0102BE  0D01               	mullw	1
  9751  0102C0  0E02               	movlw	low _gsmmsg
  9752  0102C2  24F3               	addwf	prodl,w,c
  9753  0102C4  6ED9               	movwf	fsr2l,c
  9754  0102C6  0E06               	movlw	high _gsmmsg
  9755  0102C8  20F4               	addwfc	prodh,w,c
  9756  0102CA  6EDA               	movwf	fsr2h,c
  9757  0102CC  502C               	movf	gsm_setime@i,w,c
  9758  0102CE  0D01               	mullw	1
  9759  0102D0  0EB6               	movlw	low _gsmtim
  9760  0102D2  24F3               	addwf	prodl,w,c
  9761  0102D4  6EE1               	movwf	fsr1l,c
  9762  0102D6  0E00               	movlw	high _gsmtim
  9763  0102D8  20F4               	addwfc	prodh,w,c
  9764  0102DA  6EE2               	movwf	fsr1h,c
  9765  0102DC  CFDF FFE7          	movff	indf2,indf1
  9766                           
  9767                           ;gsm.c: 321: gsmtim[i+1] = '0';
  9768  0102E0  502C               	movf	gsm_setime@i,w,c
  9769  0102E2  6E27               	movwf	??_gsm_setime& (0+255),c
  9770  0102E4  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9771  0102E6  0E01               	movlw	1
  9772  0102E8  2627               	addwf	??_gsm_setime,f,c
  9773  0102EA  0E00               	movlw	0
  9774  0102EC  2228               	addwfc	??_gsm_setime+1,f,c
  9775  0102EE  0EB6               	movlw	low _gsmtim
  9776  0102F0  2427               	addwf	??_gsm_setime,w,c
  9777  0102F2  6ED9               	movwf	fsr2l,c
  9778  0102F4  0E00               	movlw	high _gsmtim
  9779  0102F6  2028               	addwfc	??_gsm_setime+1,w,c
  9780  0102F8  6EDA               	movwf	fsr2h,c
  9781  0102FA  0E30               	movlw	48
  9782  0102FC  6EDF               	movwf	indf2,c
  9783                           
  9784                           ;gsm.c: 322: gsmtim[i+2] = gsmmsg[x+1];
  9785  0102FE  502B               	movf	gsm_setime@x,w,c
  9786  010300  6E27               	movwf	??_gsm_setime& (0+255),c
  9787  010302  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9788  010304  0E01               	movlw	1
  9789  010306  2627               	addwf	??_gsm_setime,f,c
  9790  010308  0E00               	movlw	0
  9791  01030A  2228               	addwfc	??_gsm_setime+1,f,c
  9792  01030C  0E02               	movlw	low _gsmmsg
  9793  01030E  2427               	addwf	??_gsm_setime,w,c
  9794  010310  6ED9               	movwf	fsr2l,c
  9795  010312  0E06               	movlw	high _gsmmsg
  9796  010314  2028               	addwfc	??_gsm_setime+1,w,c
  9797  010316  6EDA               	movwf	fsr2h,c
  9798  010318  502C               	movf	gsm_setime@i,w,c
  9799  01031A  6E29               	movwf	(??_gsm_setime+2)& (0+255),c
  9800  01031C  6A2A               	clrf	(??_gsm_setime+3)& (0+255),c
  9801  01031E  0E02               	movlw	2
  9802  010320  2629               	addwf	??_gsm_setime+2,f,c
  9803  010322  0E00               	movlw	0
  9804  010324  222A               	addwfc	??_gsm_setime+3,f,c
  9805  010326  0EB6               	movlw	low _gsmtim
  9806  010328  2429               	addwf	??_gsm_setime+2,w,c
  9807  01032A  6EE1               	movwf	fsr1l,c
  9808  01032C  0E00               	movlw	high _gsmtim
  9809  01032E  202A               	addwfc	??_gsm_setime+3,w,c
  9810  010330  6EE2               	movwf	fsr1h,c
  9811  010332  CFDF FFE7          	movff	indf2,indf1
  9812                           
  9813                           ;gsm.c: 323: gsmtim[i+3] = '"';
  9814  010336  502C               	movf	gsm_setime@i,w,c
  9815  010338  6E27               	movwf	??_gsm_setime& (0+255),c
  9816  01033A  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9817  01033C  0E03               	movlw	3
  9818  01033E  2627               	addwf	??_gsm_setime,f,c
  9819  010340  0E00               	movlw	0
  9820  010342  2228               	addwfc	??_gsm_setime+1,f,c
  9821  010344  0EB6               	movlw	low _gsmtim
  9822  010346  2427               	addwf	??_gsm_setime,w,c
  9823  010348  6ED9               	movwf	fsr2l,c
  9824  01034A  0E00               	movlw	high _gsmtim
  9825  01034C  2028               	addwfc	??_gsm_setime+1,w,c
  9826  01034E  6EDA               	movwf	fsr2h,c
  9827  010350  0E22               	movlw	34
  9828  010352  6EDF               	movwf	indf2,c
  9829                           
  9830                           ;gsm.c: 324: gsmtim[i+4] = '\r';
  9831  010354  502C               	movf	gsm_setime@i,w,c
  9832  010356  6E27               	movwf	??_gsm_setime& (0+255),c
  9833  010358  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9834  01035A  0E04               	movlw	4
  9835  01035C  2627               	addwf	??_gsm_setime,f,c
  9836  01035E  0E00               	movlw	0
  9837  010360  2228               	addwfc	??_gsm_setime+1,f,c
  9838  010362  0EB6               	movlw	low _gsmtim
  9839  010364  2427               	addwf	??_gsm_setime,w,c
  9840  010366  6ED9               	movwf	fsr2l,c
  9841  010368  0E00               	movlw	high _gsmtim
  9842  01036A  2028               	addwfc	??_gsm_setime+1,w,c
  9843  01036C  6EDA               	movwf	fsr2h,c
  9844  01036E  0E0D               	movlw	13
  9845  010370  6EDF               	movwf	indf2,c
  9846                           
  9847                           ;gsm.c: 325: gsmtim[i+5] = 0x00;
  9848  010372  502C               	movf	gsm_setime@i,w,c
  9849  010374  6E27               	movwf	??_gsm_setime& (0+255),c
  9850  010376  6A28               	clrf	(??_gsm_setime+1)& (0+255),c
  9851  010378  0E05               	movlw	5
  9852  01037A  2627               	addwf	??_gsm_setime,f,c
  9853  01037C  0E00               	movlw	0
  9854  01037E  2228               	addwfc	??_gsm_setime+1,f,c
  9855  010380  0EB6               	movlw	low _gsmtim
  9856  010382  2427               	addwf	??_gsm_setime,w,c
  9857  010384  6ED9               	movwf	fsr2l,c
  9858  010386  0E00               	movlw	high _gsmtim
  9859  010388  2028               	addwfc	??_gsm_setime+1,w,c
  9860  01038A  6EDA               	movwf	fsr2h,c
  9861  01038C  0E00               	movlw	0
  9862  01038E  6EDF               	movwf	indf2,c
  9863  010390                     l5444:
  9864                           
  9865                           ;gsm.c: 327: gsm_msg(netoff);
  9866  010390  0E28               	movlw	low _netoff
  9867  010392  6E1F               	movwf	gsm_msg@msgadd,c
  9868  010394  0EFF               	movlw	high _netoff
  9869  010396  6E20               	movwf	gsm_msg@msgadd+1,c
  9870  010398  EC0A  F08F         	call	_gsm_msg	;wreg free
  9871                           
  9872                           ;gsm.c: 328: gsm_receive(1, gsmmsg);
  9873  01039C  0E02               	movlw	low _gsmmsg
  9874  01039E  6E23               	movwf	gsm_receive@messagebuf,c
  9875  0103A0  0E06               	movlw	high _gsmmsg
  9876  0103A2  6E24               	movwf	gsm_receive@messagebuf+1,c
  9877  0103A4  0E01               	movlw	1
  9878  0103A6  EC5E  F096         	call	_gsm_receive
  9879                           
  9880                           ;gsm.c: 329: gsm_msg(clockw);
  9881  0103AA  0E91               	movlw	low _clockw
  9882  0103AC  6E1F               	movwf	gsm_msg@msgadd,c
  9883  0103AE  0EFF               	movlw	high _clockw
  9884  0103B0  6E20               	movwf	gsm_msg@msgadd+1,c
  9885  0103B2  EC0A  F08F         	call	_gsm_msg	;wreg free
  9886                           
  9887                           ;gsm.c: 330: gsm_msg(gsmtim);
  9888  0103B6  0EB6               	movlw	low _gsmtim
  9889  0103B8  6E1F               	movwf	gsm_msg@msgadd,c
  9890  0103BA  0E00               	movlw	high _gsmtim
  9891  0103BC  6E20               	movwf	gsm_msg@msgadd+1,c
  9892  0103BE  EC0A  F08F         	call	_gsm_msg	;wreg free
  9893                           
  9894                           ;gsm.c: 331: gsm_receive(1, gsmmsg);
  9895  0103C2  0E02               	movlw	low _gsmmsg
  9896  0103C4  6E23               	movwf	gsm_receive@messagebuf,c
  9897  0103C6  0E06               	movlw	high _gsmmsg
  9898  0103C8  6E24               	movwf	gsm_receive@messagebuf+1,c
  9899  0103CA  0E01               	movlw	1
  9900  0103CC  EC5E  F096         	call	_gsm_receive
  9901                           
  9902                           ;gsm.c: 332: if(gsmmsg[0] != '0')
  9903  0103D0  C602  FFE8         	movff	_gsmmsg,wreg
  9904  0103D4  0A30               	xorlw	48
  9905  0103D6  B4D8               	btfsc	status,2,c
  9906  0103D8  0012               	return	
  9907                           
  9908                           ;gsm.c: 333: {
  9909                           ;gsm.c: 334: LATCbits.LC3 = 0;
  9910  0103DA  9685               	bcf	3973,3,c	;volatile
  9911                           
  9912                           ;gsm.c: 335: _delay((unsigned long)((2000)*(64000000/4000.0)));
  9913  0103DC  0EA3               	movlw	163
  9914  0103DE  6E28               	movwf	(??_gsm_setime+1)& (0+255),c
  9915  0103E0  0E57               	movlw	87
  9916  0103E2  6E27               	movwf	??_gsm_setime& (0+255),c
  9917  0103E4  0E02               	movlw	2
  9918  0103E6                     u7347:
  9919  0103E6  2EE8               	decfsz	wreg,f,c
  9920  0103E8  D7FE               	bra	u7347
  9921  0103EA  2E27               	decfsz	??_gsm_setime& (0+255),f,c
  9922  0103EC  D7FC               	bra	u7347
  9923  0103EE  2E28               	decfsz	(??_gsm_setime+1)& (0+255),f,c
  9924  0103F0  D7FA               	bra	u7347
  9925  0103F2  D000               	nop2	
  9926  0103F4  00FF               	reset		;# 
  9927  0103F6  0012               	return	
  9928  0103F8                     __end_of_gsm_setime:
  9929                           	opt stack 0
  9930                           tblptru	equ	0xFF8
  9931                           tblptrh	equ	0xFF7
  9932                           tblptrl	equ	0xFF6
  9933                           tablat	equ	0xFF5
  9934                           prodh	equ	0xFF4
  9935                           prodl	equ	0xFF3
  9936                           postinc0	equ	0xFEE
  9937                           wreg	equ	0xFE8
  9938                           indf1	equ	0xFE7
  9939                           postdec1	equ	0xFE5
  9940                           fsr1h	equ	0xFE2
  9941                           fsr1l	equ	0xFE1
  9942                           indf2	equ	0xFDF
  9943                           postinc2	equ	0xFDE
  9944                           fsr2h	equ	0xFDA
  9945                           fsr2l	equ	0xFD9
  9946                           status	equ	0xFD8
  9947                           
  9948 ;; *************** function _gsm_on *****************
  9949 ;; Defined at:
  9950 ;;		line 395 in file "gsm.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;		None
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;		None
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, status,2, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;Total ram usage:        0 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    3
  9971 ;; This function calls:
  9972 ;;		_TMR4_Initialize
  9973 ;; This function is called by:
  9974 ;;		_main
  9975 ;;		_gsm_init
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text43
  9980  013774                     __ptext43:
  9981                           	opt stack 0
  9982  013774                     _gsm_on:
  9983                           	opt stack 27
  9984                           
  9985                           ;gsm.c: 397: LATCbits.LC3 = 1;
  9986                           
  9987                           ;incstack = 0
  9988  013774  8685               	bsf	3973,3,c	;volatile
  9989                           
  9990                           ;gsm.c: 398: TMR4_Initialize();
  9991  013776  ECAD  F09A         	call	_TMR4_Initialize	;wreg free
  9992                           
  9993                           ;gsm.c: 399: T4CONbits.T4ON = 1;
  9994  01377A  8EB7               	bsf	4023,7,c	;volatile
  9995  01377C  0012               	return		;funcret
  9996  01377E                     __end_of_gsm_on:
  9997                           	opt stack 0
  9998                           tblptru	equ	0xFF8
  9999                           tblptrh	equ	0xFF7
 10000                           tblptrl	equ	0xFF6
 10001                           tablat	equ	0xFF5
 10002                           prodh	equ	0xFF4
 10003                           prodl	equ	0xFF3
 10004                           postinc0	equ	0xFEE
 10005                           wreg	equ	0xFE8
 10006                           indf1	equ	0xFE7
 10007                           postdec1	equ	0xFE5
 10008                           fsr1h	equ	0xFE2
 10009                           fsr1l	equ	0xFE1
 10010                           indf2	equ	0xFDF
 10011                           postinc2	equ	0xFDE
 10012                           fsr2h	equ	0xFDA
 10013                           fsr2l	equ	0xFD9
 10014                           status	equ	0xFD8
 10015                           
 10016 ;; *************** function _gsm_netwait *****************
 10017 ;; Defined at:
 10018 ;;		line 429 in file "gsm.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;		None
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  x               1   18[COMRAM] unsigned char 
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;Total ram usage:        1 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; Hardware stack levels required when called:    3
 10039 ;; This function calls:
 10040 ;;		_EUSARTG_Read
 10041 ;; This function is called by:
 10042 ;;		_gsm_init
 10043 ;; This function uses a non-reentrant model
 10044 ;;
 10045                           
 10046                           	psect	text44
 10047  012918                     __ptext44:
 10048                           	opt stack 0
 10049  012918                     _gsm_netwait:
 10050                           	opt stack 26
 10051                           
 10052                           ;gsm.c: 431: gsmbyte = 0;
 10053                           
 10054                           ;incstack = 0
 10055  012918  0E00               	movlw	0
 10056  01291A  6E31               	movwf	_gsmbyte,c
 10057                           
 10058                           ;gsm.c: 432: uint8_t x = 0;
 10059  01291C  0E00               	movlw	0
 10060  01291E  6E1D               	movwf	gsm_netwait@x,c
 10061                           
 10062                           ;gsm.c: 433: while(gsmbyte != 'S')
 10063  012920  D00E               	goto	l5503
 10064  012922                     
 10065                           ;gsm.c: 434: {
 10066                           ;gsm.c: 435: gsmbyte = EUSARTG_Read();
 10067  012922  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
 10068  012926  6E31               	movwf	_gsmbyte,c
 10069                           
 10070                           ;gsm.c: 436: gsmmsg[x++] = gsmbyte;
 10071  012928  501D               	movf	gsm_netwait@x,w,c
 10072  01292A  0D01               	mullw	1
 10073  01292C  0E02               	movlw	low _gsmmsg
 10074  01292E  24F3               	addwf	prodl,w,c
 10075  012930  6ED9               	movwf	fsr2l,c
 10076  012932  0E06               	movlw	high _gsmmsg
 10077  012934  20F4               	addwfc	prodh,w,c
 10078  012936  6EDA               	movwf	fsr2h,c
 10079  012938  C031  FFDF         	movff	_gsmbyte,indf2
 10080  01293C  2A1D               	incf	gsm_netwait@x,f,c
 10081  01293E                     l5503:
 10082  01293E  0E53               	movlw	83
 10083  012940  1831               	xorwf	_gsmbyte,w,c
 10084  012942  B4D8               	btfsc	status,2,c
 10085  012944  D00F               	goto	l5506
 10086  012946  D7ED               	goto	l5504
 10087  012948                     
 10088                           ;gsm.c: 439: {
 10089                           ;gsm.c: 440: gsmbyte = EUSARTG_Read();
 10090  012948  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
 10091  01294C  6E31               	movwf	_gsmbyte,c
 10092                           
 10093                           ;gsm.c: 441: gsmmsg[x++] = gsmbyte;
 10094  01294E  501D               	movf	gsm_netwait@x,w,c
 10095  012950  0D01               	mullw	1
 10096  012952  0E02               	movlw	low _gsmmsg
 10097  012954  24F3               	addwf	prodl,w,c
 10098  012956  6ED9               	movwf	fsr2l,c
 10099  012958  0E06               	movlw	high _gsmmsg
 10100  01295A  20F4               	addwfc	prodh,w,c
 10101  01295C  6EDA               	movwf	fsr2h,c
 10102  01295E  C031  FFDF         	movff	_gsmbyte,indf2
 10103  012962  2A1D               	incf	gsm_netwait@x,f,c
 10104  012964                     l5506:
 10105  012964  0E0A               	movlw	10
 10106  012966  1831               	xorwf	_gsmbyte,w,c
 10107  012968  A4D8               	btfss	status,2,c
 10108  01296A  D7EE               	goto	l5507
 10109                           
 10110                           ;gsm.c: 442: }
 10111                           ;gsm.c: 443: gsmflags.mtn = 0;
 10112  01296C  9430               	bcf	_gsmflags,2,c
 10113                           
 10114                           ;gsm.c: 444: if(gsmmsg[0] == '+')
 10115  01296E  C602  FFE8         	movff	_gsmmsg,wreg
 10116  012972  0A2B               	xorlw	43
 10117  012974  A4D8               	btfss	status,2,c
 10118  012976  0012               	return	
 10119                           
 10120                           ;gsm.c: 445: {
 10121                           ;gsm.c: 446: gsmflags.mtn = 1;
 10122  012978  8430               	bsf	_gsmflags,2,c
 10123  01297A  0012               	return	
 10124  01297C                     __end_of_gsm_netwait:
 10125                           	opt stack 0
 10126                           tblptru	equ	0xFF8
 10127                           tblptrh	equ	0xFF7
 10128                           tblptrl	equ	0xFF6
 10129                           tablat	equ	0xFF5
 10130                           prodh	equ	0xFF4
 10131                           prodl	equ	0xFF3
 10132                           postinc0	equ	0xFEE
 10133                           wreg	equ	0xFE8
 10134                           indf1	equ	0xFE7
 10135                           postdec1	equ	0xFE5
 10136                           fsr1h	equ	0xFE2
 10137                           fsr1l	equ	0xFE1
 10138                           indf2	equ	0xFDF
 10139                           postinc2	equ	0xFDE
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function _gsm_getbalance *****************
 10145 ;; Defined at:
 10146 ;;		line 228 in file "gsm.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;		None
 10149 ;; Auto vars:     Size  Location     Type
 10150 ;;		None
 10151 ;; Return value:  Size  Location     Type
 10152 ;;                  1    wreg      void 
 10153 ;; Registers used:
 10154 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10155 ;; Tracked objects:
 10156 ;;		On entry : 0/0
 10157 ;;		On exit  : 0/0
 10158 ;;		Unchanged: 0/0
 10159 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10164 ;;Total ram usage:        0 bytes
 10165 ;; Hardware stack levels used:    1
 10166 ;; Hardware stack levels required when called:    5
 10167 ;; This function calls:
 10168 ;;		_gsm_msg
 10169 ;;		_gsm_receive
 10170 ;; This function is called by:
 10171 ;;		_gsm_init
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           	psect	text45
 10176  01269C                     __ptext45:
 10177                           	opt stack 0
 10178  01269C                     _gsm_getbalance:
 10179                           	opt stack 24
 10180                           
 10181                           ;gsm.c: 230: gsm_msg(setgsm);
 10182                           
 10183                           ;incstack = 0
 10184  01269C  0EDB               	movlw	low _setgsm
 10185  01269E  6E1F               	movwf	gsm_msg@msgadd,c
 10186  0126A0  0EFE               	movlw	high _setgsm
 10187  0126A2  6E20               	movwf	gsm_msg@msgadd+1,c
 10188  0126A4  EC0A  F08F         	call	_gsm_msg	;wreg free
 10189                           
 10190                           ;gsm.c: 231: gsm_receive(1,gsmmsg);
 10191  0126A8  0E02               	movlw	low _gsmmsg
 10192  0126AA  6E23               	movwf	gsm_receive@messagebuf,c
 10193  0126AC  0E06               	movlw	high _gsmmsg
 10194  0126AE  6E24               	movwf	gsm_receive@messagebuf+1,c
 10195  0126B0  0E01               	movlw	1
 10196  0126B2  EC5E  F096         	call	_gsm_receive
 10197                           
 10198                           ;gsm.c: 232: if(gsmflags.mtn)
 10199  0126B6  A430               	btfss	_gsmflags,2,c
 10200  0126B8  D00E               	goto	l5435
 10201                           
 10202                           ;gsm.c: 233: {
 10203                           ;gsm.c: 234: gsm_msg(ussdwm);
 10204  0126BA  0E94               	movlw	low _ussdwm
 10205  0126BC  6E1F               	movwf	gsm_msg@msgadd,c
 10206  0126BE  0EFE               	movlw	high _ussdwm
 10207  0126C0  6E20               	movwf	gsm_msg@msgadd+1,c
 10208  0126C2  EC0A  F08F         	call	_gsm_msg	;wreg free
 10209                           
 10210                           ;gsm.c: 235: gsm_receive(11,gsmmsg);
 10211  0126C6  0E02               	movlw	low _gsmmsg
 10212  0126C8  6E23               	movwf	gsm_receive@messagebuf,c
 10213  0126CA  0E06               	movlw	high _gsmmsg
 10214  0126CC  6E24               	movwf	gsm_receive@messagebuf+1,c
 10215  0126CE  0E0B               	movlw	11
 10216  0126D0  EC5E  F096         	call	_gsm_receive
 10217                           
 10218                           ;gsm.c: 236: }
 10219  0126D4  D00D               	goto	l5436
 10220  0126D6                     l5435:
 10221                           
 10222                           ;gsm.c: 237: else
 10223                           ;gsm.c: 238: {
 10224                           ;gsm.c: 239: gsm_msg(ussdwv);
 10225  0126D6  0E2A               	movlw	low _ussdwv
 10226  0126D8  6E1F               	movwf	gsm_msg@msgadd,c
 10227  0126DA  0EFE               	movlw	high _ussdwv
 10228  0126DC  6E20               	movwf	gsm_msg@msgadd+1,c
 10229  0126DE  EC0A  F08F         	call	_gsm_msg	;wreg free
 10230                           
 10231                           ;gsm.c: 240: gsm_receive(3,gsmmsg);
 10232  0126E2  0E02               	movlw	low _gsmmsg
 10233  0126E4  6E23               	movwf	gsm_receive@messagebuf,c
 10234  0126E6  0E06               	movlw	high _gsmmsg
 10235  0126E8  6E24               	movwf	gsm_receive@messagebuf+1,c
 10236  0126EA  0E03               	movlw	3
 10237  0126EC  EC5E  F096         	call	_gsm_receive
 10238  0126F0                     l5436:
 10239                           
 10240                           ;gsm.c: 241: }
 10241                           ;gsm.c: 242: gsm_msg(ussdwc);
 10242  0126F0  0E3E               	movlw	low _ussdwc
 10243  0126F2  6E1F               	movwf	gsm_msg@msgadd,c
 10244  0126F4  0EFF               	movlw	high _ussdwc
 10245  0126F6  6E20               	movwf	gsm_msg@msgadd+1,c
 10246  0126F8  EC0A  F08F         	call	_gsm_msg	;wreg free
 10247                           
 10248                           ;gsm.c: 243: gsm_receive(1,gsmmsg);
 10249  0126FC  0E02               	movlw	low _gsmmsg
 10250  0126FE  6E23               	movwf	gsm_receive@messagebuf,c
 10251  012700  0E06               	movlw	high _gsmmsg
 10252  012702  6E24               	movwf	gsm_receive@messagebuf+1,c
 10253  012704  0E01               	movlw	1
 10254  012706  EC5E  F096         	call	_gsm_receive
 10255  01270A  0012               	return		;funcret
 10256  01270C                     __end_of_gsm_getbalance:
 10257                           	opt stack 0
 10258                           tblptru	equ	0xFF8
 10259                           tblptrh	equ	0xFF7
 10260                           tblptrl	equ	0xFF6
 10261                           tablat	equ	0xFF5
 10262                           prodh	equ	0xFF4
 10263                           prodl	equ	0xFF3
 10264                           postinc0	equ	0xFEE
 10265                           wreg	equ	0xFE8
 10266                           indf1	equ	0xFE7
 10267                           postdec1	equ	0xFE5
 10268                           fsr1h	equ	0xFE2
 10269                           fsr1l	equ	0xFE1
 10270                           indf2	equ	0xFDF
 10271                           postinc2	equ	0xFDE
 10272                           fsr2h	equ	0xFDA
 10273                           fsr2l	equ	0xFD9
 10274                           status	equ	0xFD8
 10275                           
 10276 ;; *************** function _clock_display *****************
 10277 ;; Defined at:
 10278 ;;		line 145 in file "gsm.c"
 10279 ;; Parameters:    Size  Location     Type
 10280 ;;		None
 10281 ;; Auto vars:     Size  Location     Type
 10282 ;;		None
 10283 ;; Return value:  Size  Location     Type
 10284 ;;                  1    wreg      void 
 10285 ;; Registers used:
 10286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10287 ;; Tracked objects:
 10288 ;;		On entry : 0/0
 10289 ;;		On exit  : 0/0
 10290 ;;		Unchanged: 0/0
 10291 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10296 ;;Total ram usage:        0 bytes
 10297 ;; Hardware stack levels used:    1
 10298 ;; Hardware stack levels required when called:    9
 10299 ;; This function calls:
 10300 ;;		_TMR2_Initialize
 10301 ;;		_disp_clock
 10302 ;;		_gsm_gettime
 10303 ;;		_gsm_receive
 10304 ;; This function is called by:
 10305 ;;		_gsm_init
 10306 ;; This function uses a non-reentrant model
 10307 ;;
 10308                           
 10309                           	psect	text46
 10310  013028                     __ptext46:
 10311                           	opt stack 0
 10312  013028                     _clock_display:
 10313                           	opt stack 20
 10314                           
 10315                           ;gsm.c: 147: INTCONbits.PEIE = 0;
 10316                           
 10317                           ;incstack = 0
 10318  013028  9CF2               	bcf	intcon,6,c	;volatile
 10319                           
 10320                           ;gsm.c: 148: PIE3bits.RC2IE =1;
 10321  01302A  010E               	movlb	14	; () banked
 10322  01302C  8FC5               	bsf	197,7,b	;volatile
 10323  01302E                     
 10324                           ;gsm.c: 150: TMR2_Initialize();
 10325                           
 10326                           ; BSR set to: 14
 10327  01302E  ECBC  F09A         	call	_TMR2_Initialize	;wreg free
 10328                           
 10329                           ;gsm.c: 151: T2CONbits.TMR2ON = 1;
 10330  013032  8EBD               	bsf	4029,7,c	;volatile
 10331                           
 10332                           ;gsm.c: 152: gsm_gettime();
 10333  013034  EC9D  F09A         	call	_gsm_gettime	;wreg free
 10334                           
 10335                           ;gsm.c: 153: disp_clock();
 10336  013038  ECEE  F08F         	call	_disp_clock	;wreg free
 10337                           
 10338                           ;gsm.c: 154: INTCONbits.PEIE = 1;
 10339  01303C  8CF2               	bsf	intcon,6,c	;volatile
 10340                           
 10341                           ;gsm.c: 155: gsmflags.msgavl = 0;
 10342  01303E  9630               	bcf	_gsmflags,3,c
 10343                           
 10344                           ;gsm.c: 156: while(!PIR4bits.TMR2IF)
 10345  013040  D00A               	goto	l5411
 10346  013042                     l5410:
 10347                           
 10348                           ; BSR set to: 14
 10349                           ;gsm.c: 157: {
 10350                           ;gsm.c: 158: if(PIR3bits.RC2IF)
 10351  013042  AFCD               	btfss	205,7,b	;volatile
 10352  013044  D008               	goto	l5411
 10353                           
 10354                           ; BSR set to: 14
 10355                           ;gsm.c: 159: {
 10356                           ;gsm.c: 160: gsm_receive(1, gsmusm);
 10357  013046  0E00               	movlw	low _gsmusm
 10358  013048  6E23               	movwf	gsm_receive@messagebuf,c
 10359  01304A  0E01               	movlw	high _gsmusm
 10360  01304C  6E24               	movwf	gsm_receive@messagebuf+1,c
 10361  01304E  0E01               	movlw	1
 10362  013050  EC5E  F096         	call	_gsm_receive
 10363                           
 10364                           ;gsm.c: 161: gsmflags.msgavl = 1;
 10365  013054  8630               	bsf	_gsmflags,3,c
 10366  013056                     l5411:
 10367  013056  010E               	movlb	14	; () banked
 10368  013058  A3CE               	btfss	206,1,b	;volatile
 10369  01305A  D7F3               	goto	l5410
 10370                           
 10371                           ; BSR set to: 14
 10372                           ;gsm.c: 162: }
 10373                           ;gsm.c: 163: }
 10374                           ;gsm.c: 164: if(eusart2RxHead != 0x00 )
 10375                           
 10376                           ; BSR set to: 14
 10377  01305C  5048               	movf	_eusart2RxHead,w,c	;volatile
 10378  01305E  A4D8               	btfss	status,2,c
 10379                           
 10380                           ; BSR set to: 14
 10381  013060  F000               	nop		;# 
 10382                           
 10383                           ;gsm.c: 167: }
 10384                           ;gsm.c: 168: INTCONbits.PEIE = 0;
 10385  013062  9CF2               	bcf	intcon,6,c	;volatile
 10386                           
 10387                           ;gsm.c: 174: goto dispclka;
 10388  013064  D7E4               	goto	l5408
 10389  013066                     __end_of_clock_display:
 10390                           	opt stack 0
 10391                           tblptru	equ	0xFF8
 10392                           tblptrh	equ	0xFF7
 10393                           tblptrl	equ	0xFF6
 10394                           tablat	equ	0xFF5
 10395                           prodh	equ	0xFF4
 10396                           prodl	equ	0xFF3
 10397                           intcon	equ	0xFF2
 10398                           postinc0	equ	0xFEE
 10399                           wreg	equ	0xFE8
 10400                           indf1	equ	0xFE7
 10401                           postdec1	equ	0xFE5
 10402                           fsr1h	equ	0xFE2
 10403                           fsr1l	equ	0xFE1
 10404                           indf2	equ	0xFDF
 10405                           postinc2	equ	0xFDE
 10406                           fsr2h	equ	0xFDA
 10407                           fsr2l	equ	0xFD9
 10408                           status	equ	0xFD8
 10409                           
 10410 ;; *************** function _gsm_gettime *****************
 10411 ;; Defined at:
 10412 ;;		line 220 in file "gsm.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      void 
 10419 ;; Registers used:
 10420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10430 ;;Total ram usage:        0 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    5
 10433 ;; This function calls:
 10434 ;;		_gsm_msg
 10435 ;;		_gsm_receive
 10436 ;;		_parse_date_time
 10437 ;; This function is called by:
 10438 ;;		_clock_display
 10439 ;; This function uses a non-reentrant model
 10440 ;;
 10441                           
 10442                           	psect	text47
 10443  01353A                     __ptext47:
 10444                           	opt stack 0
 10445  01353A                     _gsm_gettime:
 10446                           	opt stack 23
 10447                           
 10448                           ;gsm.c: 222: gsm_msg(clockr);
 10449                           
 10450                           ;incstack = 0
 10451  01353A  0E5F               	movlw	low _clockr
 10452  01353C  6E1F               	movwf	gsm_msg@msgadd,c
 10453  01353E  0EFF               	movlw	high _clockr
 10454  013540  6E20               	movwf	gsm_msg@msgadd+1,c
 10455  013542  EC0A  F08F         	call	_gsm_msg	;wreg free
 10456                           
 10457                           ;gsm.c: 224: gsm_receive(2,gsmmsg);
 10458  013546  0E02               	movlw	low _gsmmsg
 10459  013548  6E23               	movwf	gsm_receive@messagebuf,c
 10460  01354A  0E06               	movlw	high _gsmmsg
 10461  01354C  6E24               	movwf	gsm_receive@messagebuf+1,c
 10462  01354E  0E02               	movlw	2
 10463  013550  EC5E  F096         	call	_gsm_receive
 10464                           
 10465                           ;gsm.c: 225: parse_date_time();
 10466  013554  EC97  F083         	call	_parse_date_time	;wreg free
 10467  013558  0012               	return		;funcret
 10468  01355A                     __end_of_gsm_gettime:
 10469                           	opt stack 0
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           prodh	equ	0xFF4
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           postinc0	equ	0xFEE
 10478                           wreg	equ	0xFE8
 10479                           indf1	equ	0xFE7
 10480                           postdec1	equ	0xFE5
 10481                           fsr1h	equ	0xFE2
 10482                           fsr1l	equ	0xFE1
 10483                           indf2	equ	0xFDF
 10484                           postinc2	equ	0xFDE
 10485                           fsr2h	equ	0xFDA
 10486                           fsr2l	equ	0xFD9
 10487                           status	equ	0xFD8
 10488                           
 10489 ;; *************** function _parse_date_time *****************
 10490 ;; Defined at:
 10491 ;;		line 177 in file "gsm.c"
 10492 ;; Parameters:    Size  Location     Type
 10493 ;;		None
 10494 ;; Auto vars:     Size  Location     Type
 10495 ;;  i               1   33[COMRAM] unsigned char 
 10496 ;;  x               1   32[COMRAM] unsigned char 
 10497 ;;  hour            1   31[COMRAM] unsigned char 
 10498 ;;  hhour           1   30[COMRAM] unsigned char 
 10499 ;; Return value:  Size  Location     Type
 10500 ;;                  1    wreg      void 
 10501 ;; Registers used:
 10502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10503 ;; Tracked objects:
 10504 ;;		On entry : 0/0
 10505 ;;		On exit  : 0/0
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10509 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10510 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10511 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10512 ;;Total ram usage:        8 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; Hardware stack levels required when called:    3
 10515 ;; This function calls:
 10516 ;;		___awdiv
 10517 ;;		_gsm_zerobuff
 10518 ;; This function is called by:
 10519 ;;		_gsm_gettime
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           	psect	text48
 10524  01072E                     __ptext48:
 10525                           	opt stack 0
 10526  01072E                     _parse_date_time:
 10527                           	opt stack 24
 10528                           
 10529                           ;gsm.c: 179: gsm_zerobuff(gsdate, 0x014);
 10530                           
 10531                           ;incstack = 0
 10532  01072E  0ED7               	movlw	low _gsdate
 10533  010730  6E1D               	movwf	gsm_zerobuff@gsmsgbuf,c
 10534  010732  0E00               	movlw	high _gsdate
 10535  010734  6E1E               	movwf	gsm_zerobuff@gsmsgbuf+1,c
 10536  010736  0E00               	movlw	0
 10537  010738  6E20               	movwf	gsm_zerobuff@count+1,c
 10538  01073A  0E14               	movlw	20
 10539  01073C  6E1F               	movwf	gsm_zerobuff@count,c
 10540  01073E  EC1B  F09A         	call	_gsm_zerobuff	;wreg free
 10541                           
 10542                           ;gsm.c: 180: gsm_zerobuff(gstime, 0x014);
 10543  010742  0ECD               	movlw	low _gstime
 10544  010744  6E1D               	movwf	gsm_zerobuff@gsmsgbuf,c
 10545  010746  0E00               	movlw	high _gstime
 10546  010748  6E1E               	movwf	gsm_zerobuff@gsmsgbuf+1,c
 10547  01074A  0E00               	movlw	0
 10548  01074C  6E20               	movwf	gsm_zerobuff@count+1,c
 10549  01074E  0E14               	movlw	20
 10550  010750  6E1F               	movwf	gsm_zerobuff@count,c
 10551  010752  EC1B  F09A         	call	_gsm_zerobuff	;wreg free
 10552                           
 10553                           ;gsm.c: 181: uint8_t x = 8;
 10554  010756  0E08               	movlw	8
 10555  010758  6E2B               	movwf	parse_date_time@x,c
 10556                           
 10557                           ;gsm.c: 182: uint8_t i = 0x07;
 10558  01075A  0E07               	movlw	7
 10559  01075C  6E2C               	movwf	parse_date_time@i,c
 10560                           
 10561                           ;gsm.c: 183: gsmbyte = gsmmsg[27];
 10562  01075E  C61D  F031         	movff	_gsmmsg+27,_gsmbyte
 10563                           
 10564                           ;gsm.c: 184: gsmbyte = gsmbyte & 0x0F;
 10565  010762  5031               	movf	_gsmbyte,w,c
 10566  010764  0B0F               	andlw	15
 10567  010766  6E31               	movwf	_gsmbyte,c
 10568                           
 10569                           ;gsm.c: 185: gsmbyte = gsmbyte/4;
 10570  010768  C031  F01D         	movff	_gsmbyte,___awdiv@dividend
 10571  01076C  6A1E               	clrf	___awdiv@dividend+1,c
 10572  01076E  0E00               	movlw	0
 10573  010770  6E20               	movwf	___awdiv@divisor+1,c
 10574  010772  0E04               	movlw	4
 10575  010774  6E1F               	movwf	___awdiv@divisor,c
 10576  010776  EC17  F092         	call	___awdiv	;wreg free
 10577  01077A  501D               	movf	?___awdiv,w,c
 10578  01077C  6E31               	movwf	_gsmbyte,c
 10579                           
 10580                           ;gsm.c: 186: uint8_t hour = (gsmmsg[18] & 0x0F) + gsmbyte;
 10581                           ; multi bank
 10582  01077E  0106               	movlb	(_gsmmsg+18) shr (0+8)
 10583  010780  5114               	movf	(_gsmmsg+18)& (0+255),w,b
 10584  010782  0B0F               	andlw	15
 10585  010784  2431               	addwf	_gsmbyte,w,c
 10586  010786  6E2A               	movwf	parse_date_time@hour,c
 10587                           
 10588                           ;gsm.c: 187: uint8_t hhour = gsmmsg[17] & 0x0F;
 10589                           ; multi bank
 10590  010788  0106               	movlb	(_gsmmsg+17) shr (0+8)
 10591  01078A  5113               	movf	(_gsmmsg+17)& (0+255),w,b
 10592  01078C  0B0F               	andlw	15
 10593  01078E  6E29               	movwf	parse_date_time@hhour,c
 10594                           
 10595                           ;gsm.c: 188: if(hour > 9)
 10596  010790  0E09               	movlw	9
 10597  010792  642A               	cpfsgt	parse_date_time@hour,c
 10598  010794  D01B               	goto	l5417
 10599                           
 10600                           ;gsm.c: 189: {
 10601                           ;gsm.c: 190: gsmmsg[18] = 0x30;
 10602  010796  0E30               	movlw	48
 10603  010798  CFE8 F614          	movff	wreg,_gsmmsg+18
 10604                           
 10605                           ;gsm.c: 191: gsmmsg[17]++;
 10606  01079C  C613  FFE8         	movff	_gsmmsg+17,wreg
 10607  0107A0  0F01               	addlw	1
 10608  0107A2  CFE8 F613          	movff	wreg,_gsmmsg+17
 10609                           
 10610                           ;gsm.c: 192: if(gsmmsg[17] > 0x32)
 10611  0107A6  EE26  F013         	lfsr	2,_gsmmsg+17
 10612  0107AA  0E32               	movlw	50
 10613  0107AC  64DF               	cpfsgt	indf2,c
 10614  0107AE  D00A               	goto	l5419
 10615                           
 10616                           ;gsm.c: 193: {
 10617                           ;gsm.c: 194: gsmmsg[17] = 0x30;
 10618  0107B0  0E30               	movlw	48
 10619  0107B2  CFE8 F613          	movff	wreg,_gsmmsg+17
 10620                           
 10621                           ;gsm.c: 195: }
 10622                           ;gsm.c: 196: while(hour > 0x0A)
 10623  0107B6  D006               	goto	l5419
 10624  0107B8                     
 10625                           ;gsm.c: 197: {
 10626                           ;gsm.c: 198: hour--;
 10627  0107B8  062A               	decf	parse_date_time@hour,f,c
 10628                           
 10629                           ;gsm.c: 199: gsmmsg[18]++;
 10630  0107BA  C614  FFE8         	movff	_gsmmsg+18,wreg
 10631  0107BE  0F01               	addlw	1
 10632  0107C0  CFE8 F614          	movff	wreg,_gsmmsg+18
 10633  0107C4                     l5419:
 10634  0107C4  0E0B               	movlw	11
 10635  0107C6  602A               	cpfslt	parse_date_time@hour,c
 10636  0107C8  D7F7               	goto	l5420
 10637  0107CA  D04C               	goto	l5423
 10638  0107CC                     l5417:
 10639                           
 10640                           ;gsm.c: 202: else
 10641                           ;gsm.c: 203: {
 10642                           ;gsm.c: 204: gsmmsg[18] = hour | 0x30;
 10643  0107CC  C02A  F025         	movff	parse_date_time@hour,??_parse_date_time
 10644  0107D0  0E30               	movlw	48
 10645  0107D2  1225               	iorwf	??_parse_date_time,f,c
 10646  0107D4  C025  F614         	movff	??_parse_date_time,_gsmmsg+18
 10647                           
 10648                           ;gsm.c: 205: }
 10649                           ;gsm.c: 206: while(x < 0x10)
 10650  0107D8  D045               	goto	l5423
 10651  0107DA                     
 10652                           ;gsm.c: 207: {
 10653                           ;gsm.c: 208: gsdate[i - 1] = gsmmsg[x++];
 10654  0107DA  502B               	movf	parse_date_time@x,w,c
 10655  0107DC  0D01               	mullw	1
 10656  0107DE  0E02               	movlw	low _gsmmsg
 10657  0107E0  24F3               	addwf	prodl,w,c
 10658  0107E2  6ED9               	movwf	fsr2l,c
 10659  0107E4  0E06               	movlw	high _gsmmsg
 10660  0107E6  20F4               	addwfc	prodh,w,c
 10661  0107E8  6EDA               	movwf	fsr2h,c
 10662  0107EA  0EFF               	movlw	255
 10663  0107EC  6E25               	movwf	??_parse_date_time& (0+255),c
 10664  0107EE  0EFF               	movlw	255
 10665  0107F0  6E26               	movwf	(??_parse_date_time+1)& (0+255),c
 10666  0107F2  502C               	movf	parse_date_time@i,w,c
 10667  0107F4  6E27               	movwf	(??_parse_date_time+2)& (0+255),c
 10668  0107F6  6A28               	clrf	(??_parse_date_time+3)& (0+255),c
 10669  0107F8  5025               	movf	??_parse_date_time,w,c
 10670  0107FA  2627               	addwf	??_parse_date_time+2,f,c
 10671  0107FC  5026               	movf	??_parse_date_time+1,w,c
 10672  0107FE  2228               	addwfc	??_parse_date_time+3,f,c
 10673  010800  0ED7               	movlw	low _gsdate
 10674  010802  2427               	addwf	??_parse_date_time+2,w,c
 10675  010804  6EE1               	movwf	fsr1l,c
 10676  010806  0E00               	movlw	high _gsdate
 10677  010808  2028               	addwfc	??_parse_date_time+3,w,c
 10678  01080A  6EE2               	movwf	fsr1h,c
 10679  01080C  CFDF FFE7          	movff	indf2,indf1
 10680  010810  2A2B               	incf	parse_date_time@x,f,c
 10681                           
 10682                           ;gsm.c: 209: gsdate[i--] = gsmmsg[x++];
 10683  010812  502B               	movf	parse_date_time@x,w,c
 10684  010814  0D01               	mullw	1
 10685  010816  0E02               	movlw	low _gsmmsg
 10686  010818  24F3               	addwf	prodl,w,c
 10687  01081A  6ED9               	movwf	fsr2l,c
 10688  01081C  0E06               	movlw	high _gsmmsg
 10689  01081E  20F4               	addwfc	prodh,w,c
 10690  010820  6EDA               	movwf	fsr2h,c
 10691  010822  502C               	movf	parse_date_time@i,w,c
 10692  010824  0D01               	mullw	1
 10693  010826  0ED7               	movlw	low _gsdate
 10694  010828  24F3               	addwf	prodl,w,c
 10695  01082A  6EE1               	movwf	fsr1l,c
 10696  01082C  0E00               	movlw	high _gsdate
 10697  01082E  20F4               	addwfc	prodh,w,c
 10698  010830  6EE2               	movwf	fsr1h,c
 10699  010832  CFDF FFE7          	movff	indf2,indf1
 10700  010836  2A2B               	incf	parse_date_time@x,f,c
 10701  010838  062C               	decf	parse_date_time@i,f,c
 10702                           
 10703                           ;gsm.c: 210: gsdate[--i] = gsmmsg[x++];
 10704  01083A  502B               	movf	parse_date_time@x,w,c
 10705  01083C  0D01               	mullw	1
 10706  01083E  0E02               	movlw	low _gsmmsg
 10707  010840  24F3               	addwf	prodl,w,c
 10708  010842  6ED9               	movwf	fsr2l,c
 10709  010844  0E06               	movlw	high _gsmmsg
 10710  010846  20F4               	addwfc	prodh,w,c
 10711  010848  6EDA               	movwf	fsr2h,c
 10712  01084A  062C               	decf	parse_date_time@i,f,c
 10713  01084C  502C               	movf	parse_date_time@i,w,c
 10714  01084E  0D01               	mullw	1
 10715  010850  0ED7               	movlw	low _gsdate
 10716  010852  24F3               	addwf	prodl,w,c
 10717  010854  6EE1               	movwf	fsr1l,c
 10718  010856  0E00               	movlw	high _gsdate
 10719  010858  20F4               	addwfc	prodh,w,c
 10720  01085A  6EE2               	movwf	fsr1h,c
 10721  01085C  CFDF FFE7          	movff	indf2,indf1
 10722  010860  2A2B               	incf	parse_date_time@x,f,c
 10723                           
 10724                           ;gsm.c: 211: i--;
 10725  010862  062C               	decf	parse_date_time@i,f,c
 10726  010864                     l5423:
 10727  010864  0E0F               	movlw	15
 10728  010866  642B               	cpfsgt	parse_date_time@x,c
 10729  010868  D7B8               	goto	l5424
 10730                           
 10731                           ;gsm.c: 212: }
 10732                           ;gsm.c: 213: i = 0;
 10733  01086A  0E00               	movlw	0
 10734  01086C  6E2C               	movwf	parse_date_time@i,c
 10735                           
 10736                           ;gsm.c: 214: while(i < 0x08)
 10737  01086E  D014               	goto	l5426
 10738  010870                     
 10739                           ;gsm.c: 215: {
 10740                           ;gsm.c: 216: gstime[i++] = gsmmsg[x++];
 10741  010870  502B               	movf	parse_date_time@x,w,c
 10742  010872  0D01               	mullw	1
 10743  010874  0E02               	movlw	low _gsmmsg
 10744  010876  24F3               	addwf	prodl,w,c
 10745  010878  6ED9               	movwf	fsr2l,c
 10746  01087A  0E06               	movlw	high _gsmmsg
 10747  01087C  20F4               	addwfc	prodh,w,c
 10748  01087E  6EDA               	movwf	fsr2h,c
 10749  010880  502C               	movf	parse_date_time@i,w,c
 10750  010882  0D01               	mullw	1
 10751  010884  0ECD               	movlw	low _gstime
 10752  010886  24F3               	addwf	prodl,w,c
 10753  010888  6EE1               	movwf	fsr1l,c
 10754  01088A  0E00               	movlw	high _gstime
 10755  01088C  20F4               	addwfc	prodh,w,c
 10756  01088E  6EE2               	movwf	fsr1h,c
 10757  010890  CFDF FFE7          	movff	indf2,indf1
 10758  010894  2A2B               	incf	parse_date_time@x,f,c
 10759  010896  2A2C               	incf	parse_date_time@i,f,c
 10760  010898                     l5426:
 10761  010898  0E07               	movlw	7
 10762  01089A  642C               	cpfsgt	parse_date_time@i,c
 10763  01089C  D7E9               	goto	l5427
 10764  01089E  0012               	return	
 10765  0108A0                     __end_of_parse_date_time:
 10766                           	opt stack 0
 10767                           tblptru	equ	0xFF8
 10768                           tblptrh	equ	0xFF7
 10769                           tblptrl	equ	0xFF6
 10770                           tablat	equ	0xFF5
 10771                           prodh	equ	0xFF4
 10772                           prodl	equ	0xFF3
 10773                           intcon	equ	0xFF2
 10774                           postinc0	equ	0xFEE
 10775                           wreg	equ	0xFE8
 10776                           indf1	equ	0xFE7
 10777                           postdec1	equ	0xFE5
 10778                           fsr1h	equ	0xFE2
 10779                           fsr1l	equ	0xFE1
 10780                           indf2	equ	0xFDF
 10781                           postinc2	equ	0xFDE
 10782                           fsr2h	equ	0xFDA
 10783                           fsr2l	equ	0xFD9
 10784                           status	equ	0xFD8
 10785                           
 10786 ;; *************** function ___awdiv *****************
 10787 ;; Defined at:
 10788 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/awdiv.c"
 10789 ;; Parameters:    Size  Location     Type
 10790 ;;  dividend        2   18[COMRAM] int 
 10791 ;;  divisor         2   20[COMRAM] int 
 10792 ;; Auto vars:     Size  Location     Type
 10793 ;;  quotient        2   24[COMRAM] int 
 10794 ;;  sign            1   23[COMRAM] unsigned char 
 10795 ;;  counter         1   22[COMRAM] unsigned char 
 10796 ;; Return value:  Size  Location     Type
 10797 ;;                  2   18[COMRAM] int 
 10798 ;; Registers used:
 10799 ;;		wreg, status,2, status,0
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10805 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10806 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;Total ram usage:        8 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; Hardware stack levels required when called:    2
 10812 ;; This function calls:
 10813 ;;		Nothing
 10814 ;; This function is called by:
 10815 ;;		_parse_date_time
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           	psect	text49
 10820  01242E                     __ptext49:
 10821                           	opt stack 0
 10822  01242E                     ___awdiv:
 10823                           	opt stack 24
 10824                           
 10825                           ;incstack = 0
 10826  01242E  0E00               	movlw	0
 10827  012430  6E22               	movwf	___awdiv@sign,c
 10828  012432  AE20               	btfss	___awdiv@divisor+1,7,c
 10829  012434  D006               	goto	l5685
 10830  012436  6C1F               	negf	___awdiv@divisor,c
 10831  012438  1E20               	comf	___awdiv@divisor+1,f,c
 10832  01243A  B0D8               	btfsc	status,0,c
 10833  01243C  2A20               	incf	___awdiv@divisor+1,f,c
 10834  01243E  0E01               	movlw	1
 10835  012440  6E22               	movwf	___awdiv@sign,c
 10836  012442                     l5685:
 10837  012442  AE1E               	btfss	___awdiv@dividend+1,7,c
 10838  012444  D006               	goto	l5686
 10839  012446  6C1D               	negf	___awdiv@dividend,c
 10840  012448  1E1E               	comf	___awdiv@dividend+1,f,c
 10841  01244A  B0D8               	btfsc	status,0,c
 10842  01244C  2A1E               	incf	___awdiv@dividend+1,f,c
 10843  01244E  0E01               	movlw	1
 10844  012450  1A22               	xorwf	___awdiv@sign,f,c
 10845  012452                     l5686:
 10846  012452  0E00               	movlw	0
 10847  012454  6E24               	movwf	___awdiv@quotient+1,c
 10848  012456  0E00               	movlw	0
 10849  012458  6E23               	movwf	___awdiv@quotient,c
 10850  01245A  501F               	movf	___awdiv@divisor,w,c
 10851  01245C  1020               	iorwf	___awdiv@divisor+1,w,c
 10852  01245E  B4D8               	btfsc	status,2,c
 10853  012460  D01C               	goto	l5693
 10854  012462  0E01               	movlw	1
 10855  012464  6E21               	movwf	___awdiv@counter,c
 10856  012466  D004               	goto	l5688
 10857  012468  90D8               	bcf	status,0,c
 10858  01246A  361F               	rlcf	___awdiv@divisor,f,c
 10859  01246C  3620               	rlcf	___awdiv@divisor+1,f,c
 10860  01246E  2A21               	incf	___awdiv@counter,f,c
 10861  012470                     l5688:
 10862  012470  AE20               	btfss	___awdiv@divisor+1,7,c
 10863  012472  D7FA               	goto	l5689
 10864  012474                     u5420:
 10865  012474  90D8               	bcf	status,0,c
 10866  012476  3623               	rlcf	___awdiv@quotient,f,c
 10867  012478  3624               	rlcf	___awdiv@quotient+1,f,c
 10868  01247A  501F               	movf	___awdiv@divisor,w,c
 10869  01247C  5C1D               	subwf	___awdiv@dividend,w,c
 10870  01247E  5020               	movf	___awdiv@divisor+1,w,c
 10871  012480  581E               	subwfb	___awdiv@dividend+1,w,c
 10872  012482  A0D8               	btfss	status,0,c
 10873  012484  D005               	goto	l5692
 10874  012486  501F               	movf	___awdiv@divisor,w,c
 10875  012488  5E1D               	subwf	___awdiv@dividend,f,c
 10876  01248A  5020               	movf	___awdiv@divisor+1,w,c
 10877  01248C  5A1E               	subwfb	___awdiv@dividend+1,f,c
 10878  01248E  8023               	bsf	___awdiv@quotient,0,c
 10879  012490                     l5692:
 10880  012490  90D8               	bcf	status,0,c
 10881  012492  3220               	rrcf	___awdiv@divisor+1,f,c
 10882  012494  321F               	rrcf	___awdiv@divisor,f,c
 10883  012496  2E21               	decfsz	___awdiv@counter,f,c
 10884  012498  D7ED               	goto	u5420
 10885  01249A                     l5693:
 10886  01249A  5022               	movf	___awdiv@sign,w,c
 10887  01249C  B4D8               	btfsc	status,2,c
 10888  01249E  D004               	goto	l5694
 10889  0124A0  6C23               	negf	___awdiv@quotient,c
 10890  0124A2  1E24               	comf	___awdiv@quotient+1,f,c
 10891  0124A4  B0D8               	btfsc	status,0,c
 10892  0124A6  2A24               	incf	___awdiv@quotient+1,f,c
 10893  0124A8                     l5694:
 10894  0124A8  C023  F01D         	movff	___awdiv@quotient,?___awdiv
 10895  0124AC  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
 10896  0124B0  0012               	return	
 10897  0124B2                     __end_of___awdiv:
 10898                           	opt stack 0
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           postinc0	equ	0xFEE
 10907                           wreg	equ	0xFE8
 10908                           indf1	equ	0xFE7
 10909                           postdec1	equ	0xFE5
 10910                           fsr1h	equ	0xFE2
 10911                           fsr1l	equ	0xFE1
 10912                           indf2	equ	0xFDF
 10913                           postinc2	equ	0xFDE
 10914                           fsr2h	equ	0xFDA
 10915                           fsr2l	equ	0xFD9
 10916                           status	equ	0xFD8
 10917                           
 10918 ;; *************** function _gsm_receive *****************
 10919 ;; Defined at:
 10920 ;;		line 367 in file "gsm.c"
 10921 ;; Parameters:    Size  Location     Type
 10922 ;;  noofline        1    wreg     unsigned char 
 10923 ;;  messagebuf      2   24[COMRAM] PTR unsigned char 
 10924 ;;		 -> gsmusm(256), gsmmsg(512), 
 10925 ;; Auto vars:     Size  Location     Type
 10926 ;;  noofline        1   26[COMRAM] unsigned char 
 10927 ;;  x               1   27[COMRAM] unsigned char 
 10928 ;; Return value:  Size  Location     Type
 10929 ;;                  1    wreg      void 
 10930 ;; Registers used:
 10931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10932 ;; Tracked objects:
 10933 ;;		On entry : 0/0
 10934 ;;		On exit  : 0/0
 10935 ;;		Unchanged: 0/0
 10936 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10937 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10938 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10940 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10941 ;;Total ram usage:        4 bytes
 10942 ;; Hardware stack levels used:    1
 10943 ;; Hardware stack levels required when called:    3
 10944 ;; This function calls:
 10945 ;;		_EUSARTG_Read
 10946 ;;		_gsm_zerobuff
 10947 ;; This function is called by:
 10948 ;;		_gsm_init
 10949 ;;		_clock_display
 10950 ;;		_gsm_gettime
 10951 ;;		_gsm_getbalance
 10952 ;;		_gsm_setime
 10953 ;; This function uses a non-reentrant model
 10954 ;;
 10955                           
 10956                           	psect	text50
 10957  012CBC                     __ptext50:
 10958                           	opt stack 0
 10959  012CBC                     _gsm_receive:
 10960                           	opt stack 25
 10961                           
 10962                           ;incstack = 0
 10963                           ;gsm_receive@noofline stored from wreg
 10964  012CBC  6E25               	movwf	gsm_receive@noofline,c
 10965                           
 10966                           ;gsm.c: 369: gsm_zerobuff(messagebuf, 0x200);
 10967  012CBE  C023  F01D         	movff	gsm_receive@messagebuf,gsm_zerobuff@gsmsgbuf
 10968  012CC2  C024  F01E         	movff	gsm_receive@messagebuf+1,gsm_zerobuff@gsmsgbuf+1
 10969  012CC6  0E02               	movlw	2
 10970  012CC8  6E20               	movwf	gsm_zerobuff@count+1,c
 10971  012CCA  0E00               	movlw	0
 10972  012CCC  6E1F               	movwf	gsm_zerobuff@count,c
 10973  012CCE  EC1B  F09A         	call	_gsm_zerobuff	;wreg free
 10974                           
 10975                           ;gsm.c: 370: uint8_t x = 0;
 10976  012CD2  0E00               	movlw	0
 10977  012CD4  6E26               	movwf	gsm_receive@x,c
 10978                           
 10979                           ;gsm.c: 371: gsmbyte = 0;
 10980  012CD6  0E00               	movlw	0
 10981  012CD8  6E31               	movwf	_gsmbyte,c
 10982                           
 10983                           ;gsm.c: 372: while(noofline > 0x00)
 10984  012CDA  D017               	goto	l5480
 10985  012CDC                     
 10986                           ;gsm.c: 373: {
 10987                           ;gsm.c: 374: gsmbyte = EUSARTG_Read();
 10988  012CDC  EC6B  F09B         	call	_EUSARTG_Read	;wreg free
 10989  012CE0  6E31               	movwf	_gsmbyte,c
 10990                           
 10991                           ;gsm.c: 375: if(gsmflags.meerror)
 10992  012CE2  B230               	btfsc	_gsmflags,1,c
 10993  012CE4  0012               	return	
 10994                           
 10995                           ;gsm.c: 378: }
 10996                           ;gsm.c: 379: messagebuf[x] = gsmbyte;
 10997                           
 10998                           ;gsm.c: 376: {
 10999                           ;gsm.c: 377: break;
 11000  012CE6  5026               	movf	gsm_receive@x,w,c
 11001  012CE8  0D01               	mullw	1
 11002  012CEA  50F3               	movf	prodl,w,c
 11003  012CEC  2423               	addwf	gsm_receive@messagebuf,w,c
 11004  012CEE  6ED9               	movwf	fsr2l,c
 11005  012CF0  50F4               	movf	prodh,w,c
 11006  012CF2  2024               	addwfc	gsm_receive@messagebuf+1,w,c
 11007  012CF4  6EDA               	movwf	fsr2h,c
 11008  012CF6  C031  FFDF         	movff	_gsmbyte,indf2
 11009                           
 11010                           ;gsm.c: 380: x++;
 11011  012CFA  2A26               	incf	gsm_receive@x,f,c
 11012                           
 11013                           ;gsm.c: 381: if(gsmbyte == 0x0A || gsmbyte == 0x00)
 11014  012CFC  0E0A               	movlw	10
 11015  012CFE  1831               	xorwf	_gsmbyte,w,c
 11016  012D00  B4D8               	btfsc	status,2,c
 11017  012D02  D002               	goto	u5820
 11018  012D04  5031               	movf	_gsmbyte,w,c
 11019  012D06  B4D8               	btfsc	status,2,c
 11020  012D08                     u5820:
 11021                           
 11022                           ;gsm.c: 382: {
 11023                           ;gsm.c: 383: noofline--;
 11024  012D08  0625               	decf	gsm_receive@noofline,f,c
 11025  012D0A                     l5480:
 11026  012D0A  5025               	movf	gsm_receive@noofline,w,c
 11027  012D0C  B4D8               	btfsc	status,2,c
 11028  012D0E  0012               	return	
 11029  012D10  D7E5               	goto	l5477
 11030  012D12                     __end_of_gsm_receive:
 11031                           	opt stack 0
 11032                           tblptru	equ	0xFF8
 11033                           tblptrh	equ	0xFF7
 11034                           tblptrl	equ	0xFF6
 11035                           tablat	equ	0xFF5
 11036                           prodh	equ	0xFF4
 11037                           prodl	equ	0xFF3
 11038                           intcon	equ	0xFF2
 11039                           postinc0	equ	0xFEE
 11040                           wreg	equ	0xFE8
 11041                           indf1	equ	0xFE7
 11042                           postdec1	equ	0xFE5
 11043                           fsr1h	equ	0xFE2
 11044                           fsr1l	equ	0xFE1
 11045                           indf2	equ	0xFDF
 11046                           postinc2	equ	0xFDE
 11047                           fsr2h	equ	0xFDA
 11048                           fsr2l	equ	0xFD9
 11049                           status	equ	0xFD8
 11050                           
 11051 ;; *************** function _gsm_zerobuff *****************
 11052 ;; Defined at:
 11053 ;;		line 33 in file "gsm.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;  gsmsgbuf        2   18[COMRAM] PTR unsigned char 
 11056 ;;		 -> gsmums(512), gsmusm(256), gsmmsg(512), gstime(10), 
 11057 ;;		 -> gsdate(10), 
 11058 ;;  count           2   20[COMRAM] unsigned int 
 11059 ;; Auto vars:     Size  Location     Type
 11060 ;;  x               2   22[COMRAM] unsigned int 
 11061 ;; Return value:  Size  Location     Type
 11062 ;;                  1    wreg      void 
 11063 ;; Registers used:
 11064 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11065 ;; Tracked objects:
 11066 ;;		On entry : 0/0
 11067 ;;		On exit  : 0/0
 11068 ;;		Unchanged: 0/0
 11069 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11070 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11073 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;Total ram usage:        6 bytes
 11075 ;; Hardware stack levels used:    1
 11076 ;; Hardware stack levels required when called:    2
 11077 ;; This function calls:
 11078 ;;		Nothing
 11079 ;; This function is called by:
 11080 ;;		_gsm_init
 11081 ;;		_parse_date_time
 11082 ;;		_gsm_setime
 11083 ;;		_gsm_receive
 11084 ;;		_gsm_unsolic
 11085 ;; This function uses a non-reentrant model
 11086 ;;
 11087                           
 11088                           	psect	text51
 11089  013436                     __ptext51:
 11090                           	opt stack 0
 11091  013436                     _gsm_zerobuff:
 11092                           	opt stack 27
 11093                           
 11094                           ;gsm.c: 35: uint16_t x = 0;
 11095                           
 11096                           ;incstack = 0
 11097  013436  0E00               	movlw	0
 11098  013438  6E22               	movwf	gsm_zerobuff@x+1,c
 11099  01343A  0E00               	movlw	0
 11100  01343C  6E21               	movwf	gsm_zerobuff@x,c
 11101                           
 11102                           ;gsm.c: 36: while(x < count)
 11103  01343E  D00A               	goto	l5385
 11104  013440                     
 11105                           ;gsm.c: 37: {
 11106                           ;gsm.c: 38: gsmsgbuf[x] = 0x00;
 11107  013440  5021               	movf	gsm_zerobuff@x,w,c
 11108  013442  241D               	addwf	gsm_zerobuff@gsmsgbuf,w,c
 11109  013444  6ED9               	movwf	fsr2l,c
 11110  013446  5022               	movf	gsm_zerobuff@x+1,w,c
 11111  013448  201E               	addwfc	gsm_zerobuff@gsmsgbuf+1,w,c
 11112  01344A  6EDA               	movwf	fsr2h,c
 11113  01344C  0E00               	movlw	0
 11114  01344E  6EDF               	movwf	indf2,c
 11115                           
 11116                           ;gsm.c: 39: x++;
 11117  013450  4A21               	infsnz	gsm_zerobuff@x,f,c
 11118  013452  2A22               	incf	gsm_zerobuff@x+1,f,c
 11119  013454                     l5385:
 11120  013454  501F               	movf	gsm_zerobuff@count,w,c
 11121  013456  5C21               	subwf	gsm_zerobuff@x,w,c
 11122  013458  5020               	movf	gsm_zerobuff@count+1,w,c
 11123  01345A  5822               	subwfb	gsm_zerobuff@x+1,w,c
 11124  01345C  B0D8               	btfsc	status,0,c
 11125  01345E  0012               	return	
 11126  013460  D7EF               	goto	l5386
 11127  013462                     __end_of_gsm_zerobuff:
 11128                           	opt stack 0
 11129                           tblptru	equ	0xFF8
 11130                           tblptrh	equ	0xFF7
 11131                           tblptrl	equ	0xFF6
 11132                           tablat	equ	0xFF5
 11133                           prodh	equ	0xFF4
 11134                           prodl	equ	0xFF3
 11135                           intcon	equ	0xFF2
 11136                           postinc0	equ	0xFEE
 11137                           wreg	equ	0xFE8
 11138                           indf1	equ	0xFE7
 11139                           postdec1	equ	0xFE5
 11140                           fsr1h	equ	0xFE2
 11141                           fsr1l	equ	0xFE1
 11142                           indf2	equ	0xFDF
 11143                           postinc2	equ	0xFDE
 11144                           fsr2h	equ	0xFDA
 11145                           fsr2l	equ	0xFD9
 11146                           status	equ	0xFD8
 11147                           
 11148 ;; *************** function _EUSARTG_Read *****************
 11149 ;; Defined at:
 11150 ;;		line 450 in file "gsm.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;		None
 11153 ;; Auto vars:     Size  Location     Type
 11154 ;;		None
 11155 ;; Return value:  Size  Location     Type
 11156 ;;                  1    wreg      unsigned char 
 11157 ;; Registers used:
 11158 ;;		wreg, status,2
 11159 ;; Tracked objects:
 11160 ;;		On entry : 0/0
 11161 ;;		On exit  : 0/0
 11162 ;;		Unchanged: 0/0
 11163 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11168 ;;Total ram usage:        0 bytes
 11169 ;; Hardware stack levels used:    1
 11170 ;; Hardware stack levels required when called:    2
 11171 ;; This function calls:
 11172 ;;		Nothing
 11173 ;; This function is called by:
 11174 ;;		_gsm_setime
 11175 ;;		_gsm_receive
 11176 ;;		_gsm_netwait
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           	psect	text52
 11181  0136D6                     __ptext52:
 11182                           	opt stack 0
 11183  0136D6                     _EUSARTG_Read:
 11184                           	opt stack 25
 11185                           
 11186                           ;gsm.c: 454: {
 11187                           
 11188                           ;gsm.c: 453: while(!PIR3bits.RC2IF)
 11189                           
 11190                           ;incstack = 0
 11191  0136D6  010E               	movlb	14	; () banked
 11192  0136D8  AFCD               	btfss	205,7,b	;volatile
 11193  0136DA  D7FD               	goto	_EUSARTG_Read
 11194                           
 11195                           ; BSR set to: 14
 11196                           ;gsm.c: 456: }
 11197                           ;gsm.c: 460: if(RC2STAbits.OERR)
 11198  0136DC  A39D               	btfss	157,1,b	;volatile
 11199  0136DE  D002               	goto	l5516
 11200                           
 11201                           ; BSR set to: 14
 11202                           ;gsm.c: 461: {
 11203                           ;gsm.c: 464: RC2STAbits.CREN = 0;
 11204  0136E0  999D               	bcf	157,4,b	;volatile
 11205                           
 11206                           ;gsm.c: 465: RC2STAbits.CREN = 1;
 11207  0136E2  899D               	bsf	157,4,b	;volatile
 11208  0136E4                     l5516:
 11209                           
 11210                           ; BSR set to: 14
 11211                           ;gsm.c: 466: }
 11212                           ;gsm.c: 468: return RC2REG;
 11213                           
 11214                           ; BSR set to: 14
 11215  0136E4  5199               	movf	153,w,b	;volatile
 11216  0136E6  0012               	return	
 11217  0136E8                     __end_of_EUSARTG_Read:
 11218                           	opt stack 0
 11219                           tblptru	equ	0xFF8
 11220                           tblptrh	equ	0xFF7
 11221                           tblptrl	equ	0xFF6
 11222                           tablat	equ	0xFF5
 11223                           prodh	equ	0xFF4
 11224                           prodl	equ	0xFF3
 11225                           intcon	equ	0xFF2
 11226                           postinc0	equ	0xFEE
 11227                           wreg	equ	0xFE8
 11228                           indf1	equ	0xFE7
 11229                           postdec1	equ	0xFE5
 11230                           fsr1h	equ	0xFE2
 11231                           fsr1l	equ	0xFE1
 11232                           indf2	equ	0xFDF
 11233                           postinc2	equ	0xFDE
 11234                           fsr2h	equ	0xFDA
 11235                           fsr2l	equ	0xFD9
 11236                           status	equ	0xFD8
 11237                           
 11238 ;; *************** function _gsm_msg *****************
 11239 ;; Defined at:
 11240 ;;		line 44 in file "gsm.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;  msgadd          2   20[COMRAM] PTR unsigned char 
 11243 ;;		 -> clockw(9), gsmtim(23), nettst(11), ussdwc(11), 
 11244 ;;		 -> ussdwv(23), ussdwm(19), clockr(10), facres(7), 
 11245 ;;		 -> netoff(11), engqry(12), ussdw2(21), setgsm(15), 
 11246 ;;		 -> smsdel(20), smstxt(11), noecho(9), RAM(3719), 
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  gsmstr          1   27[COMRAM] unsigned char 
 11249 ;;  msgbkup         3   24[COMRAM] unsigned um
 11250 ;; Return value:  Size  Location     Type
 11251 ;;                  1    wreg      void 
 11252 ;; Registers used:
 11253 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11254 ;; Tracked objects:
 11255 ;;		On entry : 0/0
 11256 ;;		On exit  : 0/0
 11257 ;;		Unchanged: 0/0
 11258 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11259 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11260 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;Total ram usage:        8 bytes
 11264 ;; Hardware stack levels used:    1
 11265 ;; Hardware stack levels required when called:    4
 11266 ;; This function calls:
 11267 ;;		_gsm_transmit
 11268 ;; This function is called by:
 11269 ;;		_gsm_init
 11270 ;;		_gsm_gettime
 11271 ;;		_gsm_getbalance
 11272 ;;		_gsm_setime
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text53
 11277  011E14                     __ptext53:
 11278                           	opt stack 0
 11279  011E14                     _gsm_msg:
 11280                           	opt stack 24
 11281                           
 11282                           ;gsm.c: 46: uint24_t msgbkup = msgadd;
 11283                           
 11284                           ; BSR set to: 14
 11285                           ;incstack = 0
 11286  011E14  C01F  F023         	movff	gsm_msg@msgadd,gsm_msg@msgbkup
 11287  011E18  C020  F024         	movff	gsm_msg@msgadd+1,gsm_msg@msgbkup+1
 11288  011E1C  6A25               	clrf	gsm_msg@msgbkup+2,c
 11289  011E1E                     
 11290                           ;gsm.c: 48: msgadd = msgbkup;
 11291  011E1E  C023  F01F         	movff	gsm_msg@msgbkup,gsm_msg@msgadd
 11292  011E22  C024  F020         	movff	gsm_msg@msgbkup+1,gsm_msg@msgadd+1
 11293                           
 11294                           ;gsm.c: 49: gsmflags.retransmit = 0;
 11295  011E26  9030               	bcf	_gsmflags,0,c
 11296                           
 11297                           ;gsm.c: 51: for(uint8_t gsmstr = 0; msgadd[gsmstr] != 0x00; gsmstr++)
 11298  011E28  0E00               	movlw	0
 11299  011E2A  6E26               	movwf	gsm_msg@gsmstr,c
 11300  011E2C  D020               	goto	l5392
 11301  011E2E                     
 11302                           ;gsm.c: 52: {
 11303                           ;gsm.c: 53: gsmbyte = msgadd[gsmstr];
 11304  011E2E  5026               	movf	gsm_msg@gsmstr,w,c
 11305  011E30  0D01               	mullw	1
 11306  011E32  C01F  F021         	movff	gsm_msg@msgadd,??_gsm_msg
 11307  011E36  C020  F022         	movff	gsm_msg@msgadd+1,??_gsm_msg+1
 11308  011E3A  50F3               	movf	prodl,w,c
 11309  011E3C  2621               	addwf	??_gsm_msg,f,c
 11310  011E3E  50F4               	movf	prodh,w,c
 11311  011E40  2222               	addwfc	??_gsm_msg+1,f,c
 11312  011E42  C021  FFF6         	movff	??_gsm_msg,tblptrl
 11313  011E46  C022  FFF7         	movff	??_gsm_msg+1,tblptrh
 11314  011E4A  0E00               	movlw	low (__mediumconst shr (0+16))
 11315  011E4C  6EF8               	movwf	tblptru,c
 11316  011E4E  0E0E               	movlw	(high __ramtop+-1)
 11317  011E50  64F7               	cpfsgt	tblptrh,c
 11318  011E52  D003               	bra	u5767
 11319  011E54  0008               	tblrd		*
 11320  011E56  50F5               	movf	tablat,w,c
 11321  011E58  D005               	bra	u5760
 11322  011E5A                     u5767:
 11323  011E5A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11324  011E5E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11325  011E62  50EF               	movf	indf0,w,c
 11326  011E64                     u5760:
 11327  011E64  6E31               	movwf	_gsmbyte,c
 11328                           
 11329                           ;gsm.c: 54: gsm_transmit(gsmbyte);
 11330  011E66  5031               	movf	_gsmbyte,w,c
 11331  011E68  EC44  F09B         	call	_gsm_transmit
 11332  011E6C  2A26               	incf	gsm_msg@gsmstr,f,c
 11333  011E6E                     l5392:
 11334  011E6E  5026               	movf	gsm_msg@gsmstr,w,c
 11335  011E70  0D01               	mullw	1
 11336  011E72  C01F  F021         	movff	gsm_msg@msgadd,??_gsm_msg
 11337  011E76  C020  F022         	movff	gsm_msg@msgadd+1,??_gsm_msg+1
 11338  011E7A  50F3               	movf	prodl,w,c
 11339  011E7C  2621               	addwf	??_gsm_msg,f,c
 11340  011E7E  50F4               	movf	prodh,w,c
 11341  011E80  2222               	addwfc	??_gsm_msg+1,f,c
 11342  011E82  C021  FFF6         	movff	??_gsm_msg,tblptrl
 11343  011E86  C022  FFF7         	movff	??_gsm_msg+1,tblptrh
 11344  011E8A  0E00               	movlw	low (__mediumconst shr (0+16))
 11345  011E8C  6EF8               	movwf	tblptru,c
 11346  011E8E  0E0E               	movlw	(high __ramtop+-1)
 11347  011E90  64F7               	cpfsgt	tblptrh,c
 11348  011E92  D003               	bra	u5777
 11349  011E94  0008               	tblrd		*
 11350  011E96  50F5               	movf	tablat,w,c
 11351  011E98  D005               	bra	u5770
 11352  011E9A                     u5777:
 11353  011E9A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11354  011E9E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11355  011EA2  50EF               	movf	indf0,w,c
 11356  011EA4                     u5770:
 11357  011EA4  0900               	iorlw	0
 11358  011EA6  A4D8               	btfss	status,2,c
 11359  011EA8  D7C2               	goto	l5393
 11360                           
 11361                           ;gsm.c: 55: }
 11362                           ;gsm.c: 56: if(gsmflags.retransmit)
 11363  011EAA  A030               	btfss	_gsmflags,0,c
 11364  011EAC  0012               	return	
 11365  011EAE  D7B7               	goto	l5391
 11366  011EB0                     __end_of_gsm_msg:
 11367                           	opt stack 0
 11368                           tblptru	equ	0xFF8
 11369                           tblptrh	equ	0xFF7
 11370                           tblptrl	equ	0xFF6
 11371                           tablat	equ	0xFF5
 11372                           prodh	equ	0xFF4
 11373                           prodl	equ	0xFF3
 11374                           intcon	equ	0xFF2
 11375                           indf0	equ	0xFEF
 11376                           postinc0	equ	0xFEE
 11377                           fsr0h	equ	0xFEA
 11378                           fsr0l	equ	0xFE9
 11379                           wreg	equ	0xFE8
 11380                           indf1	equ	0xFE7
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           fsr2h	equ	0xFDA
 11387                           fsr2l	equ	0xFD9
 11388                           status	equ	0xFD8
 11389                           
 11390 ;; *************** function _gsm_transmit *****************
 11391 ;; Defined at:
 11392 ;;		line 26 in file "gsm.c"
 11393 ;; Parameters:    Size  Location     Type
 11394 ;;  txbyte          1    wreg     unsigned char 
 11395 ;; Auto vars:     Size  Location     Type
 11396 ;;  txbyte          1   19[COMRAM] unsigned char 
 11397 ;; Return value:  Size  Location     Type
 11398 ;;                  1    wreg      void 
 11399 ;; Registers used:
 11400 ;;		wreg, status,2, cstack
 11401 ;; Tracked objects:
 11402 ;;		On entry : 0/0
 11403 ;;		On exit  : 0/0
 11404 ;;		Unchanged: 0/0
 11405 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11407 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11409 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11410 ;;Total ram usage:        1 bytes
 11411 ;; Hardware stack levels used:    1
 11412 ;; Hardware stack levels required when called:    3
 11413 ;; This function calls:
 11414 ;;		_EUSART2_Write
 11415 ;; This function is called by:
 11416 ;;		_gsm_msg
 11417 ;;		_gsm_init
 11418 ;;		_gsm_txAT
 11419 ;; This function uses a non-reentrant model
 11420 ;;
 11421                           
 11422                           	psect	text54
 11423  013688                     __ptext54:
 11424                           	opt stack 0
 11425  013688                     _gsm_transmit:
 11426                           	opt stack 25
 11427                           
 11428                           ;incstack = 0
 11429                           ;gsm_transmit@txbyte stored from wreg
 11430  013688  6E1E               	movwf	gsm_transmit@txbyte,c
 11431                           
 11432                           ;gsm.c: 28: TX2STAbits.TXEN = 1;
 11433  01368A  010E               	movlb	14	; () banked
 11434  01368C  8B9E               	bsf	158,5,b	;volatile
 11435                           
 11436                           ; BSR set to: 14
 11437                           ;gsm.c: 29: EUSART2_Write(txbyte);
 11438  01368E  501E               	movf	gsm_transmit@txbyte,w,c
 11439  013690  EC89  F09B         	call	_EUSART2_Write
 11440  013694  010E               	movlb	14	; () banked
 11441  013696  B39E               	btfsc	158,1,b	;volatile
 11442  013698  0012               	return	
 11443  01369A  D7FC               	goto	l5380
 11444  01369C                     __end_of_gsm_transmit:
 11445                           	opt stack 0
 11446                           tblptru	equ	0xFF8
 11447                           tblptrh	equ	0xFF7
 11448                           tblptrl	equ	0xFF6
 11449                           tablat	equ	0xFF5
 11450                           prodh	equ	0xFF4
 11451                           prodl	equ	0xFF3
 11452                           intcon	equ	0xFF2
 11453                           indf0	equ	0xFEF
 11454                           postinc0	equ	0xFEE
 11455                           fsr0h	equ	0xFEA
 11456                           fsr0l	equ	0xFE9
 11457                           wreg	equ	0xFE8
 11458                           indf1	equ	0xFE7
 11459                           postdec1	equ	0xFE5
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           fsr2h	equ	0xFDA
 11465                           fsr2l	equ	0xFD9
 11466                           status	equ	0xFD8
 11467                           
 11468 ;; *************** function _EUSART2_Write *****************
 11469 ;; Defined at:
 11470 ;;		line 126 in file "mcc_generated_files/eusart2.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;  txData          1    wreg     unsigned char 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;  txData          1   18[COMRAM] unsigned char 
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      void 
 11477 ;; Registers used:
 11478 ;;		wreg
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11487 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11488 ;;Total ram usage:        1 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    2
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_gsm_transmit
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           	psect	text55
 11499  013712                     __ptext55:
 11500                           	opt stack 0
 11501  013712                     _EUSART2_Write:
 11502                           	opt stack 25
 11503                           
 11504                           ; BSR set to: 14
 11505                           ;incstack = 0
 11506                           ;EUSART2_Write@txData stored from wreg
 11507  013712  6E1D               	movwf	EUSART2_Write@txData,c
 11508  013714                     
 11509                           ;eusart2.c: 129: {
 11510                           
 11511                           ;eusart2.c: 128: while(0 == PIR3bits.TX2IF)
 11512  013714  010E               	movlb	14	; () banked
 11513  013716  ADCD               	btfss	205,6,b	;volatile
 11514  013718  D7FD               	goto	l12057
 11515                           
 11516                           ; BSR set to: 14
 11517                           ;eusart2.c: 130: }
 11518                           ;eusart2.c: 132: TX2REG = txData;
 11519                           
 11520                           ; BSR set to: 14
 11521  01371A  C01D  FE9A         	movff	EUSART2_Write@txData,3738	;volatile
 11522                           
 11523                           ; BSR set to: 14
 11524  01371E  0012               	return		;funcret
 11525  013720                     __end_of_EUSART2_Write:
 11526                           	opt stack 0
 11527                           tblptru	equ	0xFF8
 11528                           tblptrh	equ	0xFF7
 11529                           tblptrl	equ	0xFF6
 11530                           tablat	equ	0xFF5
 11531                           prodh	equ	0xFF4
 11532                           prodl	equ	0xFF3
 11533                           intcon	equ	0xFF2
 11534                           indf0	equ	0xFEF
 11535                           postinc0	equ	0xFEE
 11536                           fsr0h	equ	0xFEA
 11537                           fsr0l	equ	0xFE9
 11538                           wreg	equ	0xFE8
 11539                           indf1	equ	0xFE7
 11540                           postdec1	equ	0xFE5
 11541                           fsr1h	equ	0xFE2
 11542                           fsr1l	equ	0xFE1
 11543                           indf2	equ	0xFDF
 11544                           postinc2	equ	0xFDE
 11545                           fsr2h	equ	0xFDA
 11546                           fsr2l	equ	0xFD9
 11547                           status	equ	0xFD8
 11548                           
 11549 ;; *************** function _disp_clock *****************
 11550 ;; Defined at:
 11551 ;;		line 249 in file "lcd.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;		None
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;		None
 11556 ;; Return value:  Size  Location     Type
 11557 ;;                  1    wreg      void 
 11558 ;; Registers used:
 11559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11569 ;;Total ram usage:        0 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    8
 11572 ;; This function calls:
 11573 ;;		_lcd_string
 11574 ;;		_lcd_write
 11575 ;; This function is called by:
 11576 ;;		_clock_display
 11577 ;; This function uses a non-reentrant model
 11578 ;;
 11579                           
 11580                           	psect	text56
 11581  011FDC                     __ptext56:
 11582                           	opt stack 0
 11583  011FDC                     _disp_clock:
 11584                           	opt stack 20
 11585                           
 11586                           ;lcd.c: 251: lcd_write(dispclr);
 11587                           
 11588                           ; BSR set to: 14
 11589                           ;incstack = 0
 11590  011FDC  0E90               	movlw	low _dispclr
 11591  011FDE  6EF6               	movwf	tblptrl,c
 11592  011FE0                     	if	1	;There is more than 1 active tblptr byte
 11593  011FE0  0EFB               	movlw	high _dispclr
 11594  011FE2  6EF7               	movwf	tblptrh,c
 11595  011FE4                     	endif
 11596  011FE4                     	if	1	;There are 3 active tblptr bytes
 11597  011FE4  0E00               	movlw	low (_dispclr shr (0+16))
 11598  011FE6  6EF8               	movwf	tblptru,c
 11599  011FE8                     	endif
 11600  011FE8  0008               	tblrd		*
 11601  011FEA  50F5               	movf	tablat,w,c
 11602  011FEC  ECD3  F099         	call	_lcd_write
 11603                           
 11604                           ;lcd.c: 252: lcd_string(clockdate, line2);
 11605  011FF0  0EEB               	movlw	low _clockdate
 11606  011FF2  6E24               	movwf	lcd_string@lcdstring,c
 11607  011FF4  0EFF               	movlw	high _clockdate
 11608  011FF6  6E25               	movwf	lcd_string@lcdstring+1,c
 11609  011FF8  0E85               	movlw	low _line2
 11610  011FFA  6EF6               	movwf	tblptrl,c
 11611  011FFC                     	if	1	;There is more than 1 active tblptr byte
 11612  011FFC  0EFB               	movlw	high _line2
 11613  011FFE  6EF7               	movwf	tblptrh,c
 11614  012000                     	endif
 11615  012000                     	if	1	;There are 3 active tblptr bytes
 11616  012000  0E00               	movlw	low (_line2 shr (0+16))
 11617  012002  6EF8               	movwf	tblptru,c
 11618  012004                     	endif
 11619  012004  0008               	tblrd		*
 11620  012006  CFF5 F026          	movff	tablat,lcd_string@lcdline
 11621  01200A  EC5D  F08A         	call	_lcd_string	;wreg free
 11622                           
 11623                           ;lcd.c: 253: lcd_string(gsdate, line2 + 5);
 11624  01200E  0ED7               	movlw	low _gsdate
 11625  012010  6E24               	movwf	lcd_string@lcdstring,c
 11626  012012  0E00               	movlw	high _gsdate
 11627  012014  6E25               	movwf	lcd_string@lcdstring+1,c
 11628  012016  0E85               	movlw	low _line2
 11629  012018  6EF6               	movwf	tblptrl,c
 11630  01201A                     	if	1	;There is more than 1 active tblptr byte
 11631  01201A  0EFB               	movlw	high _line2
 11632  01201C  6EF7               	movwf	tblptrh,c
 11633  01201E                     	endif
 11634  01201E                     	if	1	;There are 3 active tblptr bytes
 11635  01201E  0E00               	movlw	low (_line2 shr (0+16))
 11636  012020  6EF8               	movwf	tblptru,c
 11637  012022                     	endif
 11638  012022  0008               	tblrd		*
 11639  012024  50F5               	movf	tablat,w,c
 11640  012026  0F05               	addlw	5
 11641  012028  6E26               	movwf	lcd_string@lcdline,c
 11642  01202A  EC5D  F08A         	call	_lcd_string	;wreg free
 11643                           
 11644                           ;lcd.c: 254: lcd_string(clocktime, line3);
 11645  01202E  0EF1               	movlw	low _clocktime
 11646  012030  6E24               	movwf	lcd_string@lcdstring,c
 11647  012032  0EFF               	movlw	high _clocktime
 11648  012034  6E25               	movwf	lcd_string@lcdstring+1,c
 11649  012036  0E84               	movlw	low _line3
 11650  012038  6EF6               	movwf	tblptrl,c
 11651  01203A                     	if	1	;There is more than 1 active tblptr byte
 11652  01203A  0EFB               	movlw	high _line3
 11653  01203C  6EF7               	movwf	tblptrh,c
 11654  01203E                     	endif
 11655  01203E                     	if	1	;There are 3 active tblptr bytes
 11656  01203E  0E00               	movlw	low (_line3 shr (0+16))
 11657  012040  6EF8               	movwf	tblptru,c
 11658  012042                     	endif
 11659  012042  0008               	tblrd		*
 11660  012044  CFF5 F026          	movff	tablat,lcd_string@lcdline
 11661  012048  EC5D  F08A         	call	_lcd_string	;wreg free
 11662                           
 11663                           ;lcd.c: 255: lcd_string(gstime, line3 + 5);
 11664  01204C  0ECD               	movlw	low _gstime
 11665  01204E  6E24               	movwf	lcd_string@lcdstring,c
 11666  012050  0E00               	movlw	high _gstime
 11667  012052  6E25               	movwf	lcd_string@lcdstring+1,c
 11668  012054  0E84               	movlw	low _line3
 11669  012056  6EF6               	movwf	tblptrl,c
 11670  012058                     	if	1	;There is more than 1 active tblptr byte
 11671  012058  0EFB               	movlw	high _line3
 11672  01205A  6EF7               	movwf	tblptrh,c
 11673  01205C                     	endif
 11674  01205C                     	if	1	;There are 3 active tblptr bytes
 11675  01205C  0E00               	movlw	low (_line3 shr (0+16))
 11676  01205E  6EF8               	movwf	tblptru,c
 11677  012060                     	endif
 11678  012060  0008               	tblrd		*
 11679  012062  50F5               	movf	tablat,w,c
 11680  012064  0F05               	addlw	5
 11681  012066  6E26               	movwf	lcd_string@lcdline,c
 11682  012068  EC5D  F08A         	call	_lcd_string	;wreg free
 11683  01206C  0012               	return		;funcret
 11684  01206E                     __end_of_disp_clock:
 11685                           	opt stack 0
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           indf0	equ	0xFEF
 11694                           postinc0	equ	0xFEE
 11695                           fsr0h	equ	0xFEA
 11696                           fsr0l	equ	0xFE9
 11697                           wreg	equ	0xFE8
 11698                           indf1	equ	0xFE7
 11699                           postdec1	equ	0xFE5
 11700                           fsr1h	equ	0xFE2
 11701                           fsr1l	equ	0xFE1
 11702                           indf2	equ	0xFDF
 11703                           postinc2	equ	0xFDE
 11704                           fsr2h	equ	0xFDA
 11705                           fsr2l	equ	0xFD9
 11706                           status	equ	0xFD8
 11707                           
 11708 ;; *************** function _enter_service *****************
 11709 ;; Defined at:
 11710 ;;		line 218 in file "main.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;		None
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;		None
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  1    wreg      void 
 11717 ;; Registers used:
 11718 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11728 ;;Total ram usage:        0 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:   12
 11731 ;; This function calls:
 11732 ;;		_Audit
 11733 ;;		_Clear_cred
 11734 ;;		_Hopper_coin
 11735 ;;		_Sensor_set
 11736 ;;		_Vend_setup
 11737 ;;		_butindb
 11738 ;;		_hopper_test
 11739 ;;		_lcd_string
 11740 ;;		_mdb_unlock
 11741 ;;		_price_set
 11742 ;;		_set_notes
 11743 ;; This function is called by:
 11744 ;;		_main
 11745 ;; This function uses a non-reentrant model
 11746 ;;
 11747                           
 11748                           	psect	text57
 11749  011D72                     __ptext57:
 11750                           	opt stack 0
 11751  011D72                     _enter_service:
 11752                           	opt stack 18
 11753                           
 11754                           ;main.c: 220: mdb_unlock();
 11755                           
 11756                           ;incstack = 0
 11757  011D72  EC84  F08C         	call	_mdb_unlock	;wreg free
 11758                           
 11759                           ;main.c: 221: lcd_string(servmsg, line1);
 11760  011D76  0E95               	movlw	low _servmsg
 11761  011D78  6E24               	movwf	lcd_string@lcdstring,c
 11762  011D7A  0EFB               	movlw	high _servmsg
 11763  011D7C  6E25               	movwf	lcd_string@lcdstring+1,c
 11764  011D7E  0E86               	movlw	low _line1
 11765  011D80  6EF6               	movwf	tblptrl,c
 11766  011D82                     	if	1	;There is more than 1 active tblptr byte
 11767  011D82  0EFB               	movlw	high _line1
 11768  011D84  6EF7               	movwf	tblptrh,c
 11769  011D86                     	endif
 11770  011D86                     	if	1	;There are 3 active tblptr bytes
 11771  011D86  0E00               	movlw	low (_line1 shr (0+16))
 11772  011D88  6EF8               	movwf	tblptru,c
 11773  011D8A                     	endif
 11774  011D8A  0008               	tblrd		*
 11775  011D8C  CFF5 F026          	movff	tablat,lcd_string@lcdline
 11776  011D90  EC5D  F08A         	call	_lcd_string	;wreg free
 11777                           
 11778                           ;main.c: 224: while(venflags.service)
 11779  011D94  D03C               	goto	l1287
 11780  011D96                     
 11781                           ;main.c: 225: {
 11782                           ;main.c: 226: buttons = butindb();
 11783  011D96  EC72  F097         	call	_butindb	;wreg free
 11784  011D9A  6E3A               	movwf	_buttons,c	;volatile
 11785                           
 11786                           ;main.c: 227: switch(buttons)
 11787  011D9C  D01C               	goto	l1285
 11788  011D9E  ECFC  F081         	call	_Audit	;wreg free
 11789                           
 11790                           ;main.c: 230: break;
 11791  011DA2  D035               	goto	l1287
 11792  011DA4  ECAE  F08B         	call	_Sensor_set	;wreg free
 11793                           
 11794                           ;main.c: 232: break;
 11795  011DA8  D032               	goto	l1287
 11796  011DAA  EC19  F08C         	call	_Hopper_coin	;wreg free
 11797                           
 11798                           ;main.c: 234: break;
 11799  011DAE  D02F               	goto	l1287
 11800  011DB0  EC6B  F089         	call	_set_notes	;wreg free
 11801                           
 11802                           ;main.c: 236: break;
 11803  011DB4  D02C               	goto	l1287
 11804  011DB6  EC58  F08F         	call	_Clear_cred	;wreg free
 11805                           
 11806                           ;main.c: 238: venflags.service = 0;
 11807  011DBA  9E2D               	bcf	_venflags,7,c
 11808  011DBC  00FF               	reset		;# 
 11809  011DBE  EC59  F092         	call	_price_set	;wreg free
 11810                           
 11811                           ;main.c: 241: break;
 11812  011DC2  D025               	goto	l1287
 11813  011DC4  EC66  F087         	call	_Vend_setup	;wreg free
 11814                           
 11815                           ;main.c: 243: break;
 11816  011DC8  D022               	goto	l1287
 11817  011DCA                     l1294:
 11818  011DCA  9E2D               	bcf	_venflags,7,c
 11819  011DCC  00FF               	reset		;# 
 11820                           
 11821                           ;main.c: 246: break;
 11822  011DCE  D01F               	goto	l1287
 11823  011DD0  EC4E  F09B         	call	_hopper_test	;wreg free
 11824                           
 11825                           ;main.c: 248: }
 11826  011DD4  D01C               	goto	l1287
 11827  011DD6                     l1285:
 11828  011DD6  503A               	movf	_buttons,w,c	;volatile
 11829                           
 11830                           ; Switch size 1, requested type "space"
 11831                           ; Number of cases is 9, Range of values is 1 to 128
 11832                           ; switch strategies available:
 11833                           ; Name         Instructions Cycles
 11834                           ; simple_byte           28    15 (average)
 11835                           ;	Chosen strategy is simple_byte
 11836  011DD8  0A01               	xorlw	1	; case 1
 11837  011DDA  B4D8               	btfsc	status,2,c
 11838  011DDC  D7E0               	goto	l1286
 11839  011DDE  0A03               	xorlw	3	; case 2
 11840  011DE0  B4D8               	btfsc	status,2,c
 11841  011DE2  D7E0               	goto	l1288
 11842  011DE4  0A01               	xorlw	1	; case 3
 11843  011DE6  B4D8               	btfsc	status,2,c
 11844  011DE8  D7F3               	goto	l1295
 11845  011DEA  0A07               	xorlw	7	; case 4
 11846  011DEC  B4D8               	btfsc	status,2,c
 11847  011DEE  D7DD               	goto	l1289
 11848  011DF0  0A0C               	xorlw	12	; case 8
 11849  011DF2  B4D8               	btfsc	status,2,c
 11850  011DF4  D7DD               	goto	l1290
 11851  011DF6  0A18               	xorlw	24	; case 16
 11852  011DF8  B4D8               	btfsc	status,2,c
 11853  011DFA  D7DD               	goto	l1291
 11854  011DFC  0A30               	xorlw	48	; case 32
 11855  011DFE  B4D8               	btfsc	status,2,c
 11856  011E00  D7DE               	goto	l1292
 11857  011E02  0A60               	xorlw	96	; case 64
 11858  011E04  B4D8               	btfsc	status,2,c
 11859  011E06  D7DE               	goto	l1293
 11860  011E08  0AC0               	xorlw	192	; case 128
 11861  011E0A  B4D8               	btfsc	status,2,c
 11862  011E0C  D7DE               	goto	l1294
 11863  011E0E                     l1287:
 11864  011E0E  AE2D               	btfss	_venflags,7,c
 11865  011E10  0012               	return	
 11866  011E12  D7C1               	goto	l1284
 11867  011E14                     __end_of_enter_service:
 11868                           	opt stack 0
 11869                           tblptru	equ	0xFF8
 11870                           tblptrh	equ	0xFF7
 11871                           tblptrl	equ	0xFF6
 11872                           tablat	equ	0xFF5
 11873                           prodh	equ	0xFF4
 11874                           prodl	equ	0xFF3
 11875                           intcon	equ	0xFF2
 11876                           indf0	equ	0xFEF
 11877                           postinc0	equ	0xFEE
 11878                           fsr0h	equ	0xFEA
 11879                           fsr0l	equ	0xFE9
 11880                           wreg	equ	0xFE8
 11881                           indf1	equ	0xFE7
 11882                           postdec1	equ	0xFE5
 11883                           fsr1h	equ	0xFE2
 11884                           fsr1l	equ	0xFE1
 11885                           indf2	equ	0xFDF
 11886                           postinc2	equ	0xFDE
 11887                           fsr2h	equ	0xFDA
 11888                           fsr2l	equ	0xFD9
 11889                           status	equ	0xFD8
 11890                           
 11891 ;; *************** function _set_notes *****************
 11892 ;; Defined at:
 11893 ;;		line 60 in file "mdb.c"
 11894 ;; Parameters:    Size  Location     Type
 11895 ;;		None
 11896 ;; Auto vars:     Size  Location     Type
 11897 ;;		None
 11898 ;; Return value:  Size  Location     Type
 11899 ;;                  1    wreg      void 
 11900 ;; Registers used:
 11901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11902 ;; Tracked objects:
 11903 ;;		On entry : 0/0
 11904 ;;		On exit  : 0/0
 11905 ;;		Unchanged: 0/0
 11906 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11911 ;;Total ram usage:        0 bytes
 11912 ;; Hardware stack levels used:    1
 11913 ;; Hardware stack levels required when called:   10
 11914 ;; This function calls:
 11915 ;;		_butindb
 11916 ;;		_displ_note
 11917 ;;		_enable_notes
 11918 ;;		_lcd_string
 11919 ;; This function is called by:
 11920 ;;		_enter_service
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text58
 11925  0112D6                     __ptext58:
 11926                           	opt stack 0
 11927  0112D6                     _set_notes:
 11928                           	opt stack 19
 11929                           
 11930                           ;mdb.c: 62: lcd_string(setnotes, line1);
 11931                           
 11932                           ;incstack = 0
 11933  0112D6  0EE5               	movlw	low _setnotes
 11934  0112D8  6E24               	movwf	lcd_string@lcdstring,c
 11935  0112DA  0EFB               	movlw	high _setnotes
 11936  0112DC  6E25               	movwf	lcd_string@lcdstring+1,c
 11937  0112DE  0E86               	movlw	low _line1
 11938  0112E0  6EF6               	movwf	tblptrl,c
 11939  0112E2                     	if	1	;There is more than 1 active tblptr byte
 11940  0112E2  0EFB               	movlw	high _line1
 11941  0112E4  6EF7               	movwf	tblptrh,c
 11942  0112E6                     	endif
 11943  0112E6                     	if	1	;There are 3 active tblptr bytes
 11944  0112E6  0E00               	movlw	low (_line1 shr (0+16))
 11945  0112E8  6EF8               	movwf	tblptru,c
 11946  0112EA                     	endif
 11947  0112EA  0008               	tblrd		*
 11948  0112EC  CFF5 F026          	movff	tablat,lcd_string@lcdline
 11949  0112F0  EC5D  F08A         	call	_lcd_string	;wreg free
 11950                           
 11951                           ;mdb.c: 63: mdbflags.noteset = 1;
 11952  0112F4  8A40               	bsf	_mdbflags,5,c
 11953                           
 11954                           ;mdb.c: 64: mdbflags.endis = 1;
 11955  0112F6  8C40               	bsf	_mdbflags,6,c
 11956                           
 11957                           ;mdb.c: 65: while(mdbflags.noteset)
 11958  0112F8  D064               	goto	l3195
 11959  0112FA                     
 11960                           ;mdb.c: 66: {
 11961                           ;mdb.c: 67: buttons = butindb();
 11962  0112FA  EC72  F097         	call	_butindb	;wreg free
 11963  0112FE  6E3A               	movwf	_buttons,c	;volatile
 11964                           
 11965                           ;mdb.c: 68: notenum = buttons;
 11966  011300  C03A  F0FF         	movff	_buttons,_notenum	;volatile
 11967                           
 11968                           ;mdb.c: 69: switch(buttons)
 11969  011304  D048               	goto	l3197
 11970  011306  0EA3               	movlw	low _tenrand
 11971  011308  6E29               	movwf	displ_note@notestring,c
 11972  01130A  0EFF               	movlw	high _tenrand
 11973  01130C  6E2A               	movwf	displ_note@notestring+1,c
 11974  01130E  ECE4  F098         	call	_displ_note	;wreg free
 11975  011312  6E42               	movwf	_dspposition,c
 11976                           
 11977                           ;mdb.c: 73: enable_notes(0x01);
 11978  011314  0E01               	movlw	1
 11979  011316  ECD7  F092         	call	_enable_notes
 11980                           
 11981                           ;mdb.c: 74: break;
 11982  01131A  D050               	goto	l3199
 11983  01131C  0ED5               	movlw	low _twentyrand
 11984  01131E  6E29               	movwf	displ_note@notestring,c
 11985  011320  0EFF               	movlw	high _twentyrand
 11986  011322  6E2A               	movwf	displ_note@notestring+1,c
 11987  011324  ECE4  F098         	call	_displ_note	;wreg free
 11988  011328  6E42               	movwf	_dspposition,c
 11989                           
 11990                           ;mdb.c: 77: enable_notes(0x02);
 11991  01132A  0E02               	movlw	2
 11992  01132C  ECD7  F092         	call	_enable_notes
 11993                           
 11994                           ;mdb.c: 78: break;
 11995  011330  D045               	goto	l3199
 11996  011332  0ECD               	movlw	low _fiftyrand
 11997  011334  6E29               	movwf	displ_note@notestring,c
 11998  011336  0EFF               	movlw	high _fiftyrand
 11999  011338  6E2A               	movwf	displ_note@notestring+1,c
 12000  01133A  ECE4  F098         	call	_displ_note	;wreg free
 12001  01133E  6E42               	movwf	_dspposition,c
 12002                           
 12003                           ;mdb.c: 81: enable_notes(0x04);
 12004  011340  0E04               	movlw	4
 12005  011342  ECD7  F092         	call	_enable_notes
 12006                           
 12007                           ;mdb.c: 82: break;
 12008  011346  D03A               	goto	l3199
 12009  011348  0EC5               	movlw	low _hundredrand
 12010  01134A  6E29               	movwf	displ_note@notestring,c
 12011  01134C  0EFF               	movlw	high _hundredrand
 12012  01134E  6E2A               	movwf	displ_note@notestring+1,c
 12013  011350  ECE4  F098         	call	_displ_note	;wreg free
 12014  011354  6E42               	movwf	_dspposition,c
 12015                           
 12016                           ;mdb.c: 85: enable_notes(0x08);
 12017  011356  0E08               	movlw	8
 12018  011358  ECD7  F092         	call	_enable_notes
 12019                           
 12020                           ;mdb.c: 86: break;
 12021  01135C  D02F               	goto	l3199
 12022  01135E  0EBD               	movlw	low _twohundredrand
 12023  011360  6E29               	movwf	displ_note@notestring,c
 12024  011362  0EFF               	movlw	high _twohundredrand
 12025  011364  6E2A               	movwf	displ_note@notestring+1,c
 12026  011366  ECE4  F098         	call	_displ_note	;wreg free
 12027  01136A  6E42               	movwf	_dspposition,c
 12028                           
 12029                           ;mdb.c: 89: enable_notes(0x10);
 12030  01136C  0E10               	movlw	16
 12031  01136E  ECD7  F092         	call	_enable_notes
 12032                           
 12033                           ;mdb.c: 90: break;
 12034  011372  D024               	goto	l3199
 12035  011374  0E95               	movlw	low _servmsg
 12036  011376  6E24               	movwf	lcd_string@lcdstring,c
 12037  011378  0EFB               	movlw	high _servmsg
 12038  01137A  6E25               	movwf	lcd_string@lcdstring+1,c
 12039  01137C  0E86               	movlw	low _line1
 12040  01137E  6EF6               	movwf	tblptrl,c
 12041  011380                     	if	1	;There is more than 1 active tblptr byte
 12042  011380  0EFB               	movlw	high _line1
 12043  011382  6EF7               	movwf	tblptrh,c
 12044  011384                     	endif
 12045  011384                     	if	1	;There are 3 active tblptr bytes
 12046  011384  0E00               	movlw	low (_line1 shr (0+16))
 12047  011386  6EF8               	movwf	tblptru,c
 12048  011388                     	endif
 12049  011388  0008               	tblrd		*
 12050  01138A  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12051  01138E  EC5D  F08A         	call	_lcd_string	;wreg free
 12052                           
 12053                           ;mdb.c: 93: mdbflags.noteset = 0;
 12054  011392  9A40               	bcf	_mdbflags,5,c
 12055                           
 12056                           ;mdb.c: 95: }
 12057                           
 12058                           ;mdb.c: 94: default : break;
 12059  011394  D013               	goto	l3199
 12060  011396                     l3197:
 12061  011396  503A               	movf	_buttons,w,c	;volatile
 12062                           
 12063                           ; Switch size 1, requested type "space"
 12064                           ; Number of cases is 6, Range of values is 1 to 128
 12065                           ; switch strategies available:
 12066                           ; Name         Instructions Cycles
 12067                           ; simple_byte           19    10 (average)
 12068                           ;	Chosen strategy is simple_byte
 12069  011398  0A01               	xorlw	1	; case 1
 12070  01139A  B4D8               	btfsc	status,2,c
 12071  01139C  D7B4               	goto	l3198
 12072  01139E  0A03               	xorlw	3	; case 2
 12073  0113A0  B4D8               	btfsc	status,2,c
 12074  0113A2  D7BC               	goto	l3200
 12075  0113A4  0A06               	xorlw	6	; case 4
 12076  0113A6  B4D8               	btfsc	status,2,c
 12077  0113A8  D7C4               	goto	l3201
 12078  0113AA  0A0C               	xorlw	12	; case 8
 12079  0113AC  B4D8               	btfsc	status,2,c
 12080  0113AE  D7CC               	goto	l3202
 12081  0113B0  0A18               	xorlw	24	; case 16
 12082  0113B2  B4D8               	btfsc	status,2,c
 12083  0113B4  D7D4               	goto	l3203
 12084  0113B6  0A90               	xorlw	144	; case 128
 12085  0113B8  B4D8               	btfsc	status,2,c
 12086  0113BA  D7DC               	goto	l3204
 12087  0113BC                     l3199:
 12088                           
 12089                           ;mdb.c: 96: ((uint8_t*) &noteen)[0] = noteen_byte;
 12090  0113BC  C03F  F0AE         	movff	_noteen_byte,_noteen	;volatile
 12091  0113C0  F000               	nop		;# 
 12092  0113C2                     l3195:
 12093  0113C2  AA40               	btfss	_mdbflags,5,c
 12094  0113C4  0012               	return	
 12095  0113C6  D799               	goto	l3196
 12096  0113C8                     __end_of_set_notes:
 12097                           	opt stack 0
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           indf0	equ	0xFEF
 12106                           postinc0	equ	0xFEE
 12107                           fsr0h	equ	0xFEA
 12108                           fsr0l	equ	0xFE9
 12109                           wreg	equ	0xFE8
 12110                           indf1	equ	0xFE7
 12111                           postdec1	equ	0xFE5
 12112                           fsr1h	equ	0xFE2
 12113                           fsr1l	equ	0xFE1
 12114                           indf2	equ	0xFDF
 12115                           postinc2	equ	0xFDE
 12116                           fsr2h	equ	0xFDA
 12117                           fsr2l	equ	0xFD9
 12118                           status	equ	0xFD8
 12119                           
 12120 ;; *************** function _enable_notes *****************
 12121 ;; Defined at:
 12122 ;;		line 101 in file "mdb.c"
 12123 ;; Parameters:    Size  Location     Type
 12124 ;;  notenum         1    wreg     unsigned char 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  notenum         1   32[COMRAM] unsigned char 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;                  1    wreg      void 
 12129 ;; Registers used:
 12130 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;Total ram usage:        1 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    9
 12143 ;; This function calls:
 12144 ;;		_butindb
 12145 ;;		_displ_nendis
 12146 ;;		_lcd_string
 12147 ;;		_save_notes
 12148 ;; This function is called by:
 12149 ;;		_set_notes
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           	psect	text59
 12154  0125AE                     __ptext59:
 12155                           	opt stack 0
 12156  0125AE                     _enable_notes:
 12157                           	opt stack 19
 12158                           
 12159                           ;incstack = 0
 12160                           ;enable_notes@notenum stored from wreg
 12161  0125AE  6E2B               	movwf	enable_notes@notenum,c
 12162                           
 12163                           ;mdb.c: 103: mdbflags.endis = 1;
 12164  0125B0  8C40               	bsf	_mdbflags,6,c
 12165                           
 12166                           ;mdb.c: 104: displ_nendis(notenum);
 12167  0125B2  502B               	movf	enable_notes@notenum,w,c
 12168  0125B4  ECBA  F099         	call	_displ_nendis
 12169                           
 12170                           ;mdb.c: 105: while(mdbflags.endis)
 12171  0125B8  D034               	goto	l3214
 12172  0125BA                     
 12173                           ;mdb.c: 106: {
 12174                           ;mdb.c: 107: buttons = butindb();
 12175  0125BA  EC72  F097         	call	_butindb	;wreg free
 12176  0125BE  6E3A               	movwf	_buttons,c	;volatile
 12177                           
 12178                           ;mdb.c: 108: switch(buttons)
 12179  0125C0  D026               	goto	l3212
 12180  0125C2  503F               	movf	_noteen_byte,w,c	;volatile
 12181  0125C4  102B               	iorwf	enable_notes@notenum,w,c
 12182  0125C6  6E3F               	movwf	_noteen_byte,c	;volatile
 12183                           
 12184                           ;mdb.c: 111: save_notes();
 12185  0125C8  EC6B  F09A         	call	_save_notes	;wreg free
 12186                           
 12187                           ;mdb.c: 112: displ_nendis(notenum);
 12188  0125CC  502B               	movf	enable_notes@notenum,w,c
 12189  0125CE  ECBA  F099         	call	_displ_nendis
 12190                           
 12191                           ;mdb.c: 113: break;
 12192  0125D2  D027               	goto	l3214
 12193  0125D4  502B               	movf	enable_notes@notenum,w,c
 12194  0125D6  0AFF               	xorlw	255
 12195  0125D8  143F               	andwf	_noteen_byte,w,c	;volatile
 12196  0125DA  6E3F               	movwf	_noteen_byte,c	;volatile
 12197                           
 12198                           ;mdb.c: 115: save_notes();
 12199  0125DC  EC6B  F09A         	call	_save_notes	;wreg free
 12200                           
 12201                           ;mdb.c: 116: displ_nendis(notenum);
 12202  0125E0  502B               	movf	enable_notes@notenum,w,c
 12203  0125E2  ECBA  F099         	call	_displ_nendis
 12204                           
 12205                           ;mdb.c: 117: break;
 12206  0125E6  D01D               	goto	l3214
 12207  0125E8                     l3216:
 12208  0125E8  9C40               	bcf	_mdbflags,6,c
 12209                           
 12210                           ;mdb.c: 119: lcd_string(setnotes, line1);
 12211  0125EA  0EE5               	movlw	low _setnotes
 12212  0125EC  6E24               	movwf	lcd_string@lcdstring,c
 12213  0125EE  0EFB               	movlw	high _setnotes
 12214  0125F0  6E25               	movwf	lcd_string@lcdstring+1,c
 12215  0125F2  0E86               	movlw	low _line1
 12216  0125F4  6EF6               	movwf	tblptrl,c
 12217  0125F6                     	if	1	;There is more than 1 active tblptr byte
 12218  0125F6  0EFB               	movlw	high _line1
 12219  0125F8  6EF7               	movwf	tblptrh,c
 12220  0125FA                     	endif
 12221  0125FA                     	if	1	;There are 3 active tblptr bytes
 12222  0125FA  0E00               	movlw	low (_line1 shr (0+16))
 12223  0125FC  6EF8               	movwf	tblptru,c
 12224  0125FE                     	endif
 12225  0125FE  0008               	tblrd		*
 12226  012600  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12227  012604  EC5D  F08A         	call	_lcd_string	;wreg free
 12228                           
 12229                           ;mdb.c: 120: buttons = 0;
 12230  012608  0E00               	movlw	0
 12231  01260A  6E3A               	movwf	_buttons,c	;volatile
 12232                           
 12233                           ;mdb.c: 122: }
 12234                           
 12235                           ;mdb.c: 121: default : break;
 12236  01260C  D00A               	goto	l3214
 12237  01260E                     l3212:
 12238  01260E  503A               	movf	_buttons,w,c	;volatile
 12239                           
 12240                           ; Switch size 1, requested type "space"
 12241                           ; Number of cases is 3, Range of values is 1 to 128
 12242                           ; switch strategies available:
 12243                           ; Name         Instructions Cycles
 12244                           ; simple_byte           10     6 (average)
 12245                           ;	Chosen strategy is simple_byte
 12246  012610  0A01               	xorlw	1	; case 1
 12247  012612  B4D8               	btfsc	status,2,c
 12248  012614  D7D6               	goto	l3213
 12249  012616  0A03               	xorlw	3	; case 2
 12250  012618  B4D8               	btfsc	status,2,c
 12251  01261A  D7DC               	goto	l3215
 12252  01261C  0A82               	xorlw	130	; case 128
 12253  01261E  B4D8               	btfsc	status,2,c
 12254  012620  D7E3               	goto	l3216
 12255  012622                     l3214:
 12256  012622  AC40               	btfss	_mdbflags,6,c
 12257  012624  0012               	return	
 12258  012626  D7C9               	goto	l3211
 12259  012628                     __end_of_enable_notes:
 12260                           	opt stack 0
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           indf0	equ	0xFEF
 12269                           postinc0	equ	0xFEE
 12270                           fsr0h	equ	0xFEA
 12271                           fsr0l	equ	0xFE9
 12272                           wreg	equ	0xFE8
 12273                           indf1	equ	0xFE7
 12274                           postdec1	equ	0xFE5
 12275                           fsr1h	equ	0xFE2
 12276                           fsr1l	equ	0xFE1
 12277                           indf2	equ	0xFDF
 12278                           postinc2	equ	0xFDE
 12279                           fsr2h	equ	0xFDA
 12280                           fsr2l	equ	0xFD9
 12281                           status	equ	0xFD8
 12282                           
 12283 ;; *************** function _save_notes *****************
 12284 ;; Defined at:
 12285 ;;		line 132 in file "mdb.c"
 12286 ;; Parameters:    Size  Location     Type
 12287 ;;		None
 12288 ;; Auto vars:     Size  Location     Type
 12289 ;;		None
 12290 ;; Return value:  Size  Location     Type
 12291 ;;                  1    wreg      void 
 12292 ;; Registers used:
 12293 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12294 ;; Tracked objects:
 12295 ;;		On entry : 0/0
 12296 ;;		On exit  : 0/0
 12297 ;;		Unchanged: 0/0
 12298 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12303 ;;Total ram usage:        0 bytes
 12304 ;; Hardware stack levels used:    1
 12305 ;; Hardware stack levels required when called:    3
 12306 ;; This function calls:
 12307 ;;		_DATAEE_WriteByte
 12308 ;; This function is called by:
 12309 ;;		_enable_notes
 12310 ;; This function uses a non-reentrant model
 12311 ;;
 12312                           
 12313                           	psect	text60
 12314  0134D6                     __ptext60:
 12315                           	opt stack 0
 12316  0134D6                     _save_notes:
 12317                           	opt stack 24
 12318                           
 12319                           ;mdb.c: 134: DATAEE_WriteByte(notebits, noteen_byte);
 12320                           
 12321                           ;incstack = 0
 12322  0134D6  0E4C               	movlw	low _notebits
 12323  0134D8  6EF6               	movwf	tblptrl,c
 12324  0134DA                     	if	1	;There is more than 1 active tblptr byte
 12325  0134DA  0EFB               	movlw	high _notebits
 12326  0134DC  6EF7               	movwf	tblptrh,c
 12327  0134DE                     	endif
 12328  0134DE                     	if	1	;There are 3 active tblptr bytes
 12329  0134DE  0E00               	movlw	low (_notebits shr (0+16))
 12330  0134E0  6EF8               	movwf	tblptru,c
 12331  0134E2                     	endif
 12332  0134E2  0009               	tblrd		*+
 12333  0134E4  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 12334  0134E8  000A               	tblrd		*-
 12335  0134EA  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 12336  0134EE  C03F  F01F         	movff	_noteen_byte,DATAEE_WriteByte@bData	;volatile
 12337  0134F2  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 12338  0134F6  0012               	return		;funcret
 12339  0134F8                     __end_of_save_notes:
 12340                           	opt stack 0
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           indf0	equ	0xFEF
 12349                           postinc0	equ	0xFEE
 12350                           fsr0h	equ	0xFEA
 12351                           fsr0l	equ	0xFE9
 12352                           wreg	equ	0xFE8
 12353                           indf1	equ	0xFE7
 12354                           postdec1	equ	0xFE5
 12355                           fsr1h	equ	0xFE2
 12356                           fsr1l	equ	0xFE1
 12357                           indf2	equ	0xFDF
 12358                           postinc2	equ	0xFDE
 12359                           fsr2h	equ	0xFDA
 12360                           fsr2l	equ	0xFD9
 12361                           status	equ	0xFD8
 12362                           
 12363 ;; *************** function _displ_nendis *****************
 12364 ;; Defined at:
 12365 ;;		line 115 in file "lcd.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;  note2disp       1    wreg     unsigned char 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  note2disp       1   30[COMRAM] unsigned char 
 12370 ;;  x               1   31[COMRAM] unsigned char 
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  1    wreg      void 
 12373 ;; Registers used:
 12374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12381 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12383 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12384 ;;Total ram usage:        2 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:    8
 12387 ;; This function calls:
 12388 ;;		_lcd_string
 12389 ;; This function is called by:
 12390 ;;		_enable_notes
 12391 ;; This function uses a non-reentrant model
 12392 ;;
 12393                           
 12394                           	psect	text61
 12395  013374                     __ptext61:
 12396                           	opt stack 0
 12397  013374                     _displ_nendis:
 12398                           	opt stack 19
 12399                           
 12400                           ;incstack = 0
 12401                           ;displ_nendis@note2disp stored from wreg
 12402  013374  6E29               	movwf	displ_nendis@note2disp,c
 12403                           
 12404                           ;lcd.c: 117: uint8_t x = note2disp & noteen_byte;
 12405  013376  5029               	movf	displ_nendis@note2disp,w,c
 12406  013378  143F               	andwf	_noteen_byte,w,c	;volatile
 12407  01337A  6E2A               	movwf	displ_nendis@x,c
 12408                           
 12409                           ;lcd.c: 118: if(x != 0x00)
 12410  01337C  502A               	movf	displ_nendis@x,w,c
 12411  01337E  B4D8               	btfsc	status,2,c
 12412  013380  D009               	goto	l1846
 12413                           
 12414                           ;lcd.c: 119: {
 12415                           ;lcd.c: 120: lcd_string(enabled, dspposition);
 12416  013382  0E87               	movlw	low _enabled
 12417  013384  6E24               	movwf	lcd_string@lcdstring,c
 12418  013386  0EFF               	movlw	high _enabled
 12419  013388  6E25               	movwf	lcd_string@lcdstring+1,c
 12420  01338A  C042  F026         	movff	_dspposition,lcd_string@lcdline
 12421  01338E  EC5D  F08A         	call	_lcd_string	;wreg free
 12422                           
 12423                           ;lcd.c: 121: }
 12424  013392  0012               	return	
 12425  013394                     l1846:
 12426                           
 12427                           ;lcd.c: 122: else
 12428                           ;lcd.c: 123: {
 12429                           ;lcd.c: 124: lcd_string(disabled, dspposition);
 12430  013394  0E7D               	movlw	low _disabled
 12431  013396  6E24               	movwf	lcd_string@lcdstring,c
 12432  013398  0EFF               	movlw	high _disabled
 12433  01339A  6E25               	movwf	lcd_string@lcdstring+1,c
 12434  01339C  C042  F026         	movff	_dspposition,lcd_string@lcdline
 12435  0133A0  EC5D  F08A         	call	_lcd_string	;wreg free
 12436  0133A4  0012               	return	
 12437  0133A6                     __end_of_displ_nendis:
 12438                           	opt stack 0
 12439                           tblptru	equ	0xFF8
 12440                           tblptrh	equ	0xFF7
 12441                           tblptrl	equ	0xFF6
 12442                           tablat	equ	0xFF5
 12443                           prodh	equ	0xFF4
 12444                           prodl	equ	0xFF3
 12445                           intcon	equ	0xFF2
 12446                           indf0	equ	0xFEF
 12447                           postinc0	equ	0xFEE
 12448                           fsr0h	equ	0xFEA
 12449                           fsr0l	equ	0xFE9
 12450                           wreg	equ	0xFE8
 12451                           indf1	equ	0xFE7
 12452                           postdec1	equ	0xFE5
 12453                           fsr1h	equ	0xFE2
 12454                           fsr1l	equ	0xFE1
 12455                           indf2	equ	0xFDF
 12456                           postinc2	equ	0xFDE
 12457                           fsr2h	equ	0xFDA
 12458                           fsr2l	equ	0xFD9
 12459                           status	equ	0xFD8
 12460                           
 12461 ;; *************** function _displ_note *****************
 12462 ;; Defined at:
 12463 ;;		line 108 in file "lcd.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;  notestring      2   30[COMRAM] PTR unsigned char 
 12466 ;;		 -> twohundredrand(8), hundredrand(8), fiftyrand(8), twentyrand(8), 
 12467 ;;		 -> tenrand(9), 
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;		None
 12470 ;; Return value:  Size  Location     Type
 12471 ;;                  1    wreg      unsigned char 
 12472 ;; Registers used:
 12473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12474 ;; Tracked objects:
 12475 ;;		On entry : 0/0
 12476 ;;		On exit  : 0/0
 12477 ;;		Unchanged: 0/0
 12478 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12482 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12483 ;;Total ram usage:        2 bytes
 12484 ;; Hardware stack levels used:    1
 12485 ;; Hardware stack levels required when called:    8
 12486 ;; This function calls:
 12487 ;;		_lcd_string
 12488 ;;		_lcd_write
 12489 ;; This function is called by:
 12490 ;;		_set_notes
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text62
 12495  0131C8                     __ptext62:
 12496                           	opt stack 0
 12497  0131C8                     _displ_note:
 12498                           	opt stack 20
 12499                           
 12500                           ;lcd.c: 110: lcd_write(dispclr);
 12501                           
 12502                           ;incstack = 0
 12503  0131C8  0E90               	movlw	low _dispclr
 12504  0131CA  6EF6               	movwf	tblptrl,c
 12505  0131CC                     	if	1	;There is more than 1 active tblptr byte
 12506  0131CC  0EFB               	movlw	high _dispclr
 12507  0131CE  6EF7               	movwf	tblptrh,c
 12508  0131D0                     	endif
 12509  0131D0                     	if	1	;There are 3 active tblptr bytes
 12510  0131D0  0E00               	movlw	low (_dispclr shr (0+16))
 12511  0131D2  6EF8               	movwf	tblptru,c
 12512  0131D4                     	endif
 12513  0131D4  0008               	tblrd		*
 12514  0131D6  50F5               	movf	tablat,w,c
 12515  0131D8  ECD3  F099         	call	_lcd_write
 12516                           
 12517                           ;lcd.c: 111: lcd_string(notestring, line2);
 12518  0131DC  C029  F024         	movff	displ_note@notestring,lcd_string@lcdstring
 12519  0131E0  C02A  F025         	movff	displ_note@notestring+1,lcd_string@lcdstring+1
 12520  0131E4  0E85               	movlw	low _line2
 12521  0131E6  6EF6               	movwf	tblptrl,c
 12522  0131E8                     	if	1	;There is more than 1 active tblptr byte
 12523  0131E8  0EFB               	movlw	high _line2
 12524  0131EA  6EF7               	movwf	tblptrh,c
 12525  0131EC                     	endif
 12526  0131EC                     	if	1	;There are 3 active tblptr bytes
 12527  0131EC  0E00               	movlw	low (_line2 shr (0+16))
 12528  0131EE  6EF8               	movwf	tblptru,c
 12529  0131F0                     	endif
 12530  0131F0  0008               	tblrd		*
 12531  0131F2  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12532  0131F6  EC5D  F08A         	call	_lcd_string	;wreg free
 12533                           
 12534                           ;lcd.c: 112: return bflag+2;
 12535  0131FA  5045               	movf	_bflag,w,c
 12536  0131FC  0F02               	addlw	2
 12537  0131FE  0012               	return	
 12538  013200                     __end_of_displ_note:
 12539                           	opt stack 0
 12540                           tblptru	equ	0xFF8
 12541                           tblptrh	equ	0xFF7
 12542                           tblptrl	equ	0xFF6
 12543                           tablat	equ	0xFF5
 12544                           prodh	equ	0xFF4
 12545                           prodl	equ	0xFF3
 12546                           intcon	equ	0xFF2
 12547                           indf0	equ	0xFEF
 12548                           postinc0	equ	0xFEE
 12549                           fsr0h	equ	0xFEA
 12550                           fsr0l	equ	0xFE9
 12551                           wreg	equ	0xFE8
 12552                           indf1	equ	0xFE7
 12553                           postdec1	equ	0xFE5
 12554                           fsr1h	equ	0xFE2
 12555                           fsr1l	equ	0xFE1
 12556                           indf2	equ	0xFDF
 12557                           postinc2	equ	0xFDE
 12558                           fsr2h	equ	0xFDA
 12559                           fsr2l	equ	0xFD9
 12560                           status	equ	0xFD8
 12561                           
 12562 ;; *************** function _price_set *****************
 12563 ;; Defined at:
 12564 ;;		line 359 in file "vend.c"
 12565 ;; Parameters:    Size  Location     Type
 12566 ;;		None
 12567 ;; Auto vars:     Size  Location     Type
 12568 ;;		None
 12569 ;; Return value:  Size  Location     Type
 12570 ;;                  1    wreg      void 
 12571 ;; Registers used:
 12572 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12573 ;; Tracked objects:
 12574 ;;		On entry : 0/0
 12575 ;;		On exit  : 0/0
 12576 ;;		Unchanged: 0/0
 12577 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12582 ;;Total ram usage:        0 bytes
 12583 ;; Hardware stack levels used:    1
 12584 ;; Hardware stack levels required when called:   10
 12585 ;; This function calls:
 12586 ;;		_Read_Service
 12587 ;;		_butindb
 12588 ;;		_lcd_string
 12589 ;;		_set_price
 12590 ;; This function is called by:
 12591 ;;		_enter_service
 12592 ;; This function uses a non-reentrant model
 12593 ;;
 12594                           
 12595                           	psect	text63
 12596  0124B2                     __ptext63:
 12597                           	opt stack 0
 12598  0124B2                     _price_set:
 12599                           	opt stack 19
 12600                           
 12601                           ;vend.c: 361: venflags.priceset = 1;
 12602                           
 12603                           ;incstack = 0
 12604  0124B2  802E               	bsf	_venflags+1,0,c
 12605                           
 12606                           ;vend.c: 362: lcd_string(pricesetmsg, line1);
 12607  0124B4  0EB9               	movlw	low _pricesetmsg
 12608  0124B6  6E24               	movwf	lcd_string@lcdstring,c
 12609  0124B8  0EFE               	movlw	high _pricesetmsg
 12610  0124BA  6E25               	movwf	lcd_string@lcdstring+1,c
 12611  0124BC  0E86               	movlw	low _line1
 12612  0124BE  6EF6               	movwf	tblptrl,c
 12613  0124C0                     	if	1	;There is more than 1 active tblptr byte
 12614  0124C0  0EFB               	movlw	high _line1
 12615  0124C2  6EF7               	movwf	tblptrh,c
 12616  0124C4                     	endif
 12617  0124C4                     	if	1	;There are 3 active tblptr bytes
 12618  0124C4  0E00               	movlw	low (_line1 shr (0+16))
 12619  0124C6  6EF8               	movwf	tblptru,c
 12620  0124C8                     	endif
 12621  0124C8  0008               	tblrd		*
 12622  0124CA  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12623  0124CE  EC5D  F08A         	call	_lcd_string	;wreg free
 12624                           
 12625                           ;vend.c: 363: lcd_string(pricesetm2, line2);
 12626  0124D2  0E6D               	movlw	low _pricesetm2
 12627  0124D4  6E24               	movwf	lcd_string@lcdstring,c
 12628  0124D6  0EFC               	movlw	high _pricesetm2
 12629  0124D8  6E25               	movwf	lcd_string@lcdstring+1,c
 12630  0124DA  0E85               	movlw	low _line2
 12631  0124DC  6EF6               	movwf	tblptrl,c
 12632  0124DE                     	if	1	;There is more than 1 active tblptr byte
 12633  0124DE  0EFB               	movlw	high _line2
 12634  0124E0  6EF7               	movwf	tblptrh,c
 12635  0124E2                     	endif
 12636  0124E2                     	if	1	;There are 3 active tblptr bytes
 12637  0124E2  0E00               	movlw	low (_line2 shr (0+16))
 12638  0124E4  6EF8               	movwf	tblptru,c
 12639  0124E6                     	endif
 12640  0124E6  0008               	tblrd		*
 12641  0124E8  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12642  0124EC  EC5D  F08A         	call	_lcd_string	;wreg free
 12643                           
 12644                           ;vend.c: 364: while(venflags.priceset)
 12645  0124F0  D00E               	goto	l2539
 12646  0124F2                     
 12647                           ;vend.c: 365: {
 12648                           ;vend.c: 366: buttons = butindb();
 12649  0124F2  EC72  F097         	call	_butindb	;wreg free
 12650  0124F6  6E3A               	movwf	_buttons,c	;volatile
 12651                           
 12652                           ;vend.c: 367: if(buttons != 0x00)
 12653  0124F8  503A               	movf	_buttons,w,c	;volatile
 12654  0124FA  B4D8               	btfsc	status,2,c
 12655  0124FC  D003               	goto	l2538
 12656                           
 12657                           ;vend.c: 368: {
 12658                           ;vend.c: 369: set_price(buttons);
 12659  0124FE  503A               	movf	_buttons,w,c	;volatile
 12660  012500  ECDA  F086         	call	_set_price
 12661  012504                     l2538:
 12662                           
 12663                           ;vend.c: 370: }
 12664                           ;vend.c: 371: if(Read_Service() == 0x00)
 12665  012504  ECE7  F09A         	call	_Read_Service	;wreg free
 12666  012508  0900               	iorlw	0
 12667  01250A  B4D8               	btfsc	status,2,c
 12668                           
 12669                           ;vend.c: 372: {
 12670                           ;vend.c: 373: venflags.priceset = 0;
 12671  01250C  902E               	bcf	_venflags+1,0,c
 12672  01250E                     l2539:
 12673  01250E  B02E               	btfsc	_venflags+1,0,c
 12674  012510  D7F0               	goto	l2537
 12675                           
 12676                           ;vend.c: 374: }
 12677                           ;vend.c: 375: }
 12678                           ;vend.c: 376: lcd_string(servmsg, line1);
 12679  012512  0E95               	movlw	low _servmsg
 12680  012514  6E24               	movwf	lcd_string@lcdstring,c
 12681  012516  0EFB               	movlw	high _servmsg
 12682  012518  6E25               	movwf	lcd_string@lcdstring+1,c
 12683  01251A  0E86               	movlw	low _line1
 12684  01251C  6EF6               	movwf	tblptrl,c
 12685  01251E                     	if	1	;There is more than 1 active tblptr byte
 12686  01251E  0EFB               	movlw	high _line1
 12687  012520  6EF7               	movwf	tblptrh,c
 12688  012522                     	endif
 12689  012522                     	if	1	;There are 3 active tblptr bytes
 12690  012522  0E00               	movlw	low (_line1 shr (0+16))
 12691  012524  6EF8               	movwf	tblptru,c
 12692  012526                     	endif
 12693  012526  0008               	tblrd		*
 12694  012528  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12695  01252C  EC5D  F08A         	call	_lcd_string	;wreg free
 12696  012530  0012               	return		;funcret
 12697  012532                     __end_of_price_set:
 12698                           	opt stack 0
 12699                           tblptru	equ	0xFF8
 12700                           tblptrh	equ	0xFF7
 12701                           tblptrl	equ	0xFF6
 12702                           tablat	equ	0xFF5
 12703                           prodh	equ	0xFF4
 12704                           prodl	equ	0xFF3
 12705                           intcon	equ	0xFF2
 12706                           indf0	equ	0xFEF
 12707                           postinc0	equ	0xFEE
 12708                           fsr0h	equ	0xFEA
 12709                           fsr0l	equ	0xFE9
 12710                           wreg	equ	0xFE8
 12711                           indf1	equ	0xFE7
 12712                           postdec1	equ	0xFE5
 12713                           fsr1h	equ	0xFE2
 12714                           fsr1l	equ	0xFE1
 12715                           indf2	equ	0xFDF
 12716                           postinc2	equ	0xFDE
 12717                           fsr2h	equ	0xFDA
 12718                           fsr2l	equ	0xFD9
 12719                           status	equ	0xFD8
 12720                           
 12721 ;; *************** function _set_price *****************
 12722 ;; Defined at:
 12723 ;;		line 392 in file "vend.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;  buttons         1    wreg     unsigned char 
 12726 ;; Auto vars:     Size  Location     Type
 12727 ;;  buttons         1   12[BANK0 ] unsigned char 
 12728 ;;  channel         1   13[BANK0 ] unsigned char 
 12729 ;; Return value:  Size  Location     Type
 12730 ;;                  1    wreg      void 
 12731 ;; Registers used:
 12732 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12740 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12741 ;;      Totals:         2       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12742 ;;Total ram usage:        4 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    9
 12745 ;; This function calls:
 12746 ;;		_DATAEE_ReadByte
 12747 ;;		_DATAEE_WriteByte
 12748 ;;		_butindb
 12749 ;;		_displ_price
 12750 ;;		_get_channel
 12751 ;;		_lcd_string
 12752 ;; This function is called by:
 12753 ;;		_price_set
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           	psect	text64
 12758  010DB4                     __ptext64:
 12759                           	opt stack 0
 12760  010DB4                     _set_price:
 12761                           	opt stack 19
 12762                           
 12763                           ;incstack = 0
 12764                           ;set_price@buttons stored from wreg
 12765  010DB4  0100               	movlb	0	; () banked
 12766  010DB6  6FED               	movwf	set_price@buttons& (0+255),b
 12767                           
 12768                           ;vend.c: 394: venflags.setprice = 1;
 12769  010DB8  822E               	bsf	_venflags+1,1,c
 12770                           
 12771                           ;vend.c: 395: uint8_t channel = get_channel(buttons);
 12772  010DBA  0100               	movlb	0	; () banked
 12773  010DBC  51ED               	movf	set_price@buttons& (0+255),w,b
 12774  010DBE  ECCB  F09A         	call	_get_channel
 12775  010DC2  0100               	movlb	0	; () banked
 12776  010DC4  6FEE               	movwf	set_price@channel& (0+255),b
 12777                           
 12778                           ; BSR set to: 0
 12779                           ;vend.c: 397: vendprice = DATAEE_ReadByte(pricestore + channel);
 12780  010DC6  0E50               	movlw	low _pricestore
 12781  010DC8  6EF6               	movwf	tblptrl,c
 12782  010DCA                     	if	1	;There is more than 1 active tblptr byte
 12783  010DCA  0EFB               	movlw	high _pricestore
 12784  010DCC  6EF7               	movwf	tblptrh,c
 12785  010DCE                     	endif
 12786  010DCE                     	if	1	;There are 3 active tblptr bytes
 12787  010DCE  0E00               	movlw	low (_pricestore shr (0+16))
 12788  010DD0  6EF8               	movwf	tblptru,c
 12789  010DD2                     	endif
 12790  010DD2  0009               	tblrd		*+
 12791  010DD4  CFF5 F02B          	movff	tablat,??_set_price
 12792  010DD8  0009               	tblrd		*+
 12793  010DDA  CFF5 F02C          	movff	tablat,??_set_price+1
 12794  010DDE  51EE               	movf	set_price@channel& (0+255),w,b
 12795  010DE0  242B               	addwf	??_set_price,w,c
 12796  010DE2  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 12797  010DE4  0E00               	movlw	0
 12798  010DE6  202C               	addwfc	??_set_price+1,w,c
 12799  010DE8  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 12800  010DEA  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 12801  010DEE  6E39               	movwf	_vendprice,c	;volatile
 12802                           
 12803                           ;vend.c: 398: displ_price(vendprice);
 12804  010DF0  5039               	movf	_vendprice,w,c	;volatile
 12805  010DF2  ECF4  F097         	call	_displ_price
 12806                           
 12807                           ;vend.c: 399: while(venflags.setprice)
 12808  010DF6  D067               	goto	l2554
 12809  010DF8                     
 12810                           ;vend.c: 400: {
 12811                           ;vend.c: 401: buttons = butindb();
 12812  010DF8  EC72  F097         	call	_butindb	;wreg free
 12813  010DFC  0100               	movlb	0	; () banked
 12814  010DFE  6FED               	movwf	set_price@buttons& (0+255),b
 12815                           
 12816                           ;vend.c: 403: switch(buttons)
 12817  010E00  D057               	goto	l2552
 12818  010E02                     
 12819                           ; BSR set to: 0
 12820                           
 12821                           ; BSR set to: 0
 12822  010E02  2A39               	incf	_vendprice,f,c	;volatile
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;vend.c: 406: DATAEE_WriteByte(pricestore + channel, vendprice);
 12826  010E04  0E50               	movlw	low _pricestore
 12827  010E06  6EF6               	movwf	tblptrl,c
 12828  010E08                     	if	1	;There is more than 1 active tblptr byte
 12829  010E08  0EFB               	movlw	high _pricestore
 12830  010E0A  6EF7               	movwf	tblptrh,c
 12831  010E0C                     	endif
 12832  010E0C                     	if	1	;There are 3 active tblptr bytes
 12833  010E0C  0E00               	movlw	low (_pricestore shr (0+16))
 12834  010E0E  6EF8               	movwf	tblptru,c
 12835  010E10                     	endif
 12836  010E10  0009               	tblrd		*+
 12837  010E12  CFF5 F02B          	movff	tablat,??_set_price
 12838  010E16  0009               	tblrd		*+
 12839  010E18  CFF5 F02C          	movff	tablat,??_set_price+1
 12840  010E1C  51EE               	movf	set_price@channel& (0+255),w,b
 12841  010E1E  242B               	addwf	??_set_price,w,c
 12842  010E20  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
 12843  010E22  0E00               	movlw	0
 12844  010E24  202C               	addwfc	??_set_price+1,w,c
 12845  010E26  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
 12846  010E28  C039  F01F         	movff	_vendprice,DATAEE_WriteByte@bData	;volatile
 12847  010E2C  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 12848                           
 12849                           ;vend.c: 407: displ_price(vendprice);
 12850  010E30  5039               	movf	_vendprice,w,c	;volatile
 12851  010E32  ECF4  F097         	call	_displ_price
 12852                           
 12853                           ;vend.c: 408: break;
 12854  010E36  D047               	goto	l2554
 12855  010E38  0639               	decf	_vendprice,f,c	;volatile
 12856                           
 12857                           ;vend.c: 410: DATAEE_WriteByte(pricestore + channel, vendprice);
 12858  010E3A  0E50               	movlw	low _pricestore
 12859  010E3C  6EF6               	movwf	tblptrl,c
 12860  010E3E                     	if	1	;There is more than 1 active tblptr byte
 12861  010E3E  0EFB               	movlw	high _pricestore
 12862  010E40  6EF7               	movwf	tblptrh,c
 12863  010E42                     	endif
 12864  010E42                     	if	1	;There are 3 active tblptr bytes
 12865  010E42  0E00               	movlw	low (_pricestore shr (0+16))
 12866  010E44  6EF8               	movwf	tblptru,c
 12867  010E46                     	endif
 12868  010E46  0009               	tblrd		*+
 12869  010E48  CFF5 F02B          	movff	tablat,??_set_price
 12870  010E4C  0009               	tblrd		*+
 12871  010E4E  CFF5 F02C          	movff	tablat,??_set_price+1
 12872  010E52  0100               	movlb	0	; () banked
 12873  010E54  51EE               	movf	set_price@channel& (0+255),w,b
 12874  010E56  242B               	addwf	??_set_price,w,c
 12875  010E58  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
 12876  010E5A  0E00               	movlw	0
 12877  010E5C  202C               	addwfc	??_set_price+1,w,c
 12878  010E5E  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
 12879  010E60  C039  F01F         	movff	_vendprice,DATAEE_WriteByte@bData	;volatile
 12880  010E64  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 12881                           
 12882                           ;vend.c: 411: displ_price(vendprice);
 12883  010E68  5039               	movf	_vendprice,w,c	;volatile
 12884  010E6A  ECF4  F097         	call	_displ_price
 12885                           
 12886                           ;vend.c: 412: break;
 12887  010E6E  D02B               	goto	l2554
 12888  010E70                     l2556:
 12889                           
 12890                           ; BSR set to: 0
 12891  010E70  922E               	bcf	_venflags+1,1,c
 12892                           
 12893                           ; BSR set to: 0
 12894                           ;vend.c: 414: lcd_string(pricesetmsg, line1);
 12895  010E72  0EB9               	movlw	low _pricesetmsg
 12896  010E74  6E24               	movwf	lcd_string@lcdstring,c
 12897  010E76  0EFE               	movlw	high _pricesetmsg
 12898  010E78  6E25               	movwf	lcd_string@lcdstring+1,c
 12899  010E7A  0E86               	movlw	low _line1
 12900  010E7C  6EF6               	movwf	tblptrl,c
 12901  010E7E                     	if	1	;There is more than 1 active tblptr byte
 12902  010E7E  0EFB               	movlw	high _line1
 12903  010E80  6EF7               	movwf	tblptrh,c
 12904  010E82                     	endif
 12905  010E82                     	if	1	;There are 3 active tblptr bytes
 12906  010E82  0E00               	movlw	low (_line1 shr (0+16))
 12907  010E84  6EF8               	movwf	tblptru,c
 12908  010E86                     	endif
 12909  010E86  0008               	tblrd		*
 12910  010E88  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12911  010E8C  EC5D  F08A         	call	_lcd_string	;wreg free
 12912                           
 12913                           ;vend.c: 415: lcd_string(pricesetm2, line2);
 12914  010E90  0E6D               	movlw	low _pricesetm2
 12915  010E92  6E24               	movwf	lcd_string@lcdstring,c
 12916  010E94  0EFC               	movlw	high _pricesetm2
 12917  010E96  6E25               	movwf	lcd_string@lcdstring+1,c
 12918  010E98  0E85               	movlw	low _line2
 12919  010E9A  6EF6               	movwf	tblptrl,c
 12920  010E9C                     	if	1	;There is more than 1 active tblptr byte
 12921  010E9C  0EFB               	movlw	high _line2
 12922  010E9E  6EF7               	movwf	tblptrh,c
 12923  010EA0                     	endif
 12924  010EA0                     	if	1	;There are 3 active tblptr bytes
 12925  010EA0  0E00               	movlw	low (_line2 shr (0+16))
 12926  010EA2  6EF8               	movwf	tblptru,c
 12927  010EA4                     	endif
 12928  010EA4  0008               	tblrd		*
 12929  010EA6  CFF5 F026          	movff	tablat,lcd_string@lcdline
 12930  010EAA  EC5D  F08A         	call	_lcd_string	;wreg free
 12931                           
 12932                           ;vend.c: 418: }
 12933                           
 12934                           ;vend.c: 417: break;
 12935  010EAE  D00B               	goto	l2554
 12936  010EB0                     l2552:
 12937  010EB0  0100               	movlb	0	; () banked
 12938  010EB2  51ED               	movf	set_price@buttons& (0+255),w,b
 12939                           
 12940                           ; Switch size 1, requested type "space"
 12941                           ; Number of cases is 3, Range of values is 1 to 128
 12942                           ; switch strategies available:
 12943                           ; Name         Instructions Cycles
 12944                           ; simple_byte           10     6 (average)
 12945                           ;	Chosen strategy is simple_byte
 12946  010EB4  0A01               	xorlw	1	; case 1
 12947  010EB6  B4D8               	btfsc	status,2,c
 12948  010EB8  D7A4               	goto	l2553
 12949  010EBA  0A03               	xorlw	3	; case 2
 12950  010EBC  B4D8               	btfsc	status,2,c
 12951  010EBE  D7BC               	goto	l2555
 12952  010EC0  0A82               	xorlw	130	; case 128
 12953  010EC2  B4D8               	btfsc	status,2,c
 12954  010EC4  D7D5               	goto	l2556
 12955  010EC6                     l2554:
 12956                           
 12957                           ; BSR set to: 0
 12958  010EC6  A22E               	btfss	_venflags+1,1,c
 12959  010EC8  0012               	return	
 12960  010ECA  D796               	goto	l2551
 12961  010ECC                     __end_of_set_price:
 12962                           	opt stack 0
 12963                           tblptru	equ	0xFF8
 12964                           tblptrh	equ	0xFF7
 12965                           tblptrl	equ	0xFF6
 12966                           tablat	equ	0xFF5
 12967                           prodh	equ	0xFF4
 12968                           prodl	equ	0xFF3
 12969                           intcon	equ	0xFF2
 12970                           indf0	equ	0xFEF
 12971                           postinc0	equ	0xFEE
 12972                           fsr0h	equ	0xFEA
 12973                           fsr0l	equ	0xFE9
 12974                           wreg	equ	0xFE8
 12975                           indf1	equ	0xFE7
 12976                           postdec1	equ	0xFE5
 12977                           fsr1h	equ	0xFE2
 12978                           fsr1l	equ	0xFE1
 12979                           indf2	equ	0xFDF
 12980                           postinc2	equ	0xFDE
 12981                           fsr2h	equ	0xFDA
 12982                           fsr2l	equ	0xFD9
 12983                           status	equ	0xFD8
 12984                           
 12985 ;; *************** function _displ_price *****************
 12986 ;; Defined at:
 12987 ;;		line 235 in file "lcd.c"
 12988 ;; Parameters:    Size  Location     Type
 12989 ;;  vendprice       1    wreg     unsigned char 
 12990 ;; Auto vars:     Size  Location     Type
 12991 ;;  vendprice       1   31[COMRAM] unsigned char 
 12992 ;; Return value:  Size  Location     Type
 12993 ;;                  1    wreg      void 
 12994 ;; Registers used:
 12995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12996 ;; Tracked objects:
 12997 ;;		On entry : 0/0
 12998 ;;		On exit  : 0/0
 12999 ;;		Unchanged: 0/0
 13000 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13005 ;;Total ram usage:        1 bytes
 13006 ;; Hardware stack levels used:    1
 13007 ;; Hardware stack levels required when called:    8
 13008 ;; This function calls:
 13009 ;;		_displ_hex
 13010 ;;		_lcd_dispadd
 13011 ;;		_lcd_write
 13012 ;;		_lcd_writeC
 13013 ;; This function is called by:
 13014 ;;		_main
 13015 ;;		_set_price
 13016 ;; This function uses a non-reentrant model
 13017 ;;
 13018                           
 13019                           	psect	text65
 13020  012FE8                     __ptext65:
 13021                           	opt stack 0
 13022  012FE8                     _displ_price:
 13023                           	opt stack 19
 13024                           
 13025                           ;incstack = 0
 13026                           ;displ_price@vendprice stored from wreg
 13027  012FE8  6E2A               	movwf	displ_price@vendprice,c
 13028                           
 13029                           ;lcd.c: 237: lcd_write(dispclr);
 13030  012FEA  0E90               	movlw	low _dispclr
 13031  012FEC  6EF6               	movwf	tblptrl,c
 13032  012FEE                     	if	1	;There is more than 1 active tblptr byte
 13033  012FEE  0EFB               	movlw	high _dispclr
 13034  012FF0  6EF7               	movwf	tblptrh,c
 13035  012FF2                     	endif
 13036  012FF2                     	if	1	;There are 3 active tblptr bytes
 13037  012FF2  0E00               	movlw	low (_dispclr shr (0+16))
 13038  012FF4  6EF8               	movwf	tblptru,c
 13039  012FF6                     	endif
 13040  012FF6  0008               	tblrd		*
 13041  012FF8  50F5               	movf	tablat,w,c
 13042  012FFA  ECD3  F099         	call	_lcd_write
 13043                           
 13044                           ;lcd.c: 238: lcd_dispadd(line2 + 4);
 13045  012FFE  0E85               	movlw	low _line2
 13046  013000  6EF6               	movwf	tblptrl,c
 13047  013002                     	if	1	;There is more than 1 active tblptr byte
 13048  013002  0EFB               	movlw	high _line2
 13049  013004  6EF7               	movwf	tblptrh,c
 13050  013006                     	endif
 13051  013006                     	if	1	;There are 3 active tblptr bytes
 13052  013006  0E00               	movlw	low (_line2 shr (0+16))
 13053  013008  6EF8               	movwf	tblptru,c
 13054  01300A                     	endif
 13055  01300A  0008               	tblrd		*
 13056  01300C  50F5               	movf	tablat,w,c
 13057  01300E  0F04               	addlw	4
 13058  013010  ECF4  F09A         	call	_lcd_dispadd
 13059                           
 13060                           ;lcd.c: 239: lcd_writeC((uint8_t)'R');
 13061  013014  0E52               	movlw	82
 13062  013016  EC27  F094         	call	_lcd_writeC
 13063                           
 13064                           ;lcd.c: 240: displ_hex(vendprice);
 13065  01301A  502A               	movf	displ_price@vendprice,w,c
 13066  01301C  6E27               	movwf	displ_hex@hexnum,c
 13067  01301E  6A28               	clrf	displ_hex@hexnum+1,c
 13068  013020  6A29               	clrf	displ_hex@hexnum+2,c
 13069  013022  ECAB  F08D         	call	_displ_hex	;wreg free
 13070  013026  0012               	return		;funcret
 13071  013028                     __end_of_displ_price:
 13072                           	opt stack 0
 13073                           tblptru	equ	0xFF8
 13074                           tblptrh	equ	0xFF7
 13075                           tblptrl	equ	0xFF6
 13076                           tablat	equ	0xFF5
 13077                           prodh	equ	0xFF4
 13078                           prodl	equ	0xFF3
 13079                           intcon	equ	0xFF2
 13080                           indf0	equ	0xFEF
 13081                           postinc0	equ	0xFEE
 13082                           fsr0h	equ	0xFEA
 13083                           fsr0l	equ	0xFE9
 13084                           wreg	equ	0xFE8
 13085                           indf1	equ	0xFE7
 13086                           postdec1	equ	0xFE5
 13087                           fsr1h	equ	0xFE2
 13088                           fsr1l	equ	0xFE1
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           fsr2h	equ	0xFDA
 13092                           fsr2l	equ	0xFD9
 13093                           status	equ	0xFD8
 13094                           
 13095 ;; *************** function _mdb_unlock *****************
 13096 ;; Defined at:
 13097 ;;		line 382 in file "mdb.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;		None
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;                  1    wreg      void 
 13104 ;; Registers used:
 13105 ;;		wreg, status,2, status,0, cstack
 13106 ;; Tracked objects:
 13107 ;;		On entry : 0/0
 13108 ;;		On exit  : 0/0
 13109 ;;		Unchanged: 0/0
 13110 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13113 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13114 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13115 ;;Total ram usage:        2 bytes
 13116 ;; Hardware stack levels used:    1
 13117 ;; Hardware stack levels required when called:    3
 13118 ;; This function calls:
 13119 ;;		_CMP1_Initialize
 13120 ;;		_DAC1_Initialize
 13121 ;;		_TMR1_Initialize
 13122 ;;		_TMR3_Initialize
 13123 ;;		_TMR5_Initialize
 13124 ;; This function is called by:
 13125 ;;		_enter_service
 13126 ;;		_vend_nosense
 13127 ;;		_vend_dispense
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           	psect	text66
 13132  011908                     __ptext66:
 13133                           	opt stack 0
 13134  011908                     _mdb_unlock:
 13135                           	opt stack 24
 13136                           
 13137                           ;mdb.c: 384: _delay((unsigned long)((50)*(64000000/4000.0)));
 13138                           
 13139                           ;incstack = 0
 13140  011908  0E05               	movlw	5
 13141  01190A  6E20               	movwf	(??_mdb_unlock+1)& (0+255),c
 13142  01190C  0E0F               	movlw	15
 13143  01190E  6E1F               	movwf	??_mdb_unlock& (0+255),c
 13144  011910  0EF1               	movlw	241
 13145  011912                     u7357:
 13146  011912  2EE8               	decfsz	wreg,f,c
 13147  011914  D7FE               	bra	u7357
 13148  011916  2E1F               	decfsz	??_mdb_unlock& (0+255),f,c
 13149  011918  D7FC               	bra	u7357
 13150  01191A  2E20               	decfsz	(??_mdb_unlock+1)& (0+255),f,c
 13151  01191C  D7FA               	bra	u7357
 13152  01191E  F000               	nop	
 13153                           
 13154                           ;mdb.c: 385: LATE = 0x00;
 13155  011920  0E00               	movlw	0
 13156  011922  6E87               	movwf	3975,c	;volatile
 13157                           
 13158                           ;mdb.c: 386: LATD = 0x00;
 13159  011924  0E00               	movlw	0
 13160  011926  6E86               	movwf	3974,c	;volatile
 13161                           
 13162                           ;mdb.c: 387: LATA = 0xC0;
 13163  011928  0EC0               	movlw	192
 13164  01192A  6E83               	movwf	3971,c	;volatile
 13165                           
 13166                           ;mdb.c: 388: LATB = 0x00;
 13167  01192C  0E00               	movlw	0
 13168  01192E  6E84               	movwf	3972,c	;volatile
 13169                           
 13170                           ;mdb.c: 389: LATC = 0x01;
 13171  011930  0E01               	movlw	1
 13172  011932  6E85               	movwf	3973,c	;volatile
 13173                           
 13174                           ;mdb.c: 394: TRISE = 0x00;
 13175  011934  0E00               	movlw	0
 13176  011936  6E8C               	movwf	3980,c	;volatile
 13177                           
 13178                           ;mdb.c: 395: TRISA = 0x1F;
 13179  011938  0E1F               	movlw	31
 13180  01193A  6E88               	movwf	3976,c	;volatile
 13181                           
 13182                           ;mdb.c: 396: TRISB = 0xD0;
 13183  01193C  0ED0               	movlw	208
 13184  01193E  6E89               	movwf	3977,c	;volatile
 13185                           
 13186                           ;mdb.c: 397: TRISC = 0x80;
 13187  011940  0E80               	movlw	128
 13188  011942  6E8A               	movwf	3978,c	;volatile
 13189                           
 13190                           ;mdb.c: 398: TRISD = 0x00;
 13191  011944  0E00               	movlw	0
 13192  011946  6E8B               	movwf	3979,c	;volatile
 13193                           
 13194                           ;mdb.c: 403: ANSELC = 0x00;
 13195  011948  0E00               	movlw	0
 13196  01194A  010F               	movlb	15	; () banked
 13197  01194C  6F21               	movwf	33,b	;volatile
 13198                           
 13199                           ; BSR set to: 15
 13200                           ;mdb.c: 404: ANSELB = 0xC0;
 13201  01194E  0EC0               	movlw	192
 13202  011950  6F19               	movwf	25,b	;volatile
 13203                           
 13204                           ; BSR set to: 15
 13205                           ;mdb.c: 405: ANSELD = 0x00;
 13206  011952  0E00               	movlw	0
 13207  011954  6F26               	movwf	38,b	;volatile
 13208                           
 13209                           ; BSR set to: 15
 13210                           ;mdb.c: 406: ANSELE = 0x00;
 13211  011956  0E00               	movlw	0
 13212  011958  6F2E               	movwf	46,b	;volatile
 13213                           
 13214                           ; BSR set to: 15
 13215                           ;mdb.c: 407: ANSELA = 0x01;
 13216  01195A  0E01               	movlw	1
 13217  01195C  6F11               	movwf	17,b	;volatile
 13218                           
 13219                           ; BSR set to: 15
 13220                           ;mdb.c: 412: WPUD = 0x00;
 13221  01195E  0E00               	movlw	0
 13222  011960  6F25               	movwf	37,b	;volatile
 13223                           
 13224                           ; BSR set to: 15
 13225                           ;mdb.c: 413: WPUE = 0x00;
 13226  011962  0E00               	movlw	0
 13227  011964  6F2D               	movwf	45,b	;volatile
 13228                           
 13229                           ; BSR set to: 15
 13230                           ;mdb.c: 414: WPUB = 0x00;
 13231  011966  0E00               	movlw	0
 13232  011968  6F18               	movwf	24,b	;volatile
 13233                           
 13234                           ; BSR set to: 15
 13235                           ;mdb.c: 415: WPUA = 0x00;
 13236  01196A  0E00               	movlw	0
 13237  01196C  6F10               	movwf	16,b	;volatile
 13238                           
 13239                           ; BSR set to: 15
 13240                           ;mdb.c: 416: WPUC = 0x00;
 13241  01196E  0E00               	movlw	0
 13242  011970  6F20               	movwf	32,b	;volatile
 13243                           
 13244                           ; BSR set to: 15
 13245                           ;mdb.c: 421: ODCONE = 0x00;
 13246  011972  0E00               	movlw	0
 13247  011974  6F2C               	movwf	44,b	;volatile
 13248                           
 13249                           ; BSR set to: 15
 13250                           ;mdb.c: 422: ODCONA = 0x00;
 13251  011976  0E00               	movlw	0
 13252  011978  6F0F               	movwf	15,b	;volatile
 13253                           
 13254                           ; BSR set to: 15
 13255                           ;mdb.c: 423: ODCONB = 0x00;
 13256  01197A  0E00               	movlw	0
 13257  01197C  6F17               	movwf	23,b	;volatile
 13258                           
 13259                           ; BSR set to: 15
 13260                           ;mdb.c: 424: ODCONC = 0x00;
 13261  01197E  0E00               	movlw	0
 13262  011980  6F1F               	movwf	31,b	;volatile
 13263                           
 13264                           ; BSR set to: 15
 13265                           ;mdb.c: 425: ODCOND = 0x00;
 13266  011982  0E00               	movlw	0
 13267  011984  6F24               	movwf	36,b	;volatile
 13268                           
 13269                           ; BSR set to: 15
 13270                           ;mdb.c: 426: LATC = 0x01;
 13271  011986  0E01               	movlw	1
 13272  011988  6E85               	movwf	3973,c	;volatile
 13273                           
 13274                           ; BSR set to: 15
 13275                           ;mdb.c: 427: TRISC = 0x80;
 13276  01198A  0E80               	movlw	128
 13277  01198C  6E8A               	movwf	3978,c	;volatile
 13278                           
 13279                           ; BSR set to: 15
 13280                           ;mdb.c: 428: ANSELC = 0x00;
 13281  01198E  0E00               	movlw	0
 13282  011990  6F21               	movwf	33,b	;volatile
 13283                           
 13284                           ; BSR set to: 15
 13285                           ;mdb.c: 429: WPUC = 0x00;
 13286  011992  0E00               	movlw	0
 13287  011994  6F20               	movwf	32,b	;volatile
 13288                           
 13289                           ; BSR set to: 15
 13290                           ;mdb.c: 430: ODCONC = 0x00;
 13291  011996  0E00               	movlw	0
 13292  011998  6F1F               	movwf	31,b	;volatile
 13293                           
 13294                           ; BSR set to: 15
 13295                           ;mdb.c: 431: PPSLOCK = 0x55;
 13296  01199A  0E55               	movlw	85
 13297  01199C  010E               	movlb	14	; () banked
 13298  01199E  6FA0               	movwf	160,b	;volsfr
 13299                           
 13300                           ; BSR set to: 14
 13301                           ;mdb.c: 432: PPSLOCK = 0xAA;
 13302  0119A0  0EAA               	movlw	170
 13303  0119A2  6FA0               	movwf	160,b	;volsfr
 13304                           
 13305                           ; BSR set to: 14
 13306                           ;mdb.c: 433: PPSLOCKbits.PPSLOCKED = 0x00;
 13307  0119A4  91A0               	bcf	160,0,b	;volsfr
 13308                           
 13309                           ; BSR set to: 14
 13310                           ;mdb.c: 435: RX1PPSbits.RXPPS = 0x0;
 13311  0119A6  91B5               	bcf	181,0,b	;volatile
 13312  0119A8  93B5               	bcf	181,1,b	;volatile
 13313  0119AA  95B5               	bcf	181,2,b	;volatile
 13314  0119AC  97B5               	bcf	181,3,b	;volatile
 13315  0119AE  99B5               	bcf	181,4,b	;volatile
 13316                           
 13317                           ; BSR set to: 14
 13318                           ;mdb.c: 436: RC6PPS = 0x0;
 13319  0119B0  0E00               	movlw	0
 13320  0119B2  6FFD               	movwf	253,b	;volatile
 13321                           
 13322                           ; BSR set to: 14
 13323                           ;mdb.c: 437: RB5PPS = 0x0;
 13324  0119B4  0E00               	movlw	0
 13325  0119B6  6FF4               	movwf	244,b	;volatile
 13326                           
 13327                           ; BSR set to: 14
 13328                           ;mdb.c: 438: RX2PPSbits.RXPPS = 0x0;
 13329  0119B8  918D               	bcf	141,0,b	;volatile
 13330  0119BA  938D               	bcf	141,1,b	;volatile
 13331  0119BC  958D               	bcf	141,2,b	;volatile
 13332  0119BE  978D               	bcf	141,3,b	;volatile
 13333  0119C0  998D               	bcf	141,4,b	;volatile
 13334                           
 13335                           ; BSR set to: 14
 13336                           ;mdb.c: 439: CMP1_Initialize();
 13337  0119C2  EC58  F09B         	call	_CMP1_Initialize	;wreg free
 13338                           
 13339                           ;mdb.c: 440: TMR3_Initialize();
 13340  0119C6  EC36  F099         	call	_TMR3_Initialize	;wreg free
 13341                           
 13342                           ;mdb.c: 441: DAC1_Initialize();
 13343  0119CA  ECAA  F09B         	call	_DAC1_Initialize	;wreg free
 13344                           
 13345                           ;mdb.c: 442: TMR5_Initialize();
 13346  0119CE  EC1B  F099         	call	_TMR5_Initialize	;wreg free
 13347                           
 13348                           ;mdb.c: 443: TMR1_Initialize();
 13349  0119D2  EC51  F099         	call	_TMR1_Initialize	;wreg free
 13350  0119D6  0012               	return		;funcret
 13351  0119D8                     __end_of_mdb_unlock:
 13352                           	opt stack 0
 13353                           tblptru	equ	0xFF8
 13354                           tblptrh	equ	0xFF7
 13355                           tblptrl	equ	0xFF6
 13356                           tablat	equ	0xFF5
 13357                           prodh	equ	0xFF4
 13358                           prodl	equ	0xFF3
 13359                           intcon	equ	0xFF2
 13360                           indf0	equ	0xFEF
 13361                           postinc0	equ	0xFEE
 13362                           fsr0h	equ	0xFEA
 13363                           fsr0l	equ	0xFE9
 13364                           wreg	equ	0xFE8
 13365                           indf1	equ	0xFE7
 13366                           postdec1	equ	0xFE5
 13367                           fsr1h	equ	0xFE2
 13368                           fsr1l	equ	0xFE1
 13369                           indf2	equ	0xFDF
 13370                           postinc2	equ	0xFDE
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8
 13374                           
 13375 ;; *************** function _hopper_test *****************
 13376 ;; Defined at:
 13377 ;;		line 10 in file "hopper.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;		None
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;		None
 13382 ;; Return value:  Size  Location     Type
 13383 ;;                  1    wreg      void 
 13384 ;; Registers used:
 13385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13386 ;; Tracked objects:
 13387 ;;		On entry : 0/0
 13388 ;;		On exit  : 0/0
 13389 ;;		Unchanged: 0/0
 13390 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;Total ram usage:        0 bytes
 13396 ;; Hardware stack levels used:    1
 13397 ;; Hardware stack levels required when called:    6
 13398 ;; This function calls:
 13399 ;;		_hopper_pay
 13400 ;; This function is called by:
 13401 ;;		_enter_service
 13402 ;; This function uses a non-reentrant model
 13403 ;;
 13404                           
 13405                           	psect	text67
 13406  01369C                     __ptext67:
 13407                           	opt stack 0
 13408  01369C                     _hopper_test:
 13409                           	opt stack 23
 13410                           
 13411                           ;hopper.c: 12: if(!hopper_pay(0x05))
 13412                           
 13413                           ;incstack = 0
 13414  01369C  0E05               	movlw	5
 13415  01369E  EC86  F093         	call	_hopper_pay
 13416  0136A2  0900               	iorlw	0
 13417  0136A4  A4D8               	btfss	status,2,c
 13418  0136A6  D002               	goto	l4250
 13419  0136A8  F000               	nop		;# 
 13420                           
 13421                           ;hopper.c: 15: }
 13422  0136AA  0012               	return	
 13423  0136AC                     l4250:
 13424  0136AC  F000               	nop		;# 
 13425  0136AE  0012               	return	
 13426  0136B0                     __end_of_hopper_test:
 13427                           	opt stack 0
 13428                           tblptru	equ	0xFF8
 13429                           tblptrh	equ	0xFF7
 13430                           tblptrl	equ	0xFF6
 13431                           tablat	equ	0xFF5
 13432                           prodh	equ	0xFF4
 13433                           prodl	equ	0xFF3
 13434                           intcon	equ	0xFF2
 13435                           indf0	equ	0xFEF
 13436                           postinc0	equ	0xFEE
 13437                           fsr0h	equ	0xFEA
 13438                           fsr0l	equ	0xFE9
 13439                           wreg	equ	0xFE8
 13440                           indf1	equ	0xFE7
 13441                           postdec1	equ	0xFE5
 13442                           fsr1h	equ	0xFE2
 13443                           fsr1l	equ	0xFE1
 13444                           indf2	equ	0xFDF
 13445                           postinc2	equ	0xFDE
 13446                           fsr2h	equ	0xFDA
 13447                           fsr2l	equ	0xFD9
 13448                           status	equ	0xFD8
 13449                           
 13450 ;; *************** function _hopper_pay *****************
 13451 ;; Defined at:
 13452 ;;		line 39 in file "hopper.c"
 13453 ;; Parameters:    Size  Location     Type
 13454 ;;  change          1    wreg     unsigned char 
 13455 ;; Auto vars:     Size  Location     Type
 13456 ;;  change          1   30[COMRAM] unsigned char 
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      unsigned char 
 13459 ;; Registers used:
 13460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;Total ram usage:        2 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    5
 13473 ;; This function calls:
 13474 ;;		_DATAEE_WriteByte
 13475 ;;		_Update_coinsout
 13476 ;;		_cctalk_off
 13477 ;;		_cctalk_on
 13478 ;;		_pay_coin
 13479 ;; This function is called by:
 13480 ;;		_hopper_test
 13481 ;;		_give_change
 13482 ;; This function uses a non-reentrant model
 13483 ;;
 13484                           
 13485                           	psect	text68
 13486  01270C                     __ptext68:
 13487                           	opt stack 0
 13488  01270C                     _hopper_pay:
 13489                           	opt stack 23
 13490                           
 13491                           ;incstack = 0
 13492                           ;hopper_pay@change stored from wreg
 13493  01270C  6E29               	movwf	hopper_pay@change,c
 13494                           
 13495                           ;hopper.c: 41: cctalk_on();
 13496  01270E  ECD1  F09B         	call	_cctalk_on	;wreg free
 13497                           
 13498                           ;hopper.c: 42: outcoins = 0x00;
 13499  012712  0E00               	movlw	0
 13500  012714  6E3D               	movwf	_outcoins,c
 13501                           
 13502                           ;hopper.c: 43: while(change > 0)
 13503  012716  D027               	goto	l4259
 13504  012718                     
 13505                           ;hopper.c: 44: {
 13506                           ;hopper.c: 45: venflags.nochange = pay_coin();
 13507  012718  EC80  F090         	call	_pay_coin	;wreg free
 13508  01271C  6E28               	movwf	??_hopper_pay& (0+255),c
 13509  01271E  4628               	rlncf	??_hopper_pay,f,c
 13510  012720  4628               	rlncf	??_hopper_pay,f,c
 13511  012722  4628               	rlncf	??_hopper_pay,f,c
 13512  012724  502D               	movf	_venflags,w,c
 13513  012726  1828               	xorwf	??_hopper_pay,w,c
 13514  012728  0BF7               	andlw	-9
 13515  01272A  1828               	xorwf	??_hopper_pay,w,c
 13516  01272C  6E2D               	movwf	_venflags,c
 13517                           
 13518                           ;hopper.c: 46: if(venflags.nochange)
 13519  01272E  A62D               	btfss	_venflags,3,c
 13520  012730  D018               	goto	l4261
 13521                           
 13522                           ;hopper.c: 47: {
 13523                           ;hopper.c: 48: cctalk_off();
 13524  012732  ECD3  F09B         	call	_cctalk_off	;wreg free
 13525                           
 13526                           ;hopper.c: 49: Update_coinsout(outcoins);
 13527  012736  503D               	movf	_outcoins,w,c
 13528  012738  EC1F  F095         	call	_Update_coinsout
 13529                           
 13530                           ;hopper.c: 50: venflags.nochange = 1;
 13531  01273C  862D               	bsf	_venflags,3,c
 13532                           
 13533                           ;hopper.c: 51: DATAEE_WriteByte(hoperror, 0x01);
 13534  01273E  0E20               	movlw	low _hoperror
 13535  012740  6EF6               	movwf	tblptrl,c
 13536  012742                     	if	1	;There is more than 1 active tblptr byte
 13537  012742  0EFB               	movlw	high _hoperror
 13538  012744  6EF7               	movwf	tblptrh,c
 13539  012746                     	endif
 13540  012746                     	if	1	;There are 3 active tblptr bytes
 13541  012746  0E00               	movlw	low (_hoperror shr (0+16))
 13542  012748  6EF8               	movwf	tblptru,c
 13543  01274A                     	endif
 13544  01274A  0009               	tblrd		*+
 13545  01274C  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 13546  012750  000A               	tblrd		*-
 13547  012752  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 13548  012756  0E01               	movlw	1
 13549  012758  6E1F               	movwf	DATAEE_WriteByte@bData,c
 13550  01275A  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 13551                           
 13552                           ;hopper.c: 52: return change;
 13553  01275E  5029               	movf	hopper_pay@change,w,c
 13554  012760  0012               	return	
 13555  012762                     l4261:
 13556                           
 13557                           ;hopper.c: 53: }
 13558                           ;hopper.c: 54: outcoins++;
 13559  012762  2A3D               	incf	_outcoins,f,c
 13560                           
 13561                           ;hopper.c: 55: change--;
 13562  012764  0629               	decf	hopper_pay@change,f,c
 13563  012766                     l4259:
 13564  012766  5029               	movf	hopper_pay@change,w,c
 13565  012768  A4D8               	btfss	status,2,c
 13566  01276A  D7D6               	goto	l4260
 13567                           
 13568                           ;hopper.c: 56: }
 13569                           ;hopper.c: 57: cctalk_off();
 13570  01276C  ECD3  F09B         	call	_cctalk_off	;wreg free
 13571                           
 13572                           ;hopper.c: 58: Update_coinsout(outcoins);
 13573  012770  503D               	movf	_outcoins,w,c
 13574  012772  EC1F  F095         	call	_Update_coinsout
 13575                           
 13576                           ;hopper.c: 59: return change;
 13577  012776  5029               	movf	hopper_pay@change,w,c
 13578  012778  0012               	return	
 13579  01277A                     __end_of_hopper_pay:
 13580                           	opt stack 0
 13581                           tblptru	equ	0xFF8
 13582                           tblptrh	equ	0xFF7
 13583                           tblptrl	equ	0xFF6
 13584                           tablat	equ	0xFF5
 13585                           prodh	equ	0xFF4
 13586                           prodl	equ	0xFF3
 13587                           intcon	equ	0xFF2
 13588                           indf0	equ	0xFEF
 13589                           postinc0	equ	0xFEE
 13590                           fsr0h	equ	0xFEA
 13591                           fsr0l	equ	0xFE9
 13592                           wreg	equ	0xFE8
 13593                           indf1	equ	0xFE7
 13594                           postdec1	equ	0xFE5
 13595                           fsr1h	equ	0xFE2
 13596                           fsr1l	equ	0xFE1
 13597                           indf2	equ	0xFDF
 13598                           postinc2	equ	0xFDE
 13599                           fsr2h	equ	0xFDA
 13600                           fsr2l	equ	0xFD9
 13601                           status	equ	0xFD8
 13602                           
 13603 ;; *************** function _pay_coin *****************
 13604 ;; Defined at:
 13605 ;;		line 79 in file "hopper.c"
 13606 ;; Parameters:    Size  Location     Type
 13607 ;;		None
 13608 ;; Auto vars:     Size  Location     Type
 13609 ;;		None
 13610 ;; Return value:  Size  Location     Type
 13611 ;;                  1    wreg      unsigned char 
 13612 ;; Registers used:
 13613 ;;		wreg, status,2, status,0, cstack
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;Total ram usage:        0 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; Hardware stack levels required when called:    4
 13626 ;; This function calls:
 13627 ;;		_Reset_hopper
 13628 ;;		_TMR2_Initialize
 13629 ;;		_TMR4_Initialize
 13630 ;;		_cctalk_off
 13631 ;;		_cctalk_on
 13632 ;;		_switch_read
 13633 ;; This function is called by:
 13634 ;;		_hopper_pay
 13635 ;; This function uses a non-reentrant model
 13636 ;;
 13637                           
 13638                           	psect	text69
 13639  012100                     __ptext69:
 13640                           	opt stack 0
 13641  012100                     _pay_coin:
 13642                           	opt stack 23
 13643                           
 13644                           ;hopper.c: 82: hopercount = 3;
 13645                           
 13646                           ;incstack = 0
 13647  012100  0E03               	movlw	3
 13648  012102  0100               	movlb	0	; () banked
 13649  012104  6FFE               	movwf	_hopercount& (0+255),b
 13650                           
 13651                           ; BSR set to: 0
 13652                           ;hopper.c: 83: if(switch_read())
 13653  012106  EC07  F096         	call	_switch_read	;wreg free
 13654  01210A  0900               	iorlw	0
 13655  01210C  B4D8               	btfsc	status,2,c
 13656  01210E  D011               	goto	l4271
 13657                           
 13658                           ;hopper.c: 84: {
 13659                           ;hopper.c: 85: TMR2_Initialize();
 13660  012110  ECBC  F09A         	call	_TMR2_Initialize	;wreg free
 13661  012114  EC07  F096         	call	_switch_read	;wreg free
 13662  012118  0900               	iorlw	0
 13663  01211A  B4D8               	btfsc	status,2,c
 13664  01211C  D003               	goto	u5670
 13665  01211E  010E               	movlb	14	; () banked
 13666  012120  A3CE               	btfss	206,1,b	;volatile
 13667  012122  D7F8               	goto	l4273
 13668  012124                     u5670:
 13669                           
 13670                           ;hopper.c: 88: if(PIR4bits.TMR2IF)
 13671                           
 13672                           ; BSR set to: 14
 13673  012124  010E               	movlb	14	; () banked
 13674  012126  A3CE               	btfss	206,1,b	;volatile
 13675  012128  D002               	goto	l4277
 13676                           
 13677                           ; BSR set to: 14
 13678                           ;hopper.c: 89: {
 13679                           ;hopper.c: 91: return 1;
 13680  01212A  0E01               	movlw	1
 13681                           
 13682                           ; BSR set to: 14
 13683                           ;hopper.c: 92: }
 13684                           
 13685                           ; BSR set to: 14
 13686  01212C  0012               	return	
 13687  01212E                     l4277:
 13688                           
 13689                           ; BSR set to: 14
 13690                           ;hopper.c: 93: else
 13691                           ;hopper.c: 94: {
 13692                           ;hopper.c: 95: return 0;
 13693                           
 13694                           ; BSR set to: 14
 13695  01212E  0E00               	movlw	0
 13696                           
 13697                           ; BSR set to: 14
 13698                           ;hopper.c: 96: }
 13699                           ;hopper.c: 97: }
 13700                           
 13701                           ; BSR set to: 14
 13702  012130  0012               	return	
 13703  012132                     l4271:
 13704                           
 13705                           ;hopper.c: 98: else
 13706                           ;hopper.c: 99: {
 13707                           ;hopper.c: 100: cctalk_on();
 13708                           
 13709                           ; BSR set to: 14
 13710  012132  ECD1  F09B         	call	_cctalk_on	;wreg free
 13711                           
 13712                           ;hopper.c: 101: TMR4_Initialize();
 13713  012136  ECAD  F09A         	call	_TMR4_Initialize	;wreg free
 13714                           
 13715                           ;hopper.c: 103: while(!switch_read())
 13716  01213A  D00C               	goto	l4284
 13717  01213C                     l4282:
 13718                           
 13719                           ;hopper.c: 104: {
 13720                           ;hopper.c: 105: if(PIR4bits.TMR4IF)
 13721  01213C  010E               	movlb	14	; () banked
 13722  01213E  A7CE               	btfss	206,3,b	;volatile
 13723  012140  D009               	goto	l4284
 13724                           
 13725                           ; BSR set to: 14
 13726                           ;hopper.c: 106: {
 13727                           ;hopper.c: 107: if(Reset_hopper())
 13728  012142  EC52  F098         	call	_Reset_hopper	;wreg free
 13729  012146  0900               	iorlw	0
 13730  012148  B4D8               	btfsc	status,2,c
 13731  01214A  D004               	goto	l4284
 13732                           
 13733                           ;hopper.c: 108: {
 13734                           ;hopper.c: 109: cctalk_off();
 13735  01214C  ECD3  F09B         	call	_cctalk_off	;wreg free
 13736                           
 13737                           ;hopper.c: 110: return 1;
 13738  012150  0E01               	movlw	1
 13739  012152  0012               	return	
 13740  012154                     l4284:
 13741  012154  EC07  F096         	call	_switch_read	;wreg free
 13742  012158  0900               	iorlw	0
 13743  01215A  B4D8               	btfsc	status,2,c
 13744  01215C  D7EF               	goto	l4282
 13745                           
 13746                           ;hopper.c: 111: }
 13747                           ;hopper.c: 113: }
 13748                           ;hopper.c: 114: }
 13749                           ;hopper.c: 115: cctalk_off();
 13750  01215E  ECD3  F09B         	call	_cctalk_off	;wreg free
 13751                           
 13752                           ;hopper.c: 116: TMR2_Initialize();
 13753  012162  ECBC  F09A         	call	_TMR2_Initialize	;wreg free
 13754                           
 13755                           ;hopper.c: 117: cctalk_on();
 13756  012166  ECD1  F09B         	call	_cctalk_on	;wreg free
 13757  01216A  EC07  F096         	call	_switch_read	;wreg free
 13758  01216E  0900               	iorlw	0
 13759  012170  B4D8               	btfsc	status,2,c
 13760  012172  D003               	goto	u5730
 13761  012174  010E               	movlb	14	; () banked
 13762  012176  A3CE               	btfss	206,1,b	;volatile
 13763  012178  D7F8               	goto	l4287
 13764  01217A                     u5730:
 13765                           
 13766                           ;hopper.c: 119: cctalk_off();
 13767                           
 13768                           ; BSR set to: 14
 13769                           
 13770                           ; BSR set to: 14
 13771  01217A  ECD3  F09B         	call	_cctalk_off	;wreg free
 13772                           
 13773                           ;hopper.c: 120: if(PIR4bits.TMR2IF)
 13774  01217E  010E               	movlb	14	; () banked
 13775  012180  A3CE               	btfss	206,1,b	;volatile
 13776  012182  D002               	goto	l4291
 13777                           
 13778                           ; BSR set to: 14
 13779                           ;hopper.c: 121: {
 13780                           ;hopper.c: 122: return 1;
 13781  012184  0E01               	movlw	1
 13782                           
 13783                           ; BSR set to: 14
 13784                           ;hopper.c: 123: }
 13785                           
 13786                           ; BSR set to: 14
 13787  012186  0012               	return	
 13788  012188                     l4291:
 13789                           
 13790                           ; BSR set to: 14
 13791                           ;hopper.c: 124: else
 13792                           ;hopper.c: 125: {
 13793                           ;hopper.c: 126: return 0;
 13794                           
 13795                           ; BSR set to: 14
 13796  012188  0E00               	movlw	0
 13797                           
 13798                           ; BSR set to: 14
 13799                           
 13800                           ; BSR set to: 14
 13801  01218A  0012               	return	
 13802  01218C                     __end_of_pay_coin:
 13803                           	opt stack 0
 13804                           tblptru	equ	0xFF8
 13805                           tblptrh	equ	0xFF7
 13806                           tblptrl	equ	0xFF6
 13807                           tablat	equ	0xFF5
 13808                           prodh	equ	0xFF4
 13809                           prodl	equ	0xFF3
 13810                           intcon	equ	0xFF2
 13811                           indf0	equ	0xFEF
 13812                           postinc0	equ	0xFEE
 13813                           fsr0h	equ	0xFEA
 13814                           fsr0l	equ	0xFE9
 13815                           wreg	equ	0xFE8
 13816                           indf1	equ	0xFE7
 13817                           postdec1	equ	0xFE5
 13818                           fsr1h	equ	0xFE2
 13819                           fsr1l	equ	0xFE1
 13820                           indf2	equ	0xFDF
 13821                           postinc2	equ	0xFDE
 13822                           fsr2h	equ	0xFDA
 13823                           fsr2l	equ	0xFD9
 13824                           status	equ	0xFD8
 13825                           
 13826 ;; *************** function _switch_read *****************
 13827 ;; Defined at:
 13828 ;;		line 133 in file "hopper.c"
 13829 ;; Parameters:    Size  Location     Type
 13830 ;;		None
 13831 ;; Auto vars:     Size  Location     Type
 13832 ;;		None
 13833 ;; Return value:  Size  Location     Type
 13834 ;;                  1    wreg      unsigned char 
 13835 ;; Registers used:
 13836 ;;		wreg, status,2
 13837 ;; Tracked objects:
 13838 ;;		On entry : 0/0
 13839 ;;		On exit  : 0/0
 13840 ;;		Unchanged: 0/0
 13841 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13844 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13845 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13846 ;;Total ram usage:        2 bytes
 13847 ;; Hardware stack levels used:    1
 13848 ;; Hardware stack levels required when called:    2
 13849 ;; This function calls:
 13850 ;;		Nothing
 13851 ;; This function is called by:
 13852 ;;		_pay_coin
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           	psect	text70
 13857  012C0E                     __ptext70:
 13858                           	opt stack 0
 13859  012C0E                     _switch_read:
 13860                           	opt stack 24
 13861                           
 13862                           ;hopper.c: 135: if(PORTBbits.RB4 == venflags.swclosed)
 13863                           
 13864                           ;incstack = 0
 13865  012C0E  A22F               	btfss	_venflags+2,1,c
 13866  012C10  D002               	goto	u5300
 13867  012C12  0E01               	movlw	1
 13868  012C14  D001               	goto	u5302
 13869  012C16                     u5300:
 13870  012C16  0E00               	movlw	0
 13871  012C18                     u5302:
 13872  012C18  6E1D               	movwf	??_switch_read& (0+255),c
 13873  012C1A  A88E               	btfss	3982,4,c	;volatile
 13874  012C1C  D002               	goto	u5310
 13875  012C1E  0E01               	movlw	1
 13876  012C20  D001               	goto	u5312
 13877  012C22                     u5310:
 13878  012C22  0E00               	movlw	0
 13879  012C24                     u5312:
 13880  012C24  1A1D               	xorwf	??_switch_read,f,c
 13881  012C26  A4D8               	btfss	status,2,c
 13882  012C28  D016               	goto	l4297
 13883                           
 13884                           ;hopper.c: 136: {
 13885                           ;hopper.c: 137: if(venflags.swclosed)
 13886  012C2A  A22F               	btfss	_venflags+2,1,c
 13887  012C2C  D008               	goto	l4296
 13888                           
 13889                           ;hopper.c: 138: {
 13890                           ;hopper.c: 139: _delay((unsigned long)((5)*(64000000/4000.0)));
 13891  012C2E  0E68               	movlw	104
 13892  012C30  6E1D               	movwf	??_switch_read& (0+255),c
 13893  012C32  0EE4               	movlw	228
 13894  012C34                     u7367:
 13895  012C34  2EE8               	decfsz	wreg,f,c
 13896  012C36  D7FE               	bra	u7367
 13897  012C38  2E1D               	decfsz	??_switch_read& (0+255),f,c
 13898  012C3A  D7FC               	bra	u7367
 13899  012C3C  D00B               	goto	L14
 13900  012C3E                     l4296:
 13901                           
 13902                           ;hopper.c: 141: else
 13903                           ;hopper.c: 142: {
 13904                           ;hopper.c: 143: _delay((unsigned long)((20)*(64000000/4000.0)));
 13905  012C3E  0E02               	movlw	2
 13906  012C40  6E1E               	movwf	(??_switch_read+1)& (0+255),c
 13907  012C42  0EA0               	movlw	160
 13908  012C44  6E1D               	movwf	??_switch_read& (0+255),c
 13909  012C46  0E92               	movlw	146
 13910  012C48                     u7377:
 13911  012C48  2EE8               	decfsz	wreg,f,c
 13912  012C4A  D7FE               	bra	u7377
 13913  012C4C  2E1D               	decfsz	??_switch_read& (0+255),f,c
 13914  012C4E  D7FC               	bra	u7377
 13915  012C50  2E1E               	decfsz	(??_switch_read+1)& (0+255),f,c
 13916  012C52  D7FA               	bra	u7377
 13917  012C54                     L14:
 13918  012C54  D000               	nop2	
 13919  012C56                     l4297:
 13920                           
 13921                           ;hopper.c: 144: }
 13922                           ;hopper.c: 145: }
 13923                           ;hopper.c: 146: if(PORTBbits.RB4)
 13924  012C56  A88E               	btfss	3982,4,c	;volatile
 13925  012C58  D003               	goto	l4298
 13926                           
 13927                           ;hopper.c: 147: {
 13928                           ;hopper.c: 148: venflags.swclosed = 0;
 13929  012C5A  922F               	bcf	_venflags+2,1,c
 13930                           
 13931                           ;hopper.c: 149: return 0;
 13932  012C5C  0E00               	movlw	0
 13933                           
 13934                           ;hopper.c: 150: }
 13935  012C5E  0012               	return	
 13936  012C60                     l4298:
 13937                           
 13938                           ;hopper.c: 151: else
 13939                           ;hopper.c: 152: {
 13940                           ;hopper.c: 153: venflags.swclosed = 1;
 13941  012C60  822F               	bsf	_venflags+2,1,c
 13942                           
 13943                           ;hopper.c: 154: return 1;
 13944  012C62  0E01               	movlw	1
 13945  012C64  0012               	return	
 13946  012C66                     __end_of_switch_read:
 13947                           	opt stack 0
 13948                           tblptru	equ	0xFF8
 13949                           tblptrh	equ	0xFF7
 13950                           tblptrl	equ	0xFF6
 13951                           tablat	equ	0xFF5
 13952                           prodh	equ	0xFF4
 13953                           prodl	equ	0xFF3
 13954                           intcon	equ	0xFF2
 13955                           indf0	equ	0xFEF
 13956                           postinc0	equ	0xFEE
 13957                           fsr0h	equ	0xFEA
 13958                           fsr0l	equ	0xFE9
 13959                           wreg	equ	0xFE8
 13960                           indf1	equ	0xFE7
 13961                           postdec1	equ	0xFE5
 13962                           fsr1h	equ	0xFE2
 13963                           fsr1l	equ	0xFE1
 13964                           indf2	equ	0xFDF
 13965                           postinc2	equ	0xFDE
 13966                           fsr2h	equ	0xFDA
 13967                           fsr2l	equ	0xFD9
 13968                           status	equ	0xFD8
 13969                           
 13970 ;; *************** function _Reset_hopper *****************
 13971 ;; Defined at:
 13972 ;;		line 62 in file "hopper.c"
 13973 ;; Parameters:    Size  Location     Type
 13974 ;;		None
 13975 ;; Auto vars:     Size  Location     Type
 13976 ;;		None
 13977 ;; Return value:  Size  Location     Type
 13978 ;;                  1    wreg      unsigned char 
 13979 ;; Registers used:
 13980 ;;		wreg, status,2, status,0, cstack
 13981 ;; Tracked objects:
 13982 ;;		On entry : 0/0
 13983 ;;		On exit  : 0/0
 13984 ;;		Unchanged: 0/0
 13985 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13989 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13990 ;;Total ram usage:        2 bytes
 13991 ;; Hardware stack levels used:    1
 13992 ;; Hardware stack levels required when called:    3
 13993 ;; This function calls:
 13994 ;;		_TMR4_Initialize
 13995 ;;		_cctalk_off
 13996 ;;		_cctalk_on
 13997 ;; This function is called by:
 13998 ;;		_pay_coin
 13999 ;; This function uses a non-reentrant model
 14000 ;;
 14001                           
 14002                           	psect	text71
 14003  0130A4                     __ptext71:
 14004                           	opt stack 0
 14005  0130A4                     _Reset_hopper:
 14006                           	opt stack 23
 14007                           
 14008                           ;hopper.c: 64: hopercount--;
 14009                           
 14010                           ;incstack = 0
 14011  0130A4  0100               	movlb	0	; () banked
 14012  0130A6  07FE               	decf	_hopercount& (0+255),f,b
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;hopper.c: 65: cctalk_off();
 14016  0130A8  ECD3  F09B         	call	_cctalk_off	;wreg free
 14017                           
 14018                           ;hopper.c: 66: _delay((unsigned long)((2000)*(64000000/4000.0)));
 14019  0130AC  0EA3               	movlw	163
 14020  0130AE  6E1E               	movwf	(??_Reset_hopper+1)& (0+255),c
 14021  0130B0  0E57               	movlw	87
 14022  0130B2  6E1D               	movwf	??_Reset_hopper& (0+255),c
 14023  0130B4  0E02               	movlw	2
 14024  0130B6                     u7387:
 14025  0130B6  2EE8               	decfsz	wreg,f,c
 14026  0130B8  D7FE               	bra	u7387
 14027  0130BA  2E1D               	decfsz	??_Reset_hopper& (0+255),f,c
 14028  0130BC  D7FC               	bra	u7387
 14029  0130BE  2E1E               	decfsz	(??_Reset_hopper+1)& (0+255),f,c
 14030  0130C0  D7FA               	bra	u7387
 14031  0130C2  D000               	nop2	
 14032                           
 14033                           ;hopper.c: 67: TMR4_Initialize();
 14034  0130C4  ECAD  F09A         	call	_TMR4_Initialize	;wreg free
 14035                           
 14036                           ;hopper.c: 68: if(hopercount > 0)
 14037  0130C8  0100               	movlb	0	; () banked
 14038  0130CA  51FE               	movf	_hopercount& (0+255),w,b
 14039  0130CC  0A80               	xorlw	128
 14040  0130CE  0F7F               	addlw	-129
 14041  0130D0  A0D8               	btfss	status,0,c
 14042  0130D2  D004               	goto	l4266
 14043                           
 14044                           ; BSR set to: 0
 14045                           ;hopper.c: 69: {
 14046                           ;hopper.c: 70: cctalk_on();
 14047  0130D4  ECD1  F09B         	call	_cctalk_on	;wreg free
 14048                           
 14049                           ;hopper.c: 71: return 0;
 14050  0130D8  0E00               	movlw	0
 14051                           
 14052                           ;hopper.c: 72: }
 14053  0130DA  0012               	return	
 14054  0130DC                     l4266:
 14055                           
 14056                           ;hopper.c: 73: else
 14057                           ;hopper.c: 74: {
 14058                           ;hopper.c: 75: return 1;
 14059  0130DC  0E01               	movlw	1
 14060  0130DE  0012               	return	
 14061  0130E0                     __end_of_Reset_hopper:
 14062                           	opt stack 0
 14063                           tblptru	equ	0xFF8
 14064                           tblptrh	equ	0xFF7
 14065                           tblptrl	equ	0xFF6
 14066                           tablat	equ	0xFF5
 14067                           prodh	equ	0xFF4
 14068                           prodl	equ	0xFF3
 14069                           intcon	equ	0xFF2
 14070                           indf0	equ	0xFEF
 14071                           postinc0	equ	0xFEE
 14072                           fsr0h	equ	0xFEA
 14073                           fsr0l	equ	0xFE9
 14074                           wreg	equ	0xFE8
 14075                           indf1	equ	0xFE7
 14076                           postdec1	equ	0xFE5
 14077                           fsr1h	equ	0xFE2
 14078                           fsr1l	equ	0xFE1
 14079                           indf2	equ	0xFDF
 14080                           postinc2	equ	0xFDE
 14081                           fsr2h	equ	0xFDA
 14082                           fsr2l	equ	0xFD9
 14083                           status	equ	0xFD8
 14084                           
 14085 ;; *************** function _cctalk_on *****************
 14086 ;; Defined at:
 14087 ;;		line 137 in file "cctalk.c"
 14088 ;; Parameters:    Size  Location     Type
 14089 ;;		None
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;		None
 14092 ;; Return value:  Size  Location     Type
 14093 ;;                  1    wreg      void 
 14094 ;; Registers used:
 14095 ;;		None
 14096 ;; Tracked objects:
 14097 ;;		On entry : 0/0
 14098 ;;		On exit  : 0/0
 14099 ;;		Unchanged: 0/0
 14100 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14105 ;;Total ram usage:        0 bytes
 14106 ;; Hardware stack levels used:    1
 14107 ;; Hardware stack levels required when called:    2
 14108 ;; This function calls:
 14109 ;;		Nothing
 14110 ;; This function is called by:
 14111 ;;		_hopper_pay
 14112 ;;		_Reset_hopper
 14113 ;;		_pay_coin
 14114 ;;		_cctalk_init
 14115 ;; This function uses a non-reentrant model
 14116 ;;
 14117                           
 14118                           	psect	text72
 14119  0137A2                     __ptext72:
 14120                           	opt stack 0
 14121  0137A2                     _cctalk_on:
 14122                           	opt stack 24
 14123                           
 14124                           ;cctalk.c: 144: LATCbits.LATC1 = 1;
 14125                           
 14126                           ;incstack = 0
 14127  0137A2  8285               	bsf	3973,1,c	;volatile
 14128  0137A4  0012               	return		;funcret
 14129  0137A6                     __end_of_cctalk_on:
 14130                           	opt stack 0
 14131                           tblptru	equ	0xFF8
 14132                           tblptrh	equ	0xFF7
 14133                           tblptrl	equ	0xFF6
 14134                           tablat	equ	0xFF5
 14135                           prodh	equ	0xFF4
 14136                           prodl	equ	0xFF3
 14137                           intcon	equ	0xFF2
 14138                           indf0	equ	0xFEF
 14139                           postinc0	equ	0xFEE
 14140                           fsr0h	equ	0xFEA
 14141                           fsr0l	equ	0xFE9
 14142                           wreg	equ	0xFE8
 14143                           indf1	equ	0xFE7
 14144                           postdec1	equ	0xFE5
 14145                           fsr1h	equ	0xFE2
 14146                           fsr1l	equ	0xFE1
 14147                           indf2	equ	0xFDF
 14148                           postinc2	equ	0xFDE
 14149                           fsr2h	equ	0xFDA
 14150                           fsr2l	equ	0xFD9
 14151                           status	equ	0xFD8
 14152                           
 14153 ;; *************** function _cctalk_off *****************
 14154 ;; Defined at:
 14155 ;;		line 132 in file "cctalk.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;		None
 14158 ;; Auto vars:     Size  Location     Type
 14159 ;;		None
 14160 ;; Return value:  Size  Location     Type
 14161 ;;                  1    wreg      void 
 14162 ;; Registers used:
 14163 ;;		None
 14164 ;; Tracked objects:
 14165 ;;		On entry : 0/0
 14166 ;;		On exit  : 0/0
 14167 ;;		Unchanged: 0/0
 14168 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;Total ram usage:        0 bytes
 14174 ;; Hardware stack levels used:    1
 14175 ;; Hardware stack levels required when called:    2
 14176 ;; This function calls:
 14177 ;;		Nothing
 14178 ;; This function is called by:
 14179 ;;		_hopper_pay
 14180 ;;		_Reset_hopper
 14181 ;;		_pay_coin
 14182 ;; This function uses a non-reentrant model
 14183 ;;
 14184                           
 14185                           	psect	text73
 14186  0137A6                     __ptext73:
 14187                           	opt stack 0
 14188  0137A6                     _cctalk_off:
 14189                           	opt stack 24
 14190                           
 14191                           ;cctalk.c: 134: LATCbits.LATC1 = 0;
 14192                           
 14193                           ;incstack = 0
 14194  0137A6  9285               	bcf	3973,1,c	;volatile
 14195  0137A8  0012               	return		;funcret
 14196  0137AA                     __end_of_cctalk_off:
 14197                           	opt stack 0
 14198                           tblptru	equ	0xFF8
 14199                           tblptrh	equ	0xFF7
 14200                           tblptrl	equ	0xFF6
 14201                           tablat	equ	0xFF5
 14202                           prodh	equ	0xFF4
 14203                           prodl	equ	0xFF3
 14204                           intcon	equ	0xFF2
 14205                           indf0	equ	0xFEF
 14206                           postinc0	equ	0xFEE
 14207                           fsr0h	equ	0xFEA
 14208                           fsr0l	equ	0xFE9
 14209                           wreg	equ	0xFE8
 14210                           indf1	equ	0xFE7
 14211                           postdec1	equ	0xFE5
 14212                           fsr1h	equ	0xFE2
 14213                           fsr1l	equ	0xFE1
 14214                           indf2	equ	0xFDF
 14215                           postinc2	equ	0xFDE
 14216                           fsr2h	equ	0xFDA
 14217                           fsr2l	equ	0xFD9
 14218                           status	equ	0xFD8
 14219                           
 14220 ;; *************** function _Update_coinsout *****************
 14221 ;; Defined at:
 14222 ;;		line 158 in file "hopper.c"
 14223 ;; Parameters:    Size  Location     Type
 14224 ;;  coinsout        1    wreg     unsigned char 
 14225 ;; Auto vars:     Size  Location     Type
 14226 ;;  coinsout        1   28[COMRAM] unsigned char 
 14227 ;; Return value:  Size  Location     Type
 14228 ;;                  1    wreg      void 
 14229 ;; Registers used:
 14230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14231 ;; Tracked objects:
 14232 ;;		On entry : 0/0
 14233 ;;		On exit  : 0/0
 14234 ;;		Unchanged: 0/0
 14235 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14240 ;;Total ram usage:        1 bytes
 14241 ;; Hardware stack levels used:    1
 14242 ;; Hardware stack levels required when called:    4
 14243 ;; This function calls:
 14244 ;;		_Read_NVstore
 14245 ;;		_Write_NVstore
 14246 ;; This function is called by:
 14247 ;;		_hopper_pay
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           	psect	text74
 14252  012A3E                     __ptext74:
 14253                           	opt stack 0
 14254  012A3E                     _Update_coinsout:
 14255                           	opt stack 23
 14256                           
 14257                           ;incstack = 0
 14258                           ;Update_coinsout@coinsout stored from wreg
 14259  012A3E  6E27               	movwf	Update_coinsout@coinsout,c
 14260                           
 14261                           ;hopper.c: 160: Read_NVstore(cashoutv, ((uint8_t*) &pvcash), 0x02);
 14262  012A40  0E48               	movlw	low _cashoutv
 14263  012A42  6EF6               	movwf	tblptrl,c
 14264  012A44                     	if	1	;There is more than 1 active tblptr byte
 14265  012A44  0EFB               	movlw	high _cashoutv
 14266  012A46  6EF7               	movwf	tblptrh,c
 14267  012A48                     	endif
 14268  012A48                     	if	1	;There are 3 active tblptr bytes
 14269  012A48  0E00               	movlw	low (_cashoutv shr (0+16))
 14270  012A4A  6EF8               	movwf	tblptru,c
 14271  012A4C                     	endif
 14272  012A4C  0009               	tblrd		*+
 14273  012A4E  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 14274  012A52  000A               	tblrd		*-
 14275  012A54  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 14276  012A58  0E4C               	movlw	low _pvcash
 14277  012A5A  6E21               	movwf	Read_NVstore@storemem,c
 14278  012A5C  0E00               	movlw	high _pvcash
 14279  012A5E  6E22               	movwf	Read_NVstore@storemem+1,c
 14280  012A60  0E02               	movlw	2
 14281  012A62  6E23               	movwf	Read_NVstore@storesize,c
 14282  012A64  EC6C  F099         	call	_Read_NVstore	;wreg free
 14283                           
 14284                           ;hopper.c: 161: pvcash = pvcash + (uint16_t)coinsout;
 14285  012A68  5027               	movf	Update_coinsout@coinsout,w,c
 14286  012A6A  244C               	addwf	_pvcash,w,c	;volatile
 14287  012A6C  6E4C               	movwf	_pvcash,c	;volatile
 14288  012A6E  0E00               	movlw	0
 14289  012A70  204D               	addwfc	_pvcash+1,w,c	;volatile
 14290  012A72  6E4D               	movwf	_pvcash+1,c	;volatile
 14291                           
 14292                           ;hopper.c: 162: Write_NVstore(cashoutv, ((uint8_t*) &pvcash), 0x02);
 14293  012A74  0E48               	movlw	low _cashoutv
 14294  012A76  6EF6               	movwf	tblptrl,c
 14295  012A78                     	if	1	;There is more than 1 active tblptr byte
 14296  012A78  0EFB               	movlw	high _cashoutv
 14297  012A7A  6EF7               	movwf	tblptrh,c
 14298  012A7C                     	endif
 14299  012A7C                     	if	1	;There are 3 active tblptr bytes
 14300  012A7C  0E00               	movlw	low (_cashoutv shr (0+16))
 14301  012A7E  6EF8               	movwf	tblptru,c
 14302  012A80                     	endif
 14303  012A80  0009               	tblrd		*+
 14304  012A82  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
 14305  012A86  000A               	tblrd		*-
 14306  012A88  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
 14307  012A8C  0E4C               	movlw	low _pvcash
 14308  012A8E  6E23               	movwf	Write_NVstore@storemem,c
 14309  012A90  0E00               	movlw	high _pvcash
 14310  012A92  6E24               	movwf	Write_NVstore@storemem+1,c
 14311  012A94  0E02               	movlw	2
 14312  012A96  6E25               	movwf	Write_NVstore@storesize,c
 14313  012A98  EC00  F099         	call	_Write_NVstore	;wreg free
 14314  012A9C  0012               	return		;funcret
 14315  012A9E                     __end_of_Update_coinsout:
 14316                           	opt stack 0
 14317                           tblptru	equ	0xFF8
 14318                           tblptrh	equ	0xFF7
 14319                           tblptrl	equ	0xFF6
 14320                           tablat	equ	0xFF5
 14321                           prodh	equ	0xFF4
 14322                           prodl	equ	0xFF3
 14323                           intcon	equ	0xFF2
 14324                           indf0	equ	0xFEF
 14325                           postinc0	equ	0xFEE
 14326                           fsr0h	equ	0xFEA
 14327                           fsr0l	equ	0xFE9
 14328                           wreg	equ	0xFE8
 14329                           indf1	equ	0xFE7
 14330                           postdec1	equ	0xFE5
 14331                           fsr1h	equ	0xFE2
 14332                           fsr1l	equ	0xFE1
 14333                           indf2	equ	0xFDF
 14334                           postinc2	equ	0xFDE
 14335                           fsr2h	equ	0xFDA
 14336                           fsr2l	equ	0xFD9
 14337                           status	equ	0xFD8
 14338                           
 14339 ;; *************** function _Write_NVstore *****************
 14340 ;; Defined at:
 14341 ;;		line 86 in file "vend.c"
 14342 ;; Parameters:    Size  Location     Type
 14343 ;;  storeadd        2   22[COMRAM] unsigned int 
 14344 ;;  storemem        2   24[COMRAM] PTR unsigned char 
 14345 ;;		 -> pnvcash(3), pvcash(2), 
 14346 ;;  storesize       1   26[COMRAM] unsigned char 
 14347 ;; Auto vars:     Size  Location     Type
 14348 ;;  i               1   27[COMRAM] unsigned char 
 14349 ;; Return value:  Size  Location     Type
 14350 ;;                  1    wreg      void 
 14351 ;; Registers used:
 14352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14353 ;; Tracked objects:
 14354 ;;		On entry : 0/0
 14355 ;;		On exit  : 0/0
 14356 ;;		Unchanged: 0/0
 14357 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14358 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14359 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14362 ;;Total ram usage:        6 bytes
 14363 ;; Hardware stack levels used:    1
 14364 ;; Hardware stack levels required when called:    3
 14365 ;; This function calls:
 14366 ;;		_DATAEE_WriteByte
 14367 ;; This function is called by:
 14368 ;;		_Update_cashaudit
 14369 ;;		_Update_coinsout
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text75
 14374  013200                     __ptext75:
 14375                           	opt stack 0
 14376  013200                     _Write_NVstore:
 14377                           	opt stack 23
 14378                           
 14379                           ;vend.c: 88: uint8_t i = 0;
 14380                           
 14381                           ;incstack = 0
 14382  013200  0E00               	movlw	0
 14383  013202  6E26               	movwf	Write_NVstore@i,c
 14384                           
 14385                           ;vend.c: 89: while(i < storesize)
 14386  013204  D013               	goto	l2436
 14387  013206                     
 14388                           ;vend.c: 90: {
 14389                           ;vend.c: 91: DATAEE_WriteByte(storeadd + i, storemem[i]);
 14390  013206  5026               	movf	Write_NVstore@i,w,c
 14391  013208  2421               	addwf	Write_NVstore@storeadd,w,c
 14392  01320A  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
 14393  01320C  0E00               	movlw	0
 14394  01320E  2022               	addwfc	Write_NVstore@storeadd+1,w,c
 14395  013210  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
 14396  013212  5026               	movf	Write_NVstore@i,w,c
 14397  013214  0D01               	mullw	1
 14398  013216  50F3               	movf	prodl,w,c
 14399  013218  2423               	addwf	Write_NVstore@storemem,w,c
 14400  01321A  6ED9               	movwf	fsr2l,c
 14401  01321C  50F4               	movf	prodh,w,c
 14402  01321E  2024               	addwfc	Write_NVstore@storemem+1,w,c
 14403  013220  6EDA               	movwf	fsr2h,c
 14404  013222  50DF               	movf	indf2,w,c
 14405  013224  6E1F               	movwf	DATAEE_WriteByte@bData,c
 14406  013226  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 14407                           
 14408                           ;vend.c: 92: i++;
 14409  01322A  2A26               	incf	Write_NVstore@i,f,c
 14410  01322C                     l2436:
 14411  01322C  5025               	movf	Write_NVstore@storesize,w,c
 14412  01322E  5C26               	subwf	Write_NVstore@i,w,c
 14413  013230  B0D8               	btfsc	status,0,c
 14414  013232  0012               	return	
 14415  013234  D7E8               	goto	l2437
 14416  013236                     __end_of_Write_NVstore:
 14417                           	opt stack 0
 14418                           tblptru	equ	0xFF8
 14419                           tblptrh	equ	0xFF7
 14420                           tblptrl	equ	0xFF6
 14421                           tablat	equ	0xFF5
 14422                           prodh	equ	0xFF4
 14423                           prodl	equ	0xFF3
 14424                           intcon	equ	0xFF2
 14425                           indf0	equ	0xFEF
 14426                           postinc0	equ	0xFEE
 14427                           fsr0h	equ	0xFEA
 14428                           fsr0l	equ	0xFE9
 14429                           wreg	equ	0xFE8
 14430                           indf1	equ	0xFE7
 14431                           postdec1	equ	0xFE5
 14432                           fsr1h	equ	0xFE2
 14433                           fsr1l	equ	0xFE1
 14434                           indf2	equ	0xFDF
 14435                           postinc2	equ	0xFDE
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function _Vend_setup *****************
 14441 ;; Defined at:
 14442 ;;		line 425 in file "vend.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;		None
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;		None
 14447 ;; Return value:  Size  Location     Type
 14448 ;;                  1    wreg      void 
 14449 ;; Registers used:
 14450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14451 ;; Tracked objects:
 14452 ;;		On entry : 0/0
 14453 ;;		On exit  : 0/0
 14454 ;;		Unchanged: 0/0
 14455 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14460 ;;Total ram usage:        0 bytes
 14461 ;; Hardware stack levels used:    1
 14462 ;; Hardware stack levels required when called:   11
 14463 ;; This function calls:
 14464 ;;		_Chan_link
 14465 ;;		_Clear_Totals
 14466 ;;		_Init_vendmem
 14467 ;;		_Reset_settings
 14468 ;;		_Sens_off
 14469 ;;		_Vend_settime
 14470 ;;		_butindb
 14471 ;;		_lcd_string
 14472 ;; This function is called by:
 14473 ;;		_enter_service
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           	psect	text76
 14478  010ECC                     __ptext76:
 14479                           	opt stack 0
 14480  010ECC                     _Vend_setup:
 14481                           	opt stack 18
 14482                           
 14483                           ;vend.c: 427: venflags.vendset = 1;
 14484                           
 14485                           ;incstack = 0
 14486  010ECC  842E               	bsf	_venflags+1,2,c
 14487                           
 14488                           ;vend.c: 428: lcd_string(vendsetup, line1);
 14489  010ECE  0E2A               	movlw	low _vendsetup
 14490  010ED0  6E24               	movwf	lcd_string@lcdstring,c
 14491  010ED2  0EFC               	movlw	high _vendsetup
 14492  010ED4  6E25               	movwf	lcd_string@lcdstring+1,c
 14493  010ED6  0E86               	movlw	low _line1
 14494  010ED8  6EF6               	movwf	tblptrl,c
 14495  010EDA                     	if	1	;There is more than 1 active tblptr byte
 14496  010EDA  0EFB               	movlw	high _line1
 14497  010EDC  6EF7               	movwf	tblptrh,c
 14498  010EDE                     	endif
 14499  010EDE                     	if	1	;There are 3 active tblptr bytes
 14500  010EDE  0E00               	movlw	low (_line1 shr (0+16))
 14501  010EE0  6EF8               	movwf	tblptru,c
 14502  010EE2                     	endif
 14503  010EE2  0008               	tblrd		*
 14504  010EE4  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14505  010EE8  EC5D  F08A         	call	_lcd_string	;wreg free
 14506                           
 14507                           ;vend.c: 429: while(venflags.vendset)
 14508  010EEC  D075               	goto	l2565
 14509  010EEE                     
 14510                           ;vend.c: 430: {
 14511                           ;vend.c: 431: buttons = butindb();
 14512  010EEE  EC72  F097         	call	_butindb	;wreg free
 14513  010EF2  6E3A               	movwf	_buttons,c	;volatile
 14514                           
 14515                           ;vend.c: 432: switch(buttons)
 14516  010EF4  D05E               	goto	l2563
 14517  010EF6  EC04  F097         	call	_Vend_settime	;wreg free
 14518                           
 14519                           ;vend.c: 435: lcd_string(vendsetup, line1);
 14520  010EFA  0E2A               	movlw	low _vendsetup
 14521  010EFC  6E24               	movwf	lcd_string@lcdstring,c
 14522  010EFE  0EFC               	movlw	high _vendsetup
 14523  010F00  6E25               	movwf	lcd_string@lcdstring+1,c
 14524  010F02  0E86               	movlw	low _line1
 14525  010F04  6EF6               	movwf	tblptrl,c
 14526  010F06                     	if	1	;There is more than 1 active tblptr byte
 14527  010F06  0EFB               	movlw	high _line1
 14528  010F08  6EF7               	movwf	tblptrh,c
 14529  010F0A                     	endif
 14530  010F0A                     	if	1	;There are 3 active tblptr bytes
 14531  010F0A  0E00               	movlw	low (_line1 shr (0+16))
 14532  010F0C  6EF8               	movwf	tblptru,c
 14533  010F0E                     	endif
 14534  010F0E  0008               	tblrd		*
 14535  010F10  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14536  010F14  EC5D  F08A         	call	_lcd_string	;wreg free
 14537                           
 14538                           ;vend.c: 436: break;
 14539  010F18  D05F               	goto	l2565
 14540  010F1A  ECBE  F094         	call	_Chan_link	;wreg free
 14541                           
 14542                           ;vend.c: 438: lcd_string(vendsetup, line1);
 14543  010F1E  0E2A               	movlw	low _vendsetup
 14544  010F20  6E24               	movwf	lcd_string@lcdstring,c
 14545  010F22  0EFC               	movlw	high _vendsetup
 14546  010F24  6E25               	movwf	lcd_string@lcdstring+1,c
 14547  010F26  0E86               	movlw	low _line1
 14548  010F28  6EF6               	movwf	tblptrl,c
 14549  010F2A                     	if	1	;There is more than 1 active tblptr byte
 14550  010F2A  0EFB               	movlw	high _line1
 14551  010F2C  6EF7               	movwf	tblptrh,c
 14552  010F2E                     	endif
 14553  010F2E                     	if	1	;There are 3 active tblptr bytes
 14554  010F2E  0E00               	movlw	low (_line1 shr (0+16))
 14555  010F30  6EF8               	movwf	tblptru,c
 14556  010F32                     	endif
 14557  010F32  0008               	tblrd		*
 14558  010F34  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14559  010F38  EC5D  F08A         	call	_lcd_string	;wreg free
 14560                           
 14561                           ;vend.c: 439: break;
 14562  010F3C  D04D               	goto	l2565
 14563  010F3E  EC99  F092         	call	_Sens_off	;wreg free
 14564                           
 14565                           ;vend.c: 441: lcd_string(vendsetup, line1);
 14566  010F42  0E2A               	movlw	low _vendsetup
 14567  010F44  6E24               	movwf	lcd_string@lcdstring,c
 14568  010F46  0EFC               	movlw	high _vendsetup
 14569  010F48  6E25               	movwf	lcd_string@lcdstring+1,c
 14570  010F4A  0E86               	movlw	low _line1
 14571  010F4C  6EF6               	movwf	tblptrl,c
 14572  010F4E                     	if	1	;There is more than 1 active tblptr byte
 14573  010F4E  0EFB               	movlw	high _line1
 14574  010F50  6EF7               	movwf	tblptrh,c
 14575  010F52                     	endif
 14576  010F52                     	if	1	;There are 3 active tblptr bytes
 14577  010F52  0E00               	movlw	low (_line1 shr (0+16))
 14578  010F54  6EF8               	movwf	tblptru,c
 14579  010F56                     	endif
 14580  010F56  0008               	tblrd		*
 14581  010F58  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14582  010F5C  EC5D  F08A         	call	_lcd_string	;wreg free
 14583                           
 14584                           ;vend.c: 442: break;
 14585  010F60  D03B               	goto	l2565
 14586  010F62  EC33  F098         	call	_Clear_Totals	;wreg free
 14587                           
 14588                           ;vend.c: 444: break;
 14589  010F66  D038               	goto	l2565
 14590  010F68  ECE4  F089         	call	_Reset_settings	;wreg free
 14591                           
 14592                           ;vend.c: 446: lcd_string(vendsetup, line1);
 14593  010F6C  0E2A               	movlw	low _vendsetup
 14594  010F6E  6E24               	movwf	lcd_string@lcdstring,c
 14595  010F70  0EFC               	movlw	high _vendsetup
 14596  010F72  6E25               	movwf	lcd_string@lcdstring+1,c
 14597  010F74  0E86               	movlw	low _line1
 14598  010F76  6EF6               	movwf	tblptrl,c
 14599  010F78                     	if	1	;There is more than 1 active tblptr byte
 14600  010F78  0EFB               	movlw	high _line1
 14601  010F7A  6EF7               	movwf	tblptrh,c
 14602  010F7C                     	endif
 14603  010F7C                     	if	1	;There are 3 active tblptr bytes
 14604  010F7C  0E00               	movlw	low (_line1 shr (0+16))
 14605  010F7E  6EF8               	movwf	tblptru,c
 14606  010F80                     	endif
 14607  010F80  0008               	tblrd		*
 14608  010F82  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14609  010F86  EC5D  F08A         	call	_lcd_string	;wreg free
 14610                           
 14611                           ;vend.c: 447: break;
 14612  010F8A  D026               	goto	l2565
 14613  010F8C                     l2570:
 14614  010F8C  942E               	bcf	_venflags+1,2,c
 14615                           
 14616                           ;vend.c: 450: Init_vendmem();
 14617  010F8E  EC4E  F08D         	call	_Init_vendmem	;wreg free
 14618                           
 14619                           ;vend.c: 451: lcd_string(servmsg, line1);
 14620  010F92  0E95               	movlw	low _servmsg
 14621  010F94  6E24               	movwf	lcd_string@lcdstring,c
 14622  010F96  0EFB               	movlw	high _servmsg
 14623  010F98  6E25               	movwf	lcd_string@lcdstring+1,c
 14624  010F9A  0E86               	movlw	low _line1
 14625  010F9C  6EF6               	movwf	tblptrl,c
 14626  010F9E                     	if	1	;There is more than 1 active tblptr byte
 14627  010F9E  0EFB               	movlw	high _line1
 14628  010FA0  6EF7               	movwf	tblptrh,c
 14629  010FA2                     	endif
 14630  010FA2                     	if	1	;There are 3 active tblptr bytes
 14631  010FA2  0E00               	movlw	low (_line1 shr (0+16))
 14632  010FA4  6EF8               	movwf	tblptru,c
 14633  010FA6                     	endif
 14634  010FA6  0008               	tblrd		*
 14635  010FA8  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14636  010FAC  EC5D  F08A         	call	_lcd_string	;wreg free
 14637                           
 14638                           ;vend.c: 453: }
 14639                           
 14640                           ;vend.c: 452: break;
 14641  010FB0  D013               	goto	l2565
 14642  010FB2                     l2563:
 14643  010FB2  503A               	movf	_buttons,w,c	;volatile
 14644                           
 14645                           ; Switch size 1, requested type "space"
 14646                           ; Number of cases is 6, Range of values is 1 to 128
 14647                           ; switch strategies available:
 14648                           ; Name         Instructions Cycles
 14649                           ; simple_byte           19    10 (average)
 14650                           ;	Chosen strategy is simple_byte
 14651  010FB4  0A01               	xorlw	1	; case 1
 14652  010FB6  B4D8               	btfsc	status,2,c
 14653  010FB8  D79E               	goto	l2564
 14654  010FBA  0A03               	xorlw	3	; case 2
 14655  010FBC  B4D8               	btfsc	status,2,c
 14656  010FBE  D7AD               	goto	l2566
 14657  010FC0  0A06               	xorlw	6	; case 4
 14658  010FC2  B4D8               	btfsc	status,2,c
 14659  010FC4  D7BC               	goto	l2567
 14660  010FC6  0A0C               	xorlw	12	; case 8
 14661  010FC8  B4D8               	btfsc	status,2,c
 14662  010FCA  D7CB               	goto	l2568
 14663  010FCC  0A18               	xorlw	24	; case 16
 14664  010FCE  B4D8               	btfsc	status,2,c
 14665  010FD0  D7CB               	goto	l2569
 14666  010FD2  0A90               	xorlw	144	; case 128
 14667  010FD4  B4D8               	btfsc	status,2,c
 14668  010FD6  D7DA               	goto	l2570
 14669  010FD8                     l2565:
 14670  010FD8  A42E               	btfss	_venflags+1,2,c
 14671  010FDA  0012               	return	
 14672  010FDC  D788               	goto	l2562
 14673  010FDE                     __end_of_Vend_setup:
 14674                           	opt stack 0
 14675                           tblptru	equ	0xFF8
 14676                           tblptrh	equ	0xFF7
 14677                           tblptrl	equ	0xFF6
 14678                           tablat	equ	0xFF5
 14679                           prodh	equ	0xFF4
 14680                           prodl	equ	0xFF3
 14681                           intcon	equ	0xFF2
 14682                           indf0	equ	0xFEF
 14683                           postinc0	equ	0xFEE
 14684                           fsr0h	equ	0xFEA
 14685                           fsr0l	equ	0xFE9
 14686                           wreg	equ	0xFE8
 14687                           indf1	equ	0xFE7
 14688                           postdec1	equ	0xFE5
 14689                           fsr1h	equ	0xFE2
 14690                           fsr1l	equ	0xFE1
 14691                           indf2	equ	0xFDF
 14692                           postinc2	equ	0xFDE
 14693                           fsr2h	equ	0xFDA
 14694                           fsr2l	equ	0xFD9
 14695                           status	equ	0xFD8
 14696                           
 14697 ;; *************** function _Vend_settime *****************
 14698 ;; Defined at:
 14699 ;;		line 457 in file "vend.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;		None
 14702 ;; Auto vars:     Size  Location     Type
 14703 ;;		None
 14704 ;; Return value:  Size  Location     Type
 14705 ;;                  1    wreg      void 
 14706 ;; Registers used:
 14707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14708 ;; Tracked objects:
 14709 ;;		On entry : 0/0
 14710 ;;		On exit  : 0/0
 14711 ;;		Unchanged: 0/0
 14712 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14717 ;;Total ram usage:        0 bytes
 14718 ;; Hardware stack levels used:    1
 14719 ;; Hardware stack levels required when called:   10
 14720 ;; This function calls:
 14721 ;;		_Read_Service
 14722 ;;		_Vend_timeset
 14723 ;;		_butindb
 14724 ;;		_get_channel
 14725 ;;		_lcd_string
 14726 ;; This function is called by:
 14727 ;;		_Vend_setup
 14728 ;; This function uses a non-reentrant model
 14729 ;;
 14730                           
 14731                           	psect	text77
 14732  012E08                     __ptext77:
 14733                           	opt stack 0
 14734  012E08                     _Vend_settime:
 14735                           	opt stack 18
 14736                           
 14737                           ;vend.c: 460: lcd_string(setimemsg, line1);
 14738                           
 14739                           ;incstack = 0
 14740  012E08  0E39               	movlw	low _setimemsg
 14741  012E0A  6E24               	movwf	lcd_string@lcdstring,c
 14742  012E0C  0EFD               	movlw	high _setimemsg
 14743  012E0E  6E25               	movwf	lcd_string@lcdstring+1,c
 14744  012E10  0E86               	movlw	low _line1
 14745  012E12  6EF6               	movwf	tblptrl,c
 14746  012E14                     	if	1	;There is more than 1 active tblptr byte
 14747  012E14  0EFB               	movlw	high _line1
 14748  012E16  6EF7               	movwf	tblptrh,c
 14749  012E18                     	endif
 14750  012E18                     	if	1	;There are 3 active tblptr bytes
 14751  012E18  0E00               	movlw	low (_line1 shr (0+16))
 14752  012E1A  6EF8               	movwf	tblptru,c
 14753  012E1C                     	endif
 14754  012E1C  0008               	tblrd		*
 14755  012E1E  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14756  012E22  EC5D  F08A         	call	_lcd_string	;wreg free
 14757                           
 14758                           ;vend.c: 461: buttons = butindb();
 14759  012E26  EC72  F097         	call	_butindb	;wreg free
 14760  012E2A  6E3A               	movwf	_buttons,c	;volatile
 14761                           
 14762                           ;vend.c: 462: venflags.settime = 1;
 14763  012E2C  8C2E               	bsf	_venflags+1,6,c
 14764                           
 14765                           ;vend.c: 464: while(venflags.settime)
 14766  012E2E  D010               	goto	l2578
 14767  012E30                     
 14768                           ;vend.c: 465: {
 14769                           ;vend.c: 466: buttons = butindb();
 14770  012E30  EC72  F097         	call	_butindb	;wreg free
 14771  012E34  6E3A               	movwf	_buttons,c	;volatile
 14772                           
 14773                           ;vend.c: 467: if(buttons != 0x00)
 14774  012E36  503A               	movf	_buttons,w,c	;volatile
 14775  012E38  B4D8               	btfsc	status,2,c
 14776  012E3A  D005               	goto	l2577
 14777                           
 14778                           ;vend.c: 468: {
 14779                           ;vend.c: 469: Vend_timeset(get_channel(buttons));
 14780  012E3C  503A               	movf	_buttons,w,c	;volatile
 14781  012E3E  ECCB  F09A         	call	_get_channel
 14782  012E42  EC4B  F086         	call	_Vend_timeset
 14783  012E46                     l2577:
 14784                           
 14785                           ;vend.c: 470: }
 14786                           ;vend.c: 471: if(Read_Service() == 0x00)
 14787  012E46  ECE7  F09A         	call	_Read_Service	;wreg free
 14788  012E4A  0900               	iorlw	0
 14789  012E4C  B4D8               	btfsc	status,2,c
 14790                           
 14791                           ;vend.c: 472: {
 14792                           ;vend.c: 473: venflags.settime = 0;
 14793  012E4E  9C2E               	bcf	_venflags+1,6,c
 14794  012E50                     l2578:
 14795  012E50  AC2E               	btfss	_venflags+1,6,c
 14796  012E52  0012               	return	
 14797  012E54  D7ED               	goto	l2576
 14798  012E56                     __end_of_Vend_settime:
 14799                           	opt stack 0
 14800                           tblptru	equ	0xFF8
 14801                           tblptrh	equ	0xFF7
 14802                           tblptrl	equ	0xFF6
 14803                           tablat	equ	0xFF5
 14804                           prodh	equ	0xFF4
 14805                           prodl	equ	0xFF3
 14806                           intcon	equ	0xFF2
 14807                           indf0	equ	0xFEF
 14808                           postinc0	equ	0xFEE
 14809                           fsr0h	equ	0xFEA
 14810                           fsr0l	equ	0xFE9
 14811                           wreg	equ	0xFE8
 14812                           indf1	equ	0xFE7
 14813                           postdec1	equ	0xFE5
 14814                           fsr1h	equ	0xFE2
 14815                           fsr1l	equ	0xFE1
 14816                           indf2	equ	0xFDF
 14817                           postinc2	equ	0xFDE
 14818                           fsr2h	equ	0xFDA
 14819                           fsr2l	equ	0xFD9
 14820                           status	equ	0xFD8
 14821                           
 14822 ;; *************** function _Vend_timeset *****************
 14823 ;; Defined at:
 14824 ;;		line 480 in file "vend.c"
 14825 ;; Parameters:    Size  Location     Type
 14826 ;;  channel         1    wreg     unsigned char 
 14827 ;; Auto vars:     Size  Location     Type
 14828 ;;  channel         1   15[BANK0 ] unsigned char 
 14829 ;;  chantime        1   14[BANK0 ] unsigned char 
 14830 ;; Return value:  Size  Location     Type
 14831 ;;                  1    wreg      void 
 14832 ;; Registers used:
 14833 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14834 ;; Tracked objects:
 14835 ;;		On entry : 0/0
 14836 ;;		On exit  : 0/0
 14837 ;;		Unchanged: 0/0
 14838 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14840 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14841 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14842 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14843 ;;Total ram usage:        4 bytes
 14844 ;; Hardware stack levels used:    1
 14845 ;; Hardware stack levels required when called:    9
 14846 ;; This function calls:
 14847 ;;		_DATAEE_ReadByte
 14848 ;;		_DATAEE_WriteByte
 14849 ;;		_butindb
 14850 ;;		_displ_time
 14851 ;;		_lcd_string
 14852 ;; This function is called by:
 14853 ;;		_Vend_settime
 14854 ;; This function uses a non-reentrant model
 14855 ;;
 14856                           
 14857                           	psect	text78
 14858  010C96                     __ptext78:
 14859                           	opt stack 0
 14860  010C96                     _Vend_timeset:
 14861                           	opt stack 18
 14862                           
 14863                           ;incstack = 0
 14864                           ;Vend_timeset@channel stored from wreg
 14865  010C96  0100               	movlb	0	; () banked
 14866  010C98  6FF0               	movwf	Vend_timeset@channel& (0+255),b
 14867                           
 14868                           ;vend.c: 482: venflags.mottime = 1;
 14869  010C9A  882E               	bsf	_venflags+1,4,c
 14870                           
 14871                           ;vend.c: 483: lcd_string(vendtimem, line1);
 14872  010C9C  0E10               	movlw	low _vendtimem
 14873  010C9E  6E24               	movwf	lcd_string@lcdstring,c
 14874  010CA0  0EFD               	movlw	high _vendtimem
 14875  010CA2  6E25               	movwf	lcd_string@lcdstring+1,c
 14876  010CA4  0E86               	movlw	low _line1
 14877  010CA6  6EF6               	movwf	tblptrl,c
 14878  010CA8                     	if	1	;There is more than 1 active tblptr byte
 14879  010CA8  0EFB               	movlw	high _line1
 14880  010CAA  6EF7               	movwf	tblptrh,c
 14881  010CAC                     	endif
 14882  010CAC                     	if	1	;There are 3 active tblptr bytes
 14883  010CAC  0E00               	movlw	low (_line1 shr (0+16))
 14884  010CAE  6EF8               	movwf	tblptru,c
 14885  010CB0                     	endif
 14886  010CB0  0008               	tblrd		*
 14887  010CB2  CFF5 F026          	movff	tablat,lcd_string@lcdline
 14888  010CB6  EC5D  F08A         	call	_lcd_string	;wreg free
 14889                           
 14890                           ;vend.c: 484: uint8_t chantime = DATAEE_ReadByte(chan1time + channel);
 14891  010CBA  0E32               	movlw	low _chan1time
 14892  010CBC  6EF6               	movwf	tblptrl,c
 14893  010CBE                     	if	1	;There is more than 1 active tblptr byte
 14894  010CBE  0EFB               	movlw	high _chan1time
 14895  010CC0  6EF7               	movwf	tblptrh,c
 14896  010CC2                     	endif
 14897  010CC2                     	if	1	;There are 3 active tblptr bytes
 14898  010CC2  0E00               	movlw	low (_chan1time shr (0+16))
 14899  010CC4  6EF8               	movwf	tblptru,c
 14900  010CC6                     	endif
 14901  010CC6  0009               	tblrd		*+
 14902  010CC8  CFF5 F0ED          	movff	tablat,??_Vend_timeset
 14903  010CCC  0009               	tblrd		*+
 14904  010CCE  CFF5 F0EE          	movff	tablat,??_Vend_timeset+1
 14905  010CD2  0100               	movlb	0	; () banked
 14906  010CD4  51F0               	movf	Vend_timeset@channel& (0+255),w,b
 14907  010CD6  25ED               	addwf	??_Vend_timeset& (0+255),w,b
 14908  010CD8  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 14909  010CDA  0E00               	movlw	0
 14910  010CDC  21EE               	addwfc	(??_Vend_timeset+1)& (0+255),w,b
 14911  010CDE  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 14912  010CE0  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 14913  010CE4  0100               	movlb	0	; () banked
 14914  010CE6  6FEF               	movwf	Vend_timeset@chantime& (0+255),b
 14915                           
 14916                           ; BSR set to: 0
 14917                           ;vend.c: 485: displ_time(chantime, channel);
 14918  010CE8  C0F0  F02A         	movff	Vend_timeset@channel,displ_time@channel
 14919  010CEC  51EF               	movf	Vend_timeset@chantime& (0+255),w,b
 14920  010CEE  EC37  F090         	call	_displ_time
 14921                           
 14922                           ;vend.c: 486: while(venflags.mottime)
 14923  010CF2  D05D               	goto	l2587
 14924  010CF4                     
 14925                           ;vend.c: 487: {
 14926                           ;vend.c: 488: buttons = butindb();
 14927  010CF4  EC72  F097         	call	_butindb	;wreg free
 14928  010CF8  6E3A               	movwf	_buttons,c	;volatile
 14929                           
 14930                           ;vend.c: 489: switch(buttons)
 14931  010CFA  D04F               	goto	l2585
 14932  010CFC  0100               	movlb	0	; () banked
 14933  010CFE  2BEF               	incf	Vend_timeset@chantime& (0+255),f,b
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;vend.c: 492: DATAEE_WriteByte(chan1time + channel, chantime);
 14937  010D00  0E32               	movlw	low _chan1time
 14938  010D02  6EF6               	movwf	tblptrl,c
 14939  010D04                     	if	1	;There is more than 1 active tblptr byte
 14940  010D04  0EFB               	movlw	high _chan1time
 14941  010D06  6EF7               	movwf	tblptrh,c
 14942  010D08                     	endif
 14943  010D08                     	if	1	;There are 3 active tblptr bytes
 14944  010D08  0E00               	movlw	low (_chan1time shr (0+16))
 14945  010D0A  6EF8               	movwf	tblptru,c
 14946  010D0C                     	endif
 14947  010D0C  0009               	tblrd		*+
 14948  010D0E  CFF5 F0ED          	movff	tablat,??_Vend_timeset
 14949  010D12  0009               	tblrd		*+
 14950  010D14  CFF5 F0EE          	movff	tablat,??_Vend_timeset+1
 14951  010D18  51F0               	movf	Vend_timeset@channel& (0+255),w,b
 14952  010D1A  25ED               	addwf	??_Vend_timeset& (0+255),w,b
 14953  010D1C  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
 14954  010D1E  0E00               	movlw	0
 14955  010D20  21EE               	addwfc	(??_Vend_timeset+1)& (0+255),w,b
 14956  010D22  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
 14957  010D24  C0EF  F01F         	movff	Vend_timeset@chantime,DATAEE_WriteByte@bData
 14958  010D28  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 14959                           
 14960                           ;vend.c: 493: displ_time(chantime, channel);
 14961  010D2C  C0F0  F02A         	movff	Vend_timeset@channel,displ_time@channel
 14962  010D30  0100               	movlb	0	; () banked
 14963  010D32  51EF               	movf	Vend_timeset@chantime& (0+255),w,b
 14964  010D34  EC37  F090         	call	_displ_time
 14965                           
 14966                           ;vend.c: 494: break;
 14967  010D38  D03A               	goto	l2587
 14968  010D3A  0100               	movlb	0	; () banked
 14969  010D3C  07EF               	decf	Vend_timeset@chantime& (0+255),f,b
 14970                           
 14971                           ; BSR set to: 0
 14972                           ;vend.c: 496: DATAEE_WriteByte(chan1time + channel, chantime);
 14973  010D3E  0E32               	movlw	low _chan1time
 14974  010D40  6EF6               	movwf	tblptrl,c
 14975  010D42                     	if	1	;There is more than 1 active tblptr byte
 14976  010D42  0EFB               	movlw	high _chan1time
 14977  010D44  6EF7               	movwf	tblptrh,c
 14978  010D46                     	endif
 14979  010D46                     	if	1	;There are 3 active tblptr bytes
 14980  010D46  0E00               	movlw	low (_chan1time shr (0+16))
 14981  010D48  6EF8               	movwf	tblptru,c
 14982  010D4A                     	endif
 14983  010D4A  0009               	tblrd		*+
 14984  010D4C  CFF5 F0ED          	movff	tablat,??_Vend_timeset
 14985  010D50  0009               	tblrd		*+
 14986  010D52  CFF5 F0EE          	movff	tablat,??_Vend_timeset+1
 14987  010D56  51F0               	movf	Vend_timeset@channel& (0+255),w,b
 14988  010D58  25ED               	addwf	??_Vend_timeset& (0+255),w,b
 14989  010D5A  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
 14990  010D5C  0E00               	movlw	0
 14991  010D5E  21EE               	addwfc	(??_Vend_timeset+1)& (0+255),w,b
 14992  010D60  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
 14993  010D62  C0EF  F01F         	movff	Vend_timeset@chantime,DATAEE_WriteByte@bData
 14994  010D66  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 14995                           
 14996                           ;vend.c: 497: displ_time(chantime, channel);
 14997  010D6A  C0F0  F02A         	movff	Vend_timeset@channel,displ_time@channel
 14998  010D6E  0100               	movlb	0	; () banked
 14999  010D70  51EF               	movf	Vend_timeset@chantime& (0+255),w,b
 15000  010D72  EC37  F090         	call	_displ_time
 15001                           
 15002                           ;vend.c: 498: break;
 15003  010D76  D01B               	goto	l2587
 15004  010D78                     l2589:
 15005  010D78  982E               	bcf	_venflags+1,4,c
 15006                           
 15007                           ;vend.c: 500: lcd_string(setimemsg, line1);
 15008  010D7A  0E39               	movlw	low _setimemsg
 15009  010D7C  6E24               	movwf	lcd_string@lcdstring,c
 15010  010D7E  0EFD               	movlw	high _setimemsg
 15011  010D80  6E25               	movwf	lcd_string@lcdstring+1,c
 15012  010D82  0E86               	movlw	low _line1
 15013  010D84  6EF6               	movwf	tblptrl,c
 15014  010D86                     	if	1	;There is more than 1 active tblptr byte
 15015  010D86  0EFB               	movlw	high _line1
 15016  010D88  6EF7               	movwf	tblptrh,c
 15017  010D8A                     	endif
 15018  010D8A                     	if	1	;There are 3 active tblptr bytes
 15019  010D8A  0E00               	movlw	low (_line1 shr (0+16))
 15020  010D8C  6EF8               	movwf	tblptru,c
 15021  010D8E                     	endif
 15022  010D8E  0008               	tblrd		*
 15023  010D90  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15024  010D94  EC5D  F08A         	call	_lcd_string	;wreg free
 15025                           
 15026                           ;vend.c: 502: }
 15027                           
 15028                           ;vend.c: 501: break;
 15029  010D98  D00A               	goto	l2587
 15030  010D9A                     l2585:
 15031  010D9A  503A               	movf	_buttons,w,c	;volatile
 15032                           
 15033                           ; Switch size 1, requested type "space"
 15034                           ; Number of cases is 3, Range of values is 1 to 128
 15035                           ; switch strategies available:
 15036                           ; Name         Instructions Cycles
 15037                           ; simple_byte           10     6 (average)
 15038                           ;	Chosen strategy is simple_byte
 15039  010D9C  0A01               	xorlw	1	; case 1
 15040  010D9E  B4D8               	btfsc	status,2,c
 15041  010DA0  D7AD               	goto	l2586
 15042  010DA2  0A03               	xorlw	3	; case 2
 15043  010DA4  B4D8               	btfsc	status,2,c
 15044  010DA6  D7C9               	goto	l2588
 15045  010DA8  0A82               	xorlw	130	; case 128
 15046  010DAA  B4D8               	btfsc	status,2,c
 15047  010DAC  D7E5               	goto	l2589
 15048  010DAE                     l2587:
 15049  010DAE  A82E               	btfss	_venflags+1,4,c
 15050  010DB0  0012               	return	
 15051  010DB2  D7A0               	goto	l2584
 15052  010DB4                     __end_of_Vend_timeset:
 15053                           	opt stack 0
 15054                           tblptru	equ	0xFF8
 15055                           tblptrh	equ	0xFF7
 15056                           tblptrl	equ	0xFF6
 15057                           tablat	equ	0xFF5
 15058                           prodh	equ	0xFF4
 15059                           prodl	equ	0xFF3
 15060                           intcon	equ	0xFF2
 15061                           indf0	equ	0xFEF
 15062                           postinc0	equ	0xFEE
 15063                           fsr0h	equ	0xFEA
 15064                           fsr0l	equ	0xFE9
 15065                           wreg	equ	0xFE8
 15066                           indf1	equ	0xFE7
 15067                           postdec1	equ	0xFE5
 15068                           fsr1h	equ	0xFE2
 15069                           fsr1l	equ	0xFE1
 15070                           indf2	equ	0xFDF
 15071                           postinc2	equ	0xFDE
 15072                           fsr2h	equ	0xFDA
 15073                           fsr2l	equ	0xFD9
 15074                           status	equ	0xFD8
 15075                           
 15076 ;; *************** function _displ_time *****************
 15077 ;; Defined at:
 15078 ;;		line 98 in file "lcd.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;  motortime       1    wreg     unsigned char 
 15081 ;;  channel         1   31[COMRAM] unsigned char 
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;  motortime       1   32[COMRAM] unsigned char 
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 15093 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15094 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15097 ;;Total ram usage:        2 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; Hardware stack levels required when called:    8
 15100 ;; This function calls:
 15101 ;;		_displ_hex
 15102 ;;		_lcd_string
 15103 ;;		_lcd_writeC
 15104 ;; This function is called by:
 15105 ;;		_Vend_timeset
 15106 ;; This function uses a non-reentrant model
 15107 ;;
 15108                           
 15109                           	psect	text79
 15110  01206E                     __ptext79:
 15111                           	opt stack 0
 15112  01206E                     _displ_time:
 15113                           	opt stack 18
 15114                           
 15115                           ;incstack = 0
 15116                           ;displ_time@motortime stored from wreg
 15117  01206E  6E2B               	movwf	displ_time@motortime,c
 15118                           
 15119                           ;lcd.c: 100: lcd_string(clrline, line3);
 15120  012070  0E6B               	movlw	low _clrline
 15121  012072  6E24               	movwf	lcd_string@lcdstring,c
 15122  012074  0EFE               	movlw	high _clrline
 15123  012076  6E25               	movwf	lcd_string@lcdstring+1,c
 15124  012078  0E84               	movlw	low _line3
 15125  01207A  6EF6               	movwf	tblptrl,c
 15126  01207C                     	if	1	;There is more than 1 active tblptr byte
 15127  01207C  0EFB               	movlw	high _line3
 15128  01207E  6EF7               	movwf	tblptrh,c
 15129  012080                     	endif
 15130  012080                     	if	1	;There are 3 active tblptr bytes
 15131  012080  0E00               	movlw	low (_line3 shr (0+16))
 15132  012082  6EF8               	movwf	tblptru,c
 15133  012084                     	endif
 15134  012084  0008               	tblrd		*
 15135  012086  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15136  01208A  EC5D  F08A         	call	_lcd_string	;wreg free
 15137                           
 15138                           ;lcd.c: 101: lcd_string(clrline, line4);
 15139  01208E  0E6B               	movlw	low _clrline
 15140  012090  6E24               	movwf	lcd_string@lcdstring,c
 15141  012092  0EFE               	movlw	high _clrline
 15142  012094  6E25               	movwf	lcd_string@lcdstring+1,c
 15143  012096  0E83               	movlw	low _line4
 15144  012098  6EF6               	movwf	tblptrl,c
 15145  01209A                     	if	1	;There is more than 1 active tblptr byte
 15146  01209A  0EFB               	movlw	high _line4
 15147  01209C  6EF7               	movwf	tblptrh,c
 15148  01209E                     	endif
 15149  01209E                     	if	1	;There are 3 active tblptr bytes
 15150  01209E  0E00               	movlw	low (_line4 shr (0+16))
 15151  0120A0  6EF8               	movwf	tblptru,c
 15152  0120A2                     	endif
 15153  0120A2  0008               	tblrd		*
 15154  0120A4  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15155  0120A8  EC5D  F08A         	call	_lcd_string	;wreg free
 15156                           
 15157                           ;lcd.c: 102: lcd_string(chanmsg, line3);
 15158  0120AC  0E10               	movlw	low _chanmsg
 15159  0120AE  6E24               	movwf	lcd_string@lcdstring,c
 15160  0120B0  0EFF               	movlw	high _chanmsg
 15161  0120B2  6E25               	movwf	lcd_string@lcdstring+1,c
 15162  0120B4  0E84               	movlw	low _line3
 15163  0120B6  6EF6               	movwf	tblptrl,c
 15164  0120B8                     	if	1	;There is more than 1 active tblptr byte
 15165  0120B8  0EFB               	movlw	high _line3
 15166  0120BA  6EF7               	movwf	tblptrh,c
 15167  0120BC                     	endif
 15168  0120BC                     	if	1	;There are 3 active tblptr bytes
 15169  0120BC  0E00               	movlw	low (_line3 shr (0+16))
 15170  0120BE  6EF8               	movwf	tblptru,c
 15171  0120C0                     	endif
 15172  0120C0  0008               	tblrd		*
 15173  0120C2  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15174  0120C6  EC5D  F08A         	call	_lcd_string	;wreg free
 15175                           
 15176                           ;lcd.c: 103: lcd_writeC(channel++ | 0x30);
 15177  0120CA  502A               	movf	displ_time@channel,w,c
 15178  0120CC  0930               	iorlw	48
 15179  0120CE  EC27  F094         	call	_lcd_writeC
 15180  0120D2  2A2A               	incf	displ_time@channel,f,c
 15181                           
 15182                           ;lcd.c: 104: lcd_string(timemsg, line4);
 15183  0120D4  0EA7               	movlw	low _timemsg
 15184  0120D6  6E24               	movwf	lcd_string@lcdstring,c
 15185  0120D8  0EFE               	movlw	high _timemsg
 15186  0120DA  6E25               	movwf	lcd_string@lcdstring+1,c
 15187  0120DC  0E83               	movlw	low _line4
 15188  0120DE  6EF6               	movwf	tblptrl,c
 15189  0120E0                     	if	1	;There is more than 1 active tblptr byte
 15190  0120E0  0EFB               	movlw	high _line4
 15191  0120E2  6EF7               	movwf	tblptrh,c
 15192  0120E4                     	endif
 15193  0120E4                     	if	1	;There are 3 active tblptr bytes
 15194  0120E4  0E00               	movlw	low (_line4 shr (0+16))
 15195  0120E6  6EF8               	movwf	tblptru,c
 15196  0120E8                     	endif
 15197  0120E8  0008               	tblrd		*
 15198  0120EA  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15199  0120EE  EC5D  F08A         	call	_lcd_string	;wreg free
 15200                           
 15201                           ;lcd.c: 105: displ_hex((uint8_t) motortime);
 15202  0120F2  502B               	movf	displ_time@motortime,w,c
 15203  0120F4  6E27               	movwf	displ_hex@hexnum,c
 15204  0120F6  6A28               	clrf	displ_hex@hexnum+1,c
 15205  0120F8  6A29               	clrf	displ_hex@hexnum+2,c
 15206  0120FA  ECAB  F08D         	call	_displ_hex	;wreg free
 15207  0120FE  0012               	return		;funcret
 15208  012100                     __end_of_displ_time:
 15209                           	opt stack 0
 15210                           tblptru	equ	0xFF8
 15211                           tblptrh	equ	0xFF7
 15212                           tblptrl	equ	0xFF6
 15213                           tablat	equ	0xFF5
 15214                           prodh	equ	0xFF4
 15215                           prodl	equ	0xFF3
 15216                           intcon	equ	0xFF2
 15217                           indf0	equ	0xFEF
 15218                           postinc0	equ	0xFEE
 15219                           fsr0h	equ	0xFEA
 15220                           fsr0l	equ	0xFE9
 15221                           wreg	equ	0xFE8
 15222                           indf1	equ	0xFE7
 15223                           postdec1	equ	0xFE5
 15224                           fsr1h	equ	0xFE2
 15225                           fsr1l	equ	0xFE1
 15226                           indf2	equ	0xFDF
 15227                           postinc2	equ	0xFDE
 15228                           fsr2h	equ	0xFDA
 15229                           fsr2l	equ	0xFD9
 15230                           status	equ	0xFD8
 15231                           
 15232 ;; *************** function _Sens_off *****************
 15233 ;; Defined at:
 15234 ;;		line 562 in file "vend.c"
 15235 ;; Parameters:    Size  Location     Type
 15236 ;;		None
 15237 ;; Auto vars:     Size  Location     Type
 15238 ;;		None
 15239 ;; Return value:  Size  Location     Type
 15240 ;;                  1    wreg      void 
 15241 ;; Registers used:
 15242 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15243 ;; Tracked objects:
 15244 ;;		On entry : 0/0
 15245 ;;		On exit  : 0/0
 15246 ;;		Unchanged: 0/0
 15247 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 15248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15250 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15251 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15252 ;;Total ram usage:        2 bytes
 15253 ;; Hardware stack levels used:    1
 15254 ;; Hardware stack levels required when called:   10
 15255 ;; This function calls:
 15256 ;;		_Read_Service
 15257 ;;		_butindb
 15258 ;;		_get_channel
 15259 ;;		_lcd_string
 15260 ;;		_off_sens
 15261 ;; This function is called by:
 15262 ;;		_Vend_setup
 15263 ;; This function uses a non-reentrant model
 15264 ;;
 15265                           
 15266                           	psect	text80
 15267  012532                     __ptext80:
 15268                           	opt stack 0
 15269  012532                     _Sens_off:
 15270                           	opt stack 18
 15271                           
 15272                           ;vend.c: 564: _delay((unsigned long)((250)*(64000000/4000.0)));
 15273                           
 15274                           ;incstack = 0
 15275  012532  0E15               	movlw	21
 15276  012534  0100               	movlb	0	; () banked
 15277  012536  6FE5               	movwf	(??_Sens_off+1)& (0+255),b
 15278  012538  0E4B               	movlw	75
 15279  01253A  6FE4               	movwf	??_Sens_off& (0+255),b
 15280  01253C  0EBE               	movlw	190
 15281  01253E                     u7397:
 15282  01253E  2EE8               	decfsz	wreg,f,c
 15283  012540  D7FE               	bra	u7397
 15284  012542  2FE4               	decfsz	??_Sens_off& (0+255),f,b
 15285  012544  D7FC               	bra	u7397
 15286  012546  2FE5               	decfsz	(??_Sens_off+1)& (0+255),f,b
 15287  012548  D7FA               	bra	u7397
 15288  01254A  F000               	nop	
 15289                           
 15290                           ;vend.c: 565: buttons = butindb();
 15291  01254C  EC72  F097         	call	_butindb	;wreg free
 15292  012550  D002               	goto	L15
 15293  012552                     
 15294                           ;vend.c: 567: {
 15295                           ;vend.c: 568: buttons = butindb();
 15296  012552  EC72  F097         	call	_butindb	;wreg free
 15297  012556                     L15:
 15298  012556  6E3A               	movwf	_buttons,c	;volatile
 15299  012558  0E04               	movlw	4
 15300  01255A  183A               	xorwf	_buttons,w,c	;volatile
 15301  01255C  B4D8               	btfsc	status,2,c
 15302  01255E  D7F9               	goto	l2615
 15303                           
 15304                           ;vend.c: 569: }
 15305                           ;vend.c: 570: venflags.nosense = 1;
 15306  012560  8A2E               	bsf	_venflags+1,5,c
 15307                           
 15308                           ;vend.c: 571: lcd_string(setimemsg, line1);
 15309  012562  0E39               	movlw	low _setimemsg
 15310  012564  6E24               	movwf	lcd_string@lcdstring,c
 15311  012566  0EFD               	movlw	high _setimemsg
 15312  012568  6E25               	movwf	lcd_string@lcdstring+1,c
 15313  01256A  0E86               	movlw	low _line1
 15314  01256C  6EF6               	movwf	tblptrl,c
 15315  01256E                     	if	1	;There is more than 1 active tblptr byte
 15316  01256E  0EFB               	movlw	high _line1
 15317  012570  6EF7               	movwf	tblptrh,c
 15318  012572                     	endif
 15319  012572                     	if	1	;There are 3 active tblptr bytes
 15320  012572  0E00               	movlw	low (_line1 shr (0+16))
 15321  012574  6EF8               	movwf	tblptru,c
 15322  012576                     	endif
 15323  012576  0008               	tblrd		*
 15324  012578  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15325  01257C  EC5D  F08A         	call	_lcd_string	;wreg free
 15326                           
 15327                           ;vend.c: 572: buttons = butindb();
 15328  012580  EC72  F097         	call	_butindb	;wreg free
 15329  012584  6E3A               	movwf	_buttons,c	;volatile
 15330                           
 15331                           ;vend.c: 573: while(venflags.nosense)
 15332  012586  D010               	goto	l2620
 15333  012588                     
 15334                           ;vend.c: 574: {
 15335                           ;vend.c: 575: buttons = butindb();
 15336  012588  EC72  F097         	call	_butindb	;wreg free
 15337  01258C  6E3A               	movwf	_buttons,c	;volatile
 15338                           
 15339                           ;vend.c: 576: if(buttons != 0x00)
 15340  01258E  503A               	movf	_buttons,w,c	;volatile
 15341  012590  B4D8               	btfsc	status,2,c
 15342  012592  D005               	goto	l2619
 15343                           
 15344                           ;vend.c: 577: {
 15345                           ;vend.c: 578: off_sens(get_channel(buttons));
 15346  012594  503A               	movf	_buttons,w,c	;volatile
 15347  012596  ECCB  F09A         	call	_get_channel
 15348  01259A  ECF1  F088         	call	_off_sens
 15349  01259E                     l2619:
 15350                           
 15351                           ;vend.c: 579: }
 15352                           ;vend.c: 580: if(Read_Service() == 0x00)
 15353  01259E  ECE7  F09A         	call	_Read_Service	;wreg free
 15354  0125A2  0900               	iorlw	0
 15355  0125A4  B4D8               	btfsc	status,2,c
 15356                           
 15357                           ;vend.c: 581: {
 15358                           ;vend.c: 582: venflags.nosense = 0;
 15359  0125A6  9A2E               	bcf	_venflags+1,5,c
 15360  0125A8                     l2620:
 15361  0125A8  AA2E               	btfss	_venflags+1,5,c
 15362  0125AA  0012               	return	
 15363  0125AC  D7ED               	goto	l2618
 15364  0125AE                     __end_of_Sens_off:
 15365                           	opt stack 0
 15366                           tblptru	equ	0xFF8
 15367                           tblptrh	equ	0xFF7
 15368                           tblptrl	equ	0xFF6
 15369                           tablat	equ	0xFF5
 15370                           prodh	equ	0xFF4
 15371                           prodl	equ	0xFF3
 15372                           intcon	equ	0xFF2
 15373                           indf0	equ	0xFEF
 15374                           postinc0	equ	0xFEE
 15375                           fsr0h	equ	0xFEA
 15376                           fsr0l	equ	0xFE9
 15377                           wreg	equ	0xFE8
 15378                           indf1	equ	0xFE7
 15379                           postdec1	equ	0xFE5
 15380                           fsr1h	equ	0xFE2
 15381                           fsr1l	equ	0xFE1
 15382                           indf2	equ	0xFDF
 15383                           postinc2	equ	0xFDE
 15384                           fsr2h	equ	0xFDA
 15385                           fsr2l	equ	0xFD9
 15386                           status	equ	0xFD8
 15387                           
 15388 ;; *************** function _off_sens *****************
 15389 ;; Defined at:
 15390 ;;		line 589 in file "vend.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;  channel         1    wreg     unsigned char 
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;  channel         1    0[BANK0 ] unsigned char 
 15395 ;;  senseflags      1    2[BANK0 ] unsigned char 
 15396 ;;  chanbit         1    1[BANK0 ] unsigned char 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;                  1    wreg      void 
 15399 ;; Registers used:
 15400 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 15406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15407 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15409 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15410 ;;Total ram usage:        3 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    9
 15413 ;; This function calls:
 15414 ;;		_DATAEE_ReadByte
 15415 ;;		_DATAEE_WriteByte
 15416 ;;		_butindb
 15417 ;;		_displ_sflags
 15418 ;;		_lcd_string
 15419 ;; This function is called by:
 15420 ;;		_Sens_off
 15421 ;; This function uses a non-reentrant model
 15422 ;;
 15423                           
 15424                           	psect	text81
 15425  0111E2                     __ptext81:
 15426                           	opt stack 0
 15427  0111E2                     _off_sens:
 15428                           	opt stack 18
 15429                           
 15430                           ;incstack = 0
 15431                           ;off_sens@channel stored from wreg
 15432  0111E2  0100               	movlb	0	; () banked
 15433  0111E4  6FE1               	movwf	off_sens@channel& (0+255),b
 15434                           
 15435                           ;vend.c: 591: uint8_t chanbit = buttons;
 15436  0111E6  C03A  F0E2         	movff	_buttons,off_sens@chanbit	;volatile
 15437                           
 15438                           ;vend.c: 592: venflags.sensno = 1;
 15439  0111EA  8E2E               	bsf	_venflags+1,7,c
 15440                           
 15441                           ;vend.c: 593: uint8_t senseflags = DATAEE_ReadByte(sensorflags);
 15442  0111EC  0E34               	movlw	low _sensorflags
 15443  0111EE  6EF6               	movwf	tblptrl,c
 15444  0111F0                     	if	1	;There is more than 1 active tblptr byte
 15445  0111F0  0EFB               	movlw	high _sensorflags
 15446  0111F2  6EF7               	movwf	tblptrh,c
 15447  0111F4                     	endif
 15448  0111F4                     	if	1	;There are 3 active tblptr bytes
 15449  0111F4  0E00               	movlw	low (_sensorflags shr (0+16))
 15450  0111F6  6EF8               	movwf	tblptru,c
 15451  0111F8                     	endif
 15452  0111F8  0009               	tblrd		*+
 15453  0111FA  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 15454  0111FE  000A               	tblrd		*-
 15455  011200  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 15456  011204  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 15457  011208  0100               	movlb	0	; () banked
 15458  01120A  6FE3               	movwf	off_sens@senseflags& (0+255),b
 15459                           
 15460                           ; BSR set to: 0
 15461                           ;vend.c: 594: displ_sflags(senseflags, channel, chanbit);
 15462  01120C  C0E1  F029         	movff	off_sens@channel,displ_sflags@chanel
 15463  011210  C0E2  F02A         	movff	off_sens@chanbit,displ_sflags@chanbit
 15464  011214  51E3               	movf	off_sens@senseflags& (0+255),w,b
 15465  011216  EC06  F08E         	call	_displ_sflags
 15466                           
 15467                           ;vend.c: 596: while(venflags.sensno)
 15468  01121A  D05A               	goto	l2629
 15469  01121C                     
 15470                           ;vend.c: 597: {
 15471                           ;vend.c: 598: buttons = butindb();
 15472  01121C  EC72  F097         	call	_butindb	;wreg free
 15473  011220  6E3A               	movwf	_buttons,c	;volatile
 15474                           
 15475                           ;vend.c: 599: switch(buttons)
 15476  011222  D04C               	goto	l2627
 15477  011224  0100               	movlb	0	; () banked
 15478  011226  51E2               	movf	off_sens@chanbit& (0+255),w,b
 15479  011228  0AFF               	xorlw	255
 15480  01122A  15E3               	andwf	off_sens@senseflags& (0+255),w,b
 15481  01122C  6FE3               	movwf	off_sens@senseflags& (0+255),b
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;vend.c: 603: DATAEE_WriteByte(sensorflags, senseflags);
 15485  01122E  0E34               	movlw	low _sensorflags
 15486  011230  6EF6               	movwf	tblptrl,c
 15487  011232                     	if	1	;There is more than 1 active tblptr byte
 15488  011232  0EFB               	movlw	high _sensorflags
 15489  011234  6EF7               	movwf	tblptrh,c
 15490  011236                     	endif
 15491  011236                     	if	1	;There are 3 active tblptr bytes
 15492  011236  0E00               	movlw	low (_sensorflags shr (0+16))
 15493  011238  6EF8               	movwf	tblptru,c
 15494  01123A                     	endif
 15495  01123A  0009               	tblrd		*+
 15496  01123C  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 15497  011240  000A               	tblrd		*-
 15498  011242  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 15499  011246  C0E3  F01F         	movff	off_sens@senseflags,DATAEE_WriteByte@bData
 15500  01124A  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 15501                           
 15502                           ;vend.c: 604: displ_sflags(senseflags, channel, chanbit);
 15503  01124E  C0E1  F029         	movff	off_sens@channel,displ_sflags@chanel
 15504  011252  C0E2  F02A         	movff	off_sens@chanbit,displ_sflags@chanbit
 15505  011256  0100               	movlb	0	; () banked
 15506  011258  51E3               	movf	off_sens@senseflags& (0+255),w,b
 15507  01125A  EC06  F08E         	call	_displ_sflags
 15508                           
 15509                           ;vend.c: 605: break;
 15510  01125E  D038               	goto	l2629
 15511  011260  0100               	movlb	0	; () banked
 15512  011262  51E3               	movf	off_sens@senseflags& (0+255),w,b
 15513  011264  11E2               	iorwf	off_sens@chanbit& (0+255),w,b
 15514  011266  6FE3               	movwf	off_sens@senseflags& (0+255),b
 15515                           
 15516                           ; BSR set to: 0
 15517                           ;vend.c: 608: DATAEE_WriteByte(sensorflags, senseflags);
 15518  011268  0E34               	movlw	low _sensorflags
 15519  01126A  6EF6               	movwf	tblptrl,c
 15520  01126C                     	if	1	;There is more than 1 active tblptr byte
 15521  01126C  0EFB               	movlw	high _sensorflags
 15522  01126E  6EF7               	movwf	tblptrh,c
 15523  011270                     	endif
 15524  011270                     	if	1	;There are 3 active tblptr bytes
 15525  011270  0E00               	movlw	low (_sensorflags shr (0+16))
 15526  011272  6EF8               	movwf	tblptru,c
 15527  011274                     	endif
 15528  011274  0009               	tblrd		*+
 15529  011276  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 15530  01127A  000A               	tblrd		*-
 15531  01127C  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 15532  011280  C0E3  F01F         	movff	off_sens@senseflags,DATAEE_WriteByte@bData
 15533  011284  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 15534                           
 15535                           ;vend.c: 609: displ_sflags(senseflags, channel, chanbit);
 15536  011288  C0E1  F029         	movff	off_sens@channel,displ_sflags@chanel
 15537  01128C  C0E2  F02A         	movff	off_sens@chanbit,displ_sflags@chanbit
 15538  011290  0100               	movlb	0	; () banked
 15539  011292  51E3               	movf	off_sens@senseflags& (0+255),w,b
 15540  011294  EC06  F08E         	call	_displ_sflags
 15541                           
 15542                           ;vend.c: 610: break;
 15543  011298  D01B               	goto	l2629
 15544  01129A                     l2631:
 15545  01129A  9E2E               	bcf	_venflags+1,7,c
 15546                           
 15547                           ;vend.c: 612: lcd_string(setimemsg, line1);
 15548  01129C  0E39               	movlw	low _setimemsg
 15549  01129E  6E24               	movwf	lcd_string@lcdstring,c
 15550  0112A0  0EFD               	movlw	high _setimemsg
 15551  0112A2  6E25               	movwf	lcd_string@lcdstring+1,c
 15552  0112A4  0E86               	movlw	low _line1
 15553  0112A6  6EF6               	movwf	tblptrl,c
 15554  0112A8                     	if	1	;There is more than 1 active tblptr byte
 15555  0112A8  0EFB               	movlw	high _line1
 15556  0112AA  6EF7               	movwf	tblptrh,c
 15557  0112AC                     	endif
 15558  0112AC                     	if	1	;There are 3 active tblptr bytes
 15559  0112AC  0E00               	movlw	low (_line1 shr (0+16))
 15560  0112AE  6EF8               	movwf	tblptru,c
 15561  0112B0                     	endif
 15562  0112B0  0008               	tblrd		*
 15563  0112B2  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15564  0112B6  EC5D  F08A         	call	_lcd_string	;wreg free
 15565                           
 15566                           ;vend.c: 614: }
 15567                           
 15568                           ;vend.c: 613: break;
 15569  0112BA  D00A               	goto	l2629
 15570  0112BC                     l2627:
 15571  0112BC  503A               	movf	_buttons,w,c	;volatile
 15572                           
 15573                           ; Switch size 1, requested type "space"
 15574                           ; Number of cases is 3, Range of values is 1 to 128
 15575                           ; switch strategies available:
 15576                           ; Name         Instructions Cycles
 15577                           ; simple_byte           10     6 (average)
 15578                           ;	Chosen strategy is simple_byte
 15579  0112BE  0A01               	xorlw	1	; case 1
 15580  0112C0  B4D8               	btfsc	status,2,c
 15581  0112C2  D7B0               	goto	l2628
 15582  0112C4  0A03               	xorlw	3	; case 2
 15583  0112C6  B4D8               	btfsc	status,2,c
 15584  0112C8  D7CB               	goto	l2630
 15585  0112CA  0A82               	xorlw	130	; case 128
 15586  0112CC  B4D8               	btfsc	status,2,c
 15587  0112CE  D7E5               	goto	l2631
 15588  0112D0                     l2629:
 15589  0112D0  AE2E               	btfss	_venflags+1,7,c
 15590  0112D2  0012               	return	
 15591  0112D4  D7A3               	goto	l2626
 15592  0112D6                     __end_of_off_sens:
 15593                           	opt stack 0
 15594                           tblptru	equ	0xFF8
 15595                           tblptrh	equ	0xFF7
 15596                           tblptrl	equ	0xFF6
 15597                           tablat	equ	0xFF5
 15598                           prodh	equ	0xFF4
 15599                           prodl	equ	0xFF3
 15600                           intcon	equ	0xFF2
 15601                           indf0	equ	0xFEF
 15602                           postinc0	equ	0xFEE
 15603                           fsr0h	equ	0xFEA
 15604                           fsr0l	equ	0xFE9
 15605                           wreg	equ	0xFE8
 15606                           indf1	equ	0xFE7
 15607                           postdec1	equ	0xFE5
 15608                           fsr1h	equ	0xFE2
 15609                           fsr1l	equ	0xFE1
 15610                           indf2	equ	0xFDF
 15611                           postinc2	equ	0xFDE
 15612                           fsr2h	equ	0xFDA
 15613                           fsr2l	equ	0xFD9
 15614                           status	equ	0xFD8
 15615                           
 15616 ;; *************** function _displ_sflags *****************
 15617 ;; Defined at:
 15618 ;;		line 79 in file "lcd.c"
 15619 ;; Parameters:    Size  Location     Type
 15620 ;;  senseflags      1    wreg     unsigned char 
 15621 ;;  chanel          1   30[COMRAM] unsigned char 
 15622 ;;  chanbit         1   31[COMRAM] unsigned char 
 15623 ;; Auto vars:     Size  Location     Type
 15624 ;;  senseflags      1   32[COMRAM] unsigned char 
 15625 ;; Return value:  Size  Location     Type
 15626 ;;                  1    wreg      void 
 15627 ;; Registers used:
 15628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15629 ;; Tracked objects:
 15630 ;;		On entry : 0/0
 15631 ;;		On exit  : 0/0
 15632 ;;		Unchanged: 0/0
 15633 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 15634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15637 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15638 ;;Total ram usage:        3 bytes
 15639 ;; Hardware stack levels used:    1
 15640 ;; Hardware stack levels required when called:    8
 15641 ;; This function calls:
 15642 ;;		_lcd_string
 15643 ;;		_lcd_writeC
 15644 ;; This function is called by:
 15645 ;;		_off_sens
 15646 ;; This function uses a non-reentrant model
 15647 ;;
 15648                           
 15649                           	psect	text82
 15650  011C0C                     __ptext82:
 15651                           	opt stack 0
 15652  011C0C                     _displ_sflags:
 15653                           	opt stack 18
 15654                           
 15655                           ;incstack = 0
 15656                           ;displ_sflags@senseflags stored from wreg
 15657  011C0C  6E2B               	movwf	displ_sflags@senseflags,c
 15658                           
 15659                           ;lcd.c: 82: lcd_string(chanmsg, line1);
 15660  011C0E  0E10               	movlw	low _chanmsg
 15661  011C10  6E24               	movwf	lcd_string@lcdstring,c
 15662  011C12  0EFF               	movlw	high _chanmsg
 15663  011C14  6E25               	movwf	lcd_string@lcdstring+1,c
 15664  011C16  0E86               	movlw	low _line1
 15665  011C18  6EF6               	movwf	tblptrl,c
 15666  011C1A                     	if	1	;There is more than 1 active tblptr byte
 15667  011C1A  0EFB               	movlw	high _line1
 15668  011C1C  6EF7               	movwf	tblptrh,c
 15669  011C1E                     	endif
 15670  011C1E                     	if	1	;There are 3 active tblptr bytes
 15671  011C1E  0E00               	movlw	low (_line1 shr (0+16))
 15672  011C20  6EF8               	movwf	tblptru,c
 15673  011C22                     	endif
 15674  011C22  0008               	tblrd		*
 15675  011C24  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15676  011C28  EC5D  F08A         	call	_lcd_string	;wreg free
 15677                           
 15678                           ;lcd.c: 83: lcd_writeC(++chanel | 0x30);
 15679  011C2C  2A29               	incf	displ_sflags@chanel,f,c
 15680  011C2E  5029               	movf	displ_sflags@chanel,w,c
 15681  011C30  0930               	iorlw	48
 15682  011C32  EC27  F094         	call	_lcd_writeC
 15683                           
 15684                           ;lcd.c: 84: lcd_string(sensmsg, line2);
 15685  011C36  0E54               	movlw	low _sensmsg
 15686  011C38  6E24               	movwf	lcd_string@lcdstring,c
 15687  011C3A  0EFF               	movlw	high _sensmsg
 15688  011C3C  6E25               	movwf	lcd_string@lcdstring+1,c
 15689  011C3E  0E85               	movlw	low _line2
 15690  011C40  6EF6               	movwf	tblptrl,c
 15691  011C42                     	if	1	;There is more than 1 active tblptr byte
 15692  011C42  0EFB               	movlw	high _line2
 15693  011C44  6EF7               	movwf	tblptrh,c
 15694  011C46                     	endif
 15695  011C46                     	if	1	;There are 3 active tblptr bytes
 15696  011C46  0E00               	movlw	low (_line2 shr (0+16))
 15697  011C48  6EF8               	movwf	tblptru,c
 15698  011C4A                     	endif
 15699  011C4A  0008               	tblrd		*
 15700  011C4C  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15701  011C50  EC5D  F08A         	call	_lcd_string	;wreg free
 15702                           
 15703                           ;lcd.c: 85: lcd_string(sensoffmsg, line3);
 15704  011C54  0EEF               	movlw	low _sensoffmsg
 15705  011C56  6E24               	movwf	lcd_string@lcdstring,c
 15706  011C58  0EFD               	movlw	high _sensoffmsg
 15707  011C5A  6E25               	movwf	lcd_string@lcdstring+1,c
 15708  011C5C  0E84               	movlw	low _line3
 15709  011C5E  6EF6               	movwf	tblptrl,c
 15710  011C60                     	if	1	;There is more than 1 active tblptr byte
 15711  011C60  0EFB               	movlw	high _line3
 15712  011C62  6EF7               	movwf	tblptrh,c
 15713  011C64                     	endif
 15714  011C64                     	if	1	;There are 3 active tblptr bytes
 15715  011C64  0E00               	movlw	low (_line3 shr (0+16))
 15716  011C66  6EF8               	movwf	tblptru,c
 15717  011C68                     	endif
 15718  011C68  0008               	tblrd		*
 15719  011C6A  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15720  011C6E  EC5D  F08A         	call	_lcd_string	;wreg free
 15721                           
 15722                           ;lcd.c: 87: if((senseflags & chanbit) != 0)
 15723  011C72  502B               	movf	displ_sflags@senseflags,w,c
 15724  011C74  142A               	andwf	displ_sflags@chanbit,w,c
 15725  011C76  0900               	iorlw	0
 15726  011C78  B4D8               	btfsc	status,2,c
 15727  011C7A  D011               	goto	l1835
 15728                           
 15729                           ;lcd.c: 88: {
 15730                           ;lcd.c: 89: lcd_string(disabled, line2 + 10);
 15731  011C7C  0E7D               	movlw	low _disabled
 15732  011C7E  6E24               	movwf	lcd_string@lcdstring,c
 15733  011C80  0EFF               	movlw	high _disabled
 15734  011C82  6E25               	movwf	lcd_string@lcdstring+1,c
 15735  011C84  0E85               	movlw	low _line2
 15736  011C86  6EF6               	movwf	tblptrl,c
 15737  011C88                     	if	1	;There is more than 1 active tblptr byte
 15738  011C88  0EFB               	movlw	high _line2
 15739  011C8A  6EF7               	movwf	tblptrh,c
 15740  011C8C                     	endif
 15741  011C8C                     	if	1	;There are 3 active tblptr bytes
 15742  011C8C  0E00               	movlw	low (_line2 shr (0+16))
 15743  011C8E  6EF8               	movwf	tblptru,c
 15744  011C90                     	endif
 15745  011C90  0008               	tblrd		*
 15746  011C92  50F5               	movf	tablat,w,c
 15747  011C94  0F0A               	addlw	10
 15748  011C96  6E26               	movwf	lcd_string@lcdline,c
 15749  011C98  EC5D  F08A         	call	_lcd_string	;wreg free
 15750                           
 15751                           ;lcd.c: 90: }
 15752  011C9C  0012               	return	
 15753  011C9E                     l1835:
 15754                           
 15755                           ;lcd.c: 91: else
 15756                           ;lcd.c: 92: {
 15757                           ;lcd.c: 93: lcd_string(enabled, line2 + 10);
 15758  011C9E  0E87               	movlw	low _enabled
 15759  011CA0  6E24               	movwf	lcd_string@lcdstring,c
 15760  011CA2  0EFF               	movlw	high _enabled
 15761  011CA4  6E25               	movwf	lcd_string@lcdstring+1,c
 15762  011CA6  0E85               	movlw	low _line2
 15763  011CA8  6EF6               	movwf	tblptrl,c
 15764  011CAA                     	if	1	;There is more than 1 active tblptr byte
 15765  011CAA  0EFB               	movlw	high _line2
 15766  011CAC  6EF7               	movwf	tblptrh,c
 15767  011CAE                     	endif
 15768  011CAE                     	if	1	;There are 3 active tblptr bytes
 15769  011CAE  0E00               	movlw	low (_line2 shr (0+16))
 15770  011CB0  6EF8               	movwf	tblptru,c
 15771  011CB2                     	endif
 15772  011CB2  0008               	tblrd		*
 15773  011CB4  50F5               	movf	tablat,w,c
 15774  011CB6  0F0A               	addlw	10
 15775  011CB8  6E26               	movwf	lcd_string@lcdline,c
 15776  011CBA  EC5D  F08A         	call	_lcd_string	;wreg free
 15777  011CBE  0012               	return	
 15778  011CC0                     __end_of_displ_sflags:
 15779                           	opt stack 0
 15780                           tblptru	equ	0xFF8
 15781                           tblptrh	equ	0xFF7
 15782                           tblptrl	equ	0xFF6
 15783                           tablat	equ	0xFF5
 15784                           prodh	equ	0xFF4
 15785                           prodl	equ	0xFF3
 15786                           intcon	equ	0xFF2
 15787                           indf0	equ	0xFEF
 15788                           postinc0	equ	0xFEE
 15789                           fsr0h	equ	0xFEA
 15790                           fsr0l	equ	0xFE9
 15791                           wreg	equ	0xFE8
 15792                           indf1	equ	0xFE7
 15793                           postdec1	equ	0xFE5
 15794                           fsr1h	equ	0xFE2
 15795                           fsr1l	equ	0xFE1
 15796                           indf2	equ	0xFDF
 15797                           postinc2	equ	0xFDE
 15798                           fsr2h	equ	0xFDA
 15799                           fsr2l	equ	0xFD9
 15800                           status	equ	0xFD8
 15801                           
 15802 ;; *************** function _Reset_settings *****************
 15803 ;; Defined at:
 15804 ;;		line 618 in file "vend.c"
 15805 ;; Parameters:    Size  Location     Type
 15806 ;;		None
 15807 ;; Auto vars:     Size  Location     Type
 15808 ;;  chantimebits    2    2[BANK0 ] unsigned int 
 15809 ;;  chanlinkbits    2    0[BANK0 ] unsigned int 
 15810 ;; Return value:  Size  Location     Type
 15811 ;;                  1    wreg      void 
 15812 ;; Registers used:
 15813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15814 ;; Tracked objects:
 15815 ;;		On entry : 0/0
 15816 ;;		On exit  : 0/0
 15817 ;;		Unchanged: 0/0
 15818 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 15819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15820 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15822 ;;      Totals:         2       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15823 ;;Total ram usage:        6 bytes
 15824 ;; Hardware stack levels used:    1
 15825 ;; Hardware stack levels required when called:    8
 15826 ;; This function calls:
 15827 ;;		_DATAEE_WriteByte
 15828 ;;		_lcd_string
 15829 ;; This function is called by:
 15830 ;;		_Vend_setup
 15831 ;; This function uses a non-reentrant model
 15832 ;;
 15833                           
 15834                           	psect	text83
 15835  0113C8                     __ptext83:
 15836                           	opt stack 0
 15837  0113C8                     _Reset_settings:
 15838                           	opt stack 20
 15839                           
 15840                           ;vend.c: 620: lcd_string(chanresetmsg, line1);
 15841                           
 15842                           ;incstack = 0
 15843  0113C8  0ECF               	movlw	low _chanresetmsg
 15844  0113CA  6E24               	movwf	lcd_string@lcdstring,c
 15845  0113CC  0EFD               	movlw	high _chanresetmsg
 15846  0113CE  6E25               	movwf	lcd_string@lcdstring+1,c
 15847  0113D0  0E86               	movlw	low _line1
 15848  0113D2  6EF6               	movwf	tblptrl,c
 15849  0113D4                     	if	1	;There is more than 1 active tblptr byte
 15850  0113D4  0EFB               	movlw	high _line1
 15851  0113D6  6EF7               	movwf	tblptrh,c
 15852  0113D8                     	endif
 15853  0113D8                     	if	1	;There are 3 active tblptr bytes
 15854  0113D8  0E00               	movlw	low (_line1 shr (0+16))
 15855  0113DA  6EF8               	movwf	tblptru,c
 15856  0113DC                     	endif
 15857  0113DC  0008               	tblrd		*
 15858  0113DE  CFF5 F026          	movff	tablat,lcd_string@lcdline
 15859  0113E2  EC5D  F08A         	call	_lcd_string	;wreg free
 15860                           
 15861                           ;vend.c: 621: uint16_t chanlinkbits = chan1linkbits;
 15862  0113E6  0E44               	movlw	low _chan1linkbits
 15863  0113E8  6EF6               	movwf	tblptrl,c
 15864  0113EA                     	if	1	;There is more than 1 active tblptr byte
 15865  0113EA  0EFB               	movlw	high _chan1linkbits
 15866  0113EC  6EF7               	movwf	tblptrh,c
 15867  0113EE                     	endif
 15868  0113EE                     	if	1	;There are 3 active tblptr bytes
 15869  0113EE  0E00               	movlw	low (_chan1linkbits shr (0+16))
 15870  0113F0  6EF8               	movwf	tblptru,c
 15871  0113F2                     	endif
 15872  0113F2  0009               	tblrd		*+
 15873  0113F4  CFF5 F0E1          	movff	tablat,Reset_settings@chanlinkbits
 15874  0113F8  000A               	tblrd		*-
 15875  0113FA  CFF5 F0E2          	movff	tablat,Reset_settings@chanlinkbits+1
 15876                           
 15877                           ;vend.c: 622: while(chanlinkbits < chan1time)
 15878  0113FE  D00B               	goto	l2636
 15879  011400                     
 15880                           ;vend.c: 623: {
 15881                           ;vend.c: 625: DATAEE_WriteByte(chanlinkbits, 0x00);
 15882  011400  C0E1  F01D         	movff	Reset_settings@chanlinkbits,DATAEE_WriteByte@bAdd
 15883  011404  C0E2  F01E         	movff	Reset_settings@chanlinkbits+1,DATAEE_WriteByte@bAdd+1
 15884  011408  0E00               	movlw	0
 15885  01140A  6E1F               	movwf	DATAEE_WriteByte@bData,c
 15886  01140C  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 15887                           
 15888                           ;vend.c: 626: chanlinkbits++;
 15889  011410  0100               	movlb	0	; () banked
 15890  011412  4BE1               	infsnz	Reset_settings@chanlinkbits& (0+255),f,b
 15891  011414  2BE2               	incf	(Reset_settings@chanlinkbits+1)& (0+255),f,b
 15892  011416                     l2636:
 15893                           
 15894                           ; BSR set to: 0
 15895  011416  0E32               	movlw	low _chan1time
 15896  011418  6EF6               	movwf	tblptrl,c
 15897  01141A                     	if	1	;There is more than 1 active tblptr byte
 15898  01141A  0EFB               	movlw	high _chan1time
 15899  01141C  6EF7               	movwf	tblptrh,c
 15900  01141E                     	endif
 15901  01141E                     	if	1	;There are 3 active tblptr bytes
 15902  01141E  0E00               	movlw	low (_chan1time shr (0+16))
 15903  011420  6EF8               	movwf	tblptru,c
 15904  011422                     	endif
 15905  011422  0009               	tblrd		*+
 15906  011424  50F5               	movf	tablat,w,c
 15907  011426  0100               	movlb	0	; () banked
 15908  011428  5DE1               	subwf	Reset_settings@chanlinkbits& (0+255),w,b
 15909  01142A  0009               	tblrd		*+
 15910  01142C  50F5               	movf	tablat,w,c
 15911  01142E  59E2               	subwfb	(Reset_settings@chanlinkbits+1)& (0+255),w,b
 15912  011430  A0D8               	btfss	status,0,c
 15913  011432  D7E6               	goto	l2637
 15914                           
 15915                           ; BSR set to: 0
 15916                           ;vend.c: 627: }
 15917                           ;vend.c: 628: uint16_t chantimebits = chan1time;
 15918                           
 15919                           ; BSR set to: 0
 15920  011434  0E32               	movlw	low _chan1time
 15921  011436  6EF6               	movwf	tblptrl,c
 15922  011438                     	if	1	;There is more than 1 active tblptr byte
 15923  011438  0EFB               	movlw	high _chan1time
 15924  01143A  6EF7               	movwf	tblptrh,c
 15925  01143C                     	endif
 15926  01143C                     	if	1	;There are 3 active tblptr bytes
 15927  01143C  0E00               	movlw	low (_chan1time shr (0+16))
 15928  01143E  6EF8               	movwf	tblptru,c
 15929  011440                     	endif
 15930  011440  0009               	tblrd		*+
 15931  011442  CFF5 F0E3          	movff	tablat,Reset_settings@chantimebits
 15932  011446  000A               	tblrd		*-
 15933  011448  CFF5 F0E4          	movff	tablat,Reset_settings@chantimebits+1
 15934                           
 15935                           ;vend.c: 629: while(chantimebits < nosentime)
 15936  01144C  D00B               	goto	l2639
 15937  01144E                     
 15938                           ; BSR set to: 0
 15939                           ;vend.c: 630: {
 15940                           ;vend.c: 632: DATAEE_WriteByte(chantimebits, 0x08);
 15941                           
 15942                           ; BSR set to: 0
 15943  01144E  C0E3  F01D         	movff	Reset_settings@chantimebits,DATAEE_WriteByte@bAdd
 15944  011452  C0E4  F01E         	movff	Reset_settings@chantimebits+1,DATAEE_WriteByte@bAdd+1
 15945  011456  0E08               	movlw	8
 15946  011458  6E1F               	movwf	DATAEE_WriteByte@bData,c
 15947  01145A  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 15948                           
 15949                           ;vend.c: 633: chantimebits++;
 15950  01145E  0100               	movlb	0	; () banked
 15951  011460  4BE3               	infsnz	Reset_settings@chantimebits& (0+255),f,b
 15952  011462  2BE4               	incf	(Reset_settings@chantimebits+1)& (0+255),f,b
 15953  011464                     l2639:
 15954                           
 15955                           ; BSR set to: 0
 15956                           
 15957                           ; BSR set to: 0
 15958  011464  0E22               	movlw	low _nosentime
 15959  011466  6EF6               	movwf	tblptrl,c
 15960  011468                     	if	1	;There is more than 1 active tblptr byte
 15961  011468  0EFB               	movlw	high _nosentime
 15962  01146A  6EF7               	movwf	tblptrh,c
 15963  01146C                     	endif
 15964  01146C                     	if	1	;There are 3 active tblptr bytes
 15965  01146C  0E00               	movlw	low (_nosentime shr (0+16))
 15966  01146E  6EF8               	movwf	tblptru,c
 15967  011470                     	endif
 15968  011470  0009               	tblrd		*+
 15969  011472  50F5               	movf	tablat,w,c
 15970  011474  5DE3               	subwf	Reset_settings@chantimebits& (0+255),w,b
 15971  011476  0009               	tblrd		*+
 15972  011478  50F5               	movf	tablat,w,c
 15973  01147A  59E4               	subwfb	(Reset_settings@chantimebits+1)& (0+255),w,b
 15974  01147C  A0D8               	btfss	status,0,c
 15975  01147E  D7E7               	goto	l2640
 15976                           
 15977                           ; BSR set to: 0
 15978                           ;vend.c: 634: }
 15979                           ;vend.c: 635: DATAEE_WriteByte(sensorflags, 0x05);
 15980                           
 15981                           ; BSR set to: 0
 15982  011480  0E34               	movlw	low _sensorflags
 15983  011482  6EF6               	movwf	tblptrl,c
 15984  011484                     	if	1	;There is more than 1 active tblptr byte
 15985  011484  0EFB               	movlw	high _sensorflags
 15986  011486  6EF7               	movwf	tblptrh,c
 15987  011488                     	endif
 15988  011488                     	if	1	;There are 3 active tblptr bytes
 15989  011488  0E00               	movlw	low (_sensorflags shr (0+16))
 15990  01148A  6EF8               	movwf	tblptru,c
 15991  01148C                     	endif
 15992  01148C  0009               	tblrd		*+
 15993  01148E  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 15994  011492  000A               	tblrd		*-
 15995  011494  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 15996  011498  0E05               	movlw	5
 15997  01149A  6E1F               	movwf	DATAEE_WriteByte@bData,c
 15998  01149C  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 15999                           
 16000                           ;vend.c: 636: _delay((unsigned long)((2000)*(64000000/4000.0)));
 16001  0114A0  0EA3               	movlw	163
 16002  0114A2  6E2A               	movwf	(??_Reset_settings+1)& (0+255),c
 16003  0114A4  0E57               	movlw	87
 16004  0114A6  6E29               	movwf	??_Reset_settings& (0+255),c
 16005  0114A8  0E02               	movlw	2
 16006  0114AA                     u7407:
 16007  0114AA  2EE8               	decfsz	wreg,f,c
 16008  0114AC  D7FE               	bra	u7407
 16009  0114AE  2E29               	decfsz	??_Reset_settings& (0+255),f,c
 16010  0114B0  D7FC               	bra	u7407
 16011  0114B2  2E2A               	decfsz	(??_Reset_settings+1)& (0+255),f,c
 16012  0114B4  D7FA               	bra	u7407
 16013  0114B6  D000               	nop2	
 16014  0114B8  0012               	return		;funcret
 16015  0114BA                     __end_of_Reset_settings:
 16016                           	opt stack 0
 16017                           tblptru	equ	0xFF8
 16018                           tblptrh	equ	0xFF7
 16019                           tblptrl	equ	0xFF6
 16020                           tablat	equ	0xFF5
 16021                           prodh	equ	0xFF4
 16022                           prodl	equ	0xFF3
 16023                           intcon	equ	0xFF2
 16024                           indf0	equ	0xFEF
 16025                           postinc0	equ	0xFEE
 16026                           fsr0h	equ	0xFEA
 16027                           fsr0l	equ	0xFE9
 16028                           wreg	equ	0xFE8
 16029                           indf1	equ	0xFE7
 16030                           postdec1	equ	0xFE5
 16031                           fsr1h	equ	0xFE2
 16032                           fsr1l	equ	0xFE1
 16033                           indf2	equ	0xFDF
 16034                           postinc2	equ	0xFDE
 16035                           fsr2h	equ	0xFDA
 16036                           fsr2l	equ	0xFD9
 16037                           status	equ	0xFD8
 16038                           
 16039 ;; *************** function _Init_vendmem *****************
 16040 ;; Defined at:
 16041 ;;		line 9 in file "vend.c"
 16042 ;; Parameters:    Size  Location     Type
 16043 ;;		None
 16044 ;; Auto vars:     Size  Location     Type
 16045 ;;  chanlink        2   24[COMRAM] PTR unsigned char 
 16046 ;;		 -> chanlink1(1), 
 16047 ;;  chanlinkbits    2   22[COMRAM] unsigned int 
 16048 ;;  i               1   26[COMRAM] unsigned char 
 16049 ;; Return value:  Size  Location     Type
 16050 ;;                  1    wreg      void 
 16051 ;; Registers used:
 16052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16053 ;; Tracked objects:
 16054 ;;		On entry : 0/0
 16055 ;;		On exit  : 0/0
 16056 ;;		Unchanged: 0/0
 16057 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16059 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16060 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16061 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16062 ;;Total ram usage:        7 bytes
 16063 ;; Hardware stack levels used:    1
 16064 ;; Hardware stack levels required when called:    3
 16065 ;; This function calls:
 16066 ;;		_DATAEE_ReadByte
 16067 ;; This function is called by:
 16068 ;;		_vend_init
 16069 ;;		_Vend_setup
 16070 ;; This function uses a non-reentrant model
 16071 ;;
 16072                           
 16073                           	psect	text84
 16074  011A9C                     __ptext84:
 16075                           	opt stack 0
 16076  011A9C                     _Init_vendmem:
 16077                           	opt stack 26
 16078                           
 16079                           ;vend.c: 12: ((uint8_t*) &senschk)[0] = DATAEE_ReadByte(sensorflags);
 16080                           
 16081                           ;incstack = 0
 16082  011A9C  0E34               	movlw	low _sensorflags
 16083  011A9E  6EF6               	movwf	tblptrl,c
 16084  011AA0                     	if	1	;There is more than 1 active tblptr byte
 16085  011AA0  0EFB               	movlw	high _sensorflags
 16086  011AA2  6EF7               	movwf	tblptrh,c
 16087  011AA4                     	endif
 16088  011AA4                     	if	1	;There are 3 active tblptr bytes
 16089  011AA4  0E00               	movlw	low (_sensorflags shr (0+16))
 16090  011AA6  6EF8               	movwf	tblptru,c
 16091  011AA8                     	endif
 16092  011AA8  0009               	tblrd		*+
 16093  011AAA  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 16094  011AAE  000A               	tblrd		*-
 16095  011AB0  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 16096  011AB4  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 16097  011AB8  0100               	movlb	0	; () banked
 16098  011ABA  6FA8               	movwf	_senschk& (0+255),b
 16099                           
 16100                           ; BSR set to: 0
 16101                           ;vend.c: 14: uint16_t chanlinkbits = chan1linkbits;
 16102  011ABC  0E44               	movlw	low _chan1linkbits
 16103  011ABE  6EF6               	movwf	tblptrl,c
 16104  011AC0                     	if	1	;There is more than 1 active tblptr byte
 16105  011AC0  0EFB               	movlw	high _chan1linkbits
 16106  011AC2  6EF7               	movwf	tblptrh,c
 16107  011AC4                     	endif
 16108  011AC4                     	if	1	;There are 3 active tblptr bytes
 16109  011AC4  0E00               	movlw	low (_chan1linkbits shr (0+16))
 16110  011AC6  6EF8               	movwf	tblptru,c
 16111  011AC8                     	endif
 16112  011AC8  0009               	tblrd		*+
 16113  011ACA  CFF5 F021          	movff	tablat,Init_vendmem@chanlinkbits
 16114  011ACE  000A               	tblrd		*-
 16115  011AD0  CFF5 F022          	movff	tablat,Init_vendmem@chanlinkbits+1
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;vend.c: 15: uint8_t *chanlink = ((uint8_t*) &chanlink1);
 16119  011AD4  0E03               	movlw	3
 16120  011AD6  6E23               	movwf	Init_vendmem@chanlink,c
 16121  011AD8  0E00               	movlw	0
 16122  011ADA  6E24               	movwf	Init_vendmem@chanlink+1,c
 16123                           
 16124                           ; BSR set to: 0
 16125                           ;vend.c: 16: char i = 0;
 16126  011ADC  0E00               	movlw	0
 16127  011ADE  6E25               	movwf	Init_vendmem@i,c
 16128                           
 16129                           ;vend.c: 17: while(i < 8)
 16130  011AE0  D012               	goto	l2420
 16131  011AE2                     
 16132                           ;vend.c: 18: {
 16133                           ;vend.c: 19: chanlink[i] = DATAEE_ReadByte(chanlinkbits + i);
 16134                           
 16135                           ; BSR set to: 0
 16136  011AE2  5025               	movf	Init_vendmem@i,w,c
 16137  011AE4  0D01               	mullw	1
 16138  011AE6  50F3               	movf	prodl,w,c
 16139  011AE8  2423               	addwf	Init_vendmem@chanlink,w,c
 16140  011AEA  6ED9               	movwf	fsr2l,c
 16141  011AEC  50F4               	movf	prodh,w,c
 16142  011AEE  2024               	addwfc	Init_vendmem@chanlink+1,w,c
 16143  011AF0  6EDA               	movwf	fsr2h,c
 16144  011AF2  5025               	movf	Init_vendmem@i,w,c
 16145  011AF4  2421               	addwf	Init_vendmem@chanlinkbits,w,c
 16146  011AF6  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 16147  011AF8  0E00               	movlw	0
 16148  011AFA  2022               	addwfc	Init_vendmem@chanlinkbits+1,w,c
 16149  011AFC  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 16150  011AFE  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 16151  011B02  6EDF               	movwf	indf2,c
 16152                           
 16153                           ;vend.c: 20: i++;
 16154  011B04  2A25               	incf	Init_vendmem@i,f,c
 16155  011B06                     l2420:
 16156  011B06  0E07               	movlw	7
 16157  011B08  6425               	cpfsgt	Init_vendmem@i,c
 16158  011B0A  D7EB               	goto	l2421
 16159                           
 16160                           ;vend.c: 21: }
 16161                           ;vend.c: 23: i = 0;
 16162  011B0C  0E00               	movlw	0
 16163  011B0E  6E25               	movwf	Init_vendmem@i,c
 16164                           
 16165                           ;vend.c: 24: while(i < 8)
 16166  011B10  D01E               	goto	l2423
 16167  011B12                     
 16168                           ;vend.c: 25: {
 16169                           ;vend.c: 26: pricevend[i] = DATAEE_ReadByte(pricestore + i);
 16170  011B12  5025               	movf	Init_vendmem@i,w,c
 16171  011B14  0D01               	mullw	1
 16172  011B16  0E7F               	movlw	low _pricevend
 16173  011B18  24F3               	addwf	prodl,w,c
 16174  011B1A  6ED9               	movwf	fsr2l,c
 16175  011B1C  0E00               	movlw	high _pricevend
 16176  011B1E  20F4               	addwfc	prodh,w,c
 16177  011B20  6EDA               	movwf	fsr2h,c
 16178  011B22  0E50               	movlw	low _pricestore
 16179  011B24  6EF6               	movwf	tblptrl,c
 16180  011B26                     	if	1	;There is more than 1 active tblptr byte
 16181  011B26  0EFB               	movlw	high _pricestore
 16182  011B28  6EF7               	movwf	tblptrh,c
 16183  011B2A                     	endif
 16184  011B2A                     	if	1	;There are 3 active tblptr bytes
 16185  011B2A  0E00               	movlw	low (_pricestore shr (0+16))
 16186  011B2C  6EF8               	movwf	tblptru,c
 16187  011B2E                     	endif
 16188  011B2E  0009               	tblrd		*+
 16189  011B30  CFF5 F01F          	movff	tablat,??_Init_vendmem
 16190  011B34  0009               	tblrd		*+
 16191  011B36  CFF5 F020          	movff	tablat,??_Init_vendmem+1
 16192  011B3A  5025               	movf	Init_vendmem@i,w,c
 16193  011B3C  241F               	addwf	??_Init_vendmem,w,c
 16194  011B3E  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 16195  011B40  0E00               	movlw	0
 16196  011B42  2020               	addwfc	??_Init_vendmem+1,w,c
 16197  011B44  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 16198  011B46  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 16199  011B4A  6EDF               	movwf	indf2,c
 16200                           
 16201                           ;vend.c: 27: i++;
 16202  011B4C  2A25               	incf	Init_vendmem@i,f,c
 16203  011B4E                     l2423:
 16204  011B4E  0E07               	movlw	7
 16205  011B50  6425               	cpfsgt	Init_vendmem@i,c
 16206  011B52  D7DF               	goto	l2424
 16207  011B54  0012               	return	
 16208  011B56                     __end_of_Init_vendmem:
 16209                           	opt stack 0
 16210                           tblptru	equ	0xFF8
 16211                           tblptrh	equ	0xFF7
 16212                           tblptrl	equ	0xFF6
 16213                           tablat	equ	0xFF5
 16214                           prodh	equ	0xFF4
 16215                           prodl	equ	0xFF3
 16216                           intcon	equ	0xFF2
 16217                           indf0	equ	0xFEF
 16218                           postinc0	equ	0xFEE
 16219                           fsr0h	equ	0xFEA
 16220                           fsr0l	equ	0xFE9
 16221                           wreg	equ	0xFE8
 16222                           indf1	equ	0xFE7
 16223                           postdec1	equ	0xFE5
 16224                           fsr1h	equ	0xFE2
 16225                           fsr1l	equ	0xFE1
 16226                           indf2	equ	0xFDF
 16227                           postinc2	equ	0xFDE
 16228                           fsr2h	equ	0xFDA
 16229                           fsr2l	equ	0xFD9
 16230                           status	equ	0xFD8
 16231                           
 16232 ;; *************** function _Clear_Totals *****************
 16233 ;; Defined at:
 16234 ;;		line 228 in file "vend.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;		None
 16237 ;; Auto vars:     Size  Location     Type
 16238 ;;  eeaddress       2   22[COMRAM] unsigned int 
 16239 ;; Return value:  Size  Location     Type
 16240 ;;                  1    wreg      void 
 16241 ;; Registers used:
 16242 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16243 ;; Tracked objects:
 16244 ;;		On entry : 0/0
 16245 ;;		On exit  : 0/0
 16246 ;;		Unchanged: 0/0
 16247 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16249 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16251 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16252 ;;Total ram usage:        2 bytes
 16253 ;; Hardware stack levels used:    1
 16254 ;; Hardware stack levels required when called:    3
 16255 ;; This function calls:
 16256 ;;		_DATAEE_WriteByte
 16257 ;; This function is called by:
 16258 ;;		_Vend_setup
 16259 ;; This function uses a non-reentrant model
 16260 ;;
 16261                           
 16262                           	psect	text85
 16263  013066                     __ptext85:
 16264                           	opt stack 0
 16265  013066                     _Clear_Totals:
 16266                           	opt stack 25
 16267                           
 16268                           ;vend.c: 230: uint16_t eeaddress = cashinv;
 16269                           
 16270                           ;incstack = 0
 16271  013066  0E56               	movlw	low _cashinv
 16272  013068  6EF6               	movwf	tblptrl,c
 16273  01306A                     	if	1	;There is more than 1 active tblptr byte
 16274  01306A  0EFB               	movlw	high _cashinv
 16275  01306C  6EF7               	movwf	tblptrh,c
 16276  01306E                     	endif
 16277  01306E                     	if	1	;There are 3 active tblptr bytes
 16278  01306E  0E00               	movlw	low (_cashinv shr (0+16))
 16279  013070  6EF8               	movwf	tblptru,c
 16280  013072                     	endif
 16281  013072  0009               	tblrd		*+
 16282  013074  CFF5 F021          	movff	tablat,Clear_Totals@eeaddress
 16283  013078  000A               	tblrd		*-
 16284  01307A  CFF5 F022          	movff	tablat,Clear_Totals@eeaddress+1
 16285                           
 16286                           ;vend.c: 231: while(eeaddress < 0x0C)
 16287  01307E  D00A               	goto	l2486
 16288  013080                     
 16289                           ;vend.c: 232: {
 16290                           ;vend.c: 233: DATAEE_WriteByte(eeaddress, 0x00);
 16291  013080  C021  F01D         	movff	Clear_Totals@eeaddress,DATAEE_WriteByte@bAdd
 16292  013084  C022  F01E         	movff	Clear_Totals@eeaddress+1,DATAEE_WriteByte@bAdd+1
 16293  013088  0E00               	movlw	0
 16294  01308A  6E1F               	movwf	DATAEE_WriteByte@bData,c
 16295  01308C  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 16296                           
 16297                           ;vend.c: 234: eeaddress++;
 16298  013090  4A21               	infsnz	Clear_Totals@eeaddress,f,c
 16299  013092  2A22               	incf	Clear_Totals@eeaddress+1,f,c
 16300  013094                     l2486:
 16301  013094  5022               	movf	Clear_Totals@eeaddress+1,w,c
 16302  013096  E104               	bnz	u5940
 16303  013098  0E0C               	movlw	12
 16304  01309A  5C21               	subwf	Clear_Totals@eeaddress,w,c
 16305  01309C  A0D8               	btfss	status,0,c
 16306  01309E  D7F0               	goto	l2487
 16307  0130A0                     u5940:
 16308  0130A0  00FF               	reset		;# 
 16309  0130A2  0012               	return		;funcret
 16310  0130A4                     __end_of_Clear_Totals:
 16311                           	opt stack 0
 16312                           tblptru	equ	0xFF8
 16313                           tblptrh	equ	0xFF7
 16314                           tblptrl	equ	0xFF6
 16315                           tablat	equ	0xFF5
 16316                           prodh	equ	0xFF4
 16317                           prodl	equ	0xFF3
 16318                           intcon	equ	0xFF2
 16319                           indf0	equ	0xFEF
 16320                           postinc0	equ	0xFEE
 16321                           fsr0h	equ	0xFEA
 16322                           fsr0l	equ	0xFE9
 16323                           wreg	equ	0xFE8
 16324                           indf1	equ	0xFE7
 16325                           postdec1	equ	0xFE5
 16326                           fsr1h	equ	0xFE2
 16327                           fsr1l	equ	0xFE1
 16328                           indf2	equ	0xFDF
 16329                           postinc2	equ	0xFDE
 16330                           fsr2h	equ	0xFDA
 16331                           fsr2l	equ	0xFD9
 16332                           status	equ	0xFD8
 16333                           
 16334 ;; *************** function _Chan_link *****************
 16335 ;; Defined at:
 16336 ;;		line 507 in file "vend.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;		None
 16339 ;; Auto vars:     Size  Location     Type
 16340 ;;		None
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  1    wreg      void 
 16343 ;; Registers used:
 16344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16352 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16353 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16354 ;;Total ram usage:        2 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:   10
 16357 ;; This function calls:
 16358 ;;		_Link_chan
 16359 ;;		_Read_Service
 16360 ;;		_butindb
 16361 ;;		_get_channel
 16362 ;;		_lcd_string
 16363 ;; This function is called by:
 16364 ;;		_Vend_setup
 16365 ;; This function uses a non-reentrant model
 16366 ;;
 16367                           
 16368                           	psect	text86
 16369  01297C                     __ptext86:
 16370                           	opt stack 0
 16371  01297C                     _Chan_link:
 16372                           	opt stack 18
 16373                           
 16374                           ;vend.c: 509: lcd_string(chanlinkm, line1);
 16375                           
 16376                           ;incstack = 0
 16377  01297C  0EA6               	movlw	low _chanlinkm
 16378  01297E  6E24               	movwf	lcd_string@lcdstring,c
 16379  012980  0EFC               	movlw	high _chanlinkm
 16380  012982  6E25               	movwf	lcd_string@lcdstring+1,c
 16381  012984  0E86               	movlw	low _line1
 16382  012986  6EF6               	movwf	tblptrl,c
 16383  012988                     	if	1	;There is more than 1 active tblptr byte
 16384  012988  0EFB               	movlw	high _line1
 16385  01298A  6EF7               	movwf	tblptrh,c
 16386  01298C                     	endif
 16387  01298C                     	if	1	;There are 3 active tblptr bytes
 16388  01298C  0E00               	movlw	low (_line1 shr (0+16))
 16389  01298E  6EF8               	movwf	tblptru,c
 16390  012990                     	endif
 16391  012990  0008               	tblrd		*
 16392  012992  CFF5 F026          	movff	tablat,lcd_string@lcdline
 16393  012996  EC5D  F08A         	call	_lcd_string	;wreg free
 16394                           
 16395                           ;vend.c: 510: venflags.chanlink = 1;
 16396  01299A  862E               	bsf	_venflags+1,3,c
 16397                           
 16398                           ;vend.c: 511: while(venflags.chanlink)
 16399  01299C  D01D               	goto	l2597
 16400  01299E                     
 16401                           ;vend.c: 512: {
 16402                           ;vend.c: 513: buttons = butindb();
 16403  01299E  EC72  F097         	call	_butindb	;wreg free
 16404  0129A2  6E3A               	movwf	_buttons,c	;volatile
 16405                           
 16406                           ;vend.c: 514: if(buttons != 0x00)
 16407  0129A4  503A               	movf	_buttons,w,c	;volatile
 16408  0129A6  B4D8               	btfsc	status,2,c
 16409  0129A8  D012               	goto	l2596
 16410                           
 16411                           ;vend.c: 515: {
 16412                           ;vend.c: 516: Link_chan(get_channel(buttons));
 16413  0129AA  503A               	movf	_buttons,w,c	;volatile
 16414  0129AC  ECCB  F09A         	call	_get_channel
 16415  0129B0  EC42  F08B         	call	_Link_chan
 16416                           
 16417                           ;vend.c: 517: _delay((unsigned long)((1000)*(64000000/4000.0)));
 16418  0129B4  0E52               	movlw	82
 16419  0129B6  0100               	movlb	0	; () banked
 16420  0129B8  6FE7               	movwf	(??_Chan_link+1)& (0+255),b
 16421  0129BA  0E2B               	movlw	43
 16422  0129BC  6FE6               	movwf	??_Chan_link& (0+255),b
 16423  0129BE  0E00               	movlw	0
 16424  0129C0                     u7417:
 16425  0129C0  2EE8               	decfsz	wreg,f,c
 16426  0129C2  D7FE               	bra	u7417
 16427  0129C4  2FE6               	decfsz	??_Chan_link& (0+255),f,b
 16428  0129C6  D7FC               	bra	u7417
 16429  0129C8  2FE7               	decfsz	(??_Chan_link+1)& (0+255),f,b
 16430  0129CA  D7FA               	bra	u7417
 16431  0129CC  F000               	nop	
 16432  0129CE                     l2596:
 16433                           
 16434                           ;vend.c: 518: }
 16435                           ;vend.c: 519: if(Read_Service() == 0x00)
 16436  0129CE  ECE7  F09A         	call	_Read_Service	;wreg free
 16437  0129D2  0900               	iorlw	0
 16438  0129D4  B4D8               	btfsc	status,2,c
 16439                           
 16440                           ;vend.c: 520: {
 16441                           ;vend.c: 521: venflags.chanlink = 0;
 16442  0129D6  962E               	bcf	_venflags+1,3,c
 16443  0129D8                     l2597:
 16444  0129D8  A62E               	btfss	_venflags+1,3,c
 16445  0129DA  0012               	return	
 16446  0129DC  D7E0               	goto	l2595
 16447  0129DE                     __end_of_Chan_link:
 16448                           	opt stack 0
 16449                           tblptru	equ	0xFF8
 16450                           tblptrh	equ	0xFF7
 16451                           tblptrl	equ	0xFF6
 16452                           tablat	equ	0xFF5
 16453                           prodh	equ	0xFF4
 16454                           prodl	equ	0xFF3
 16455                           intcon	equ	0xFF2
 16456                           indf0	equ	0xFEF
 16457                           postinc0	equ	0xFEE
 16458                           fsr0h	equ	0xFEA
 16459                           fsr0l	equ	0xFE9
 16460                           wreg	equ	0xFE8
 16461                           indf1	equ	0xFE7
 16462                           postdec1	equ	0xFE5
 16463                           fsr1h	equ	0xFE2
 16464                           fsr1l	equ	0xFE1
 16465                           indf2	equ	0xFDF
 16466                           postinc2	equ	0xFDE
 16467                           fsr2h	equ	0xFDA
 16468                           fsr2l	equ	0xFD9
 16469                           status	equ	0xFD8
 16470                           
 16471 ;; *************** function _Link_chan *****************
 16472 ;; Defined at:
 16473 ;;		line 528 in file "vend.c"
 16474 ;; Parameters:    Size  Location     Type
 16475 ;;  channel         1    wreg     unsigned char 
 16476 ;; Auto vars:     Size  Location     Type
 16477 ;;  channel         1    3[BANK0 ] unsigned char 
 16478 ;;  linkflags       1    4[BANK0 ] unsigned char 
 16479 ;;  chanbit         1    2[BANK0 ] unsigned char 
 16480 ;; Return value:  Size  Location     Type
 16481 ;;                  1    wreg      void 
 16482 ;; Registers used:
 16483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16484 ;; Tracked objects:
 16485 ;;		On entry : 0/0
 16486 ;;		On exit  : 0/0
 16487 ;;		Unchanged: 0/0
 16488 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16492 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16493 ;;Total ram usage:        5 bytes
 16494 ;; Hardware stack levels used:    1
 16495 ;; Hardware stack levels required when called:    9
 16496 ;; This function calls:
 16497 ;;		_DATAEE_ReadByte
 16498 ;;		_DATAEE_WriteByte
 16499 ;;		_Read_Service
 16500 ;;		_butindb
 16501 ;;		_displ_lflags
 16502 ;;		_lcd_string
 16503 ;; This function is called by:
 16504 ;;		_Chan_link
 16505 ;; This function uses a non-reentrant model
 16506 ;;
 16507                           
 16508                           	psect	text87
 16509  011684                     __ptext87:
 16510                           	opt stack 0
 16511  011684                     _Link_chan:
 16512                           	opt stack 18
 16513                           
 16514                           ;incstack = 0
 16515                           ;Link_chan@channel stored from wreg
 16516  011684  0100               	movlb	0	; () banked
 16517  011686  6FE4               	movwf	Link_chan@channel& (0+255),b
 16518                           
 16519                           ;vend.c: 530: venflags.linkchan = 1;
 16520  011688  802F               	bsf	_venflags+2,0,c
 16521                           
 16522                           ;vend.c: 531: uint8_t chanbit = buttons;
 16523  01168A  C03A  F0E3         	movff	_buttons,Link_chan@chanbit	;volatile
 16524                           
 16525                           ;vend.c: 532: uint8_t linkflags = DATAEE_ReadByte(chan1linkbits + channel);
 16526  01168E  0E44               	movlw	low _chan1linkbits
 16527  011690  6EF6               	movwf	tblptrl,c
 16528  011692                     	if	1	;There is more than 1 active tblptr byte
 16529  011692  0EFB               	movlw	high _chan1linkbits
 16530  011694  6EF7               	movwf	tblptrh,c
 16531  011696                     	endif
 16532  011696                     	if	1	;There are 3 active tblptr bytes
 16533  011696  0E00               	movlw	low (_chan1linkbits shr (0+16))
 16534  011698  6EF8               	movwf	tblptru,c
 16535  01169A                     	endif
 16536  01169A  0009               	tblrd		*+
 16537  01169C  CFF5 F0E1          	movff	tablat,??_Link_chan
 16538  0116A0  0009               	tblrd		*+
 16539  0116A2  CFF5 F0E2          	movff	tablat,??_Link_chan+1
 16540  0116A6  0100               	movlb	0	; () banked
 16541  0116A8  51E4               	movf	Link_chan@channel& (0+255),w,b
 16542  0116AA  25E1               	addwf	??_Link_chan& (0+255),w,b
 16543  0116AC  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 16544  0116AE  0E00               	movlw	0
 16545  0116B0  21E2               	addwfc	(??_Link_chan+1)& (0+255),w,b
 16546  0116B2  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 16547  0116B4  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 16548  0116B8  0100               	movlb	0	; () banked
 16549  0116BA  6FE5               	movwf	Link_chan@linkflags& (0+255),b
 16550                           
 16551                           ; BSR set to: 0
 16552                           ;vend.c: 533: displ_lflags(channel, linkflags);
 16553  0116BC  C0E5  F029         	movff	Link_chan@linkflags,displ_lflags@linkflgs
 16554  0116C0  51E4               	movf	Link_chan@channel& (0+255),w,b
 16555  0116C2  ECC6  F090         	call	_displ_lflags
 16556                           
 16557                           ;vend.c: 534: while(venflags.linkchan)
 16558  0116C6  D047               	goto	u5520
 16559  0116C8                     
 16560                           ;vend.c: 535: {
 16561                           ;vend.c: 536: buttons = butindb();
 16562  0116C8  EC72  F097         	call	_butindb	;wreg free
 16563  0116CC  6E3A               	movwf	_buttons,c	;volatile
 16564                           
 16565                           ;vend.c: 537: if(buttons != 0x00)
 16566  0116CE  503A               	movf	_buttons,w,c	;volatile
 16567  0116D0  B4D8               	btfsc	status,2,c
 16568  0116D2  D03C               	goto	l2607
 16569                           
 16570                           ;vend.c: 538: {
 16571                           ;vend.c: 539: if(buttons && linkflags)
 16572  0116D4  503A               	movf	_buttons,w,c	;volatile
 16573  0116D6  B4D8               	btfsc	status,2,c
 16574  0116D8  D008               	goto	l2605
 16575  0116DA  0100               	movlb	0	; () banked
 16576  0116DC  51E5               	movf	Link_chan@linkflags& (0+255),w,b
 16577  0116DE  B4D8               	btfsc	status,2,c
 16578  0116E0  D004               	goto	l2605
 16579                           
 16580                           ; BSR set to: 0
 16581                           ;vend.c: 540: {
 16582                           ;vend.c: 542: linkflags = linkflags & ~buttons;
 16583  0116E2  503A               	movf	_buttons,w,c	;volatile
 16584  0116E4  0AFF               	xorlw	255
 16585  0116E6  15E5               	andwf	Link_chan@linkflags& (0+255),w,b
 16586  0116E8  D003               	goto	L16
 16587  0116EA                     l2605:
 16588                           
 16589                           ;vend.c: 544: else
 16590                           ;vend.c: 545: {
 16591                           ;vend.c: 547: linkflags = linkflags | buttons;
 16592                           
 16593                           ; BSR set to: 0
 16594  0116EA  0100               	movlb	0	; () banked
 16595  0116EC  51E5               	movf	Link_chan@linkflags& (0+255),w,b
 16596  0116EE  103A               	iorwf	_buttons,w,c	;volatile
 16597  0116F0                     L16:
 16598  0116F0  6FE5               	movwf	Link_chan@linkflags& (0+255),b
 16599                           
 16600                           ; BSR set to: 0
 16601                           ;vend.c: 548: }
 16602                           ;vend.c: 549: DATAEE_WriteByte(chan1linkbits + channel, linkflags);
 16603                           
 16604                           ; BSR set to: 0
 16605  0116F2  0E44               	movlw	low _chan1linkbits
 16606  0116F4  6EF6               	movwf	tblptrl,c
 16607  0116F6                     	if	1	;There is more than 1 active tblptr byte
 16608  0116F6  0EFB               	movlw	high _chan1linkbits
 16609  0116F8  6EF7               	movwf	tblptrh,c
 16610  0116FA                     	endif
 16611  0116FA                     	if	1	;There are 3 active tblptr bytes
 16612  0116FA  0E00               	movlw	low (_chan1linkbits shr (0+16))
 16613  0116FC  6EF8               	movwf	tblptru,c
 16614  0116FE                     	endif
 16615  0116FE  0009               	tblrd		*+
 16616  011700  CFF5 F0E1          	movff	tablat,??_Link_chan
 16617  011704  0009               	tblrd		*+
 16618  011706  CFF5 F0E2          	movff	tablat,??_Link_chan+1
 16619  01170A  51E4               	movf	Link_chan@channel& (0+255),w,b
 16620  01170C  25E1               	addwf	??_Link_chan& (0+255),w,b
 16621  01170E  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
 16622  011710  0E00               	movlw	0
 16623  011712  21E2               	addwfc	(??_Link_chan+1)& (0+255),w,b
 16624  011714  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
 16625  011716  C0E5  F01F         	movff	Link_chan@linkflags,DATAEE_WriteByte@bData
 16626  01171A  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 16627                           
 16628                           ;vend.c: 550: displ_lflags(channel, linkflags);
 16629  01171E  C0E5  F029         	movff	Link_chan@linkflags,displ_lflags@linkflgs
 16630  011722  0100               	movlb	0	; () banked
 16631  011724  51E4               	movf	Link_chan@channel& (0+255),w,b
 16632  011726  ECC6  F090         	call	_displ_lflags
 16633                           
 16634                           ;vend.c: 551: }
 16635                           ;vend.c: 552: while(Read_Service() == 0x00)
 16636  01172A  D010               	goto	l2607
 16637  01172C                     l2608:
 16638                           
 16639                           ;vend.c: 553: {
 16640                           ;vend.c: 554: venflags.linkchan = 0;
 16641  01172C  902F               	bcf	_venflags+2,0,c
 16642                           
 16643                           ;vend.c: 555: lcd_string(chanlinkm, line1);
 16644  01172E  0EA6               	movlw	low _chanlinkm
 16645  011730  6E24               	movwf	lcd_string@lcdstring,c
 16646  011732  0EFC               	movlw	high _chanlinkm
 16647  011734  6E25               	movwf	lcd_string@lcdstring+1,c
 16648  011736  0E86               	movlw	low _line1
 16649  011738  6EF6               	movwf	tblptrl,c
 16650  01173A                     	if	1	;There is more than 1 active tblptr byte
 16651  01173A  0EFB               	movlw	high _line1
 16652  01173C  6EF7               	movwf	tblptrh,c
 16653  01173E                     	endif
 16654  01173E                     	if	1	;There are 3 active tblptr bytes
 16655  01173E  0E00               	movlw	low (_line1 shr (0+16))
 16656  011740  6EF8               	movwf	tblptru,c
 16657  011742                     	endif
 16658  011742  0008               	tblrd		*
 16659  011744  CFF5 F026          	movff	tablat,lcd_string@lcdline
 16660  011748  EC5D  F08A         	call	_lcd_string	;wreg free
 16661  01174C                     l2607:
 16662  01174C  ECE7  F09A         	call	_Read_Service	;wreg free
 16663  011750  0900               	iorlw	0
 16664  011752  B4D8               	btfsc	status,2,c
 16665  011754  D7EB               	goto	l2608
 16666  011756                     u5520:
 16667  011756  A02F               	btfss	_venflags+2,0,c
 16668  011758  0012               	return	
 16669  01175A  D7B6               	goto	l2603
 16670  01175C                     __end_of_Link_chan:
 16671                           	opt stack 0
 16672                           tblptru	equ	0xFF8
 16673                           tblptrh	equ	0xFF7
 16674                           tblptrl	equ	0xFF6
 16675                           tablat	equ	0xFF5
 16676                           prodh	equ	0xFF4
 16677                           prodl	equ	0xFF3
 16678                           intcon	equ	0xFF2
 16679                           indf0	equ	0xFEF
 16680                           postinc0	equ	0xFEE
 16681                           fsr0h	equ	0xFEA
 16682                           fsr0l	equ	0xFE9
 16683                           wreg	equ	0xFE8
 16684                           indf1	equ	0xFE7
 16685                           postdec1	equ	0xFE5
 16686                           fsr1h	equ	0xFE2
 16687                           fsr1l	equ	0xFE1
 16688                           indf2	equ	0xFDF
 16689                           postinc2	equ	0xFDE
 16690                           fsr2h	equ	0xFDA
 16691                           fsr2l	equ	0xFD9
 16692                           status	equ	0xFD8
 16693                           
 16694 ;; *************** function _displ_lflags *****************
 16695 ;; Defined at:
 16696 ;;		line 58 in file "lcd.c"
 16697 ;; Parameters:    Size  Location     Type
 16698 ;;  chanel          1    wreg     unsigned char 
 16699 ;;  linkflgs        1   30[COMRAM] unsigned char 
 16700 ;; Auto vars:     Size  Location     Type
 16701 ;;  chanel          1   31[COMRAM] unsigned char 
 16702 ;;  lchan           1   32[COMRAM] unsigned char 
 16703 ;; Return value:  Size  Location     Type
 16704 ;;                  1    wreg      void 
 16705 ;; Registers used:
 16706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16707 ;; Tracked objects:
 16708 ;;		On entry : 0/0
 16709 ;;		On exit  : 0/0
 16710 ;;		Unchanged: 0/0
 16711 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16712 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;Total ram usage:        3 bytes
 16717 ;; Hardware stack levels used:    1
 16718 ;; Hardware stack levels required when called:    8
 16719 ;; This function calls:
 16720 ;;		_lcd_dispadd
 16721 ;;		_lcd_string
 16722 ;;		_lcd_writeC
 16723 ;; This function is called by:
 16724 ;;		_Link_chan
 16725 ;; This function uses a non-reentrant model
 16726 ;;
 16727                           
 16728                           	psect	text88
 16729  01218C                     __ptext88:
 16730                           	opt stack 0
 16731  01218C                     _displ_lflags:
 16732                           	opt stack 18
 16733                           
 16734                           ;incstack = 0
 16735                           ;displ_lflags@chanel stored from wreg
 16736  01218C  6E2A               	movwf	displ_lflags@chanel,c
 16737                           
 16738                           ;lcd.c: 60: lcd_string(chanmsg, line1);
 16739  01218E  0E10               	movlw	low _chanmsg
 16740  012190  6E24               	movwf	lcd_string@lcdstring,c
 16741  012192  0EFF               	movlw	high _chanmsg
 16742  012194  6E25               	movwf	lcd_string@lcdstring+1,c
 16743  012196  0E86               	movlw	low _line1
 16744  012198  6EF6               	movwf	tblptrl,c
 16745  01219A                     	if	1	;There is more than 1 active tblptr byte
 16746  01219A  0EFB               	movlw	high _line1
 16747  01219C  6EF7               	movwf	tblptrh,c
 16748  01219E                     	endif
 16749  01219E                     	if	1	;There are 3 active tblptr bytes
 16750  01219E  0E00               	movlw	low (_line1 shr (0+16))
 16751  0121A0  6EF8               	movwf	tblptru,c
 16752  0121A2                     	endif
 16753  0121A2  0008               	tblrd		*
 16754  0121A4  CFF5 F026          	movff	tablat,lcd_string@lcdline
 16755  0121A8  EC5D  F08A         	call	_lcd_string	;wreg free
 16756                           
 16757                           ;lcd.c: 61: lcd_writeC(++chanel | 0x30);
 16758  0121AC  2A2A               	incf	displ_lflags@chanel,f,c
 16759  0121AE  502A               	movf	displ_lflags@chanel,w,c
 16760  0121B0  0930               	iorlw	48
 16761  0121B2  EC27  F094         	call	_lcd_writeC
 16762                           
 16763                           ;lcd.c: 62: uint8_t lchan = 1;
 16764  0121B6  0E01               	movlw	1
 16765  0121B8  6E2B               	movwf	displ_lflags@lchan,c
 16766                           
 16767                           ;lcd.c: 64: lcd_string(linkmsg, line2);
 16768  0121BA  0E1C               	movlw	low _linkmsg
 16769  0121BC  6E24               	movwf	lcd_string@lcdstring,c
 16770  0121BE  0EFF               	movlw	high _linkmsg
 16771  0121C0  6E25               	movwf	lcd_string@lcdstring+1,c
 16772  0121C2  0E85               	movlw	low _line2
 16773  0121C4  6EF6               	movwf	tblptrl,c
 16774  0121C6                     	if	1	;There is more than 1 active tblptr byte
 16775  0121C6  0EFB               	movlw	high _line2
 16776  0121C8  6EF7               	movwf	tblptrh,c
 16777  0121CA                     	endif
 16778  0121CA                     	if	1	;There are 3 active tblptr bytes
 16779  0121CA  0E00               	movlw	low (_line2 shr (0+16))
 16780  0121CC  6EF8               	movwf	tblptru,c
 16781  0121CE                     	endif
 16782  0121CE  0008               	tblrd		*
 16783  0121D0  CFF5 F026          	movff	tablat,lcd_string@lcdline
 16784  0121D4  EC5D  F08A         	call	_lcd_string	;wreg free
 16785                           
 16786                           ;lcd.c: 65: lcd_dispadd(line3);
 16787  0121D8  0E84               	movlw	low _line3
 16788  0121DA  6EF6               	movwf	tblptrl,c
 16789  0121DC                     	if	1	;There is more than 1 active tblptr byte
 16790  0121DC  0EFB               	movlw	high _line3
 16791  0121DE  6EF7               	movwf	tblptrh,c
 16792  0121E0                     	endif
 16793  0121E0                     	if	1	;There are 3 active tblptr bytes
 16794  0121E0  0E00               	movlw	low (_line3 shr (0+16))
 16795  0121E2  6EF8               	movwf	tblptru,c
 16796  0121E4                     	endif
 16797  0121E4  0008               	tblrd		*
 16798  0121E6  50F5               	movf	tablat,w,c
 16799  0121E8  ECF4  F09A         	call	_lcd_dispadd
 16800                           
 16801                           ;lcd.c: 66: while(lchan < 0x09)
 16802  0121EC  D010               	goto	l1828
 16803  0121EE                     l1829:
 16804                           
 16805                           ;lcd.c: 67: {
 16806                           ;lcd.c: 68: if(linkflgs & 0x01)
 16807  0121EE  A029               	btfss	displ_lflags@linkflgs,0,c
 16808  0121F0  D00A               	goto	l1830
 16809                           
 16810                           ;lcd.c: 69: {
 16811                           ;lcd.c: 70: lcd_writeC(lchan | 0x30);
 16812  0121F2  502B               	movf	displ_lflags@lchan,w,c
 16813  0121F4  0930               	iorlw	48
 16814  0121F6  EC27  F094         	call	_lcd_writeC
 16815                           
 16816                           ;lcd.c: 71: lcd_writeC(',');
 16817  0121FA  0E2C               	movlw	44
 16818  0121FC  EC27  F094         	call	_lcd_writeC
 16819                           
 16820                           ;lcd.c: 72: lcd_writeC(' ');
 16821  012200  0E20               	movlw	32
 16822  012202  EC27  F094         	call	_lcd_writeC
 16823  012206                     l1830:
 16824                           
 16825                           ;lcd.c: 73: }
 16826                           ;lcd.c: 74: lchan++;
 16827  012206  2A2B               	incf	displ_lflags@lchan,f,c
 16828                           
 16829                           ;lcd.c: 75: linkflgs = linkflgs >> 1;
 16830  012208  90D8               	bcf	status,0,c
 16831  01220A  3029               	rrcf	displ_lflags@linkflgs,w,c
 16832  01220C  6E29               	movwf	displ_lflags@linkflgs,c
 16833  01220E                     l1828:
 16834  01220E  0E08               	movlw	8
 16835  012210  642B               	cpfsgt	displ_lflags@lchan,c
 16836  012212  D7ED               	goto	l1829
 16837  012214  0012               	return	
 16838  012216                     __end_of_displ_lflags:
 16839                           	opt stack 0
 16840                           tblptru	equ	0xFF8
 16841                           tblptrh	equ	0xFF7
 16842                           tblptrl	equ	0xFF6
 16843                           tablat	equ	0xFF5
 16844                           prodh	equ	0xFF4
 16845                           prodl	equ	0xFF3
 16846                           intcon	equ	0xFF2
 16847                           indf0	equ	0xFEF
 16848                           postinc0	equ	0xFEE
 16849                           fsr0h	equ	0xFEA
 16850                           fsr0l	equ	0xFE9
 16851                           wreg	equ	0xFE8
 16852                           indf1	equ	0xFE7
 16853                           postdec1	equ	0xFE5
 16854                           fsr1h	equ	0xFE2
 16855                           fsr1l	equ	0xFE1
 16856                           indf2	equ	0xFDF
 16857                           postinc2	equ	0xFDE
 16858                           fsr2h	equ	0xFDA
 16859                           fsr2l	equ	0xFD9
 16860                           status	equ	0xFD8
 16861                           
 16862 ;; *************** function _Read_Service *****************
 16863 ;; Defined at:
 16864 ;;		line 306 in file "vend.c"
 16865 ;; Parameters:    Size  Location     Type
 16866 ;;		None
 16867 ;; Auto vars:     Size  Location     Type
 16868 ;;  senval          1   18[COMRAM] unsigned char 
 16869 ;; Return value:  Size  Location     Type
 16870 ;;                  1    wreg      unsigned char 
 16871 ;; Registers used:
 16872 ;;		wreg, status,2
 16873 ;; Tracked objects:
 16874 ;;		On entry : 0/0
 16875 ;;		On exit  : 0/0
 16876 ;;		Unchanged: 0/0
 16877 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16879 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16882 ;;Total ram usage:        1 bytes
 16883 ;; Hardware stack levels used:    1
 16884 ;; Hardware stack levels required when called:    2
 16885 ;; This function calls:
 16886 ;;		Nothing
 16887 ;; This function is called by:
 16888 ;;		_price_set
 16889 ;;		_Vend_settime
 16890 ;;		_Chan_link
 16891 ;;		_Link_chan
 16892 ;;		_Sens_off
 16893 ;; This function uses a non-reentrant model
 16894 ;;
 16895                           
 16896                           	psect	text89
 16897  0135CE                     __ptext89:
 16898                           	opt stack 0
 16899  0135CE                     _Read_Service:
 16900                           	opt stack 26
 16901                           
 16902                           ;vend.c: 308: DAC1CON1 = 0x01;
 16903                           
 16904                           ;incstack = 0
 16905  0135CE  0E01               	movlw	1
 16906  0135D0  010F               	movlb	15	; () banked
 16907  0135D2  6F34               	movwf	52,b	;volatile
 16908                           
 16909                           ; BSR set to: 15
 16910                           ;vend.c: 309: _delay((unsigned long)((50)*(64000000/4000000.0)));
 16911  0135D4  0EA0               	movlw	160
 16912  0135D6                     u7427:
 16913  0135D6  D000               	nop2	
 16914  0135D8  2EE8               	decfsz	wreg,f,c
 16915  0135DA  D7FD               	bra	u7427
 16916                           
 16917                           ;vend.c: 310: uint8_t senval = CMOUT;
 16918  0135DC  CF3D F01D          	movff	3901,Read_Service@senval	;volatile
 16919                           
 16920                           ;vend.c: 311: DAC1CON1 = sensorval;
 16921  0135E0  C038  FF34         	movff	_sensorval,3892	;volatile
 16922                           
 16923                           ;vend.c: 312: return senval;
 16924  0135E4  501D               	movf	Read_Service@senval,w,c
 16925  0135E6  0012               	return	
 16926  0135E8                     __end_of_Read_Service:
 16927                           	opt stack 0
 16928                           tblptru	equ	0xFF8
 16929                           tblptrh	equ	0xFF7
 16930                           tblptrl	equ	0xFF6
 16931                           tablat	equ	0xFF5
 16932                           prodh	equ	0xFF4
 16933                           prodl	equ	0xFF3
 16934                           intcon	equ	0xFF2
 16935                           indf0	equ	0xFEF
 16936                           postinc0	equ	0xFEE
 16937                           fsr0h	equ	0xFEA
 16938                           fsr0l	equ	0xFE9
 16939                           wreg	equ	0xFE8
 16940                           indf1	equ	0xFE7
 16941                           postdec1	equ	0xFE5
 16942                           fsr1h	equ	0xFE2
 16943                           fsr1l	equ	0xFE1
 16944                           indf2	equ	0xFDF
 16945                           postinc2	equ	0xFDE
 16946                           fsr2h	equ	0xFDA
 16947                           fsr2l	equ	0xFD9
 16948                           status	equ	0xFD8
 16949                           
 16950 ;; *************** function _Sensor_set *****************
 16951 ;; Defined at:
 16952 ;;		line 315 in file "vend.c"
 16953 ;; Parameters:    Size  Location     Type
 16954 ;;		None
 16955 ;; Auto vars:     Size  Location     Type
 16956 ;;  dacpos          1   33[COMRAM] unsigned char 
 16957 ;; Return value:  Size  Location     Type
 16958 ;;                  1    wreg      void 
 16959 ;; Registers used:
 16960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16961 ;; Tracked objects:
 16962 ;;		On entry : 0/0
 16963 ;;		On exit  : 0/0
 16964 ;;		Unchanged: 0/0
 16965 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 16966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16969 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16970 ;;Total ram usage:        1 bytes
 16971 ;; Hardware stack levels used:    1
 16972 ;; Hardware stack levels required when called:    9
 16973 ;; This function calls:
 16974 ;;		_butindb
 16975 ;;		_displ_sens
 16976 ;;		_lcd_string
 16977 ;; This function is called by:
 16978 ;;		_enter_service
 16979 ;; This function uses a non-reentrant model
 16980 ;;
 16981                           
 16982                           	psect	text90
 16983  01175C                     __ptext90:
 16984                           	opt stack 0
 16985  01175C                     _Sensor_set:
 16986                           	opt stack 20
 16987                           
 16988                           ;vend.c: 317: mdbflags.endis = 1;
 16989                           
 16990                           ;incstack = 0
 16991  01175C  8C40               	bsf	_mdbflags,6,c
 16992                           
 16993                           ;vend.c: 319: lcd_string(sensmsg, line1);
 16994  01175E  0E54               	movlw	low _sensmsg
 16995  011760  6E24               	movwf	lcd_string@lcdstring,c
 16996  011762  0EFF               	movlw	high _sensmsg
 16997  011764  6E25               	movwf	lcd_string@lcdstring+1,c
 16998  011766  0E86               	movlw	low _line1
 16999  011768  6EF6               	movwf	tblptrl,c
 17000  01176A                     	if	1	;There is more than 1 active tblptr byte
 17001  01176A  0EFB               	movlw	high _line1
 17002  01176C  6EF7               	movwf	tblptrh,c
 17003  01176E                     	endif
 17004  01176E                     	if	1	;There are 3 active tblptr bytes
 17005  01176E  0E00               	movlw	low (_line1 shr (0+16))
 17006  011770  6EF8               	movwf	tblptru,c
 17007  011772                     	endif
 17008  011772  0008               	tblrd		*
 17009  011774  CFF5 F026          	movff	tablat,lcd_string@lcdline
 17010  011778  EC5D  F08A         	call	_lcd_string	;wreg free
 17011                           
 17012                           ;vend.c: 321: senspos = bflag + 2;
 17013  01177C  5045               	movf	_bflag,w,c
 17014  01177E  0F02               	addlw	2
 17015  011780  6E37               	movwf	_senspos,c	;volatile
 17016                           
 17017                           ;vend.c: 323: lcd_string(dacmsg, line2);
 17018  011782  0EEA               	movlw	low _dacmsg
 17019  011784  6E24               	movwf	lcd_string@lcdstring,c
 17020  011786  0EFE               	movlw	high _dacmsg
 17021  011788  6E25               	movwf	lcd_string@lcdstring+1,c
 17022  01178A  0E85               	movlw	low _line2
 17023  01178C  6EF6               	movwf	tblptrl,c
 17024  01178E                     	if	1	;There is more than 1 active tblptr byte
 17025  01178E  0EFB               	movlw	high _line2
 17026  011790  6EF7               	movwf	tblptrh,c
 17027  011792                     	endif
 17028  011792                     	if	1	;There are 3 active tblptr bytes
 17029  011792  0E00               	movlw	low (_line2 shr (0+16))
 17030  011794  6EF8               	movwf	tblptru,c
 17031  011796                     	endif
 17032  011796  0008               	tblrd		*
 17033  011798  CFF5 F026          	movff	tablat,lcd_string@lcdline
 17034  01179C  EC5D  F08A         	call	_lcd_string	;wreg free
 17035                           
 17036                           ;vend.c: 325: uint8_t dacpos = bflag + 2;
 17037  0117A0  5045               	movf	_bflag,w,c
 17038  0117A2  0F02               	addlw	2
 17039  0117A4  6E2C               	movwf	Sensor_set@dacpos,c
 17040                           
 17041                           ;vend.c: 326: displ_sens(senspos, dacpos);
 17042  0117A6  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
 17043  0117AA  5037               	movf	_senspos,w,c	;volatile
 17044  0117AC  EC14  F093         	call	_displ_sens
 17045                           
 17046                           ;vend.c: 327: while(mdbflags.endis)
 17047  0117B0  D03D               	goto	l2528
 17048  0117B2                     
 17049                           ;vend.c: 328: {
 17050                           ;vend.c: 329: buttons = butindb();
 17051  0117B2  EC72  F097         	call	_butindb	;wreg free
 17052  0117B6  6E3A               	movwf	_buttons,c	;volatile
 17053                           
 17054                           ;vend.c: 330: switch(buttons)
 17055  0117B8  D027               	goto	l2523
 17056  0117BA  5038               	movf	_sensorval,w,c	;volatile
 17057  0117BC  0B1F               	andlw	31
 17058  0117BE  010F               	movlb	15	; () banked
 17059  0117C0  6F34               	movwf	52,b	;volatile
 17060                           
 17061                           ; BSR set to: 15
 17062  0117C2  2A38               	incf	_sensorval,f,c	;volatile
 17063                           
 17064                           ; BSR set to: 15
 17065                           ;vend.c: 333: displ_sens(senspos, dacpos);
 17066  0117C4  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
 17067  0117C8  5037               	movf	_senspos,w,c	;volatile
 17068  0117CA  EC14  F093         	call	_displ_sens
 17069                           
 17070                           ;vend.c: 334: break;
 17071  0117CE  D026               	goto	l2525
 17072  0117D0  5038               	movf	_sensorval,w,c	;volatile
 17073  0117D2  0B1F               	andlw	31
 17074  0117D4  010F               	movlb	15	; () banked
 17075  0117D6  6F34               	movwf	52,b	;volatile
 17076                           
 17077                           ; BSR set to: 15
 17078  0117D8  0638               	decf	_sensorval,f,c	;volatile
 17079                           
 17080                           ; BSR set to: 15
 17081                           ;vend.c: 336: displ_sens(senspos, dacpos);
 17082  0117DA  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
 17083  0117DE  5037               	movf	_senspos,w,c	;volatile
 17084  0117E0  EC14  F093         	call	_displ_sens
 17085                           
 17086                           ;vend.c: 337: break;
 17087  0117E4  D01B               	goto	l2525
 17088  0117E6                     l2527:
 17089  0117E6  9C40               	bcf	_mdbflags,6,c
 17090                           
 17091                           ;vend.c: 339: lcd_string(servmsg, line1);
 17092  0117E8  0E95               	movlw	low _servmsg
 17093  0117EA  6E24               	movwf	lcd_string@lcdstring,c
 17094  0117EC  0EFB               	movlw	high _servmsg
 17095  0117EE  6E25               	movwf	lcd_string@lcdstring+1,c
 17096  0117F0  0E86               	movlw	low _line1
 17097  0117F2  6EF6               	movwf	tblptrl,c
 17098  0117F4                     	if	1	;There is more than 1 active tblptr byte
 17099  0117F4  0EFB               	movlw	high _line1
 17100  0117F6  6EF7               	movwf	tblptrh,c
 17101  0117F8                     	endif
 17102  0117F8                     	if	1	;There are 3 active tblptr bytes
 17103  0117F8  0E00               	movlw	low (_line1 shr (0+16))
 17104  0117FA  6EF8               	movwf	tblptru,c
 17105  0117FC                     	endif
 17106  0117FC  0008               	tblrd		*
 17107  0117FE  CFF5 F026          	movff	tablat,lcd_string@lcdline
 17108  011802  EC5D  F08A         	call	_lcd_string	;wreg free
 17109                           
 17110                           ;vend.c: 341: }
 17111                           
 17112                           ;vend.c: 340: break;
 17113  011806  D00A               	goto	l2525
 17114  011808                     l2523:
 17115  011808  503A               	movf	_buttons,w,c	;volatile
 17116                           
 17117                           ; Switch size 1, requested type "space"
 17118                           ; Number of cases is 3, Range of values is 1 to 128
 17119                           ; switch strategies available:
 17120                           ; Name         Instructions Cycles
 17121                           ; simple_byte           10     6 (average)
 17122                           ;	Chosen strategy is simple_byte
 17123  01180A  0A01               	xorlw	1	; case 1
 17124  01180C  B4D8               	btfsc	status,2,c
 17125  01180E  D7D5               	goto	l2524
 17126  011810  0A03               	xorlw	3	; case 2
 17127  011812  B4D8               	btfsc	status,2,c
 17128  011814  D7DD               	goto	l2526
 17129  011816  0A82               	xorlw	130	; case 128
 17130  011818  B4D8               	btfsc	status,2,c
 17131  01181A  D7E5               	goto	l2527
 17132  01181C                     l2525:
 17133                           
 17134                           ;vend.c: 342: if(PIR4bits.TMR3IF)
 17135  01181C  010E               	movlb	14	; () banked
 17136  01181E  A5CE               	btfss	206,2,b	;volatile
 17137  011820  D005               	goto	l2528
 17138                           
 17139                           ; BSR set to: 14
 17140                           ;vend.c: 343: {
 17141                           ;vend.c: 344: displ_sens(senspos, dacpos);
 17142  011822  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
 17143  011826  5037               	movf	_senspos,w,c	;volatile
 17144  011828  EC14  F093         	call	_displ_sens
 17145  01182C                     l2528:
 17146  01182C  AC40               	btfss	_mdbflags,6,c
 17147  01182E  0012               	return	
 17148  011830  D7C0               	goto	l2522
 17149  011832                     __end_of_Sensor_set:
 17150                           	opt stack 0
 17151                           tblptru	equ	0xFF8
 17152                           tblptrh	equ	0xFF7
 17153                           tblptrl	equ	0xFF6
 17154                           tablat	equ	0xFF5
 17155                           prodh	equ	0xFF4
 17156                           prodl	equ	0xFF3
 17157                           intcon	equ	0xFF2
 17158                           indf0	equ	0xFEF
 17159                           postinc0	equ	0xFEE
 17160                           fsr0h	equ	0xFEA
 17161                           fsr0l	equ	0xFE9
 17162                           wreg	equ	0xFE8
 17163                           indf1	equ	0xFE7
 17164                           postdec1	equ	0xFE5
 17165                           fsr1h	equ	0xFE2
 17166                           fsr1l	equ	0xFE1
 17167                           indf2	equ	0xFDF
 17168                           postinc2	equ	0xFDE
 17169                           fsr2h	equ	0xFDA
 17170                           fsr2l	equ	0xFD9
 17171                           status	equ	0xFD8
 17172                           
 17173 ;; *************** function _displ_sens *****************
 17174 ;; Defined at:
 17175 ;;		line 41 in file "lcd.c"
 17176 ;; Parameters:    Size  Location     Type
 17177 ;;  smsgpos         1    wreg     unsigned char 
 17178 ;;  dmsgpos         1   31[COMRAM] unsigned char 
 17179 ;; Auto vars:     Size  Location     Type
 17180 ;;  smsgpos         1   32[COMRAM] unsigned char 
 17181 ;; Return value:  Size  Location     Type
 17182 ;;                  1    wreg      void 
 17183 ;; Registers used:
 17184 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17185 ;; Tracked objects:
 17186 ;;		On entry : 0/0
 17187 ;;		On exit  : 0/0
 17188 ;;		Unchanged: 0/0
 17189 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 17190 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17194 ;;Total ram usage:        2 bytes
 17195 ;; Hardware stack levels used:    1
 17196 ;; Hardware stack levels required when called:    8
 17197 ;; This function calls:
 17198 ;;		_CMP1_GetOutputStatus
 17199 ;;		_DATAEE_WriteByte
 17200 ;;		_displ_hex
 17201 ;;		_lcd_dispadd
 17202 ;;		_lcd_string
 17203 ;; This function is called by:
 17204 ;;		_Sensor_set
 17205 ;; This function uses a non-reentrant model
 17206 ;;
 17207                           
 17208                           	psect	text91
 17209  012628                     __ptext91:
 17210                           	opt stack 0
 17211  012628                     _displ_sens:
 17212                           	opt stack 20
 17213                           
 17214                           ;incstack = 0
 17215                           ;displ_sens@smsgpos stored from wreg
 17216  012628  6E2B               	movwf	displ_sens@smsgpos,c
 17217                           
 17218                           ;lcd.c: 43: if(CMP1_GetOutputStatus())
 17219  01262A  EC90  F09B         	call	_CMP1_GetOutputStatus	;wreg free
 17220  01262E  0900               	iorlw	0
 17221  012630  B4D8               	btfsc	status,2,c
 17222  012632  D009               	goto	l1823
 17223                           
 17224                           ;lcd.c: 44: {
 17225                           ;lcd.c: 45: lcd_string(offmsg, smsgpos);
 17226  012634  0EF7               	movlw	low _offmsg
 17227  012636  6E24               	movwf	lcd_string@lcdstring,c
 17228  012638  0EFF               	movlw	high _offmsg
 17229  01263A  6E25               	movwf	lcd_string@lcdstring+1,c
 17230  01263C  C02B  F026         	movff	displ_sens@smsgpos,lcd_string@lcdline
 17231  012640  EC5D  F08A         	call	_lcd_string	;wreg free
 17232                           
 17233                           ;lcd.c: 46: }
 17234  012644  D008               	goto	l1824
 17235  012646                     l1823:
 17236                           
 17237                           ;lcd.c: 47: else
 17238                           ;lcd.c: 48: {
 17239                           ;lcd.c: 49: lcd_string(onmsg, smsgpos);
 17240  012646  0EFB               	movlw	low _onmsg
 17241  012648  6E24               	movwf	lcd_string@lcdstring,c
 17242  01264A  0EFF               	movlw	high _onmsg
 17243  01264C  6E25               	movwf	lcd_string@lcdstring+1,c
 17244  01264E  C02B  F026         	movff	displ_sens@smsgpos,lcd_string@lcdline
 17245  012652  EC5D  F08A         	call	_lcd_string	;wreg free
 17246  012656                     l1824:
 17247                           
 17248                           ;lcd.c: 50: }
 17249                           ;lcd.c: 51: DATAEE_WriteByte(sensval, sensorval);
 17250  012656  0E4A               	movlw	low _sensval
 17251  012658  6EF6               	movwf	tblptrl,c
 17252  01265A                     	if	1	;There is more than 1 active tblptr byte
 17253  01265A  0EFB               	movlw	high _sensval
 17254  01265C  6EF7               	movwf	tblptrh,c
 17255  01265E                     	endif
 17256  01265E                     	if	1	;There are 3 active tblptr bytes
 17257  01265E  0E00               	movlw	low (_sensval shr (0+16))
 17258  012660  6EF8               	movwf	tblptru,c
 17259  012662                     	endif
 17260  012662  0009               	tblrd		*+
 17261  012664  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 17262  012668  000A               	tblrd		*-
 17263  01266A  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 17264  01266E  C038  F01F         	movff	_sensorval,DATAEE_WriteByte@bData	;volatile
 17265  012672  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 17266                           
 17267                           ;lcd.c: 52: lcd_string(clrmsg, dmsgpos);
 17268  012676  0E73               	movlw	low _clrmsg
 17269  012678  6E24               	movwf	lcd_string@lcdstring,c
 17270  01267A  0EFF               	movlw	high _clrmsg
 17271  01267C  6E25               	movwf	lcd_string@lcdstring+1,c
 17272  01267E  C02A  F026         	movff	displ_sens@dmsgpos,lcd_string@lcdline
 17273  012682  EC5D  F08A         	call	_lcd_string	;wreg free
 17274                           
 17275                           ;lcd.c: 53: lcd_dispadd(dmsgpos);
 17276  012686  502A               	movf	displ_sens@dmsgpos,w,c
 17277  012688  ECF4  F09A         	call	_lcd_dispadd
 17278                           
 17279                           ;lcd.c: 54: displ_hex((uint8_t) DAC1CON1);
 17280  01268C  010F               	movlb	15	; () banked
 17281  01268E  5134               	movf	52,w,b	;volatile
 17282  012690  6E27               	movwf	displ_hex@hexnum,c
 17283  012692  6A28               	clrf	displ_hex@hexnum+1,c
 17284  012694  6A29               	clrf	displ_hex@hexnum+2,c
 17285  012696  ECAB  F08D         	call	_displ_hex	;wreg free
 17286  01269A  0012               	return		;funcret
 17287  01269C                     __end_of_displ_sens:
 17288                           	opt stack 0
 17289                           tblptru	equ	0xFF8
 17290                           tblptrh	equ	0xFF7
 17291                           tblptrl	equ	0xFF6
 17292                           tablat	equ	0xFF5
 17293                           prodh	equ	0xFF4
 17294                           prodl	equ	0xFF3
 17295                           intcon	equ	0xFF2
 17296                           indf0	equ	0xFEF
 17297                           postinc0	equ	0xFEE
 17298                           fsr0h	equ	0xFEA
 17299                           fsr0l	equ	0xFE9
 17300                           wreg	equ	0xFE8
 17301                           indf1	equ	0xFE7
 17302                           postdec1	equ	0xFE5
 17303                           fsr1h	equ	0xFE2
 17304                           fsr1l	equ	0xFE1
 17305                           indf2	equ	0xFDF
 17306                           postinc2	equ	0xFDE
 17307                           fsr2h	equ	0xFDA
 17308                           fsr2l	equ	0xFD9
 17309                           status	equ	0xFD8
 17310                           
 17311 ;; *************** function _Hopper_coin *****************
 17312 ;; Defined at:
 17313 ;;		line 239 in file "vend.c"
 17314 ;; Parameters:    Size  Location     Type
 17315 ;;		None
 17316 ;; Auto vars:     Size  Location     Type
 17317 ;;  coinval         1   33[COMRAM] unsigned char 
 17318 ;; Return value:  Size  Location     Type
 17319 ;;                  1    wreg      void 
 17320 ;; Registers used:
 17321 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17322 ;; Tracked objects:
 17323 ;;		On entry : 0/0
 17324 ;;		On exit  : 0/0
 17325 ;;		Unchanged: 0/0
 17326 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 17327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17330 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17331 ;;Total ram usage:        1 bytes
 17332 ;; Hardware stack levels used:    1
 17333 ;; Hardware stack levels required when called:    9
 17334 ;; This function calls:
 17335 ;;		_DATAEE_ReadByte
 17336 ;;		_Update_Hopcoin
 17337 ;;		_butindb
 17338 ;;		_displ_hex
 17339 ;;		_lcd_dispadd
 17340 ;;		_lcd_string
 17341 ;; This function is called by:
 17342 ;;		_enter_service
 17343 ;; This function uses a non-reentrant model
 17344 ;;
 17345                           
 17346                           	psect	text92
 17347  011832                     __ptext92:
 17348                           	opt stack 0
 17349  011832                     _Hopper_coin:
 17350                           	opt stack 20
 17351                           
 17352                           ;vend.c: 241: lcd_string(hoppcoin, line1);
 17353                           
 17354                           ;incstack = 0
 17355  011832  0EDD               	movlw	low _hoppcoin
 17356  011834  6E24               	movwf	lcd_string@lcdstring,c
 17357  011836  0EFC               	movlw	high _hoppcoin
 17358  011838  6E25               	movwf	lcd_string@lcdstring+1,c
 17359  01183A  0E86               	movlw	low _line1
 17360  01183C  6EF6               	movwf	tblptrl,c
 17361  01183E                     	if	1	;There is more than 1 active tblptr byte
 17362  01183E  0EFB               	movlw	high _line1
 17363  011840  6EF7               	movwf	tblptrh,c
 17364  011842                     	endif
 17365  011842                     	if	1	;There are 3 active tblptr bytes
 17366  011842  0E00               	movlw	low (_line1 shr (0+16))
 17367  011844  6EF8               	movwf	tblptru,c
 17368  011846                     	endif
 17369  011846  0008               	tblrd		*
 17370  011848  CFF5 F026          	movff	tablat,lcd_string@lcdline
 17371  01184C  EC5D  F08A         	call	_lcd_string	;wreg free
 17372                           
 17373                           ;vend.c: 242: mdbflags.endis = 1;
 17374  011850  8C40               	bsf	_mdbflags,6,c
 17375                           
 17376                           ;vend.c: 243: senspos = bflag + 2;
 17377  011852  5045               	movf	_bflag,w,c
 17378  011854  0F02               	addlw	2
 17379  011856  6E37               	movwf	_senspos,c	;volatile
 17380                           
 17381                           ;vend.c: 244: uint8_t coinval = DATAEE_ReadByte(hopcoin);
 17382  011858  0E46               	movlw	low _hopcoin
 17383  01185A  6EF6               	movwf	tblptrl,c
 17384  01185C                     	if	1	;There is more than 1 active tblptr byte
 17385  01185C  0EFB               	movlw	high _hopcoin
 17386  01185E  6EF7               	movwf	tblptrh,c
 17387  011860                     	endif
 17388  011860                     	if	1	;There are 3 active tblptr bytes
 17389  011860  0E00               	movlw	low (_hopcoin shr (0+16))
 17390  011862  6EF8               	movwf	tblptru,c
 17391  011864                     	endif
 17392  011864  0009               	tblrd		*+
 17393  011866  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 17394  01186A  000A               	tblrd		*-
 17395  01186C  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 17396  011870  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 17397  011874  6E2C               	movwf	Hopper_coin@coinval,c
 17398                           
 17399                           ;vend.c: 245: lcd_dispadd(senspos);
 17400  011876  5037               	movf	_senspos,w,c	;volatile
 17401  011878  ECF4  F09A         	call	_lcd_dispadd
 17402                           
 17403                           ;vend.c: 246: displ_hex((uint24_t)coinval);
 17404  01187C  502C               	movf	Hopper_coin@coinval,w,c
 17405  01187E  6E27               	movwf	displ_hex@hexnum,c
 17406  011880  6A28               	clrf	displ_hex@hexnum+1,c
 17407  011882  6A29               	clrf	displ_hex@hexnum+2,c
 17408  011884  ECAB  F08D         	call	_displ_hex	;wreg free
 17409                           
 17410                           ;vend.c: 247: while(mdbflags.endis)
 17411  011888  D03C               	goto	l2492
 17412  01188A                     
 17413                           ;vend.c: 248: {
 17414                           ;vend.c: 249: buttons = butindb();
 17415  01188A  EC72  F097         	call	_butindb	;wreg free
 17416  01188E  6E3A               	movwf	_buttons,c	;volatile
 17417                           
 17418                           ;vend.c: 250: switch(buttons)
 17419  011890  D01F               	goto	l2494
 17420  011892  0E01               	movlw	1
 17421  011894  6E2A               	movwf	Update_Hopcoin@direction,c
 17422  011896  502C               	movf	Hopper_coin@coinval,w,c
 17423  011898  EC91  F091         	call	_Update_Hopcoin
 17424                           
 17425                           ;vend.c: 253: break;
 17426  01189C  D023               	goto	l2496
 17427  01189E  0E02               	movlw	2
 17428  0118A0  6E2A               	movwf	Update_Hopcoin@direction,c
 17429  0118A2  502C               	movf	Hopper_coin@coinval,w,c
 17430  0118A4  EC91  F091         	call	_Update_Hopcoin
 17431                           
 17432                           ;vend.c: 255: break;
 17433  0118A8  D01D               	goto	l2496
 17434  0118AA                     l2498:
 17435  0118AA  9C40               	bcf	_mdbflags,6,c
 17436                           
 17437                           ;vend.c: 257: lcd_string(servmsg, line1);
 17438  0118AC  0E95               	movlw	low _servmsg
 17439  0118AE  6E24               	movwf	lcd_string@lcdstring,c
 17440  0118B0  0EFB               	movlw	high _servmsg
 17441  0118B2  6E25               	movwf	lcd_string@lcdstring+1,c
 17442  0118B4  0E86               	movlw	low _line1
 17443  0118B6  6EF6               	movwf	tblptrl,c
 17444  0118B8                     	if	1	;There is more than 1 active tblptr byte
 17445  0118B8  0EFB               	movlw	high _line1
 17446  0118BA  6EF7               	movwf	tblptrh,c
 17447  0118BC                     	endif
 17448  0118BC                     	if	1	;There are 3 active tblptr bytes
 17449  0118BC  0E00               	movlw	low (_line1 shr (0+16))
 17450  0118BE  6EF8               	movwf	tblptru,c
 17451  0118C0                     	endif
 17452  0118C0  0008               	tblrd		*
 17453  0118C2  CFF5 F026          	movff	tablat,lcd_string@lcdline
 17454  0118C6  EC5D  F08A         	call	_lcd_string	;wreg free
 17455                           
 17456                           ;vend.c: 258: buttons = 0x00;
 17457  0118CA  0E00               	movlw	0
 17458  0118CC  6E3A               	movwf	_buttons,c	;volatile
 17459                           
 17460                           ;vend.c: 260: }
 17461                           
 17462                           ;vend.c: 259: break;
 17463  0118CE  D00A               	goto	l2496
 17464  0118D0                     l2494:
 17465  0118D0  503A               	movf	_buttons,w,c	;volatile
 17466                           
 17467                           ; Switch size 1, requested type "space"
 17468                           ; Number of cases is 3, Range of values is 1 to 128
 17469                           ; switch strategies available:
 17470                           ; Name         Instructions Cycles
 17471                           ; simple_byte           10     6 (average)
 17472                           ;	Chosen strategy is simple_byte
 17473  0118D2  0A01               	xorlw	1	; case 1
 17474  0118D4  B4D8               	btfsc	status,2,c
 17475  0118D6  D7DD               	goto	l2495
 17476  0118D8  0A03               	xorlw	3	; case 2
 17477  0118DA  B4D8               	btfsc	status,2,c
 17478  0118DC  D7E0               	goto	l2497
 17479  0118DE  0A82               	xorlw	130	; case 128
 17480  0118E0  B4D8               	btfsc	status,2,c
 17481  0118E2  D7E3               	goto	l2498
 17482  0118E4                     l2496:
 17483                           
 17484                           ;vend.c: 261: coinval = DATAEE_ReadByte(hopcoin);
 17485  0118E4  0E46               	movlw	low _hopcoin
 17486  0118E6  6EF6               	movwf	tblptrl,c
 17487  0118E8                     	if	1	;There is more than 1 active tblptr byte
 17488  0118E8  0EFB               	movlw	high _hopcoin
 17489  0118EA  6EF7               	movwf	tblptrh,c
 17490  0118EC                     	endif
 17491  0118EC                     	if	1	;There are 3 active tblptr bytes
 17492  0118EC  0E00               	movlw	low (_hopcoin shr (0+16))
 17493  0118EE  6EF8               	movwf	tblptru,c
 17494  0118F0                     	endif
 17495  0118F0  0009               	tblrd		*+
 17496  0118F2  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 17497  0118F6  000A               	tblrd		*-
 17498  0118F8  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 17499  0118FC  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 17500  011900  6E2C               	movwf	Hopper_coin@coinval,c
 17501  011902                     l2492:
 17502  011902  AC40               	btfss	_mdbflags,6,c
 17503  011904  0012               	return	
 17504  011906  D7C1               	goto	l2493
 17505  011908                     __end_of_Hopper_coin:
 17506                           	opt stack 0
 17507                           tblptru	equ	0xFF8
 17508                           tblptrh	equ	0xFF7
 17509                           tblptrl	equ	0xFF6
 17510                           tablat	equ	0xFF5
 17511                           prodh	equ	0xFF4
 17512                           prodl	equ	0xFF3
 17513                           intcon	equ	0xFF2
 17514                           indf0	equ	0xFEF
 17515                           postinc0	equ	0xFEE
 17516                           fsr0h	equ	0xFEA
 17517                           fsr0l	equ	0xFE9
 17518                           wreg	equ	0xFE8
 17519                           indf1	equ	0xFE7
 17520                           postdec1	equ	0xFE5
 17521                           fsr1h	equ	0xFE2
 17522                           fsr1l	equ	0xFE1
 17523                           indf2	equ	0xFDF
 17524                           postinc2	equ	0xFDE
 17525                           fsr2h	equ	0xFDA
 17526                           fsr2l	equ	0xFD9
 17527                           status	equ	0xFD8
 17528                           
 17529 ;; *************** function _butindb *****************
 17530 ;; Defined at:
 17531 ;;		line 155 in file "vend.c"
 17532 ;; Parameters:    Size  Location     Type
 17533 ;;		None
 17534 ;; Auto vars:     Size  Location     Type
 17535 ;;  butt            1   24[COMRAM] unsigned char 
 17536 ;;  butval          1   23[COMRAM] unsigned char 
 17537 ;; Return value:  Size  Location     Type
 17538 ;;                  1    wreg      unsigned char 
 17539 ;; Registers used:
 17540 ;;		wreg, status,2, status,0, cstack
 17541 ;; Tracked objects:
 17542 ;;		On entry : 0/0
 17543 ;;		On exit  : 0/0
 17544 ;;		Unchanged: 0/0
 17545 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 17546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17547 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17548 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17549 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17550 ;;Total ram usage:        4 bytes
 17551 ;; Hardware stack levels used:    1
 17552 ;; Hardware stack levels required when called:    3
 17553 ;; This function calls:
 17554 ;;		_butin
 17555 ;; This function is called by:
 17556 ;;		_enter_service
 17557 ;;		_Hopper_coin
 17558 ;;		_Sensor_set
 17559 ;;		_price_set
 17560 ;;		_set_price
 17561 ;;		_Vend_setup
 17562 ;;		_Vend_settime
 17563 ;;		_Vend_timeset
 17564 ;;		_Chan_link
 17565 ;;		_Link_chan
 17566 ;;		_Sens_off
 17567 ;;		_off_sens
 17568 ;;		_set_notes
 17569 ;;		_enable_notes
 17570 ;; This function uses a non-reentrant model
 17571 ;;
 17572                           
 17573                           	psect	text93
 17574  012EE4                     __ptext93:
 17575                           	opt stack 0
 17576  012EE4                     _butindb:
 17577                           	opt stack 24
 17578                           
 17579                           ;vend.c: 157: if(butin() == 0)
 17580                           
 17581                           ;incstack = 0
 17582  012EE4  EC4F  F095         	call	_butin	;wreg free
 17583  012EE8  0900               	iorlw	0
 17584  012EEA  A4D8               	btfss	status,2,c
 17585  012EEC  D002               	goto	l2462
 17586                           
 17587                           ;vend.c: 158: {
 17588                           ;vend.c: 159: return 0x00;
 17589  012EEE  0E00               	movlw	0
 17590  012EF0  0012               	return	
 17591  012EF2                     l2462:
 17592                           
 17593                           ;vend.c: 160: }
 17594                           ;vend.c: 161: uint8_t butt = butin();
 17595  012EF2  EC4F  F095         	call	_butin	;wreg free
 17596  012EF6  6E23               	movwf	butindb@butt,c
 17597                           
 17598                           ;vend.c: 162: uint8_t butval = butt;
 17599  012EF8  C023  F022         	movff	butindb@butt,butindb@butval
 17600                           
 17601                           ;vend.c: 163: while(butval != 0x00)
 17602  012EFC  D003               	goto	l2464
 17603  012EFE                     
 17604                           ;vend.c: 164: {
 17605                           ;vend.c: 165: butval = butin();
 17606  012EFE  EC4F  F095         	call	_butin	;wreg free
 17607  012F02  6E22               	movwf	butindb@butval,c
 17608  012F04                     l2464:
 17609  012F04  5022               	movf	butindb@butval,w,c
 17610  012F06  A4D8               	btfss	status,2,c
 17611  012F08  D7FA               	goto	l2465
 17612                           
 17613                           ;vend.c: 166: }
 17614                           ;vend.c: 167: _delay((unsigned long)((500)*(64000000/4000.0)));
 17615  012F0A  0E29               	movlw	41
 17616  012F0C  6E21               	movwf	(??_butindb+1)& (0+255),c
 17617  012F0E  0E96               	movlw	150
 17618  012F10  6E20               	movwf	??_butindb& (0+255),c
 17619  012F12  0E7F               	movlw	127
 17620  012F14                     u7437:
 17621  012F14  2EE8               	decfsz	wreg,f,c
 17622  012F16  D7FE               	bra	u7437
 17623  012F18  2E20               	decfsz	??_butindb& (0+255),f,c
 17624  012F1A  D7FC               	bra	u7437
 17625  012F1C  2E21               	decfsz	(??_butindb+1)& (0+255),f,c
 17626  012F1E  D7FA               	bra	u7437
 17627  012F20  F000               	nop	
 17628                           
 17629                           ;vend.c: 169: return butt;
 17630  012F22  5023               	movf	butindb@butt,w,c
 17631  012F24  0012               	return	
 17632  012F26                     __end_of_butindb:
 17633                           	opt stack 0
 17634                           tblptru	equ	0xFF8
 17635                           tblptrh	equ	0xFF7
 17636                           tblptrl	equ	0xFF6
 17637                           tablat	equ	0xFF5
 17638                           prodh	equ	0xFF4
 17639                           prodl	equ	0xFF3
 17640                           intcon	equ	0xFF2
 17641                           indf0	equ	0xFEF
 17642                           postinc0	equ	0xFEE
 17643                           fsr0h	equ	0xFEA
 17644                           fsr0l	equ	0xFE9
 17645                           wreg	equ	0xFE8
 17646                           indf1	equ	0xFE7
 17647                           postdec1	equ	0xFE5
 17648                           fsr1h	equ	0xFE2
 17649                           fsr1l	equ	0xFE1
 17650                           indf2	equ	0xFDF
 17651                           postinc2	equ	0xFDE
 17652                           fsr2h	equ	0xFDA
 17653                           fsr2l	equ	0xFD9
 17654                           status	equ	0xFD8
 17655                           
 17656 ;; *************** function _Update_Hopcoin *****************
 17657 ;; Defined at:
 17658 ;;		line 265 in file "vend.c"
 17659 ;; Parameters:    Size  Location     Type
 17660 ;;  newval          1    wreg     unsigned char 
 17661 ;;  direction       1   31[COMRAM] unsigned char 
 17662 ;; Auto vars:     Size  Location     Type
 17663 ;;  newval          1   32[COMRAM] unsigned char 
 17664 ;; Return value:  Size  Location     Type
 17665 ;;                  1    wreg      void 
 17666 ;; Registers used:
 17667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17668 ;; Tracked objects:
 17669 ;;		On entry : 0/0
 17670 ;;		On exit  : 0/0
 17671 ;;		Unchanged: 0/0
 17672 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 17673 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17674 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17677 ;;Total ram usage:        2 bytes
 17678 ;; Hardware stack levels used:    1
 17679 ;; Hardware stack levels required when called:    8
 17680 ;; This function calls:
 17681 ;;		_DATAEE_WriteByte
 17682 ;;		_displ_hex
 17683 ;;		_lcd_dispadd
 17684 ;;		_lcd_string
 17685 ;; This function is called by:
 17686 ;;		_Hopper_coin
 17687 ;; This function uses a non-reentrant model
 17688 ;;
 17689                           
 17690                           	psect	text94
 17691  012322                     __ptext94:
 17692                           	opt stack 0
 17693  012322                     _Update_Hopcoin:
 17694                           	opt stack 20
 17695                           
 17696                           ;incstack = 0
 17697                           ;Update_Hopcoin@newval stored from wreg
 17698  012322  6E2B               	movwf	Update_Hopcoin@newval,c
 17699                           
 17700                           ;vend.c: 268: switch(newval)
 17701  012324  D014               	goto	l2503
 17702  012326  042A               	decf	Update_Hopcoin@direction,w,c
 17703  012328  A4D8               	btfss	status,2,c
 17704  01232A  D005               	goto	u5960
 17705                           
 17706                           ;vend.c: 271: {
 17707                           ;vend.c: 272: newval++;
 17708  01232C  2A2B               	incf	Update_Hopcoin@newval,f,c
 17709                           
 17710                           ;vend.c: 273: }
 17711  01232E  D01A               	goto	l2507
 17712  012330  042A               	decf	Update_Hopcoin@direction,w,c
 17713  012332  A4D8               	btfss	status,2,c
 17714  012334  D002               	goto	l2509
 17715  012336                     u5960:
 17716                           
 17717                           ;vend.c: 280: {
 17718                           ;vend.c: 281: newval = 0x05;
 17719  012336  0E05               	movlw	5
 17720  012338  D006               	goto	L18
 17721  01233A                     l2509:
 17722                           
 17723                           ;vend.c: 283: else
 17724                           ;vend.c: 284: {
 17725                           ;vend.c: 285: newval--;
 17726  01233A  062B               	decf	Update_Hopcoin@newval,f,c
 17727                           
 17728                           ;vend.c: 286: }
 17729                           ;vend.c: 287: break;
 17730  01233C  D013               	goto	l2507
 17731  01233E  042A               	decf	Update_Hopcoin@direction,w,c
 17732  012340  A4D8               	btfss	status,2,c
 17733  012342  D003               	goto	l2514
 17734                           
 17735                           ;vend.c: 289: {
 17736                           ;vend.c: 291: newval = 0x01;
 17737  012344  0E01               	movlw	1
 17738  012346                     L18:
 17739  012346  6E2B               	movwf	Update_Hopcoin@newval,c
 17740                           
 17741                           ;vend.c: 296: }
 17742                           ;vend.c: 297: break;
 17743  012348  D00D               	goto	l2507
 17744  01234A                     l2514:
 17745  01234A  0E02               	movlw	2
 17746  01234C  D7FC               	goto	L18
 17747  01234E                     l2503:
 17748  01234E  502B               	movf	Update_Hopcoin@newval,w,c
 17749                           
 17750                           ; Switch size 1, requested type "space"
 17751                           ; Number of cases is 3, Range of values is 1 to 5
 17752                           ; switch strategies available:
 17753                           ; Name         Instructions Cycles
 17754                           ; simple_byte           10     6 (average)
 17755                           ;	Chosen strategy is simple_byte
 17756  012350  0A01               	xorlw	1	; case 1
 17757  012352  B4D8               	btfsc	status,2,c
 17758  012354  D7E8               	goto	l2504
 17759  012356  0A03               	xorlw	3	; case 2
 17760  012358  B4D8               	btfsc	status,2,c
 17761  01235A  D7EA               	goto	l2508
 17762  01235C  0A07               	xorlw	7	; case 5
 17763  01235E  B4D8               	btfsc	status,2,c
 17764  012360  D7EE               	goto	l2511
 17765  012362  D7F3               	goto	l2514
 17766  012364                     l2507:
 17767                           
 17768                           ;vend.c: 300: lcd_string(clrmsg, senspos);
 17769  012364  0E73               	movlw	low _clrmsg
 17770  012366  6E24               	movwf	lcd_string@lcdstring,c
 17771  012368  0EFF               	movlw	high _clrmsg
 17772  01236A  6E25               	movwf	lcd_string@lcdstring+1,c
 17773  01236C  C037  F026         	movff	_senspos,lcd_string@lcdline	;volatile
 17774  012370  EC5D  F08A         	call	_lcd_string	;wreg free
 17775                           
 17776                           ;vend.c: 301: DATAEE_WriteByte(hopcoin, newval);
 17777  012374  0E46               	movlw	low _hopcoin
 17778  012376  6EF6               	movwf	tblptrl,c
 17779  012378                     	if	1	;There is more than 1 active tblptr byte
 17780  012378  0EFB               	movlw	high _hopcoin
 17781  01237A  6EF7               	movwf	tblptrh,c
 17782  01237C                     	endif
 17783  01237C                     	if	1	;There are 3 active tblptr bytes
 17784  01237C  0E00               	movlw	low (_hopcoin shr (0+16))
 17785  01237E  6EF8               	movwf	tblptru,c
 17786  012380                     	endif
 17787  012380  0009               	tblrd		*+
 17788  012382  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 17789  012386  000A               	tblrd		*-
 17790  012388  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 17791  01238C  C02B  F01F         	movff	Update_Hopcoin@newval,DATAEE_WriteByte@bData
 17792  012390  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 17793                           
 17794                           ;vend.c: 302: lcd_dispadd(senspos);
 17795  012394  5037               	movf	_senspos,w,c	;volatile
 17796  012396  ECF4  F09A         	call	_lcd_dispadd
 17797                           
 17798                           ;vend.c: 303: displ_hex((uint24_t)newval);
 17799  01239A  502B               	movf	Update_Hopcoin@newval,w,c
 17800  01239C  6E27               	movwf	displ_hex@hexnum,c
 17801  01239E  6A28               	clrf	displ_hex@hexnum+1,c
 17802  0123A0  6A29               	clrf	displ_hex@hexnum+2,c
 17803  0123A2  ECAB  F08D         	call	_displ_hex	;wreg free
 17804  0123A6  0012               	return		;funcret
 17805  0123A8                     __end_of_Update_Hopcoin:
 17806                           	opt stack 0
 17807                           tblptru	equ	0xFF8
 17808                           tblptrh	equ	0xFF7
 17809                           tblptrl	equ	0xFF6
 17810                           tablat	equ	0xFF5
 17811                           prodh	equ	0xFF4
 17812                           prodl	equ	0xFF3
 17813                           intcon	equ	0xFF2
 17814                           indf0	equ	0xFEF
 17815                           postinc0	equ	0xFEE
 17816                           fsr0h	equ	0xFEA
 17817                           fsr0l	equ	0xFE9
 17818                           wreg	equ	0xFE8
 17819                           indf1	equ	0xFE7
 17820                           postdec1	equ	0xFE5
 17821                           fsr1h	equ	0xFE2
 17822                           fsr1l	equ	0xFE1
 17823                           indf2	equ	0xFDF
 17824                           postinc2	equ	0xFDE
 17825                           fsr2h	equ	0xFDA
 17826                           fsr2l	equ	0xFD9
 17827                           status	equ	0xFD8
 17828                           
 17829 ;; *************** function _Clear_cred *****************
 17830 ;; Defined at:
 17831 ;;		line 349 in file "vend.c"
 17832 ;; Parameters:    Size  Location     Type
 17833 ;;		None
 17834 ;; Auto vars:     Size  Location     Type
 17835 ;;		None
 17836 ;; Return value:  Size  Location     Type
 17837 ;;                  1    wreg      void 
 17838 ;; Registers used:
 17839 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/0
 17842 ;;		On exit  : 0/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 17845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17847 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17849 ;;Total ram usage:        2 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    8
 17852 ;; This function calls:
 17853 ;;		_DATAEE_WriteByte
 17854 ;;		_lcd_string
 17855 ;; This function is called by:
 17856 ;;		_enter_service
 17857 ;; This function uses a non-reentrant model
 17858 ;;
 17859                           
 17860                           	psect	text95
 17861  011EB0                     __ptext95:
 17862                           	opt stack 0
 17863  011EB0                     _Clear_cred:
 17864                           	opt stack 21
 17865                           
 17866                           ;vend.c: 351: DATAEE_WriteByte(credmem, 0x00);
 17867                           
 17868                           ;incstack = 0
 17869  011EB0  0E58               	movlw	low _credmem
 17870  011EB2  6EF6               	movwf	tblptrl,c
 17871  011EB4                     	if	1	;There is more than 1 active tblptr byte
 17872  011EB4  0EFB               	movlw	high _credmem
 17873  011EB6  6EF7               	movwf	tblptrh,c
 17874  011EB8                     	endif
 17875  011EB8                     	if	1	;There are 3 active tblptr bytes
 17876  011EB8  0E00               	movlw	low (_credmem shr (0+16))
 17877  011EBA  6EF8               	movwf	tblptru,c
 17878  011EBC                     	endif
 17879  011EBC  0009               	tblrd		*+
 17880  011EBE  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 17881  011EC2  000A               	tblrd		*-
 17882  011EC4  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 17883  011EC8  0E00               	movlw	0
 17884  011ECA  6E1F               	movwf	DATAEE_WriteByte@bData,c
 17885  011ECC  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 17886                           
 17887                           ;vend.c: 352: DATAEE_WriteByte(venderrors, 0x00);
 17888  011ED0  0E4E               	movlw	low _venderrors
 17889  011ED2  6EF6               	movwf	tblptrl,c
 17890  011ED4                     	if	1	;There is more than 1 active tblptr byte
 17891  011ED4  0EFB               	movlw	high _venderrors
 17892  011ED6  6EF7               	movwf	tblptrh,c
 17893  011ED8                     	endif
 17894  011ED8                     	if	1	;There are 3 active tblptr bytes
 17895  011ED8  0E00               	movlw	low (_venderrors shr (0+16))
 17896  011EDA  6EF8               	movwf	tblptru,c
 17897  011EDC                     	endif
 17898  011EDC  0009               	tblrd		*+
 17899  011EDE  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 17900  011EE2  000A               	tblrd		*-
 17901  011EE4  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 17902  011EE8  0E00               	movlw	0
 17903  011EEA  6E1F               	movwf	DATAEE_WriteByte@bData,c
 17904  011EEC  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 17905                           
 17906                           ;vend.c: 353: DATAEE_WriteByte(hoperror, 0x00);
 17907  011EF0  0E20               	movlw	low _hoperror
 17908  011EF2  6EF6               	movwf	tblptrl,c
 17909  011EF4                     	if	1	;There is more than 1 active tblptr byte
 17910  011EF4  0EFB               	movlw	high _hoperror
 17911  011EF6  6EF7               	movwf	tblptrh,c
 17912  011EF8                     	endif
 17913  011EF8                     	if	1	;There are 3 active tblptr bytes
 17914  011EF8  0E00               	movlw	low (_hoperror shr (0+16))
 17915  011EFA  6EF8               	movwf	tblptru,c
 17916  011EFC                     	endif
 17917  011EFC  0009               	tblrd		*+
 17918  011EFE  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 17919  011F02  000A               	tblrd		*-
 17920  011F04  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 17921  011F08  0E00               	movlw	0
 17922  011F0A  6E1F               	movwf	DATAEE_WriteByte@bData,c
 17923  011F0C  EC8D  F098         	call	_DATAEE_WriteByte	;wreg free
 17924                           
 17925                           ;vend.c: 354: lcd_string(creditclr, line1);
 17926  011F10  0ECB               	movlw	low _creditclr
 17927  011F12  6E24               	movwf	lcd_string@lcdstring,c
 17928  011F14  0EFE               	movlw	high _creditclr
 17929  011F16  6E25               	movwf	lcd_string@lcdstring+1,c
 17930  011F18  0E86               	movlw	low _line1
 17931  011F1A  6EF6               	movwf	tblptrl,c
 17932  011F1C                     	if	1	;There is more than 1 active tblptr byte
 17933  011F1C  0EFB               	movlw	high _line1
 17934  011F1E  6EF7               	movwf	tblptrh,c
 17935  011F20                     	endif
 17936  011F20                     	if	1	;There are 3 active tblptr bytes
 17937  011F20  0E00               	movlw	low (_line1 shr (0+16))
 17938  011F22  6EF8               	movwf	tblptru,c
 17939  011F24                     	endif
 17940  011F24  0008               	tblrd		*
 17941  011F26  CFF5 F026          	movff	tablat,lcd_string@lcdline
 17942  011F2A  EC5D  F08A         	call	_lcd_string	;wreg free
 17943                           
 17944                           ;vend.c: 355: _delay((unsigned long)((1000)*(64000000/4000.0)));
 17945  011F2E  0E52               	movlw	82
 17946  011F30  6E2A               	movwf	(??_Clear_cred+1)& (0+255),c
 17947  011F32  0E2B               	movlw	43
 17948  011F34  6E29               	movwf	??_Clear_cred& (0+255),c
 17949  011F36  0E00               	movlw	0
 17950  011F38                     u7447:
 17951  011F38  2EE8               	decfsz	wreg,f,c
 17952  011F3A  D7FE               	bra	u7447
 17953  011F3C  2E29               	decfsz	??_Clear_cred& (0+255),f,c
 17954  011F3E  D7FC               	bra	u7447
 17955  011F40  2E2A               	decfsz	(??_Clear_cred+1)& (0+255),f,c
 17956  011F42  D7FA               	bra	u7447
 17957  011F44  D000               	nop2	
 17958  011F46  0012               	return		;funcret
 17959  011F48                     __end_of_Clear_cred:
 17960                           	opt stack 0
 17961                           tblptru	equ	0xFF8
 17962                           tblptrh	equ	0xFF7
 17963                           tblptrl	equ	0xFF6
 17964                           tablat	equ	0xFF5
 17965                           prodh	equ	0xFF4
 17966                           prodl	equ	0xFF3
 17967                           intcon	equ	0xFF2
 17968                           indf0	equ	0xFEF
 17969                           postinc0	equ	0xFEE
 17970                           fsr0h	equ	0xFEA
 17971                           fsr0l	equ	0xFE9
 17972                           wreg	equ	0xFE8
 17973                           indf1	equ	0xFE7
 17974                           postdec1	equ	0xFE5
 17975                           fsr1h	equ	0xFE2
 17976                           fsr1l	equ	0xFE1
 17977                           indf2	equ	0xFDF
 17978                           postinc2	equ	0xFDE
 17979                           fsr2h	equ	0xFDA
 17980                           fsr2l	equ	0xFD9
 17981                           status	equ	0xFD8
 17982                           
 17983 ;; *************** function _DATAEE_WriteByte *****************
 17984 ;; Defined at:
 17985 ;;		line 170 in file "mcc_generated_files/memory.c"
 17986 ;; Parameters:    Size  Location     Type
 17987 ;;  bAdd            2   18[COMRAM] unsigned int 
 17988 ;;  bData           1   20[COMRAM] unsigned char 
 17989 ;; Auto vars:     Size  Location     Type
 17990 ;;  GIEBitValue     1   21[COMRAM] unsigned char 
 17991 ;; Return value:  Size  Location     Type
 17992 ;;                  1    wreg      void 
 17993 ;; Registers used:
 17994 ;;		wreg, status,2, status,0
 17995 ;; Tracked objects:
 17996 ;;		On entry : 0/0
 17997 ;;		On exit  : 0/0
 17998 ;;		Unchanged: 0/0
 17999 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18000 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18003 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18004 ;;Total ram usage:        4 bytes
 18005 ;; Hardware stack levels used:    1
 18006 ;; Hardware stack levels required when called:    2
 18007 ;; This function calls:
 18008 ;;		Nothing
 18009 ;; This function is called by:
 18010 ;;		_displ_sens
 18011 ;;		_Write_NVstore
 18012 ;;		_credit_add
 18013 ;;		_credit_subtract
 18014 ;;		_Clear_Totals
 18015 ;;		_Update_Hopcoin
 18016 ;;		_Clear_cred
 18017 ;;		_set_price
 18018 ;;		_Vend_timeset
 18019 ;;		_Link_chan
 18020 ;;		_off_sens
 18021 ;;		_Reset_settings
 18022 ;;		_save_notes
 18023 ;;		_hopper_pay
 18024 ;;		_disable_channel
 18025 ;;		_update_vends
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           	psect	text96
 18030  01311A                     __ptext96:
 18031                           	opt stack 0
 18032  01311A                     _DATAEE_WriteByte:
 18033                           	opt stack 23
 18034                           
 18035                           ;memory.c: 172: uint8_t GIEBitValue = INTCONbits.GIE;
 18036                           
 18037                           ;incstack = 0
 18038  01311A  0E00               	movlw	0
 18039  01311C  BEF2               	btfsc	intcon,7,c	;volatile
 18040  01311E  0E01               	movlw	1
 18041  013120  6E20               	movwf	DATAEE_WriteByte@GIEBitValue,c
 18042                           
 18043                           ;memory.c: 174: NVMADRH = ((bAdd >> 8) & 0x03);
 18044  013122  501E               	movf	DATAEE_WriteByte@bAdd+1,w,c
 18045  013124  0B03               	andlw	3
 18046  013126  6E7F               	movwf	3967,c	;volatile
 18047                           
 18048                           ;memory.c: 175: NVMADRL = (bAdd & 0xFF);
 18049  013128  C01D  FF7E         	movff	DATAEE_WriteByte@bAdd,3966	;volatile
 18050                           
 18051                           ;memory.c: 176: NVMDAT = bData;
 18052  01312C  C01F  FF80         	movff	DATAEE_WriteByte@bData,3968	;volatile
 18053                           
 18054                           ;memory.c: 177: NVMCON1bits.NVMREG = 0;
 18055  013130  0E3F               	movlw	-193
 18056  013132  1681               	andwf	3969,f,c	;volsfr
 18057                           
 18058                           ;memory.c: 178: NVMCON1bits.WREN = 1;
 18059  013134  8481               	bsf	3969,2,c	;volsfr
 18060                           
 18061                           ;memory.c: 179: INTCONbits.GIE = 0;
 18062  013136  9EF2               	bcf	intcon,7,c	;volatile
 18063                           
 18064                           ;memory.c: 180: NVMCON2 = 0x55;
 18065  013138  0E55               	movlw	85
 18066  01313A  6E82               	movwf	3970,c	;volsfr
 18067                           
 18068                           ;memory.c: 181: NVMCON2 = 0xAA;
 18069  01313C  0EAA               	movlw	170
 18070  01313E  6E82               	movwf	3970,c	;volsfr
 18071                           
 18072                           ;memory.c: 182: NVMCON1bits.WR = 1;
 18073  013140  8281               	bsf	3969,1,c	;volsfr
 18074  013142                     
 18075                           ;memory.c: 185: {
 18076  013142  B281               	btfsc	3969,1,c	;volsfr
 18077  013144  D7FE               	goto	l290
 18078                           
 18079                           ;memory.c: 186: }
 18080                           ;memory.c: 188: NVMCON1bits.WREN = 0;
 18081  013146  9481               	bcf	3969,2,c	;volsfr
 18082                           
 18083                           ;memory.c: 189: INTCONbits.GIE = GIEBitValue;
 18084  013148  B020               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 18085  01314A  D002               	bra	u5065
 18086  01314C  9EF2               	bcf	intcon,7,c	;volatile
 18087  01314E  D001               	bra	u5066
 18088  013150                     u5065:
 18089  013150  8EF2               	bsf	intcon,7,c	;volatile
 18090  013152                     u5066:
 18091  013152  0012               	return		;funcret
 18092  013154                     __end_of_DATAEE_WriteByte:
 18093                           	opt stack 0
 18094                           tblptru	equ	0xFF8
 18095                           tblptrh	equ	0xFF7
 18096                           tblptrl	equ	0xFF6
 18097                           tablat	equ	0xFF5
 18098                           prodh	equ	0xFF4
 18099                           prodl	equ	0xFF3
 18100                           intcon	equ	0xFF2
 18101                           indf0	equ	0xFEF
 18102                           postinc0	equ	0xFEE
 18103                           fsr0h	equ	0xFEA
 18104                           fsr0l	equ	0xFE9
 18105                           wreg	equ	0xFE8
 18106                           indf1	equ	0xFE7
 18107                           postdec1	equ	0xFE5
 18108                           fsr1h	equ	0xFE2
 18109                           fsr1l	equ	0xFE1
 18110                           indf2	equ	0xFDF
 18111                           postinc2	equ	0xFDE
 18112                           fsr2h	equ	0xFDA
 18113                           fsr2l	equ	0xFD9
 18114                           status	equ	0xFD8
 18115                           
 18116 ;; *************** function _Audit *****************
 18117 ;; Defined at:
 18118 ;;		line 194 in file "vend.c"
 18119 ;; Parameters:    Size  Location     Type
 18120 ;;		None
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;  vends           1   33[COMRAM] unsigned char 
 18123 ;; Return value:  Size  Location     Type
 18124 ;;                  1    wreg      void 
 18125 ;; Registers used:
 18126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18127 ;; Tracked objects:
 18128 ;;		On entry : 0/0
 18129 ;;		On exit  : 0/0
 18130 ;;		Unchanged: 0/0
 18131 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;Total ram usage:        3 bytes
 18137 ;; Hardware stack levels used:    1
 18138 ;; Hardware stack levels required when called:    8
 18139 ;; This function calls:
 18140 ;;		_CMP1_GetOutputStatus
 18141 ;;		_DATAEE_ReadByte
 18142 ;;		_Read_NVstore
 18143 ;;		_butin
 18144 ;;		_displ_hex
 18145 ;;		_get_channel
 18146 ;;		_lcd_string
 18147 ;; This function is called by:
 18148 ;;		_enter_service
 18149 ;; This function uses a non-reentrant model
 18150 ;;
 18151                           
 18152                           	psect	text97
 18153  0103F8                     __ptext97:
 18154                           	opt stack 0
 18155  0103F8                     _Audit:
 18156                           	opt stack 21
 18157                           
 18158                           ;vend.c: 196: DAC1CON1 = 0x01;
 18159                           
 18160                           ;incstack = 0
 18161  0103F8  0E01               	movlw	1
 18162  0103FA  010F               	movlb	15	; () banked
 18163  0103FC  6F34               	movwf	52,b	;volatile
 18164                           
 18165                           ; BSR set to: 15
 18166                           ;vend.c: 197: Read_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
 18167  0103FE  0E56               	movlw	low _cashinv
 18168  010400  6EF6               	movwf	tblptrl,c
 18169  010402                     	if	1	;There is more than 1 active tblptr byte
 18170  010402  0EFB               	movlw	high _cashinv
 18171  010404  6EF7               	movwf	tblptrh,c
 18172  010406                     	endif
 18173  010406                     	if	1	;There are 3 active tblptr bytes
 18174  010406  0E00               	movlw	low (_cashinv shr (0+16))
 18175  010408  6EF8               	movwf	tblptru,c
 18176  01040A                     	endif
 18177  01040A  0009               	tblrd		*+
 18178  01040C  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 18179  010410  000A               	tblrd		*-
 18180  010412  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 18181  010416  0E4C               	movlw	low _pvcash
 18182  010418  6E21               	movwf	Read_NVstore@storemem,c
 18183  01041A  0E00               	movlw	high _pvcash
 18184  01041C  6E22               	movwf	Read_NVstore@storemem+1,c
 18185  01041E  0E02               	movlw	2
 18186  010420  6E23               	movwf	Read_NVstore@storesize,c
 18187  010422  EC6C  F099         	call	_Read_NVstore	;wreg free
 18188                           
 18189                           ;vend.c: 198: Read_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
 18190  010426  0E52               	movlw	low _cashint
 18191  010428  6EF6               	movwf	tblptrl,c
 18192  01042A                     	if	1	;There is more than 1 active tblptr byte
 18193  01042A  0EFB               	movlw	high _cashint
 18194  01042C  6EF7               	movwf	tblptrh,c
 18195  01042E                     	endif
 18196  01042E                     	if	1	;There are 3 active tblptr bytes
 18197  01042E  0E00               	movlw	low (_cashint shr (0+16))
 18198  010430  6EF8               	movwf	tblptru,c
 18199  010432                     	endif
 18200  010432  0009               	tblrd		*+
 18201  010434  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 18202  010438  000A               	tblrd		*-
 18203  01043A  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 18204  01043E  0E49               	movlw	low _pnvcash
 18205  010440  6E21               	movwf	Read_NVstore@storemem,c
 18206  010442  0E00               	movlw	high _pnvcash
 18207  010444  6E22               	movwf	Read_NVstore@storemem+1,c
 18208  010446  0E03               	movlw	3
 18209  010448  6E23               	movwf	Read_NVstore@storesize,c
 18210  01044A  EC6C  F099         	call	_Read_NVstore	;wreg free
 18211                           
 18212                           ;vend.c: 199: lcd_string(cashinmsg, line1);
 18213  01044E  0E69               	movlw	low _cashinmsg
 18214  010450  6E24               	movwf	lcd_string@lcdstring,c
 18215  010452  0EFF               	movlw	high _cashinmsg
 18216  010454  6E25               	movwf	lcd_string@lcdstring+1,c
 18217  010456  0E86               	movlw	low _line1
 18218  010458  6EF6               	movwf	tblptrl,c
 18219  01045A                     	if	1	;There is more than 1 active tblptr byte
 18220  01045A  0EFB               	movlw	high _line1
 18221  01045C  6EF7               	movwf	tblptrh,c
 18222  01045E                     	endif
 18223  01045E                     	if	1	;There are 3 active tblptr bytes
 18224  01045E  0E00               	movlw	low (_line1 shr (0+16))
 18225  010460  6EF8               	movwf	tblptru,c
 18226  010462                     	endif
 18227  010462  0008               	tblrd		*
 18228  010464  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18229  010468  EC5D  F08A         	call	_lcd_string	;wreg free
 18230                           
 18231                           ;vend.c: 200: displ_hex((uint24_t)pvcash);
 18232  01046C  C04C  F027         	movff	_pvcash,displ_hex@hexnum	;volatile
 18233  010470  C04D  F028         	movff	_pvcash+1,displ_hex@hexnum+1	;volatile
 18234  010474  6A29               	clrf	displ_hex@hexnum+2,c
 18235  010476  ECAB  F08D         	call	_displ_hex	;wreg free
 18236                           
 18237                           ;vend.c: 201: lcd_string(totalmsg, line2);
 18238  01047A  0EB5               	movlw	low _totalmsg
 18239  01047C  6E24               	movwf	lcd_string@lcdstring,c
 18240  01047E  0EFF               	movlw	high _totalmsg
 18241  010480  6E25               	movwf	lcd_string@lcdstring+1,c
 18242  010482  0E85               	movlw	low _line2
 18243  010484  6EF6               	movwf	tblptrl,c
 18244  010486                     	if	1	;There is more than 1 active tblptr byte
 18245  010486  0EFB               	movlw	high _line2
 18246  010488  6EF7               	movwf	tblptrh,c
 18247  01048A                     	endif
 18248  01048A                     	if	1	;There are 3 active tblptr bytes
 18249  01048A  0E00               	movlw	low (_line2 shr (0+16))
 18250  01048C  6EF8               	movwf	tblptru,c
 18251  01048E                     	endif
 18252  01048E  0008               	tblrd		*
 18253  010490  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18254  010494  EC5D  F08A         	call	_lcd_string	;wreg free
 18255                           
 18256                           ;vend.c: 202: displ_hex(pnvcash);
 18257  010498  C049  F027         	movff	_pnvcash,displ_hex@hexnum	;volatile
 18258  01049C  C04A  F028         	movff	_pnvcash+1,displ_hex@hexnum+1	;volatile
 18259  0104A0  C04B  F029         	movff	_pnvcash+2,displ_hex@hexnum+2	;volatile
 18260  0104A4  ECAB  F08D         	call	_displ_hex	;wreg free
 18261                           
 18262                           ;vend.c: 203: lcd_string(vendispmsg, line3);
 18263  0104A8  0E56               	movlw	low _vendispmsg
 18264  0104AA  6E24               	movwf	lcd_string@lcdstring,c
 18265  0104AC  0EFE               	movlw	high _vendispmsg
 18266  0104AE  6E25               	movwf	lcd_string@lcdstring+1,c
 18267  0104B0  0E84               	movlw	low _line3
 18268  0104B2  6EF6               	movwf	tblptrl,c
 18269  0104B4                     	if	1	;There is more than 1 active tblptr byte
 18270  0104B4  0EFB               	movlw	high _line3
 18271  0104B6  6EF7               	movwf	tblptrh,c
 18272  0104B8                     	endif
 18273  0104B8                     	if	1	;There are 3 active tblptr bytes
 18274  0104B8  0E00               	movlw	low (_line3 shr (0+16))
 18275  0104BA  6EF8               	movwf	tblptru,c
 18276  0104BC                     	endif
 18277  0104BC  0008               	tblrd		*
 18278  0104BE  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18279  0104C2  EC5D  F08A         	call	_lcd_string	;wreg free
 18280                           
 18281                           ;vend.c: 204: venflags.audit = 1;
 18282  0104C6  862F               	bsf	_venflags+2,3,c
 18283                           
 18284                           ;vend.c: 205: while(venflags.audit)
 18285  0104C8  D071               	goto	l2481
 18286  0104CA                     
 18287                           ;vend.c: 206: {
 18288                           ;vend.c: 207: buttons = butin();
 18289  0104CA  EC4F  F095         	call	_butin	;wreg free
 18290  0104CE  6E3A               	movwf	_buttons,c	;volatile
 18291                           
 18292                           ;vend.c: 208: if(buttons != 0x00)
 18293  0104D0  503A               	movf	_buttons,w,c	;volatile
 18294  0104D2  B4D8               	btfsc	status,2,c
 18295  0104D4  D054               	goto	l2477
 18296                           
 18297                           ;vend.c: 209: {
 18298                           ;vend.c: 210: buttons = butin();
 18299  0104D6  EC4F  F095         	call	_butin	;wreg free
 18300  0104DA  6E3A               	movwf	_buttons,c	;volatile
 18301                           
 18302                           ;vend.c: 211: lcd_string(clrline, line4);
 18303  0104DC  0E6B               	movlw	low _clrline
 18304  0104DE  6E24               	movwf	lcd_string@lcdstring,c
 18305  0104E0  0EFE               	movlw	high _clrline
 18306  0104E2  6E25               	movwf	lcd_string@lcdstring+1,c
 18307  0104E4  0E83               	movlw	low _line4
 18308  0104E6  6EF6               	movwf	tblptrl,c
 18309  0104E8                     	if	1	;There is more than 1 active tblptr byte
 18310  0104E8  0EFB               	movlw	high _line4
 18311  0104EA  6EF7               	movwf	tblptrh,c
 18312  0104EC                     	endif
 18313  0104EC                     	if	1	;There are 3 active tblptr bytes
 18314  0104EC  0E00               	movlw	low (_line4 shr (0+16))
 18315  0104EE  6EF8               	movwf	tblptru,c
 18316  0104F0                     	endif
 18317  0104F0  0008               	tblrd		*
 18318  0104F2  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18319  0104F6  EC5D  F08A         	call	_lcd_string	;wreg free
 18320                           
 18321                           ;vend.c: 212: channel = get_channel(buttons);
 18322  0104FA  503A               	movf	_buttons,w,c	;volatile
 18323  0104FC  ECCB  F09A         	call	_get_channel
 18324  010500  6E32               	movwf	_channel,c	;volatile
 18325                           
 18326                           ;vend.c: 213: uint8_t vends = DATAEE_ReadByte(vendstore + channel);
 18327  010502  0E54               	movlw	low _vendstore
 18328  010504  6EF6               	movwf	tblptrl,c
 18329  010506                     	if	1	;There is more than 1 active tblptr byte
 18330  010506  0EFB               	movlw	high _vendstore
 18331  010508  6EF7               	movwf	tblptrh,c
 18332  01050A                     	endif
 18333  01050A                     	if	1	;There are 3 active tblptr bytes
 18334  01050A  0E00               	movlw	low (_vendstore shr (0+16))
 18335  01050C  6EF8               	movwf	tblptru,c
 18336  01050E                     	endif
 18337  01050E  0009               	tblrd		*+
 18338  010510  CFF5 F02A          	movff	tablat,??_Audit
 18339  010514  0009               	tblrd		*+
 18340  010516  CFF5 F02B          	movff	tablat,??_Audit+1
 18341  01051A  5032               	movf	_channel,w,c	;volatile
 18342  01051C  242A               	addwf	??_Audit,w,c
 18343  01051E  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 18344  010520  0E00               	movlw	0
 18345  010522  202B               	addwfc	??_Audit+1,w,c
 18346  010524  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 18347  010526  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 18348  01052A  6E2C               	movwf	Audit@vends,c
 18349                           
 18350                           ;vend.c: 214: lcd_string(totalvendsm, line4);
 18351  01052C  0EE4               	movlw	low _totalvendsm
 18352  01052E  6E24               	movwf	lcd_string@lcdstring,c
 18353  010530  0EFF               	movlw	high _totalvendsm
 18354  010532  6E25               	movwf	lcd_string@lcdstring+1,c
 18355  010534  0E83               	movlw	low _line4
 18356  010536  6EF6               	movwf	tblptrl,c
 18357  010538                     	if	1	;There is more than 1 active tblptr byte
 18358  010538  0EFB               	movlw	high _line4
 18359  01053A  6EF7               	movwf	tblptrh,c
 18360  01053C                     	endif
 18361  01053C                     	if	1	;There are 3 active tblptr bytes
 18362  01053C  0E00               	movlw	low (_line4 shr (0+16))
 18363  01053E  6EF8               	movwf	tblptru,c
 18364  010540                     	endif
 18365  010540  0008               	tblrd		*
 18366  010542  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18367  010546  EC5D  F08A         	call	_lcd_string	;wreg free
 18368                           
 18369                           ;vend.c: 215: displ_hex((uint24_t)vends);
 18370  01054A  502C               	movf	Audit@vends,w,c
 18371  01054C  6E27               	movwf	displ_hex@hexnum,c
 18372  01054E  6A28               	clrf	displ_hex@hexnum+1,c
 18373  010550  6A29               	clrf	displ_hex@hexnum+2,c
 18374  010552  ECAB  F08D         	call	_displ_hex	;wreg free
 18375  010556  EC4F  F095         	call	_butin	;wreg free
 18376  01055A  0900               	iorlw	0
 18377  01055C  A4D8               	btfss	status,2,c
 18378  01055E  D7FB               	goto	l2479
 18379                           
 18380                           ;vend.c: 217: lcd_string(clrline, line4);
 18381  010560  0E6B               	movlw	low _clrline
 18382  010562  6E24               	movwf	lcd_string@lcdstring,c
 18383  010564  0EFE               	movlw	high _clrline
 18384  010566  6E25               	movwf	lcd_string@lcdstring+1,c
 18385  010568  0E83               	movlw	low _line4
 18386  01056A  6EF6               	movwf	tblptrl,c
 18387  01056C                     	if	1	;There is more than 1 active tblptr byte
 18388  01056C  0EFB               	movlw	high _line4
 18389  01056E  6EF7               	movwf	tblptrh,c
 18390  010570                     	endif
 18391  010570                     	if	1	;There are 3 active tblptr bytes
 18392  010570  0E00               	movlw	low (_line4 shr (0+16))
 18393  010572  6EF8               	movwf	tblptru,c
 18394  010574                     	endif
 18395  010574  0008               	tblrd		*
 18396  010576  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18397  01057A  EC5D  F08A         	call	_lcd_string	;wreg free
 18398  01057E                     l2477:
 18399                           
 18400                           ;vend.c: 218: }
 18401                           ;vend.c: 219: if(!CMP1_GetOutputStatus())
 18402  01057E  EC90  F09B         	call	_CMP1_GetOutputStatus	;wreg free
 18403  010582  0900               	iorlw	0
 18404  010584  A4D8               	btfss	status,2,c
 18405  010586  D012               	goto	l2481
 18406                           
 18407                           ;vend.c: 220: {
 18408                           ;vend.c: 221: DAC1CON1 = sensorval;
 18409  010588  C038  FF34         	movff	_sensorval,3892	;volatile
 18410                           
 18411                           ;vend.c: 222: venflags.audit = 0;
 18412  01058C  962F               	bcf	_venflags+2,3,c
 18413                           
 18414                           ;vend.c: 223: lcd_string(servmsg, line1);
 18415  01058E  0E95               	movlw	low _servmsg
 18416  010590  6E24               	movwf	lcd_string@lcdstring,c
 18417  010592  0EFB               	movlw	high _servmsg
 18418  010594  6E25               	movwf	lcd_string@lcdstring+1,c
 18419  010596  0E86               	movlw	low _line1
 18420  010598  6EF6               	movwf	tblptrl,c
 18421  01059A                     	if	1	;There is more than 1 active tblptr byte
 18422  01059A  0EFB               	movlw	high _line1
 18423  01059C  6EF7               	movwf	tblptrh,c
 18424  01059E                     	endif
 18425  01059E                     	if	1	;There are 3 active tblptr bytes
 18426  01059E  0E00               	movlw	low (_line1 shr (0+16))
 18427  0105A0  6EF8               	movwf	tblptru,c
 18428  0105A2                     	endif
 18429  0105A2  0008               	tblrd		*
 18430  0105A4  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18431  0105A8  EC5D  F08A         	call	_lcd_string	;wreg free
 18432  0105AC                     l2481:
 18433  0105AC  A62F               	btfss	_venflags+2,3,c
 18434  0105AE  0012               	return	
 18435  0105B0  D78C               	goto	l2476
 18436  0105B2                     __end_of_Audit:
 18437                           	opt stack 0
 18438                           tblptru	equ	0xFF8
 18439                           tblptrh	equ	0xFF7
 18440                           tblptrl	equ	0xFF6
 18441                           tablat	equ	0xFF5
 18442                           prodh	equ	0xFF4
 18443                           prodl	equ	0xFF3
 18444                           intcon	equ	0xFF2
 18445                           indf0	equ	0xFEF
 18446                           postinc0	equ	0xFEE
 18447                           fsr0h	equ	0xFEA
 18448                           fsr0l	equ	0xFE9
 18449                           wreg	equ	0xFE8
 18450                           indf1	equ	0xFE7
 18451                           postdec1	equ	0xFE5
 18452                           fsr1h	equ	0xFE2
 18453                           fsr1l	equ	0xFE1
 18454                           indf2	equ	0xFDF
 18455                           postinc2	equ	0xFDE
 18456                           fsr2h	equ	0xFDA
 18457                           fsr2l	equ	0xFD9
 18458                           status	equ	0xFD8
 18459                           
 18460 ;; *************** function _get_channel *****************
 18461 ;; Defined at:
 18462 ;;		line 379 in file "vend.c"
 18463 ;; Parameters:    Size  Location     Type
 18464 ;;  butons          1    wreg     unsigned char 
 18465 ;; Auto vars:     Size  Location     Type
 18466 ;;  butons          1   18[COMRAM] unsigned char 
 18467 ;; Return value:  Size  Location     Type
 18468 ;;                  1    wreg      unsigned char 
 18469 ;; Registers used:
 18470 ;;		wreg, status,2, status,0
 18471 ;; Tracked objects:
 18472 ;;		On entry : 0/0
 18473 ;;		On exit  : 0/0
 18474 ;;		Unchanged: 0/0
 18475 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18479 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18480 ;;Total ram usage:        1 bytes
 18481 ;; Hardware stack levels used:    1
 18482 ;; Hardware stack levels required when called:    2
 18483 ;; This function calls:
 18484 ;;		Nothing
 18485 ;; This function is called by:
 18486 ;;		_main
 18487 ;;		_Audit
 18488 ;;		_set_price
 18489 ;;		_Vend_settime
 18490 ;;		_Chan_link
 18491 ;;		_Sens_off
 18492 ;;		_price_check
 18493 ;; This function uses a non-reentrant model
 18494 ;;
 18495                           
 18496                           	psect	text98
 18497  013596                     __ptext98:
 18498                           	opt stack 0
 18499  013596                     _get_channel:
 18500                           	opt stack 27
 18501                           
 18502                           ;incstack = 0
 18503                           ;get_channel@butons stored from wreg
 18504  013596  6E1D               	movwf	get_channel@butons,c
 18505                           
 18506                           ;vend.c: 382: channel = 0x00;
 18507  013598  0E00               	movlw	0
 18508  01359A  6E32               	movwf	_channel,c	;volatile
 18509                           
 18510                           ;vend.c: 383: while(butons != 0)
 18511  01359C  D004               	goto	l2544
 18512  01359E                     
 18513                           ;vend.c: 384: {
 18514                           ;vend.c: 385: channel++;
 18515  01359E  2A32               	incf	_channel,f,c	;volatile
 18516                           
 18517                           ;vend.c: 386: butons = butons >> 1;
 18518  0135A0  90D8               	bcf	status,0,c
 18519  0135A2  301D               	rrcf	get_channel@butons,w,c
 18520  0135A4  6E1D               	movwf	get_channel@butons,c
 18521  0135A6                     l2544:
 18522  0135A6  501D               	movf	get_channel@butons,w,c
 18523  0135A8  A4D8               	btfss	status,2,c
 18524  0135AA  D7F9               	goto	l2545
 18525                           
 18526                           ;vend.c: 387: }
 18527                           ;vend.c: 388: channel--;
 18528  0135AC  0632               	decf	_channel,f,c	;volatile
 18529                           
 18530                           ;vend.c: 389: return channel;
 18531  0135AE  5032               	movf	_channel,w,c	;volatile
 18532  0135B0  0012               	return	
 18533  0135B2                     __end_of_get_channel:
 18534                           	opt stack 0
 18535                           tblptru	equ	0xFF8
 18536                           tblptrh	equ	0xFF7
 18537                           tblptrl	equ	0xFF6
 18538                           tablat	equ	0xFF5
 18539                           prodh	equ	0xFF4
 18540                           prodl	equ	0xFF3
 18541                           intcon	equ	0xFF2
 18542                           indf0	equ	0xFEF
 18543                           postinc0	equ	0xFEE
 18544                           fsr0h	equ	0xFEA
 18545                           fsr0l	equ	0xFE9
 18546                           wreg	equ	0xFE8
 18547                           indf1	equ	0xFE7
 18548                           postdec1	equ	0xFE5
 18549                           fsr1h	equ	0xFE2
 18550                           fsr1l	equ	0xFE1
 18551                           indf2	equ	0xFDF
 18552                           postinc2	equ	0xFDE
 18553                           fsr2h	equ	0xFDA
 18554                           fsr2l	equ	0xFD9
 18555                           status	equ	0xFD8
 18556                           
 18557 ;; *************** function _butin *****************
 18558 ;; Defined at:
 18559 ;;		line 172 in file "vend.c"
 18560 ;; Parameters:    Size  Location     Type
 18561 ;;		None
 18562 ;; Auto vars:     Size  Location     Type
 18563 ;;  butons          1   20[COMRAM] unsigned char 
 18564 ;; Return value:  Size  Location     Type
 18565 ;;                  1    wreg      unsigned char 
 18566 ;; Registers used:
 18567 ;;		wreg, status,2, status,0
 18568 ;; Tracked objects:
 18569 ;;		On entry : 0/0
 18570 ;;		On exit  : 0/0
 18571 ;;		Unchanged: 0/0
 18572 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18576 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18577 ;;Total ram usage:        3 bytes
 18578 ;; Hardware stack levels used:    1
 18579 ;; Hardware stack levels required when called:    2
 18580 ;; This function calls:
 18581 ;;		Nothing
 18582 ;; This function is called by:
 18583 ;;		_main
 18584 ;;		_butindb
 18585 ;;		_Audit
 18586 ;;		_price_check
 18587 ;; This function uses a non-reentrant model
 18588 ;;
 18589                           
 18590                           	psect	text99
 18591  012A9E                     __ptext99:
 18592                           	opt stack 0
 18593  012A9E                     _butin:
 18594                           	opt stack 27
 18595                           
 18596                           ;vend.c: 174: LATA7 = 0;
 18597                           
 18598                           ;incstack = 0
 18599  012A9E  9E83               	bcf	3971,7,c	;volatile
 18600                           
 18601                           ;vend.c: 175: LATA6 = 1;
 18602  012AA0  8C83               	bsf	3971,6,c	;volatile
 18603                           
 18604                           ;vend.c: 176: _delay((unsigned long)((15)*(64000000/4000.0)));
 18605  012AA2  0E02               	movlw	2
 18606  012AA4  6E1E               	movwf	(??_butin+1)& (0+255),c
 18607  012AA6  0E38               	movlw	56
 18608  012AA8  6E1D               	movwf	??_butin& (0+255),c
 18609  012AAA  0EAD               	movlw	173
 18610  012AAC                     u7457:
 18611  012AAC  2EE8               	decfsz	wreg,f,c
 18612  012AAE  D7FE               	bra	u7457
 18613  012AB0  2E1D               	decfsz	??_butin& (0+255),f,c
 18614  012AB2  D7FC               	bra	u7457
 18615  012AB4  2E1E               	decfsz	(??_butin+1)& (0+255),f,c
 18616  012AB6  D7FA               	bra	u7457
 18617  012AB8  F000               	nop	
 18618                           
 18619                           ;vend.c: 178: uint8_t butons = ((PORTA >> 1) & 0x0F) << 4;
 18620  012ABA  CF8D F01D          	movff	3981,??_butin	;volatile
 18621  012ABE  90D8               	bcf	status,0,c
 18622  012AC0  321D               	rrcf	??_butin,f,c
 18623  012AC2  0E0F               	movlw	15
 18624  012AC4  161D               	andwf	??_butin,f,c
 18625  012AC6  381D               	swapf	??_butin,w,c
 18626  012AC8  0BF0               	andlw	240
 18627  012ACA  6E1F               	movwf	butin@butons,c
 18628                           
 18629                           ;vend.c: 179: LATA7 = 1;
 18630  012ACC  8E83               	bsf	3971,7,c	;volatile
 18631                           
 18632                           ;vend.c: 180: LATA6 = 0;
 18633  012ACE  9C83               	bcf	3971,6,c	;volatile
 18634                           
 18635                           ;vend.c: 181: _delay((unsigned long)((15)*(64000000/4000.0)));
 18636  012AD0  0E02               	movlw	2
 18637  012AD2  6E1E               	movwf	(??_butin+1)& (0+255),c
 18638  012AD4  0E38               	movlw	56
 18639  012AD6  6E1D               	movwf	??_butin& (0+255),c
 18640  012AD8  0EAD               	movlw	173
 18641  012ADA                     u7467:
 18642  012ADA  2EE8               	decfsz	wreg,f,c
 18643  012ADC  D7FE               	bra	u7467
 18644  012ADE  2E1D               	decfsz	??_butin& (0+255),f,c
 18645  012AE0  D7FC               	bra	u7467
 18646  012AE2  2E1E               	decfsz	(??_butin+1)& (0+255),f,c
 18647  012AE4  D7FA               	bra	u7467
 18648  012AE6  F000               	nop	
 18649                           
 18650                           ;vend.c: 183: butons = ((PORTA >> 1) & 0x0F) | butons;
 18651  012AE8  90D8               	bcf	status,0,c
 18652  012AEA  308D               	rrcf	3981,w,c	;volatile
 18653  012AEC  0B0F               	andlw	15
 18654  012AEE  101F               	iorwf	butin@butons,w,c
 18655  012AF0  6E1F               	movwf	butin@butons,c
 18656                           
 18657                           ;vend.c: 184: LATA7 = 1;
 18658  012AF2  8E83               	bsf	3971,7,c	;volatile
 18659                           
 18660                           ;vend.c: 185: LATA6 = 1;
 18661  012AF4  8C83               	bsf	3971,6,c	;volatile
 18662                           
 18663                           ;vend.c: 186: return ~butons;
 18664  012AF6  501F               	movf	butin@butons,w,c
 18665  012AF8  0AFF               	xorlw	255
 18666  012AFA  0012               	return	
 18667  012AFC                     __end_of_butin:
 18668                           	opt stack 0
 18669                           tblptru	equ	0xFF8
 18670                           tblptrh	equ	0xFF7
 18671                           tblptrl	equ	0xFF6
 18672                           tablat	equ	0xFF5
 18673                           prodh	equ	0xFF4
 18674                           prodl	equ	0xFF3
 18675                           intcon	equ	0xFF2
 18676                           indf0	equ	0xFEF
 18677                           postinc0	equ	0xFEE
 18678                           fsr0h	equ	0xFEA
 18679                           fsr0l	equ	0xFE9
 18680                           wreg	equ	0xFE8
 18681                           indf1	equ	0xFE7
 18682                           postdec1	equ	0xFE5
 18683                           fsr1h	equ	0xFE2
 18684                           fsr1l	equ	0xFE1
 18685                           indf2	equ	0xFDF
 18686                           postinc2	equ	0xFDE
 18687                           fsr2h	equ	0xFDA
 18688                           fsr2l	equ	0xFD9
 18689                           status	equ	0xFD8
 18690                           
 18691 ;; *************** function _Read_NVstore *****************
 18692 ;; Defined at:
 18693 ;;		line 96 in file "vend.c"
 18694 ;; Parameters:    Size  Location     Type
 18695 ;;  storeadd        2   20[COMRAM] unsigned int 
 18696 ;;  storemem        2   22[COMRAM] PTR unsigned char 
 18697 ;;		 -> pnvcash(3), pvcash(2), 
 18698 ;;  storesize       1   24[COMRAM] unsigned char 
 18699 ;; Auto vars:     Size  Location     Type
 18700 ;;  i               1   25[COMRAM] unsigned char 
 18701 ;; Return value:  Size  Location     Type
 18702 ;;                  1    wreg      void 
 18703 ;; Registers used:
 18704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18705 ;; Tracked objects:
 18706 ;;		On entry : 0/0
 18707 ;;		On exit  : 0/0
 18708 ;;		Unchanged: 0/0
 18709 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18710 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18711 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18713 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18714 ;;Total ram usage:        6 bytes
 18715 ;; Hardware stack levels used:    1
 18716 ;; Hardware stack levels required when called:    3
 18717 ;; This function calls:
 18718 ;;		_DATAEE_ReadByte
 18719 ;; This function is called by:
 18720 ;;		_Update_cashaudit
 18721 ;;		_Audit
 18722 ;;		_Update_coinsout
 18723 ;; This function uses a non-reentrant model
 18724 ;;
 18725                           
 18726                           	psect	text100
 18727  0132D8                     __ptext100:
 18728                           	opt stack 0
 18729  0132D8                     _Read_NVstore:
 18730                           	opt stack 23
 18731                           
 18732                           ;vend.c: 98: uint8_t i = 0;
 18733                           
 18734                           ;incstack = 0
 18735  0132D8  0E00               	movlw	0
 18736  0132DA  6E24               	movwf	Read_NVstore@i,c
 18737                           
 18738                           ;vend.c: 99: while(i < storesize)
 18739  0132DC  D012               	goto	l2442
 18740  0132DE                     
 18741                           ;vend.c: 100: {
 18742                           ;vend.c: 101: storemem[i] = DATAEE_ReadByte(storeadd + i);
 18743  0132DE  5024               	movf	Read_NVstore@i,w,c
 18744  0132E0  0D01               	mullw	1
 18745  0132E2  50F3               	movf	prodl,w,c
 18746  0132E4  2421               	addwf	Read_NVstore@storemem,w,c
 18747  0132E6  6ED9               	movwf	fsr2l,c
 18748  0132E8  50F4               	movf	prodh,w,c
 18749  0132EA  2022               	addwfc	Read_NVstore@storemem+1,w,c
 18750  0132EC  6EDA               	movwf	fsr2h,c
 18751  0132EE  5024               	movf	Read_NVstore@i,w,c
 18752  0132F0  241F               	addwf	Read_NVstore@storeadd,w,c
 18753  0132F2  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 18754  0132F4  0E00               	movlw	0
 18755  0132F6  2020               	addwfc	Read_NVstore@storeadd+1,w,c
 18756  0132F8  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 18757  0132FA  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 18758  0132FE  6EDF               	movwf	indf2,c
 18759                           
 18760                           ;vend.c: 102: i++;
 18761  013300  2A24               	incf	Read_NVstore@i,f,c
 18762  013302                     l2442:
 18763  013302  5023               	movf	Read_NVstore@storesize,w,c
 18764  013304  5C24               	subwf	Read_NVstore@i,w,c
 18765  013306  B0D8               	btfsc	status,0,c
 18766  013308  0012               	return	
 18767  01330A  D7E9               	goto	l2443
 18768  01330C                     __end_of_Read_NVstore:
 18769                           	opt stack 0
 18770                           tblptru	equ	0xFF8
 18771                           tblptrh	equ	0xFF7
 18772                           tblptrl	equ	0xFF6
 18773                           tablat	equ	0xFF5
 18774                           prodh	equ	0xFF4
 18775                           prodl	equ	0xFF3
 18776                           intcon	equ	0xFF2
 18777                           indf0	equ	0xFEF
 18778                           postinc0	equ	0xFEE
 18779                           fsr0h	equ	0xFEA
 18780                           fsr0l	equ	0xFE9
 18781                           wreg	equ	0xFE8
 18782                           indf1	equ	0xFE7
 18783                           postdec1	equ	0xFE5
 18784                           fsr1h	equ	0xFE2
 18785                           fsr1l	equ	0xFE1
 18786                           indf2	equ	0xFDF
 18787                           postinc2	equ	0xFDE
 18788                           fsr2h	equ	0xFDA
 18789                           fsr2l	equ	0xFD9
 18790                           status	equ	0xFD8
 18791                           
 18792 ;; *************** function _CMP1_GetOutputStatus *****************
 18793 ;; Defined at:
 18794 ;;		line 75 in file "mcc_generated_files/cmp1.c"
 18795 ;; Parameters:    Size  Location     Type
 18796 ;;		None
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;		None
 18799 ;; Return value:  Size  Location     Type
 18800 ;;                  1    wreg      unsigned char 
 18801 ;; Registers used:
 18802 ;;		wreg
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18812 ;;Total ram usage:        0 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    2
 18815 ;; This function calls:
 18816 ;;		Nothing
 18817 ;; This function is called by:
 18818 ;;		_main
 18819 ;;		_displ_sens
 18820 ;;		_Audit
 18821 ;; This function uses a non-reentrant model
 18822 ;;
 18823                           
 18824                           	psect	text101
 18825  013720                     __ptext101:
 18826                           	opt stack 0
 18827  013720                     _CMP1_GetOutputStatus:
 18828                           	opt stack 25
 18829                           
 18830                           ;cmp1.c: 77: return (CMOUTbits.MC1OUT);
 18831                           
 18832                           ;incstack = 0
 18833  013720  010F               	movlb	15	; () banked
 18834  013722  A13D               	btfss	61,0,b	;volatile
 18835  013724  D002               	goto	u5450
 18836  013726  0E01               	movlw	1
 18837  013728  0012               	return	
 18838  01372A                     u5450:
 18839  01372A  0E00               	movlw	0
 18840  01372C  0012               	return	
 18841  01372E                     __end_of_CMP1_GetOutputStatus:
 18842                           	opt stack 0
 18843                           tblptru	equ	0xFF8
 18844                           tblptrh	equ	0xFF7
 18845                           tblptrl	equ	0xFF6
 18846                           tablat	equ	0xFF5
 18847                           prodh	equ	0xFF4
 18848                           prodl	equ	0xFF3
 18849                           intcon	equ	0xFF2
 18850                           indf0	equ	0xFEF
 18851                           postinc0	equ	0xFEE
 18852                           fsr0h	equ	0xFEA
 18853                           fsr0l	equ	0xFE9
 18854                           wreg	equ	0xFE8
 18855                           indf1	equ	0xFE7
 18856                           postdec1	equ	0xFE5
 18857                           fsr1h	equ	0xFE2
 18858                           fsr1l	equ	0xFE1
 18859                           indf2	equ	0xFDF
 18860                           postinc2	equ	0xFDE
 18861                           fsr2h	equ	0xFDA
 18862                           fsr2l	equ	0xFD9
 18863                           status	equ	0xFD8
 18864                           
 18865 ;; *************** function _displ_noteer *****************
 18866 ;; Defined at:
 18867 ;;		line 183 in file "lcd.c"
 18868 ;; Parameters:    Size  Location     Type
 18869 ;;		None
 18870 ;; Auto vars:     Size  Location     Type
 18871 ;;		None
 18872 ;; Return value:  Size  Location     Type
 18873 ;;                  1    wreg      void 
 18874 ;; Registers used:
 18875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18876 ;; Tracked objects:
 18877 ;;		On entry : 0/0
 18878 ;;		On exit  : 0/0
 18879 ;;		Unchanged: 0/0
 18880 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18885 ;;Total ram usage:        0 bytes
 18886 ;; Hardware stack levels used:    1
 18887 ;; Hardware stack levels required when called:    8
 18888 ;; This function calls:
 18889 ;;		_displ_code
 18890 ;;		_lcd_string
 18891 ;; This function is called by:
 18892 ;;		_main
 18893 ;; This function uses a non-reentrant model
 18894 ;;
 18895                           
 18896                           	psect	text102
 18897  0133D8                     __ptext102:
 18898                           	opt stack 0
 18899  0133D8                     _displ_noteer:
 18900                           	opt stack 22
 18901                           
 18902                           ;lcd.c: 185: lcd_string(noteerr, line1);
 18903                           
 18904                           ; BSR set to: 15
 18905                           ;incstack = 0
 18906  0133D8  0E0E               	movlw	low _noteerr
 18907  0133DA  6E24               	movwf	lcd_string@lcdstring,c
 18908  0133DC  0EFE               	movlw	high _noteerr
 18909  0133DE  6E25               	movwf	lcd_string@lcdstring+1,c
 18910  0133E0  0E86               	movlw	low _line1
 18911  0133E2  6EF6               	movwf	tblptrl,c
 18912  0133E4                     	if	1	;There is more than 1 active tblptr byte
 18913  0133E4  0EFB               	movlw	high _line1
 18914  0133E6  6EF7               	movwf	tblptrh,c
 18915  0133E8                     	endif
 18916  0133E8                     	if	1	;There are 3 active tblptr bytes
 18917  0133E8  0E00               	movlw	low (_line1 shr (0+16))
 18918  0133EA  6EF8               	movwf	tblptru,c
 18919  0133EC                     	endif
 18920  0133EC  0008               	tblrd		*
 18921  0133EE  CFF5 F026          	movff	tablat,lcd_string@lcdline
 18922  0133F2  EC5D  F08A         	call	_lcd_string	;wreg free
 18923                           
 18924                           ;lcd.c: 186: ercode = mdbdata[0];
 18925  0133F6  C060  F0B3         	movff	_mdbdata,_ercode
 18926                           
 18927                           ;lcd.c: 187: displ_code(ercode);
 18928  0133FA  0100               	movlb	0	; () banked
 18929  0133FC  51B3               	movf	_ercode& (0+255),w,b
 18930  0133FE  ECEF  F087         	call	_displ_code
 18931                           
 18932                           ;lcd.c: 188: mdbflags.noteerr = 0;
 18933  013402  9240               	bcf	_mdbflags,1,c
 18934                           
 18935                           ;lcd.c: 189: venflags.noterr = 0;
 18936  013404  9C2D               	bcf	_venflags,6,c
 18937  013406  0012               	return		;funcret
 18938  013408                     __end_of_displ_noteer:
 18939                           	opt stack 0
 18940                           tblptru	equ	0xFF8
 18941                           tblptrh	equ	0xFF7
 18942                           tblptrl	equ	0xFF6
 18943                           tablat	equ	0xFF5
 18944                           prodh	equ	0xFF4
 18945                           prodl	equ	0xFF3
 18946                           intcon	equ	0xFF2
 18947                           indf0	equ	0xFEF
 18948                           postinc0	equ	0xFEE
 18949                           fsr0h	equ	0xFEA
 18950                           fsr0l	equ	0xFE9
 18951                           wreg	equ	0xFE8
 18952                           indf1	equ	0xFE7
 18953                           postdec1	equ	0xFE5
 18954                           fsr1h	equ	0xFE2
 18955                           fsr1l	equ	0xFE1
 18956                           indf2	equ	0xFDF
 18957                           postinc2	equ	0xFDE
 18958                           fsr2h	equ	0xFDA
 18959                           fsr2l	equ	0xFD9
 18960                           status	equ	0xFD8
 18961                           
 18962 ;; *************** function _displ_code *****************
 18963 ;; Defined at:
 18964 ;;		line 136 in file "lcd.c"
 18965 ;; Parameters:    Size  Location     Type
 18966 ;;  ercode          1    wreg     unsigned char 
 18967 ;; Auto vars:     Size  Location     Type
 18968 ;;  ercode          1   27[COMRAM] unsigned char 
 18969 ;; Return value:  Size  Location     Type
 18970 ;;                  1    wreg      void 
 18971 ;; Registers used:
 18972 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18973 ;; Tracked objects:
 18974 ;;		On entry : 0/0
 18975 ;;		On exit  : 0/0
 18976 ;;		Unchanged: 0/0
 18977 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 18978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18979 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18980 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18982 ;;Total ram usage:        3 bytes
 18983 ;; Hardware stack levels used:    1
 18984 ;; Hardware stack levels required when called:    7
 18985 ;; This function calls:
 18986 ;;		_lcd_writeC
 18987 ;; This function is called by:
 18988 ;;		_displ_noteer
 18989 ;; This function uses a non-reentrant model
 18990 ;;
 18991                           
 18992                           	psect	text103
 18993  010FDE                     __ptext103:
 18994                           	opt stack 0
 18995  010FDE                     _displ_code:
 18996                           	opt stack 22
 18997                           
 18998                           ;incstack = 0
 18999                           ;displ_code@ercode stored from wreg
 19000  010FDE  6E26               	movwf	displ_code@ercode,c
 19001                           
 19002                           ;lcd.c: 138: if((ercode >> 4) < 0x0A)
 19003  010FE0  C026  F024         	movff	displ_code@ercode,??_displ_code
 19004  010FE4  3A24               	swapf	??_displ_code,f,c
 19005  010FE6  0E0F               	movlw	15
 19006  010FE8  1624               	andwf	??_displ_code,f,c
 19007  010FEA  0E0A               	movlw	10
 19008  010FEC  6024               	cpfslt	??_displ_code,c
 19009  010FEE  D01E               	goto	l1856
 19010                           
 19011                           ;lcd.c: 139: {
 19012                           ;lcd.c: 140: lcd_writeC((ercode >> 4) | 0x30);
 19013  010FF0  3826               	swapf	displ_code@ercode,w,c
 19014  010FF2  0B0F               	andlw	15
 19015  010FF4  0930               	iorlw	48
 19016  010FF6  EC27  F094         	call	_lcd_writeC
 19017                           
 19018                           ;lcd.c: 141: }
 19019  010FFA  D033               	goto	l1858
 19020  010FFC  0E41               	movlw	65
 19021  010FFE  EC27  F094         	call	_lcd_writeC
 19022                           
 19023                           ;lcd.c: 147: break;
 19024  011002  D02F               	goto	l1858
 19025  011004  0E42               	movlw	66
 19026  011006  EC27  F094         	call	_lcd_writeC
 19027                           
 19028                           ;lcd.c: 149: break;
 19029  01100A  D02B               	goto	l1858
 19030  01100C  0E43               	movlw	67
 19031  01100E  EC27  F094         	call	_lcd_writeC
 19032                           
 19033                           ;lcd.c: 151: break;
 19034  011012  D027               	goto	l1858
 19035  011014  0E44               	movlw	68
 19036  011016  EC27  F094         	call	_lcd_writeC
 19037                           
 19038                           ;lcd.c: 153: break;
 19039  01101A  D023               	goto	l1858
 19040  01101C  0E45               	movlw	69
 19041  01101E  EC27  F094         	call	_lcd_writeC
 19042                           
 19043                           ;lcd.c: 155: break;
 19044  011022  D01F               	goto	l1858
 19045  011024  0E46               	movlw	70
 19046  011026  EC27  F094         	call	_lcd_writeC
 19047                           
 19048                           ;lcd.c: 157: }
 19049  01102A  D01B               	goto	l1858
 19050  01102C                     l1856:
 19051  01102C  3826               	swapf	displ_code@ercode,w,c
 19052  01102E  0B0F               	andlw	15
 19053  011030  6E24               	movwf	??_displ_code& (0+255),c
 19054  011032  6A25               	clrf	(??_displ_code+1)& (0+255),c
 19055                           
 19056                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19057                           ; Switch size 1, requested type "space"
 19058                           ; Number of cases is 1, Range of values is 0 to 0
 19059                           ; switch strategies available:
 19060                           ; Name         Instructions Cycles
 19061                           ; simple_byte            4     3 (average)
 19062                           ;	Chosen strategy is simple_byte
 19063  011034  5025               	movf	??_displ_code+1,w,c
 19064  011036  0A00               	xorlw	0	; case 0
 19065  011038  A4D8               	btfss	status,2,c
 19066  01103A  D013               	goto	l1858
 19067                           
 19068                           ; Switch size 1, requested type "space"
 19069                           ; Number of cases is 6, Range of values is 10 to 15
 19070                           ; switch strategies available:
 19071                           ; Name         Instructions Cycles
 19072                           ; simple_byte           19    10 (average)
 19073                           ;	Chosen strategy is simple_byte
 19074  01103C  5024               	movf	??_displ_code,w,c
 19075  01103E  0A0A               	xorlw	10	; case 10
 19076  011040  B4D8               	btfsc	status,2,c
 19077  011042  D7DC               	goto	l1857
 19078  011044  0A01               	xorlw	1	; case 11
 19079  011046  B4D8               	btfsc	status,2,c
 19080  011048  D7DD               	goto	l1859
 19081  01104A  0A07               	xorlw	7	; case 12
 19082  01104C  B4D8               	btfsc	status,2,c
 19083  01104E  D7DE               	goto	l1860
 19084  011050  0A01               	xorlw	1	; case 13
 19085  011052  B4D8               	btfsc	status,2,c
 19086  011054  D7DF               	goto	l1861
 19087  011056  0A03               	xorlw	3	; case 14
 19088  011058  B4D8               	btfsc	status,2,c
 19089  01105A  D7E0               	goto	l1862
 19090  01105C  0A01               	xorlw	1	; case 15
 19091  01105E  B4D8               	btfsc	status,2,c
 19092  011060  D7E1               	goto	l1863
 19093  011062                     l1858:
 19094                           
 19095                           ;lcd.c: 158: }
 19096                           ;lcd.c: 159: if((ercode & 0x0F) < 0x0A)
 19097  011062  C026  F024         	movff	displ_code@ercode,??_displ_code
 19098  011066  0E0F               	movlw	15
 19099  011068  1624               	andwf	??_displ_code,f,c
 19100  01106A  0E0A               	movlw	10
 19101  01106C  6024               	cpfslt	??_displ_code,c
 19102  01106E  D01E               	goto	l1866
 19103                           
 19104                           ;lcd.c: 160: {
 19105                           ;lcd.c: 161: lcd_writeC((ercode & 0x0F) | 0x30);
 19106  011070  5026               	movf	displ_code@ercode,w,c
 19107  011072  0B0F               	andlw	15
 19108  011074  0930               	iorlw	48
 19109  011076  EC27  F094         	call	_lcd_writeC
 19110                           
 19111                           ;lcd.c: 162: }
 19112  01107A  0012               	return	
 19113  01107C  0E41               	movlw	65
 19114  01107E  EC27  F094         	call	_lcd_writeC
 19115                           
 19116                           ;lcd.c: 168: break;
 19117  011082  0012               	return	
 19118  011084  0E42               	movlw	66
 19119  011086  EC27  F094         	call	_lcd_writeC
 19120                           
 19121                           ;lcd.c: 170: break;
 19122  01108A  0012               	return	
 19123  01108C  0E43               	movlw	67
 19124  01108E  EC27  F094         	call	_lcd_writeC
 19125                           
 19126                           ;lcd.c: 172: break;
 19127  011092  0012               	return	
 19128  011094  0E44               	movlw	68
 19129  011096  EC27  F094         	call	_lcd_writeC
 19130                           
 19131                           ;lcd.c: 174: break;
 19132  01109A  0012               	return	
 19133  01109C  0E45               	movlw	69
 19134  01109E  EC27  F094         	call	_lcd_writeC
 19135                           
 19136                           ;lcd.c: 176: break;
 19137  0110A2  0012               	return	
 19138  0110A4  0E46               	movlw	70
 19139  0110A6  EC27  F094         	call	_lcd_writeC
 19140                           
 19141                           ;lcd.c: 178: }
 19142  0110AA  0012               	return	
 19143  0110AC                     l1866:
 19144  0110AC  5026               	movf	displ_code@ercode,w,c
 19145  0110AE  0B0F               	andlw	15
 19146  0110B0  6E24               	movwf	??_displ_code& (0+255),c
 19147  0110B2  6A25               	clrf	(??_displ_code+1)& (0+255),c
 19148                           
 19149                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19150                           ; Switch size 1, requested type "space"
 19151                           ; Number of cases is 1, Range of values is 0 to 0
 19152                           ; switch strategies available:
 19153                           ; Name         Instructions Cycles
 19154                           ; simple_byte            4     3 (average)
 19155                           ;	Chosen strategy is simple_byte
 19156  0110B4  5025               	movf	??_displ_code+1,w,c
 19157  0110B6  0A00               	xorlw	0	; case 0
 19158  0110B8  A4D8               	btfss	status,2,c
 19159  0110BA  0012               	return	
 19160                           
 19161                           ; Switch size 1, requested type "space"
 19162                           ; Number of cases is 6, Range of values is 10 to 15
 19163                           ; switch strategies available:
 19164                           ; Name         Instructions Cycles
 19165                           ; simple_byte           19    10 (average)
 19166                           ;	Chosen strategy is simple_byte
 19167  0110BC  5024               	movf	??_displ_code,w,c
 19168  0110BE  0A0A               	xorlw	10	; case 10
 19169  0110C0  B4D8               	btfsc	status,2,c
 19170  0110C2  D7DC               	goto	l1867
 19171  0110C4  0A01               	xorlw	1	; case 11
 19172  0110C6  B4D8               	btfsc	status,2,c
 19173  0110C8  D7DD               	goto	l1869
 19174  0110CA  0A07               	xorlw	7	; case 12
 19175  0110CC  B4D8               	btfsc	status,2,c
 19176  0110CE  D7DE               	goto	l1870
 19177  0110D0  0A01               	xorlw	1	; case 13
 19178  0110D2  B4D8               	btfsc	status,2,c
 19179  0110D4  D7DF               	goto	l1871
 19180  0110D6  0A03               	xorlw	3	; case 14
 19181  0110D8  B4D8               	btfsc	status,2,c
 19182  0110DA  D7E0               	goto	l1872
 19183  0110DC  0A01               	xorlw	1	; case 15
 19184  0110DE  A4D8               	btfss	status,2,c
 19185  0110E0  0012               	return	
 19186  0110E2  D7E0               	goto	l1873
 19187  0110E4                     __end_of_displ_code:
 19188                           	opt stack 0
 19189                           tblptru	equ	0xFF8
 19190                           tblptrh	equ	0xFF7
 19191                           tblptrl	equ	0xFF6
 19192                           tablat	equ	0xFF5
 19193                           prodh	equ	0xFF4
 19194                           prodl	equ	0xFF3
 19195                           intcon	equ	0xFF2
 19196                           indf0	equ	0xFEF
 19197                           postinc0	equ	0xFEE
 19198                           fsr0h	equ	0xFEA
 19199                           fsr0l	equ	0xFE9
 19200                           wreg	equ	0xFE8
 19201                           indf1	equ	0xFE7
 19202                           postdec1	equ	0xFE5
 19203                           fsr1h	equ	0xFE2
 19204                           fsr1l	equ	0xFE1
 19205                           indf2	equ	0xFDF
 19206                           postinc2	equ	0xFDE
 19207                           fsr2h	equ	0xFDA
 19208                           fsr2l	equ	0xFD9
 19209                           status	equ	0xFD8
 19210                           
 19211 ;; *************** function _displ_nochange *****************
 19212 ;; Defined at:
 19213 ;;		line 243 in file "lcd.c"
 19214 ;; Parameters:    Size  Location     Type
 19215 ;;		None
 19216 ;; Auto vars:     Size  Location     Type
 19217 ;;		None
 19218 ;; Return value:  Size  Location     Type
 19219 ;;                  1    wreg      void 
 19220 ;; Registers used:
 19221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19222 ;; Tracked objects:
 19223 ;;		On entry : 0/0
 19224 ;;		On exit  : 0/0
 19225 ;;		Unchanged: 0/0
 19226 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 19227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19231 ;;Total ram usage:        0 bytes
 19232 ;; Hardware stack levels used:    1
 19233 ;; Hardware stack levels required when called:    8
 19234 ;; This function calls:
 19235 ;;		_lcd_dispadd
 19236 ;;		_lcd_string
 19237 ;; This function is called by:
 19238 ;;		_main
 19239 ;; This function uses a non-reentrant model
 19240 ;;
 19241                           
 19242                           	psect	text104
 19243  01330C                     __ptext104:
 19244                           	opt stack 0
 19245  01330C                     _displ_nochange:
 19246                           	opt stack 22
 19247                           
 19248                           ;lcd.c: 245: lcd_dispadd(line3);
 19249                           
 19250                           ;incstack = 0
 19251  01330C  0E84               	movlw	low _line3
 19252  01330E  6EF6               	movwf	tblptrl,c
 19253  013310                     	if	1	;There is more than 1 active tblptr byte
 19254  013310  0EFB               	movlw	high _line3
 19255  013312  6EF7               	movwf	tblptrh,c
 19256  013314                     	endif
 19257  013314                     	if	1	;There are 3 active tblptr bytes
 19258  013314  0E00               	movlw	low (_line3 shr (0+16))
 19259  013316  6EF8               	movwf	tblptru,c
 19260  013318                     	endif
 19261  013318  0008               	tblrd		*
 19262  01331A  50F5               	movf	tablat,w,c
 19263  01331C  ECF4  F09A         	call	_lcd_dispadd
 19264                           
 19265                           ;lcd.c: 246: lcd_string(nochange, line3);
 19266  013320  0EAE               	movlw	low _nochange
 19267  013322  6E24               	movwf	lcd_string@lcdstring,c
 19268  013324  0EFD               	movlw	high _nochange
 19269  013326  6E25               	movwf	lcd_string@lcdstring+1,c
 19270  013328  0E84               	movlw	low _line3
 19271  01332A  6EF6               	movwf	tblptrl,c
 19272  01332C                     	if	1	;There is more than 1 active tblptr byte
 19273  01332C  0EFB               	movlw	high _line3
 19274  01332E  6EF7               	movwf	tblptrh,c
 19275  013330                     	endif
 19276  013330                     	if	1	;There are 3 active tblptr bytes
 19277  013330  0E00               	movlw	low (_line3 shr (0+16))
 19278  013332  6EF8               	movwf	tblptru,c
 19279  013334                     	endif
 19280  013334  0008               	tblrd		*
 19281  013336  CFF5 F026          	movff	tablat,lcd_string@lcdline
 19282  01333A  EC5D  F08A         	call	_lcd_string	;wreg free
 19283  01333E  0012               	return		;funcret
 19284  013340                     __end_of_displ_nochange:
 19285                           	opt stack 0
 19286                           tblptru	equ	0xFF8
 19287                           tblptrh	equ	0xFF7
 19288                           tblptrl	equ	0xFF6
 19289                           tablat	equ	0xFF5
 19290                           prodh	equ	0xFF4
 19291                           prodl	equ	0xFF3
 19292                           intcon	equ	0xFF2
 19293                           indf0	equ	0xFEF
 19294                           postinc0	equ	0xFEE
 19295                           fsr0h	equ	0xFEA
 19296                           fsr0l	equ	0xFE9
 19297                           wreg	equ	0xFE8
 19298                           indf1	equ	0xFE7
 19299                           postdec1	equ	0xFE5
 19300                           fsr1h	equ	0xFE2
 19301                           fsr1l	equ	0xFE1
 19302                           indf2	equ	0xFDF
 19303                           postinc2	equ	0xFDE
 19304                           fsr2h	equ	0xFDA
 19305                           fsr2l	equ	0xFD9
 19306                           status	equ	0xFD8
 19307                           
 19308 ;; *************** function _displ_credit *****************
 19309 ;; Defined at:
 19310 ;;		line 128 in file "lcd.c"
 19311 ;; Parameters:    Size  Location     Type
 19312 ;;		None
 19313 ;; Auto vars:     Size  Location     Type
 19314 ;;  cash            1   31[COMRAM] unsigned char 
 19315 ;; Return value:  Size  Location     Type
 19316 ;;                  1    wreg      void 
 19317 ;; Registers used:
 19318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19319 ;; Tracked objects:
 19320 ;;		On entry : 0/0
 19321 ;;		On exit  : 0/0
 19322 ;;		Unchanged: 0/0
 19323 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 19324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19328 ;;Total ram usage:        1 bytes
 19329 ;; Hardware stack levels used:    1
 19330 ;; Hardware stack levels required when called:    8
 19331 ;; This function calls:
 19332 ;;		_credit_check
 19333 ;;		_displ_hex
 19334 ;;		_lcd_string
 19335 ;; This function is called by:
 19336 ;;		_main
 19337 ;; This function uses a non-reentrant model
 19338 ;;
 19339                           
 19340                           	psect	text105
 19341  013340                     __ptext105:
 19342                           	opt stack 0
 19343  013340                     _displ_credit:
 19344                           	opt stack 22
 19345                           
 19346                           ;lcd.c: 130: lcd_string(credits, line1);
 19347                           
 19348                           ;incstack = 0
 19349  013340  0EF7               	movlw	low _credits
 19350  013342  6E24               	movwf	lcd_string@lcdstring,c
 19351  013344  0EFE               	movlw	high _credits
 19352  013346  6E25               	movwf	lcd_string@lcdstring+1,c
 19353  013348  0E86               	movlw	low _line1
 19354  01334A  6EF6               	movwf	tblptrl,c
 19355  01334C                     	if	1	;There is more than 1 active tblptr byte
 19356  01334C  0EFB               	movlw	high _line1
 19357  01334E  6EF7               	movwf	tblptrh,c
 19358  013350                     	endif
 19359  013350                     	if	1	;There are 3 active tblptr bytes
 19360  013350  0E00               	movlw	low (_line1 shr (0+16))
 19361  013352  6EF8               	movwf	tblptru,c
 19362  013354                     	endif
 19363  013354  0008               	tblrd		*
 19364  013356  CFF5 F026          	movff	tablat,lcd_string@lcdline
 19365  01335A  EC5D  F08A         	call	_lcd_string	;wreg free
 19366                           
 19367                           ;lcd.c: 131: uint8_t cash = credit_check();
 19368  01335E  EC7C  F09A         	call	_credit_check	;wreg free
 19369  013362  6E2A               	movwf	displ_credit@cash,c
 19370                           
 19371                           ;lcd.c: 132: displ_hex((uint8_t) cash);
 19372  013364  502A               	movf	displ_credit@cash,w,c
 19373  013366  6E27               	movwf	displ_hex@hexnum,c
 19374  013368  6A28               	clrf	displ_hex@hexnum+1,c
 19375  01336A  6A29               	clrf	displ_hex@hexnum+2,c
 19376  01336C  ECAB  F08D         	call	_displ_hex	;wreg free
 19377                           
 19378                           ;lcd.c: 133: venflags.credisplay = 0;
 19379  013370  982D               	bcf	_venflags,4,c
 19380  013372  0012               	return		;funcret
 19381  013374                     __end_of_displ_credit:
 19382                           	opt stack 0
 19383                           tblptru	equ	0xFF8
 19384                           tblptrh	equ	0xFF7
 19385                           tblptrl	equ	0xFF6
 19386                           tablat	equ	0xFF5
 19387                           prodh	equ	0xFF4
 19388                           prodl	equ	0xFF3
 19389                           intcon	equ	0xFF2
 19390                           indf0	equ	0xFEF
 19391                           postinc0	equ	0xFEE
 19392                           fsr0h	equ	0xFEA
 19393                           fsr0l	equ	0xFE9
 19394                           wreg	equ	0xFE8
 19395                           indf1	equ	0xFE7
 19396                           postdec1	equ	0xFE5
 19397                           fsr1h	equ	0xFE2
 19398                           fsr1l	equ	0xFE1
 19399                           indf2	equ	0xFDF
 19400                           postinc2	equ	0xFDE
 19401                           fsr2h	equ	0xFDA
 19402                           fsr2l	equ	0xFD9
 19403                           status	equ	0xFD8
 19404                           
 19405 ;; *************** function _lcd_string *****************
 19406 ;; Defined at:
 19407 ;;		line 217 in file "lcd.c"
 19408 ;; Parameters:    Size  Location     Type
 19409 ;;  lcdstring       2   25[COMRAM] PTR unsigned char 
 19410 ;;		 -> twohundredrand(8), hundredrand(8), fiftyrand(8), twentyrand(8), 
 19411 ;;		 -> tenrand(9), setnotes(69), chanresetmsg(32), chanlinkm(55), 
 19412 ;;		 -> vendtimem(41), setimemsg(41), vendsetup(67), pricesetm2(57), 
 19413 ;;		 -> pricesetmsg(18), creditclr(16), dacmsg(13), hoppcoin(51), 
 19414 ;;		 -> totalvendsm(7), vendispmsg(21), totalmsg(8), cashinmsg(10), 
 19415 ;;		 -> initnote(37), gstime(10), clocktime(6), gsdate(10), 
 19416 ;;		 -> clockdate(6), nochange(33), noteerr(28), credits(13), 
 19417 ;;		 -> timemsg(18), clrline(21), enabled(10), disabled(10), 
 19418 ;;		 -> sensoffmsg(31), sensmsg(11), linkmsg(12), chanmsg(12), 
 19419 ;;		 -> clrmsg(10), onmsg(4), offmsg(4), servmsg(80), 
 19420 ;;		 -> emptymsg(9), inscoin(39), 
 19421 ;;  lcdline         1   27[COMRAM] unsigned char 
 19422 ;; Auto vars:     Size  Location     Type
 19423 ;;		None
 19424 ;; Return value:  Size  Location     Type
 19425 ;;                  1    wreg      void 
 19426 ;; Registers used:
 19427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19428 ;; Tracked objects:
 19429 ;;		On entry : 0/0
 19430 ;;		On exit  : 0/0
 19431 ;;		Unchanged: 0/0
 19432 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 19433 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19436 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19437 ;;Total ram usage:        5 bytes
 19438 ;; Hardware stack levels used:    1
 19439 ;; Hardware stack levels required when called:    7
 19440 ;; This function calls:
 19441 ;;		_lcd_dispadd
 19442 ;;		_lcd_write
 19443 ;;		_lcd_writeC
 19444 ;; This function is called by:
 19445 ;;		_main
 19446 ;;		_enter_service
 19447 ;;		_displ_sens
 19448 ;;		_displ_lflags
 19449 ;;		_displ_sflags
 19450 ;;		_displ_time
 19451 ;;		_displ_note
 19452 ;;		_displ_nendis
 19453 ;;		_displ_credit
 19454 ;;		_displ_noteer
 19455 ;;		_displ_nochange
 19456 ;;		_disp_clock
 19457 ;;		_vend_init
 19458 ;;		_Audit
 19459 ;;		_Hopper_coin
 19460 ;;		_Update_Hopcoin
 19461 ;;		_Sensor_set
 19462 ;;		_Clear_cred
 19463 ;;		_price_set
 19464 ;;		_set_price
 19465 ;;		_Vend_setup
 19466 ;;		_Vend_settime
 19467 ;;		_Vend_timeset
 19468 ;;		_Chan_link
 19469 ;;		_Link_chan
 19470 ;;		_Sens_off
 19471 ;;		_off_sens
 19472 ;;		_Reset_settings
 19473 ;;		_set_notes
 19474 ;;		_enable_notes
 19475 ;;		_price_check
 19476 ;; This function uses a non-reentrant model
 19477 ;;
 19478                           
 19479                           	psect	text106
 19480  0114BA                     __ptext106:
 19481                           	opt stack 0
 19482  0114BA                     _lcd_string:
 19483                           	opt stack 22
 19484                           
 19485                           ;lcd.c: 219: if(lcdline == line1)
 19486                           
 19487                           ;incstack = 0
 19488  0114BA  0E86               	movlw	low _line1
 19489  0114BC  6EF6               	movwf	tblptrl,c
 19490  0114BE                     	if	1	;There is more than 1 active tblptr byte
 19491  0114BE  0EFB               	movlw	high _line1
 19492  0114C0  6EF7               	movwf	tblptrh,c
 19493  0114C2                     	endif
 19494  0114C2                     	if	1	;There are 3 active tblptr bytes
 19495  0114C2  0E00               	movlw	low (_line1 shr (0+16))
 19496  0114C4  6EF8               	movwf	tblptru,c
 19497  0114C6                     	endif
 19498  0114C6  0008               	tblrd		*
 19499  0114C8  50F5               	movf	tablat,w,c
 19500  0114CA  6226               	cpfseq	lcd_string@lcdline,c
 19501  0114CC  D00B               	goto	l1890
 19502                           
 19503                           ;lcd.c: 220: {
 19504                           ;lcd.c: 221: lcd_write(dispclr);
 19505  0114CE  0E90               	movlw	low _dispclr
 19506  0114D0  6EF6               	movwf	tblptrl,c
 19507  0114D2                     	if	1	;There is more than 1 active tblptr byte
 19508  0114D2  0EFB               	movlw	high _dispclr
 19509  0114D4  6EF7               	movwf	tblptrh,c
 19510  0114D6                     	endif
 19511  0114D6                     	if	1	;There are 3 active tblptr bytes
 19512  0114D6  0E00               	movlw	low (_dispclr shr (0+16))
 19513  0114D8  6EF8               	movwf	tblptru,c
 19514  0114DA                     	endif
 19515  0114DA  0008               	tblrd		*
 19516  0114DC  50F5               	movf	tablat,w,c
 19517  0114DE  ECD3  F099         	call	_lcd_write
 19518                           
 19519                           ;lcd.c: 222: }
 19520  0114E2  D004               	goto	l1891
 19521  0114E4                     l1890:
 19522                           
 19523                           ;lcd.c: 223: else
 19524                           ;lcd.c: 224: {
 19525                           ;lcd.c: 226: lcd_dispadd(lcdline | 0x80);
 19526  0114E4  5026               	movf	lcd_string@lcdline,w,c
 19527  0114E6  0980               	iorlw	128
 19528  0114E8  ECF4  F09A         	call	_lcd_dispadd
 19529  0114EC                     l1891:
 19530                           
 19531                           ;lcd.c: 227: }
 19532                           ;lcd.c: 228: for(stradd = 0; lcdstring[stradd] != 0; stradd++)
 19533  0114EC  0E00               	movlw	0
 19534  0114EE  6E43               	movwf	_stradd,c
 19535  0114F0  D03A               	goto	l1892
 19536  0114F2                     
 19537                           ;lcd.c: 229: {
 19538                           ;lcd.c: 230: lcdata = lcdstring[stradd];
 19539  0114F2  5043               	movf	_stradd,w,c
 19540  0114F4  0D01               	mullw	1
 19541  0114F6  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
 19542  0114FA  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
 19543  0114FE  50F3               	movf	prodl,w,c
 19544  011500  2627               	addwf	??_lcd_string,f,c
 19545  011502  50F4               	movf	prodh,w,c
 19546  011504  2228               	addwfc	??_lcd_string+1,f,c
 19547  011506  C027  FFF6         	movff	??_lcd_string,tblptrl
 19548  01150A  C028  FFF7         	movff	??_lcd_string+1,tblptrh
 19549  01150E  0E00               	movlw	low (__mediumconst shr (0+16))
 19550  011510  6EF8               	movwf	tblptru,c
 19551  011512  0E0E               	movlw	(high __ramtop+-1)
 19552  011514  64F7               	cpfsgt	tblptrh,c
 19553  011516  D003               	bra	u5097
 19554  011518  0008               	tblrd		*
 19555  01151A  50F5               	movf	tablat,w,c
 19556  01151C  D005               	bra	u5090
 19557  01151E                     u5097:
 19558  01151E  CFF6 FFE9          	movff	tblptrl,fsr0l
 19559  011522  CFF7 FFEA          	movff	tblptrh,fsr0h
 19560  011526  50EF               	movf	indf0,w,c
 19561  011528                     u5090:
 19562  011528  6E44               	movwf	_lcdata,c
 19563                           
 19564                           ;lcd.c: 231: lcd_writeC(lcdstring[stradd]);
 19565  01152A  5043               	movf	_stradd,w,c
 19566  01152C  0D01               	mullw	1
 19567  01152E  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
 19568  011532  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
 19569  011536  50F3               	movf	prodl,w,c
 19570  011538  2627               	addwf	??_lcd_string,f,c
 19571  01153A  50F4               	movf	prodh,w,c
 19572  01153C  2228               	addwfc	??_lcd_string+1,f,c
 19573  01153E  C027  FFF6         	movff	??_lcd_string,tblptrl
 19574  011542  C028  FFF7         	movff	??_lcd_string+1,tblptrh
 19575  011546  0E00               	movlw	low (__mediumconst shr (0+16))
 19576  011548  6EF8               	movwf	tblptru,c
 19577  01154A  0E0E               	movlw	(high __ramtop+-1)
 19578  01154C  64F7               	cpfsgt	tblptrh,c
 19579  01154E  D003               	bra	u5107
 19580  011550  0008               	tblrd		*
 19581  011552  50F5               	movf	tablat,w,c
 19582  011554  D005               	bra	u5100
 19583  011556                     u5107:
 19584  011556  CFF6 FFE9          	movff	tblptrl,fsr0l
 19585  01155A  CFF7 FFEA          	movff	tblptrh,fsr0h
 19586  01155E  50EF               	movf	indf0,w,c
 19587  011560                     u5100:
 19588  011560  EC27  F094         	call	_lcd_writeC
 19589  011564  2A43               	incf	_stradd,f,c
 19590  011566                     l1892:
 19591  011566  5043               	movf	_stradd,w,c
 19592  011568  0D01               	mullw	1
 19593  01156A  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
 19594  01156E  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
 19595  011572  50F3               	movf	prodl,w,c
 19596  011574  2627               	addwf	??_lcd_string,f,c
 19597  011576  50F4               	movf	prodh,w,c
 19598  011578  2228               	addwfc	??_lcd_string+1,f,c
 19599  01157A  C027  FFF6         	movff	??_lcd_string,tblptrl
 19600  01157E  C028  FFF7         	movff	??_lcd_string+1,tblptrh
 19601  011582  0E00               	movlw	low (__mediumconst shr (0+16))
 19602  011584  6EF8               	movwf	tblptru,c
 19603  011586  0E0E               	movlw	(high __ramtop+-1)
 19604  011588  64F7               	cpfsgt	tblptrh,c
 19605  01158A  D003               	bra	u5117
 19606  01158C  0008               	tblrd		*
 19607  01158E  50F5               	movf	tablat,w,c
 19608  011590  D005               	bra	u5110
 19609  011592                     u5117:
 19610  011592  CFF6 FFE9          	movff	tblptrl,fsr0l
 19611  011596  CFF7 FFEA          	movff	tblptrh,fsr0h
 19612  01159A  50EF               	movf	indf0,w,c
 19613  01159C                     u5110:
 19614  01159C  0900               	iorlw	0
 19615  01159E  B4D8               	btfsc	status,2,c
 19616  0115A0  0012               	return	
 19617  0115A2  D7A7               	goto	l1893
 19618  0115A4                     __end_of_lcd_string:
 19619                           	opt stack 0
 19620                           tblptru	equ	0xFF8
 19621                           tblptrh	equ	0xFF7
 19622                           tblptrl	equ	0xFF6
 19623                           tablat	equ	0xFF5
 19624                           prodh	equ	0xFF4
 19625                           prodl	equ	0xFF3
 19626                           intcon	equ	0xFF2
 19627                           indf0	equ	0xFEF
 19628                           postinc0	equ	0xFEE
 19629                           fsr0h	equ	0xFEA
 19630                           fsr0l	equ	0xFE9
 19631                           wreg	equ	0xFE8
 19632                           indf1	equ	0xFE7
 19633                           postdec1	equ	0xFE5
 19634                           fsr1h	equ	0xFE2
 19635                           fsr1l	equ	0xFE1
 19636                           indf2	equ	0xFDF
 19637                           postinc2	equ	0xFDE
 19638                           fsr2h	equ	0xFDA
 19639                           fsr2l	equ	0xFD9
 19640                           status	equ	0xFD8
 19641                           
 19642 ;; *************** function _displ_hex *****************
 19643 ;; Defined at:
 19644 ;;		line 192 in file "lcd.c"
 19645 ;; Parameters:    Size  Location     Type
 19646 ;;  hexnum          3   28[COMRAM] unsigned um
 19647 ;; Auto vars:     Size  Location     Type
 19648 ;;  value           8    0[BANK0 ] unsigned char [8]
 19649 ;;  hexnumsave      3    8[BANK0 ] unsigned um
 19650 ;;  i               1   11[BANK0 ] char 
 19651 ;; Return value:  Size  Location     Type
 19652 ;;                  1    wreg      void 
 19653 ;; Registers used:
 19654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19655 ;; Tracked objects:
 19656 ;;		On entry : 0/0
 19657 ;;		On exit  : 0/0
 19658 ;;		Unchanged: 0/0
 19659 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 19660 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19661 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19663 ;;      Totals:         3       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19664 ;;Total ram usage:       15 bytes
 19665 ;; Hardware stack levels used:    1
 19666 ;; Hardware stack levels required when called:    7
 19667 ;; This function calls:
 19668 ;;		___ltdiv
 19669 ;;		___ltmod
 19670 ;;		_lcd_writeC
 19671 ;; This function is called by:
 19672 ;;		_displ_sens
 19673 ;;		_displ_time
 19674 ;;		_displ_credit
 19675 ;;		_displ_price
 19676 ;;		_Audit
 19677 ;;		_Hopper_coin
 19678 ;;		_Update_Hopcoin
 19679 ;; This function uses a non-reentrant model
 19680 ;;
 19681                           
 19682                           	psect	text107
 19683  011B56                     __ptext107:
 19684                           	opt stack 0
 19685  011B56                     _displ_hex:
 19686                           	opt stack 19
 19687                           
 19688                           ;lcd.c: 194: signed char i = 0;
 19689                           
 19690                           ;incstack = 0
 19691  011B56  0E00               	movlw	0
 19692  011B58  0100               	movlb	0	; () banked
 19693  011B5A  6FEC               	movwf	displ_hex@i& (0+255),b
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;lcd.c: 195: uint8_t value[8];
 19697                           ;lcd.c: 196: uint24_t hexnumsave = hexnum;
 19698  011B5C  C027  F0E9         	movff	displ_hex@hexnum,displ_hex@hexnumsave
 19699  011B60  C028  F0EA         	movff	displ_hex@hexnum+1,displ_hex@hexnumsave+1
 19700  011B64  C029  F0EB         	movff	displ_hex@hexnum+2,displ_hex@hexnumsave+2
 19701                           
 19702                           ;lcd.c: 197: while(hexnum > 0)
 19703  011B68  D02F               	goto	l1880
 19704  011B6A                     
 19705                           ; BSR set to: 0
 19706                           ;lcd.c: 198: {
 19707                           ;lcd.c: 199: value[i] = hexnum % 10;
 19708                           
 19709                           ; BSR set to: 0
 19710  011B6A  51EC               	movf	displ_hex@i& (0+255),w,b
 19711  011B6C  0D01               	mullw	1
 19712  011B6E  0EE1               	movlw	low displ_hex@value
 19713  011B70  24F3               	addwf	prodl,w,c
 19714  011B72  6ED9               	movwf	fsr2l,c
 19715  011B74  0E00               	movlw	high displ_hex@value
 19716  011B76  20F4               	addwfc	prodh,w,c
 19717  011B78  6EDA               	movwf	fsr2h,c
 19718  011B7A  C027  F01D         	movff	displ_hex@hexnum,___ltmod@dividend
 19719  011B7E  C028  F01E         	movff	displ_hex@hexnum+1,___ltmod@dividend+1
 19720  011B82  C029  F01F         	movff	displ_hex@hexnum+2,___ltmod@dividend+2
 19721  011B86  0E0A               	movlw	10
 19722  011B88  6E20               	movwf	___ltmod@divisor,c
 19723  011B8A  0E00               	movlw	0
 19724  011B8C  6E21               	movwf	___ltmod@divisor+1,c
 19725  011B8E  0E00               	movlw	0
 19726  011B90  6E22               	movwf	___ltmod@divisor+2,c
 19727  011B92  ECB3  F096         	call	___ltmod	;wreg free
 19728  011B96  501D               	movf	?___ltmod,w,c
 19729  011B98  6EDF               	movwf	indf2,c
 19730                           
 19731                           ;lcd.c: 200: hexnum /= 10;
 19732  011B9A  C027  F01D         	movff	displ_hex@hexnum,___ltdiv@dividend
 19733  011B9E  C028  F01E         	movff	displ_hex@hexnum+1,___ltdiv@dividend+1
 19734  011BA2  C029  F01F         	movff	displ_hex@hexnum+2,___ltdiv@dividend+2
 19735  011BA6  0E0A               	movlw	10
 19736  011BA8  6E20               	movwf	___ltdiv@divisor,c
 19737  011BAA  0E00               	movlw	0
 19738  011BAC  6E21               	movwf	___ltdiv@divisor+1,c
 19739  011BAE  0E00               	movlw	0
 19740  011BB0  6E22               	movwf	___ltdiv@divisor+2,c
 19741  011BB2  ECF2  F093         	call	___ltdiv	;wreg free
 19742  011BB6  C01D  F027         	movff	?___ltdiv,displ_hex@hexnum
 19743  011BBA  C01E  F028         	movff	?___ltdiv+1,displ_hex@hexnum+1
 19744  011BBE  C01F  F029         	movff	?___ltdiv+2,displ_hex@hexnum+2
 19745                           
 19746                           ;lcd.c: 201: i = i + 1;
 19747  011BC2  0100               	movlb	0	; () banked
 19748  011BC4  29EC               	incf	displ_hex@i& (0+255),w,b
 19749  011BC6  6FEC               	movwf	displ_hex@i& (0+255),b
 19750  011BC8                     l1880:
 19751                           
 19752                           ; BSR set to: 0
 19753                           
 19754                           ; BSR set to: 0
 19755  011BC8  5027               	movf	displ_hex@hexnum,w,c
 19756  011BCA  1028               	iorwf	displ_hex@hexnum+1,w,c
 19757  011BCC  1029               	iorwf	displ_hex@hexnum+2,w,c
 19758  011BCE  B4D8               	btfsc	status,2,c
 19759  011BD0  D00E               	goto	l1883
 19760  011BD2  D7CB               	goto	l1881
 19761  011BD4                     
 19762                           ; BSR set to: 0
 19763                           ;lcd.c: 205: {
 19764                           ;lcd.c: 206: i--;
 19765                           
 19766                           ; BSR set to: 0
 19767  011BD4  07EC               	decf	displ_hex@i& (0+255),f,b
 19768                           
 19769                           ; BSR set to: 0
 19770                           ;lcd.c: 207: lcd_writeC(value[i] | 0x30);
 19771  011BD6  51EC               	movf	displ_hex@i& (0+255),w,b
 19772  011BD8  0D01               	mullw	1
 19773  011BDA  0EE1               	movlw	low displ_hex@value
 19774  011BDC  24F3               	addwf	prodl,w,c
 19775  011BDE  6ED9               	movwf	fsr2l,c
 19776  011BE0  0E00               	movlw	high displ_hex@value
 19777  011BE2  20F4               	addwfc	prodh,w,c
 19778  011BE4  6EDA               	movwf	fsr2h,c
 19779  011BE6  50DF               	movf	indf2,w,c
 19780  011BE8  0930               	iorlw	48
 19781  011BEA  EC27  F094         	call	_lcd_writeC
 19782  011BEE                     l1883:
 19783  011BEE  0100               	movlb	0	; () banked
 19784  011BF0  51EC               	movf	displ_hex@i& (0+255),w,b
 19785  011BF2  0A80               	xorlw	128
 19786  011BF4  0F7F               	addlw	-129
 19787  011BF6  B0D8               	btfsc	status,0,c
 19788  011BF8  D7ED               	goto	l1884
 19789                           
 19790                           ; BSR set to: 0
 19791                           ;lcd.c: 208: }
 19792                           ;lcd.c: 210: if(hexnumsave == 0)
 19793                           
 19794                           ; BSR set to: 0
 19795  011BFA  51E9               	movf	displ_hex@hexnumsave& (0+255),w,b
 19796  011BFC  11EA               	iorwf	(displ_hex@hexnumsave+1)& (0+255),w,b
 19797  011BFE  11EB               	iorwf	(displ_hex@hexnumsave+2)& (0+255),w,b
 19798  011C00  A4D8               	btfss	status,2,c
 19799  011C02  0012               	return	
 19800                           
 19801                           ; BSR set to: 0
 19802                           ;lcd.c: 211: {
 19803                           ;lcd.c: 212: lcd_writeC(0x30);
 19804  011C04  0E30               	movlw	48
 19805  011C06  EC27  F094         	call	_lcd_writeC
 19806  011C0A  0012               	return	
 19807  011C0C                     __end_of_displ_hex:
 19808                           	opt stack 0
 19809                           tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           indf0	equ	0xFEF
 19817                           postinc0	equ	0xFEE
 19818                           fsr0h	equ	0xFEA
 19819                           fsr0l	equ	0xFE9
 19820                           wreg	equ	0xFE8
 19821                           indf1	equ	0xFE7
 19822                           postdec1	equ	0xFE5
 19823                           fsr1h	equ	0xFE2
 19824                           fsr1l	equ	0xFE1
 19825                           indf2	equ	0xFDF
 19826                           postinc2	equ	0xFDE
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           
 19831 ;; *************** function _lcd_writeC *****************
 19832 ;; Defined at:
 19833 ;;		line 259 in file "lcd.c"
 19834 ;; Parameters:    Size  Location     Type
 19835 ;;  lcdata          1    wreg     unsigned char 
 19836 ;; Auto vars:     Size  Location     Type
 19837 ;;  lcdata          1   24[COMRAM] unsigned char 
 19838 ;; Return value:  Size  Location     Type
 19839 ;;                  1    wreg      void 
 19840 ;; Registers used:
 19841 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19842 ;; Tracked objects:
 19843 ;;		On entry : 0/0
 19844 ;;		On exit  : 0/0
 19845 ;;		Unchanged: 0/0
 19846 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 19847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19850 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19851 ;;Total ram usage:        1 bytes
 19852 ;; Hardware stack levels used:    1
 19853 ;; Hardware stack levels required when called:    6
 19854 ;; This function calls:
 19855 ;;		_lcd_dispadd
 19856 ;;		_lcd_write
 19857 ;; This function is called by:
 19858 ;;		_displ_lflags
 19859 ;;		_displ_sflags
 19860 ;;		_displ_time
 19861 ;;		_displ_code
 19862 ;;		_displ_hex
 19863 ;;		_lcd_string
 19864 ;;		_displ_price
 19865 ;;		_lcd_test
 19866 ;; This function uses a non-reentrant model
 19867 ;;
 19868                           
 19869                           	psect	text108
 19870  01284E                     __ptext108:
 19871                           	opt stack 0
 19872  01284E                     _lcd_writeC:
 19873                           	opt stack 22
 19874                           
 19875                           ;incstack = 0
 19876                           ;lcd_writeC@lcdata stored from wreg
 19877  01284E  6E23               	movwf	lcd_writeC@lcdata,c
 19878  012850  8487               	bsf	3975,2,c	;# 
 19879                           
 19880                           ;lcd.c: 264: lcd_write(lcdata);
 19881  012852  5023               	movf	lcd_writeC@lcdata,w,c
 19882  012854  ECD3  F099         	call	_lcd_write
 19883                           
 19884                           ;lcd.c: 268: switch(bflag)
 19885  012858  D021               	goto	l1907
 19886  01285A  0E85               	movlw	low _line2
 19887  01285C  6EF6               	movwf	tblptrl,c
 19888  01285E                     	if	1	;There is more than 1 active tblptr byte
 19889  01285E  0EFB               	movlw	high _line2
 19890  012860  6EF7               	movwf	tblptrh,c
 19891  012862                     	endif
 19892  012862                     	if	1	;There are 3 active tblptr bytes
 19893  012862  0E00               	movlw	low (_line2 shr (0+16))
 19894  012864  6EF8               	movwf	tblptru,c
 19895  012866                     	endif
 19896  012866  0008               	tblrd		*
 19897  012868  50F5               	movf	tablat,w,c
 19898  01286A  ECF4  F09A         	call	_lcd_dispadd
 19899                           
 19900                           ;lcd.c: 271: break;
 19901  01286E  D020               	goto	l1909
 19902  012870  0E84               	movlw	low _line3
 19903  012872  6EF6               	movwf	tblptrl,c
 19904  012874                     	if	1	;There is more than 1 active tblptr byte
 19905  012874  0EFB               	movlw	high _line3
 19906  012876  6EF7               	movwf	tblptrh,c
 19907  012878                     	endif
 19908  012878                     	if	1	;There are 3 active tblptr bytes
 19909  012878  0E00               	movlw	low (_line3 shr (0+16))
 19910  01287A  6EF8               	movwf	tblptru,c
 19911  01287C                     	endif
 19912  01287C  0008               	tblrd		*
 19913  01287E  50F5               	movf	tablat,w,c
 19914  012880  ECF4  F09A         	call	_lcd_dispadd
 19915                           
 19916                           ;lcd.c: 273: break;
 19917  012884  D015               	goto	l1909
 19918  012886  0E83               	movlw	low _line4
 19919  012888  6EF6               	movwf	tblptrl,c
 19920  01288A                     	if	1	;There is more than 1 active tblptr byte
 19921  01288A  0EFB               	movlw	high _line4
 19922  01288C  6EF7               	movwf	tblptrh,c
 19923  01288E                     	endif
 19924  01288E                     	if	1	;There are 3 active tblptr bytes
 19925  01288E  0E00               	movlw	low (_line4 shr (0+16))
 19926  012890  6EF8               	movwf	tblptru,c
 19927  012892                     	endif
 19928  012892  0008               	tblrd		*
 19929  012894  50F5               	movf	tablat,w,c
 19930  012896  ECF4  F09A         	call	_lcd_dispadd
 19931                           
 19932                           ;lcd.c: 275: }
 19933  01289A  D00A               	goto	l1909
 19934  01289C                     l1907:
 19935  01289C  5045               	movf	_bflag,w,c
 19936                           
 19937                           ; Switch size 1, requested type "space"
 19938                           ; Number of cases is 3, Range of values is 19 to 83
 19939                           ; switch strategies available:
 19940                           ; Name         Instructions Cycles
 19941                           ; simple_byte           10     6 (average)
 19942                           ;	Chosen strategy is simple_byte
 19943  01289E  0A13               	xorlw	19	; case 19
 19944  0128A0  B4D8               	btfsc	status,2,c
 19945  0128A2  D7DB               	goto	l1908
 19946  0128A4  0A34               	xorlw	52	; case 39
 19947  0128A6  B4D8               	btfsc	status,2,c
 19948  0128A8  D7EE               	goto	l1911
 19949  0128AA  0A74               	xorlw	116	; case 83
 19950  0128AC  B4D8               	btfsc	status,2,c
 19951  0128AE  D7E0               	goto	l1910
 19952  0128B0                     l1909:
 19953  0128B0  9487               	bcf	3975,2,c	;# 
 19954  0128B2  0012               	return		;funcret
 19955  0128B4                     __end_of_lcd_writeC:
 19956                           	opt stack 0
 19957                           tblptru	equ	0xFF8
 19958                           tblptrh	equ	0xFF7
 19959                           tblptrl	equ	0xFF6
 19960                           tablat	equ	0xFF5
 19961                           prodh	equ	0xFF4
 19962                           prodl	equ	0xFF3
 19963                           intcon	equ	0xFF2
 19964                           indf0	equ	0xFEF
 19965                           postinc0	equ	0xFEE
 19966                           fsr0h	equ	0xFEA
 19967                           fsr0l	equ	0xFE9
 19968                           wreg	equ	0xFE8
 19969                           indf1	equ	0xFE7
 19970                           postdec1	equ	0xFE5
 19971                           fsr1h	equ	0xFE2
 19972                           fsr1l	equ	0xFE1
 19973                           indf2	equ	0xFDF
 19974                           postinc2	equ	0xFDE
 19975                           fsr2h	equ	0xFDA
 19976                           fsr2l	equ	0xFD9
 19977                           status	equ	0xFD8
 19978                           
 19979 ;; *************** function _lcd_dispadd *****************
 19980 ;; Defined at:
 19981 ;;		line 279 in file "lcd.c"
 19982 ;; Parameters:    Size  Location     Type
 19983 ;;  lcdaddress      1    wreg     unsigned char 
 19984 ;; Auto vars:     Size  Location     Type
 19985 ;;  lcdaddress      1   22[COMRAM] unsigned char 
 19986 ;;  lcdatasave      1   23[COMRAM] unsigned char 
 19987 ;; Return value:  Size  Location     Type
 19988 ;;                  1    wreg      void 
 19989 ;; Registers used:
 19990 ;;		wreg, status,2, status,0, cstack
 19991 ;; Tracked objects:
 19992 ;;		On entry : 0/0
 19993 ;;		On exit  : 0/0
 19994 ;;		Unchanged: 0/0
 19995 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 19996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19997 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19999 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20000 ;;Total ram usage:        2 bytes
 20001 ;; Hardware stack levels used:    1
 20002 ;; Hardware stack levels required when called:    5
 20003 ;; This function calls:
 20004 ;;		_lcd_write
 20005 ;; This function is called by:
 20006 ;;		_displ_sens
 20007 ;;		_displ_lflags
 20008 ;;		_lcd_string
 20009 ;;		_displ_price
 20010 ;;		_displ_nochange
 20011 ;;		_lcd_writeC
 20012 ;;		_Hopper_coin
 20013 ;;		_Update_Hopcoin
 20014 ;; This function uses a non-reentrant model
 20015 ;;
 20016                           
 20017                           	psect	text109
 20018  0135E8                     __ptext109:
 20019                           	opt stack 0
 20020  0135E8                     _lcd_dispadd:
 20021                           	opt stack 22
 20022                           
 20023                           ;incstack = 0
 20024                           ;lcd_dispadd@lcdaddress stored from wreg
 20025  0135E8  6E21               	movwf	lcd_dispadd@lcdaddress,c
 20026                           
 20027                           ;lcd.c: 281: uint8_t lcdatasave = lcdata;
 20028  0135EA  C044  F022         	movff	_lcdata,lcd_dispadd@lcdatasave
 20029  0135EE  9487               	bcf	3975,2,c	;# 
 20030                           
 20031                           ;lcd.c: 284: lcd_write(lcdaddress | 0x80);
 20032  0135F0  5021               	movf	lcd_dispadd@lcdaddress,w,c
 20033  0135F2  0980               	iorlw	128
 20034  0135F4  ECD3  F099         	call	_lcd_write
 20035  0135F8  8487               	bsf	3975,2,c	;# 
 20036                           
 20037                           ;lcd.c: 286: lcdata = lcdatasave;
 20038  0135FA  C022  F044         	movff	lcd_dispadd@lcdatasave,_lcdata
 20039  0135FE  0012               	return		;funcret
 20040  013600                     __end_of_lcd_dispadd:
 20041                           	opt stack 0
 20042                           tblptru	equ	0xFF8
 20043                           tblptrh	equ	0xFF7
 20044                           tblptrl	equ	0xFF6
 20045                           tablat	equ	0xFF5
 20046                           prodh	equ	0xFF4
 20047                           prodl	equ	0xFF3
 20048                           intcon	equ	0xFF2
 20049                           indf0	equ	0xFEF
 20050                           postinc0	equ	0xFEE
 20051                           fsr0h	equ	0xFEA
 20052                           fsr0l	equ	0xFE9
 20053                           wreg	equ	0xFE8
 20054                           indf1	equ	0xFE7
 20055                           postdec1	equ	0xFE5
 20056                           fsr1h	equ	0xFE2
 20057                           fsr1l	equ	0xFE1
 20058                           indf2	equ	0xFDF
 20059                           postinc2	equ	0xFDE
 20060                           fsr2h	equ	0xFDA
 20061                           fsr2l	equ	0xFD9
 20062                           status	equ	0xFD8
 20063                           
 20064 ;; *************** function _lcd_write *****************
 20065 ;; Defined at:
 20066 ;;		line 291 in file "lcd.c"
 20067 ;; Parameters:    Size  Location     Type
 20068 ;;  lcdata          1    wreg     unsigned char 
 20069 ;; Auto vars:     Size  Location     Type
 20070 ;;  lcdata          1   21[COMRAM] unsigned char 
 20071 ;;  savelatd        1   20[COMRAM] unsigned char 
 20072 ;; Return value:  Size  Location     Type
 20073 ;;                  1    wreg      void 
 20074 ;; Registers used:
 20075 ;;		wreg, status,2, status,0, cstack
 20076 ;; Tracked objects:
 20077 ;;		On entry : 0/0
 20078 ;;		On exit  : 0/0
 20079 ;;		Unchanged: 0/0
 20080 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20082 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20084 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20085 ;;Total ram usage:        2 bytes
 20086 ;; Hardware stack levels used:    1
 20087 ;; Hardware stack levels required when called:    4
 20088 ;; This function calls:
 20089 ;;		_lcd_clockE
 20090 ;;		_read_busy
 20091 ;; This function is called by:
 20092 ;;		_lcd_init
 20093 ;;		_displ_note
 20094 ;;		_lcd_string
 20095 ;;		_displ_price
 20096 ;;		_disp_clock
 20097 ;;		_lcd_writeC
 20098 ;;		_lcd_dispadd
 20099 ;; This function uses a non-reentrant model
 20100 ;;
 20101                           
 20102                           	psect	text110
 20103  0133A6                     __ptext110:
 20104                           	opt stack 0
 20105  0133A6                     _lcd_write:
 20106                           	opt stack 23
 20107                           
 20108                           ;incstack = 0
 20109                           ;lcd_write@lcdata stored from wreg
 20110  0133A6  6E20               	movwf	lcd_write@lcdata,c
 20111                           
 20112                           ;lcd.c: 293: uint8_t savelatd = LATD;
 20113  0133A8  CF86 F01F          	movff	3974,lcd_write@savelatd	;volatile
 20114                           
 20115                           ;lcd.c: 296: bflag = read_busy();
 20116  0133AC  EC93  F097         	call	_read_busy	;wreg free
 20117  0133B0  D002               	goto	L19
 20118  0133B2                     
 20119                           ;lcd.c: 298: {
 20120                           ;lcd.c: 299: bflag = read_busy();
 20121  0133B2  EC93  F097         	call	_read_busy	;wreg free
 20122  0133B6                     L19:
 20123  0133B6  6E45               	movwf	_bflag,c
 20124  0133B8  BE45               	btfsc	_bflag,7,c
 20125  0133BA  D7FB               	goto	l1919
 20126                           
 20127                           ;lcd.c: 300: }
 20128                           ;lcd.c: 301: LATD = (lcdata >> 4) & 0x0F;
 20129  0133BC  3820               	swapf	lcd_write@lcdata,w,c
 20130  0133BE  0B0F               	andlw	15
 20131  0133C0  0B0F               	andlw	15
 20132  0133C2  6E86               	movwf	3974,c	;volatile
 20133                           
 20134                           ;lcd.c: 303: lcd_clockE();
 20135  0133C4  EC2E  F09B         	call	_lcd_clockE	;wreg free
 20136                           
 20137                           ;lcd.c: 305: LATD = lcdata & 0x0F;
 20138  0133C8  5020               	movf	lcd_write@lcdata,w,c
 20139  0133CA  0B0F               	andlw	15
 20140  0133CC  6E86               	movwf	3974,c	;volatile
 20141                           
 20142                           ;lcd.c: 306: lcd_clockE();
 20143  0133CE  EC2E  F09B         	call	_lcd_clockE	;wreg free
 20144                           
 20145                           ;lcd.c: 307: LATD = savelatd;
 20146  0133D2  C01F  FF86         	movff	lcd_write@savelatd,3974	;volatile
 20147  0133D6  0012               	return		;funcret
 20148  0133D8                     __end_of_lcd_write:
 20149                           	opt stack 0
 20150                           tblptru	equ	0xFF8
 20151                           tblptrh	equ	0xFF7
 20152                           tblptrl	equ	0xFF6
 20153                           tablat	equ	0xFF5
 20154                           prodh	equ	0xFF4
 20155                           prodl	equ	0xFF3
 20156                           intcon	equ	0xFF2
 20157                           indf0	equ	0xFEF
 20158                           postinc0	equ	0xFEE
 20159                           fsr0h	equ	0xFEA
 20160                           fsr0l	equ	0xFE9
 20161                           wreg	equ	0xFE8
 20162                           indf1	equ	0xFE7
 20163                           postdec1	equ	0xFE5
 20164                           fsr1h	equ	0xFE2
 20165                           fsr1l	equ	0xFE1
 20166                           indf2	equ	0xFDF
 20167                           postinc2	equ	0xFDE
 20168                           fsr2h	equ	0xFDA
 20169                           fsr2l	equ	0xFD9
 20170                           status	equ	0xFD8
 20171                           
 20172 ;; *************** function _read_busy *****************
 20173 ;; Defined at:
 20174 ;;		line 322 in file "lcd.c"
 20175 ;; Parameters:    Size  Location     Type
 20176 ;;		None
 20177 ;; Auto vars:     Size  Location     Type
 20178 ;;  savelatd        1   19[COMRAM] unsigned char 
 20179 ;;  savelate        1   18[COMRAM] unsigned char 
 20180 ;; Return value:  Size  Location     Type
 20181 ;;                  1    wreg      char 
 20182 ;; Registers used:
 20183 ;;		wreg, status,2, status,0, cstack
 20184 ;; Tracked objects:
 20185 ;;		On entry : 0/0
 20186 ;;		On exit  : 0/0
 20187 ;;		Unchanged: 0/0
 20188 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20192 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20193 ;;Total ram usage:        2 bytes
 20194 ;; Hardware stack levels used:    1
 20195 ;; Hardware stack levels required when called:    3
 20196 ;; This function calls:
 20197 ;;		_lcd_clockH
 20198 ;;		_lcd_clockL
 20199 ;; This function is called by:
 20200 ;;		_lcd_write
 20201 ;; This function uses a non-reentrant model
 20202 ;;
 20203                           
 20204                           	psect	text111
 20205  012F26                     __ptext111:
 20206                           	opt stack 0
 20207  012F26                     _read_busy:
 20208                           	opt stack 23
 20209                           
 20210                           ;lcd.c: 324: uint8_t savelate = LATE;
 20211                           
 20212                           ;incstack = 0
 20213  012F26  CF87 F01D          	movff	3975,read_busy@savelate	;volatile
 20214                           
 20215                           ;lcd.c: 325: uint8_t savelatd = LATD;
 20216  012F2A  CF86 F01E          	movff	3974,read_busy@savelatd	;volatile
 20217  012F2E  9487               	bcf	3975,2,c	;# 
 20218  012F30  8287               	bsf	3975,1,c	;# 
 20219                           
 20220                           ;lcd.c: 328: TRISD = (TRISD | 0x0F);
 20221  012F32  508B               	movf	3979,w,c	;volatile
 20222  012F34  090F               	iorlw	15
 20223  012F36  6E8B               	movwf	3979,c	;volatile
 20224                           
 20225                           ;lcd.c: 329: lcd_clockH();
 20226  012F38  ECA4  F09B         	call	_lcd_clockH	;wreg free
 20227                           
 20228                           ;lcd.c: 330: bflag = (PORTD << 4);
 20229  012F3C  3890               	swapf	3984,w,c	;volatile
 20230  012F3E  0BF0               	andlw	240
 20231  012F40  6E45               	movwf	_bflag,c
 20232                           
 20233                           ;lcd.c: 331: lcd_clockL();
 20234  012F42  EC9E  F09B         	call	_lcd_clockL	;wreg free
 20235                           
 20236                           ;lcd.c: 332: lcd_clockH();
 20237  012F46  ECA4  F09B         	call	_lcd_clockH	;wreg free
 20238                           
 20239                           ;lcd.c: 333: bflag = bflag | (PORTD & 0x0F);
 20240  012F4A  5090               	movf	3984,w,c	;volatile
 20241  012F4C  0B0F               	andlw	15
 20242  012F4E  1045               	iorwf	_bflag,w,c
 20243  012F50  6E45               	movwf	_bflag,c
 20244  012F52  9087               	bcf	3975,0,c	;# 
 20245                           
 20246                           ;lcd.c: 335: TRISD = (TRISD & 0xF0);
 20247  012F54  508B               	movf	3979,w,c	;volatile
 20248  012F56  0BF0               	andlw	240
 20249  012F58  6E8B               	movwf	3979,c	;volatile
 20250  012F5A  9287               	bcf	3975,1,c	;# 
 20251                           
 20252                           ;lcd.c: 337: LATD = savelatd;
 20253  012F5C  C01E  FF86         	movff	read_busy@savelatd,3974	;volatile
 20254                           
 20255                           ;lcd.c: 338: LATE = savelate;
 20256  012F60  C01D  FF87         	movff	read_busy@savelate,3975	;volatile
 20257                           
 20258                           ;lcd.c: 339: return(bflag);
 20259  012F64  5045               	movf	_bflag,w,c
 20260  012F66  0012               	return	
 20261  012F68                     __end_of_read_busy:
 20262                           	opt stack 0
 20263                           tblptru	equ	0xFF8
 20264                           tblptrh	equ	0xFF7
 20265                           tblptrl	equ	0xFF6
 20266                           tablat	equ	0xFF5
 20267                           prodh	equ	0xFF4
 20268                           prodl	equ	0xFF3
 20269                           intcon	equ	0xFF2
 20270                           indf0	equ	0xFEF
 20271                           postinc0	equ	0xFEE
 20272                           fsr0h	equ	0xFEA
 20273                           fsr0l	equ	0xFE9
 20274                           wreg	equ	0xFE8
 20275                           indf1	equ	0xFE7
 20276                           postdec1	equ	0xFE5
 20277                           fsr1h	equ	0xFE2
 20278                           fsr1l	equ	0xFE1
 20279                           indf2	equ	0xFDF
 20280                           postinc2	equ	0xFDE
 20281                           fsr2h	equ	0xFDA
 20282                           fsr2l	equ	0xFD9
 20283                           status	equ	0xFD8
 20284                           
 20285 ;; *************** function _lcd_clockL *****************
 20286 ;; Defined at:
 20287 ;;		line 354 in file "lcd.c"
 20288 ;; Parameters:    Size  Location     Type
 20289 ;;		None
 20290 ;; Auto vars:     Size  Location     Type
 20291 ;;		None
 20292 ;; Return value:  Size  Location     Type
 20293 ;;                  1    wreg      void 
 20294 ;; Registers used:
 20295 ;;		wreg
 20296 ;; Tracked objects:
 20297 ;;		On entry : 0/0
 20298 ;;		On exit  : 0/0
 20299 ;;		Unchanged: 0/0
 20300 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20305 ;;Total ram usage:        0 bytes
 20306 ;; Hardware stack levels used:    1
 20307 ;; Hardware stack levels required when called:    2
 20308 ;; This function calls:
 20309 ;;		Nothing
 20310 ;; This function is called by:
 20311 ;;		_read_busy
 20312 ;; This function uses a non-reentrant model
 20313 ;;
 20314                           
 20315                           	psect	text112
 20316  01373C                     __ptext112:
 20317                           	opt stack 0
 20318  01373C                     _lcd_clockL:
 20319                           	opt stack 23
 20320                           
 20321                           ;incstack = 0
 20322  01373C  9087               	bcf	3975,0,c	;# 
 20323                           
 20324                           ;lcd.c: 357: _delay((unsigned long)((1)*(64000000/4000000.0)));
 20325  01373E  0E05               	movlw	5
 20326  013740                     u7477:
 20327  013740  2EE8               	decfsz	wreg,f,c
 20328  013742  D7FE               	bra	u7477
 20329  013744  F000               	nop	
 20330  013746  0012               	return		;funcret
 20331  013748                     __end_of_lcd_clockL:
 20332                           	opt stack 0
 20333                           tblptru	equ	0xFF8
 20334                           tblptrh	equ	0xFF7
 20335                           tblptrl	equ	0xFF6
 20336                           tablat	equ	0xFF5
 20337                           prodh	equ	0xFF4
 20338                           prodl	equ	0xFF3
 20339                           intcon	equ	0xFF2
 20340                           indf0	equ	0xFEF
 20341                           postinc0	equ	0xFEE
 20342                           fsr0h	equ	0xFEA
 20343                           fsr0l	equ	0xFE9
 20344                           wreg	equ	0xFE8
 20345                           indf1	equ	0xFE7
 20346                           postdec1	equ	0xFE5
 20347                           fsr1h	equ	0xFE2
 20348                           fsr1l	equ	0xFE1
 20349                           indf2	equ	0xFDF
 20350                           postinc2	equ	0xFDE
 20351                           fsr2h	equ	0xFDA
 20352                           fsr2l	equ	0xFD9
 20353                           status	equ	0xFD8
 20354                           
 20355 ;; *************** function _lcd_clockH *****************
 20356 ;; Defined at:
 20357 ;;		line 346 in file "lcd.c"
 20358 ;; Parameters:    Size  Location     Type
 20359 ;;		None
 20360 ;; Auto vars:     Size  Location     Type
 20361 ;;		None
 20362 ;; Return value:  Size  Location     Type
 20363 ;;                  1    wreg      void 
 20364 ;; Registers used:
 20365 ;;		wreg
 20366 ;; Tracked objects:
 20367 ;;		On entry : 0/0
 20368 ;;		On exit  : 0/0
 20369 ;;		Unchanged: 0/0
 20370 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20375 ;;Total ram usage:        0 bytes
 20376 ;; Hardware stack levels used:    1
 20377 ;; Hardware stack levels required when called:    2
 20378 ;; This function calls:
 20379 ;;		Nothing
 20380 ;; This function is called by:
 20381 ;;		_read_busy
 20382 ;; This function uses a non-reentrant model
 20383 ;;
 20384                           
 20385                           	psect	text113
 20386  013748                     __ptext113:
 20387                           	opt stack 0
 20388  013748                     _lcd_clockH:
 20389                           	opt stack 23
 20390                           
 20391                           ;incstack = 0
 20392  013748  8087               	bsf	3975,0,c	;# 
 20393                           
 20394                           ;lcd.c: 349: _delay((unsigned long)((1)*(64000000/4000000.0)));
 20395  01374A  0E05               	movlw	5
 20396  01374C                     u7487:
 20397  01374C  2EE8               	decfsz	wreg,f,c
 20398  01374E  D7FE               	bra	u7487
 20399  013750  F000               	nop	
 20400  013752  0012               	return		;funcret
 20401  013754                     __end_of_lcd_clockH:
 20402                           	opt stack 0
 20403                           tblptru	equ	0xFF8
 20404                           tblptrh	equ	0xFF7
 20405                           tblptrl	equ	0xFF6
 20406                           tablat	equ	0xFF5
 20407                           prodh	equ	0xFF4
 20408                           prodl	equ	0xFF3
 20409                           intcon	equ	0xFF2
 20410                           indf0	equ	0xFEF
 20411                           postinc0	equ	0xFEE
 20412                           fsr0h	equ	0xFEA
 20413                           fsr0l	equ	0xFE9
 20414                           wreg	equ	0xFE8
 20415                           indf1	equ	0xFE7
 20416                           postdec1	equ	0xFE5
 20417                           fsr1h	equ	0xFE2
 20418                           fsr1l	equ	0xFE1
 20419                           indf2	equ	0xFDF
 20420                           postinc2	equ	0xFDE
 20421                           fsr2h	equ	0xFDA
 20422                           fsr2l	equ	0xFD9
 20423                           status	equ	0xFD8
 20424                           
 20425 ;; *************** function _lcd_clockE *****************
 20426 ;; Defined at:
 20427 ;;		line 362 in file "lcd.c"
 20428 ;; Parameters:    Size  Location     Type
 20429 ;;		None
 20430 ;; Auto vars:     Size  Location     Type
 20431 ;;		None
 20432 ;; Return value:  Size  Location     Type
 20433 ;;                  1    wreg      void 
 20434 ;; Registers used:
 20435 ;;		wreg
 20436 ;; Tracked objects:
 20437 ;;		On entry : 0/0
 20438 ;;		On exit  : 0/0
 20439 ;;		Unchanged: 0/0
 20440 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;Total ram usage:        0 bytes
 20446 ;; Hardware stack levels used:    1
 20447 ;; Hardware stack levels required when called:    2
 20448 ;; This function calls:
 20449 ;;		Nothing
 20450 ;; This function is called by:
 20451 ;;		_lcd_init
 20452 ;;		_lcd_write
 20453 ;; This function uses a non-reentrant model
 20454 ;;
 20455                           
 20456                           	psect	text114
 20457  01365C                     __ptext114:
 20458                           	opt stack 0
 20459  01365C                     _lcd_clockE:
 20460                           	opt stack 24
 20461                           
 20462                           ;incstack = 0
 20463  01365C  8087               	bsf	3975,0,c	;# 
 20464                           
 20465                           ;lcd.c: 365: _delay((unsigned long)((1)*(64000000/4000000.0)));
 20466  01365E  0E05               	movlw	5
 20467  013660                     u7497:
 20468  013660  2EE8               	decfsz	wreg,f,c
 20469  013662  D7FE               	bra	u7497
 20470  013664  F000               	nop	
 20471  013666  9087               	bcf	3975,0,c	;# 
 20472                           
 20473                           ;lcd.c: 367: _delay((unsigned long)((1)*(64000000/4000000.0)));
 20474  013668  0E05               	movlw	5
 20475  01366A                     u7507:
 20476  01366A  2EE8               	decfsz	wreg,f,c
 20477  01366C  D7FE               	bra	u7507
 20478  01366E  F000               	nop	
 20479  013670  0012               	return		;funcret
 20480  013672                     __end_of_lcd_clockE:
 20481                           	opt stack 0
 20482                           tblptru	equ	0xFF8
 20483                           tblptrh	equ	0xFF7
 20484                           tblptrl	equ	0xFF6
 20485                           tablat	equ	0xFF5
 20486                           prodh	equ	0xFF4
 20487                           prodl	equ	0xFF3
 20488                           intcon	equ	0xFF2
 20489                           indf0	equ	0xFEF
 20490                           postinc0	equ	0xFEE
 20491                           fsr0h	equ	0xFEA
 20492                           fsr0l	equ	0xFE9
 20493                           wreg	equ	0xFE8
 20494                           indf1	equ	0xFE7
 20495                           postdec1	equ	0xFE5
 20496                           fsr1h	equ	0xFE2
 20497                           fsr1l	equ	0xFE1
 20498                           indf2	equ	0xFDF
 20499                           postinc2	equ	0xFDE
 20500                           fsr2h	equ	0xFDA
 20501                           fsr2l	equ	0xFD9
 20502                           status	equ	0xFD8
 20503                           
 20504 ;; *************** function ___ltmod *****************
 20505 ;; Defined at:
 20506 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/ltmod.c"
 20507 ;; Parameters:    Size  Location     Type
 20508 ;;  dividend        3   18[COMRAM] unsigned um
 20509 ;;  divisor         3   21[COMRAM] unsigned um
 20510 ;; Auto vars:     Size  Location     Type
 20511 ;;  counter         1   24[COMRAM] unsigned char 
 20512 ;; Return value:  Size  Location     Type
 20513 ;;                  3   18[COMRAM] unsigned um
 20514 ;; Registers used:
 20515 ;;		wreg, status,2, status,0
 20516 ;; Tracked objects:
 20517 ;;		On entry : 0/0
 20518 ;;		On exit  : 0/0
 20519 ;;		Unchanged: 0/0
 20520 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20521 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20524 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20525 ;;Total ram usage:        7 bytes
 20526 ;; Hardware stack levels used:    1
 20527 ;; Hardware stack levels required when called:    2
 20528 ;; This function calls:
 20529 ;;		Nothing
 20530 ;; This function is called by:
 20531 ;;		_displ_hex
 20532 ;; This function uses a non-reentrant model
 20533 ;;
 20534                           
 20535                           	psect	text115
 20536  012D66                     __ptext115:
 20537                           	opt stack 0
 20538  012D66                     ___ltmod:
 20539                           	opt stack 23
 20540                           
 20541                           ;incstack = 0
 20542  012D66  5020               	movf	___ltmod@divisor,w,c
 20543  012D68  1021               	iorwf	___ltmod@divisor+1,w,c
 20544  012D6A  1022               	iorwf	___ltmod@divisor+2,w,c
 20545  012D6C  B4D8               	btfsc	status,2,c
 20546  012D6E  D01E               	goto	l5911
 20547  012D70  0E01               	movlw	1
 20548  012D72  6E23               	movwf	___ltmod@counter,c
 20549  012D74  D005               	goto	l5906
 20550  012D76  90D8               	bcf	status,0,c
 20551  012D78  3620               	rlcf	___ltmod@divisor,f,c
 20552  012D7A  3621               	rlcf	___ltmod@divisor+1,f,c
 20553  012D7C  3622               	rlcf	___ltmod@divisor+2,f,c
 20554  012D7E  2A23               	incf	___ltmod@counter,f,c
 20555  012D80                     l5906:
 20556  012D80  AE22               	btfss	___ltmod@divisor+2,7,c
 20557  012D82  D7F9               	goto	l5907
 20558  012D84                     u5020:
 20559  012D84  5020               	movf	___ltmod@divisor,w,c
 20560  012D86  5C1D               	subwf	___ltmod@dividend,w,c
 20561  012D88  5021               	movf	___ltmod@divisor+1,w,c
 20562  012D8A  581E               	subwfb	___ltmod@dividend+1,w,c
 20563  012D8C  5022               	movf	___ltmod@divisor+2,w,c
 20564  012D8E  581F               	subwfb	___ltmod@dividend+2,w,c
 20565  012D90  A0D8               	btfss	status,0,c
 20566  012D92  D006               	goto	l5910
 20567  012D94  5020               	movf	___ltmod@divisor,w,c
 20568  012D96  5E1D               	subwf	___ltmod@dividend,f,c
 20569  012D98  5021               	movf	___ltmod@divisor+1,w,c
 20570  012D9A  5A1E               	subwfb	___ltmod@dividend+1,f,c
 20571  012D9C  5022               	movf	___ltmod@divisor+2,w,c
 20572  012D9E  5A1F               	subwfb	___ltmod@dividend+2,f,c
 20573  012DA0                     l5910:
 20574  012DA0  90D8               	bcf	status,0,c
 20575  012DA2  3222               	rrcf	___ltmod@divisor+2,f,c
 20576  012DA4  3221               	rrcf	___ltmod@divisor+1,f,c
 20577  012DA6  3220               	rrcf	___ltmod@divisor,f,c
 20578  012DA8  2E23               	decfsz	___ltmod@counter,f,c
 20579  012DAA  D7EC               	goto	u5020
 20580  012DAC                     l5911:
 20581  012DAC  C01D  F01D         	movff	___ltmod@dividend,?___ltmod
 20582  012DB0  C01E  F01E         	movff	___ltmod@dividend+1,?___ltmod+1
 20583  012DB4  C01F  F01F         	movff	___ltmod@dividend+2,?___ltmod+2
 20584  012DB8  0012               	return		;funcret
 20585  012DBA                     __end_of___ltmod:
 20586                           	opt stack 0
 20587                           tblptru	equ	0xFF8
 20588                           tblptrh	equ	0xFF7
 20589                           tblptrl	equ	0xFF6
 20590                           tablat	equ	0xFF5
 20591                           prodh	equ	0xFF4
 20592                           prodl	equ	0xFF3
 20593                           intcon	equ	0xFF2
 20594                           indf0	equ	0xFEF
 20595                           postinc0	equ	0xFEE
 20596                           fsr0h	equ	0xFEA
 20597                           fsr0l	equ	0xFE9
 20598                           wreg	equ	0xFE8
 20599                           indf1	equ	0xFE7
 20600                           postdec1	equ	0xFE5
 20601                           fsr1h	equ	0xFE2
 20602                           fsr1l	equ	0xFE1
 20603                           indf2	equ	0xFDF
 20604                           postinc2	equ	0xFDE
 20605                           fsr2h	equ	0xFDA
 20606                           fsr2l	equ	0xFD9
 20607                           status	equ	0xFD8
 20608                           
 20609 ;; *************** function ___ltdiv *****************
 20610 ;; Defined at:
 20611 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/ltdiv.c"
 20612 ;; Parameters:    Size  Location     Type
 20613 ;;  dividend        3   18[COMRAM] unsigned um
 20614 ;;  divisor         3   21[COMRAM] unsigned um
 20615 ;; Auto vars:     Size  Location     Type
 20616 ;;  quotient        3   24[COMRAM] unsigned um
 20617 ;;  counter         1   27[COMRAM] unsigned char 
 20618 ;; Return value:  Size  Location     Type
 20619 ;;                  3   18[COMRAM] unsigned um
 20620 ;; Registers used:
 20621 ;;		wreg, status,2, status,0
 20622 ;; Tracked objects:
 20623 ;;		On entry : 0/0
 20624 ;;		On exit  : 0/0
 20625 ;;		Unchanged: 0/0
 20626 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20627 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20628 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20630 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20631 ;;Total ram usage:       10 bytes
 20632 ;; Hardware stack levels used:    1
 20633 ;; Hardware stack levels required when called:    2
 20634 ;; This function calls:
 20635 ;;		Nothing
 20636 ;; This function is called by:
 20637 ;;		_displ_hex
 20638 ;; This function uses a non-reentrant model
 20639 ;;
 20640                           
 20641                           	psect	text116
 20642  0127E4                     __ptext116:
 20643                           	opt stack 0
 20644  0127E4                     ___ltdiv:
 20645                           	opt stack 23
 20646                           
 20647                           ;incstack = 0
 20648  0127E4  0E00               	movlw	0
 20649  0127E6  6E23               	movwf	___ltdiv@quotient,c
 20650  0127E8  0E00               	movlw	0
 20651  0127EA  6E24               	movwf	___ltdiv@quotient+1,c
 20652  0127EC  0E00               	movlw	0
 20653  0127EE  6E25               	movwf	___ltdiv@quotient+2,c
 20654  0127F0  5020               	movf	___ltdiv@divisor,w,c
 20655  0127F2  1021               	iorwf	___ltdiv@divisor+1,w,c
 20656  0127F4  1022               	iorwf	___ltdiv@divisor+2,w,c
 20657  0127F6  B4D8               	btfsc	status,2,c
 20658  0127F8  D023               	goto	l5901
 20659  0127FA  0E01               	movlw	1
 20660  0127FC  6E26               	movwf	___ltdiv@counter,c
 20661  0127FE  D005               	goto	l5896
 20662  012800  90D8               	bcf	status,0,c
 20663  012802  3620               	rlcf	___ltdiv@divisor,f,c
 20664  012804  3621               	rlcf	___ltdiv@divisor+1,f,c
 20665  012806  3622               	rlcf	___ltdiv@divisor+2,f,c
 20666  012808  2A26               	incf	___ltdiv@counter,f,c
 20667  01280A                     l5896:
 20668  01280A  AE22               	btfss	___ltdiv@divisor+2,7,c
 20669  01280C  D7F9               	goto	l5897
 20670  01280E                     u4990:
 20671  01280E  90D8               	bcf	status,0,c
 20672  012810  3623               	rlcf	___ltdiv@quotient,f,c
 20673  012812  3624               	rlcf	___ltdiv@quotient+1,f,c
 20674  012814  3625               	rlcf	___ltdiv@quotient+2,f,c
 20675  012816  5020               	movf	___ltdiv@divisor,w,c
 20676  012818  5C1D               	subwf	___ltdiv@dividend,w,c
 20677  01281A  5021               	movf	___ltdiv@divisor+1,w,c
 20678  01281C  581E               	subwfb	___ltdiv@dividend+1,w,c
 20679  01281E  5022               	movf	___ltdiv@divisor+2,w,c
 20680  012820  581F               	subwfb	___ltdiv@dividend+2,w,c
 20681  012822  A0D8               	btfss	status,0,c
 20682  012824  D007               	goto	l5900
 20683  012826  5020               	movf	___ltdiv@divisor,w,c
 20684  012828  5E1D               	subwf	___ltdiv@dividend,f,c
 20685  01282A  5021               	movf	___ltdiv@divisor+1,w,c
 20686  01282C  5A1E               	subwfb	___ltdiv@dividend+1,f,c
 20687  01282E  5022               	movf	___ltdiv@divisor+2,w,c
 20688  012830  5A1F               	subwfb	___ltdiv@dividend+2,f,c
 20689  012832  8023               	bsf	___ltdiv@quotient,0,c
 20690  012834                     l5900:
 20691  012834  90D8               	bcf	status,0,c
 20692  012836  3222               	rrcf	___ltdiv@divisor+2,f,c
 20693  012838  3221               	rrcf	___ltdiv@divisor+1,f,c
 20694  01283A  3220               	rrcf	___ltdiv@divisor,f,c
 20695  01283C  2E26               	decfsz	___ltdiv@counter,f,c
 20696  01283E  D7E7               	goto	u4990
 20697  012840                     l5901:
 20698  012840  C023  F01D         	movff	___ltdiv@quotient,?___ltdiv
 20699  012844  C024  F01E         	movff	___ltdiv@quotient+1,?___ltdiv+1
 20700  012848  C025  F01F         	movff	___ltdiv@quotient+2,?___ltdiv+2
 20701  01284C  0012               	return		;funcret
 20702  01284E                     __end_of___ltdiv:
 20703                           	opt stack 0
 20704                           tblptru	equ	0xFF8
 20705                           tblptrh	equ	0xFF7
 20706                           tblptrl	equ	0xFF6
 20707                           tablat	equ	0xFF5
 20708                           prodh	equ	0xFF4
 20709                           prodl	equ	0xFF3
 20710                           intcon	equ	0xFF2
 20711                           indf0	equ	0xFEF
 20712                           postinc0	equ	0xFEE
 20713                           fsr0h	equ	0xFEA
 20714                           fsr0l	equ	0xFE9
 20715                           wreg	equ	0xFE8
 20716                           indf1	equ	0xFE7
 20717                           postdec1	equ	0xFE5
 20718                           fsr1h	equ	0xFE2
 20719                           fsr1l	equ	0xFE1
 20720                           indf2	equ	0xFDF
 20721                           postinc2	equ	0xFDE
 20722                           fsr2h	equ	0xFDA
 20723                           fsr2l	equ	0xFD9
 20724                           status	equ	0xFD8
 20725                           
 20726 ;; *************** function _credit_check *****************
 20727 ;; Defined at:
 20728 ;;		line 149 in file "vend.c"
 20729 ;; Parameters:    Size  Location     Type
 20730 ;;		None
 20731 ;; Auto vars:     Size  Location     Type
 20732 ;;		None
 20733 ;; Return value:  Size  Location     Type
 20734 ;;                  1    wreg      unsigned char 
 20735 ;; Registers used:
 20736 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20737 ;; Tracked objects:
 20738 ;;		On entry : 0/0
 20739 ;;		On exit  : 0/0
 20740 ;;		Unchanged: 0/0
 20741 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20746 ;;Total ram usage:        0 bytes
 20747 ;; Hardware stack levels used:    1
 20748 ;; Hardware stack levels required when called:    3
 20749 ;; This function calls:
 20750 ;;		_DATAEE_ReadByte
 20751 ;; This function is called by:
 20752 ;;		_displ_credit
 20753 ;;		_vend_init
 20754 ;;		_price_check
 20755 ;; This function uses a non-reentrant model
 20756 ;;
 20757                           
 20758                           	psect	text117
 20759  0134F8                     __ptext117:
 20760                           	opt stack 0
 20761  0134F8                     _credit_check:
 20762                           	opt stack 26
 20763                           
 20764                           ;vend.c: 151: cash = DATAEE_ReadByte(credmem);
 20765                           
 20766                           ;incstack = 0
 20767  0134F8  0E58               	movlw	low _credmem
 20768  0134FA  6EF6               	movwf	tblptrl,c
 20769  0134FC                     	if	1	;There is more than 1 active tblptr byte
 20770  0134FC  0EFB               	movlw	high _credmem
 20771  0134FE  6EF7               	movwf	tblptrh,c
 20772  013500                     	endif
 20773  013500                     	if	1	;There are 3 active tblptr bytes
 20774  013500  0E00               	movlw	low (_credmem shr (0+16))
 20775  013502  6EF8               	movwf	tblptru,c
 20776  013504                     	endif
 20777  013504  0009               	tblrd		*+
 20778  013506  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 20779  01350A  000A               	tblrd		*-
 20780  01350C  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 20781  013510  EC00  F09B         	call	_DATAEE_ReadByte	;wreg free
 20782  013514  6E3B               	movwf	_cash,c	;volatile
 20783                           
 20784                           ;vend.c: 152: return(cash);
 20785  013516  503B               	movf	_cash,w,c	;volatile
 20786  013518  0012               	return	
 20787  01351A                     __end_of_credit_check:
 20788                           	opt stack 0
 20789                           tblptru	equ	0xFF8
 20790                           tblptrh	equ	0xFF7
 20791                           tblptrl	equ	0xFF6
 20792                           tablat	equ	0xFF5
 20793                           prodh	equ	0xFF4
 20794                           prodl	equ	0xFF3
 20795                           intcon	equ	0xFF2
 20796                           indf0	equ	0xFEF
 20797                           postinc0	equ	0xFEE
 20798                           fsr0h	equ	0xFEA
 20799                           fsr0l	equ	0xFE9
 20800                           wreg	equ	0xFE8
 20801                           indf1	equ	0xFE7
 20802                           postdec1	equ	0xFE5
 20803                           fsr1h	equ	0xFE2
 20804                           fsr1l	equ	0xFE1
 20805                           indf2	equ	0xFDF
 20806                           postinc2	equ	0xFDE
 20807                           fsr2h	equ	0xFDA
 20808                           fsr2l	equ	0xFD9
 20809                           status	equ	0xFD8
 20810                           
 20811 ;; *************** function _DATAEE_ReadByte *****************
 20812 ;; Defined at:
 20813 ;;		line 192 in file "mcc_generated_files/memory.c"
 20814 ;; Parameters:    Size  Location     Type
 20815 ;;  bAdd            2   18[COMRAM] unsigned int 
 20816 ;; Auto vars:     Size  Location     Type
 20817 ;;		None
 20818 ;; Return value:  Size  Location     Type
 20819 ;;                  1    wreg      unsigned char 
 20820 ;; Registers used:
 20821 ;;		wreg, status,2, status,0
 20822 ;; Tracked objects:
 20823 ;;		On entry : 0/0
 20824 ;;		On exit  : 0/0
 20825 ;;		Unchanged: 0/0
 20826 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20827 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20830 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20831 ;;Total ram usage:        2 bytes
 20832 ;; Hardware stack levels used:    1
 20833 ;; Hardware stack levels required when called:    2
 20834 ;; This function calls:
 20835 ;;		Nothing
 20836 ;; This function is called by:
 20837 ;;		_main
 20838 ;;		_Init_vendmem
 20839 ;;		_vend_init
 20840 ;;		_Read_NVstore
 20841 ;;		_credit_add
 20842 ;;		_credit_subtract
 20843 ;;		_credit_check
 20844 ;;		_Audit
 20845 ;;		_Hopper_coin
 20846 ;;		_set_price
 20847 ;;		_Vend_timeset
 20848 ;;		_Link_chan
 20849 ;;		_off_sens
 20850 ;;		_mdb_init
 20851 ;;		_give_change
 20852 ;;		_price_check
 20853 ;;		_dispense
 20854 ;;		_set_motortime
 20855 ;;		_init_pricestore
 20856 ;;		_disable_channel
 20857 ;;		_update_vends
 20858 ;; This function uses a non-reentrant model
 20859 ;;
 20860                           
 20861                           	psect	text118
 20862  013600                     __ptext118:
 20863                           	opt stack 0
 20864  013600                     _DATAEE_ReadByte:
 20865                           	opt stack 22
 20866                           
 20867                           ;memory.c: 194: NVMADRH = ((bAdd >> 8) & 0x03);
 20868                           
 20869                           ;incstack = 0
 20870  013600  501E               	movf	DATAEE_ReadByte@bAdd+1,w,c
 20871  013602  0B03               	andlw	3
 20872  013604  6E7F               	movwf	3967,c	;volatile
 20873                           
 20874                           ;memory.c: 195: NVMADRL = (bAdd & 0xFF);
 20875  013606  C01D  FF7E         	movff	DATAEE_ReadByte@bAdd,3966	;volatile
 20876                           
 20877                           ;memory.c: 196: NVMCON1bits.NVMREG = 0;
 20878  01360A  0E3F               	movlw	-193
 20879  01360C  1681               	andwf	3969,f,c	;volsfr
 20880                           
 20881                           ;memory.c: 197: NVMCON1bits.RD = 1;
 20882  01360E  8081               	bsf	3969,0,c	;volsfr
 20883                           
 20884                           ;memory.c: 198: __nop();
 20885  013610  F000               	nop	
 20886                           
 20887                           ;memory.c: 199: __nop();
 20888  013612  F000               	nop	
 20889                           
 20890                           ;memory.c: 201: return (NVMDAT);
 20891  013614  5080               	movf	3968,w,c	;volatile
 20892  013616  0012               	return	
 20893  013618                     __end_of_DATAEE_ReadByte:
 20894                           	opt stack 0
 20895                           tblptru	equ	0xFF8
 20896                           tblptrh	equ	0xFF7
 20897                           tblptrl	equ	0xFF6
 20898                           tablat	equ	0xFF5
 20899                           prodh	equ	0xFF4
 20900                           prodl	equ	0xFF3
 20901                           intcon	equ	0xFF2
 20902                           indf0	equ	0xFEF
 20903                           postinc0	equ	0xFEE
 20904                           fsr0h	equ	0xFEA
 20905                           fsr0l	equ	0xFE9
 20906                           wreg	equ	0xFE8
 20907                           indf1	equ	0xFE7
 20908                           postdec1	equ	0xFE5
 20909                           fsr1h	equ	0xFE2
 20910                           fsr1l	equ	0xFE1
 20911                           indf2	equ	0xFDF
 20912                           postinc2	equ	0xFDE
 20913                           fsr2h	equ	0xFDA
 20914                           fsr2l	equ	0xFD9
 20915                           status	equ	0xFD8
 20916                           
 20917 ;; *************** function _SYSTEM_Initialize *****************
 20918 ;; Defined at:
 20919 ;;		line 50 in file "mcc_generated_files/mcc.c"
 20920 ;; Parameters:    Size  Location     Type
 20921 ;;		None
 20922 ;; Auto vars:     Size  Location     Type
 20923 ;;		None
 20924 ;; Return value:  Size  Location     Type
 20925 ;;                  1    wreg      void 
 20926 ;; Registers used:
 20927 ;;		wreg, status,2, status,0, cstack
 20928 ;; Tracked objects:
 20929 ;;		On entry : 0/0
 20930 ;;		On exit  : 0/0
 20931 ;;		Unchanged: 0/0
 20932 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 20933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20937 ;;Total ram usage:        0 bytes
 20938 ;; Hardware stack levels used:    1
 20939 ;; Hardware stack levels required when called:    4
 20940 ;; This function calls:
 20941 ;;		_CMP1_Initialize
 20942 ;;		_DAC1_Initialize
 20943 ;;		_EUSART1_Initialize
 20944 ;;		_EUSART2_Initialize
 20945 ;;		_INTERRUPT_Initialize
 20946 ;;		_OSCILLATOR_Initialize
 20947 ;;		_PIN_MANAGER_Initialize
 20948 ;;		_PMD_Initialize
 20949 ;;		_TMR0_Initialize
 20950 ;;		_TMR1_Initialize
 20951 ;;		_TMR2_Initialize
 20952 ;;		_TMR3_Initialize
 20953 ;;		_TMR4_Initialize
 20954 ;;		_TMR5_Initialize
 20955 ;; This function is called by:
 20956 ;;		_main
 20957 ;; This function uses a non-reentrant model
 20958 ;;
 20959                           
 20960                           	psect	text119
 20961  013154                     __ptext119:
 20962                           	opt stack 0
 20963  013154                     _SYSTEM_Initialize:
 20964                           	opt stack 26
 20965                           
 20966                           ;mcc.c: 52: INTERRUPT_Initialize();
 20967                           
 20968                           ;incstack = 0
 20969  013154  ECD5  F09B         	call	_INTERRUPT_Initialize	;wreg free
 20970                           
 20971                           ;mcc.c: 53: PMD_Initialize();
 20972  013158  ECD9  F09A         	call	_PMD_Initialize	;wreg free
 20973                           
 20974                           ;mcc.c: 54: PIN_MANAGER_Initialize();
 20975  01315C  ECD4  F091         	call	_PIN_MANAGER_Initialize	;wreg free
 20976                           
 20977                           ;mcc.c: 55: OSCILLATOR_Initialize();
 20978  013160  EC0C  F09B         	call	_OSCILLATOR_Initialize	;wreg free
 20979                           
 20980                           ;mcc.c: 56: TMR4_Initialize();
 20981  013164  ECAD  F09A         	call	_TMR4_Initialize	;wreg free
 20982                           
 20983                           ;mcc.c: 57: TMR2_Initialize();
 20984  013168  ECBC  F09A         	call	_TMR2_Initialize	;wreg free
 20985                           
 20986                           ;mcc.c: 58: TMR0_Initialize();
 20987  01316C  EC04  F09A         	call	_TMR0_Initialize	;wreg free
 20988                           
 20989                           ;mcc.c: 59: CMP1_Initialize();
 20990  013170  EC58  F09B         	call	_CMP1_Initialize	;wreg free
 20991                           
 20992                           ;mcc.c: 60: TMR3_Initialize();
 20993  013174  EC36  F099         	call	_TMR3_Initialize	;wreg free
 20994                           
 20995                           ;mcc.c: 61: DAC1_Initialize();
 20996  013178  ECAA  F09B         	call	_DAC1_Initialize	;wreg free
 20997                           
 20998                           ;mcc.c: 62: TMR5_Initialize();
 20999  01317C  EC1B  F099         	call	_TMR5_Initialize	;wreg free
 21000                           
 21001                           ;mcc.c: 63: TMR1_Initialize();
 21002  013180  EC51  F099         	call	_TMR1_Initialize	;wreg free
 21003                           
 21004                           ;mcc.c: 64: EUSART1_Initialize();
 21005  013184  EC39  F09B         	call	_EUSART1_Initialize	;wreg free
 21006                           
 21007                           ;mcc.c: 65: EUSART2_Initialize();
 21008  013188  ECC7  F098         	call	_EUSART2_Initialize	;wreg free
 21009  01318C  0012               	return		;funcret
 21010  01318E                     __end_of_SYSTEM_Initialize:
 21011                           	opt stack 0
 21012                           tblptru	equ	0xFF8
 21013                           tblptrh	equ	0xFF7
 21014                           tblptrl	equ	0xFF6
 21015                           tablat	equ	0xFF5
 21016                           prodh	equ	0xFF4
 21017                           prodl	equ	0xFF3
 21018                           intcon	equ	0xFF2
 21019                           indf0	equ	0xFEF
 21020                           postinc0	equ	0xFEE
 21021                           fsr0h	equ	0xFEA
 21022                           fsr0l	equ	0xFE9
 21023                           wreg	equ	0xFE8
 21024                           indf1	equ	0xFE7
 21025                           postdec1	equ	0xFE5
 21026                           fsr1h	equ	0xFE2
 21027                           fsr1l	equ	0xFE1
 21028                           indf2	equ	0xFDF
 21029                           postinc2	equ	0xFDE
 21030                           fsr2h	equ	0xFDA
 21031                           fsr2l	equ	0xFD9
 21032                           status	equ	0xFD8
 21033                           
 21034 ;; *************** function _TMR5_Initialize *****************
 21035 ;; Defined at:
 21036 ;;		line 63 in file "mcc_generated_files/tmr5.c"
 21037 ;; Parameters:    Size  Location     Type
 21038 ;;		None
 21039 ;; Auto vars:     Size  Location     Type
 21040 ;;		None
 21041 ;; Return value:  Size  Location     Type
 21042 ;;                  1    wreg      void 
 21043 ;; Registers used:
 21044 ;;		wreg, status,2, status,0
 21045 ;; Tracked objects:
 21046 ;;		On entry : 0/0
 21047 ;;		On exit  : 0/0
 21048 ;;		Unchanged: 0/0
 21049 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21052 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21053 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21054 ;;Total ram usage:        2 bytes
 21055 ;; Hardware stack levels used:    1
 21056 ;; Hardware stack levels required when called:    2
 21057 ;; This function calls:
 21058 ;;		Nothing
 21059 ;; This function is called by:
 21060 ;;		_SYSTEM_Initialize
 21061 ;;		_mdb_unlock
 21062 ;; This function uses a non-reentrant model
 21063 ;;
 21064                           
 21065                           	psect	text120
 21066  013236                     __ptext120:
 21067                           	opt stack 0
 21068  013236                     _TMR5_Initialize:
 21069                           	opt stack 24
 21070                           
 21071                           ;tmr5.c: 68: T5GCON = 0x00;
 21072                           
 21073                           ;incstack = 0
 21074  013236  0E00               	movlw	0
 21075  013238  6EC4               	movwf	4036,c	;volatile
 21076                           
 21077                           ;tmr5.c: 71: T5GATE = 0x00;
 21078  01323A  0E00               	movlw	0
 21079  01323C  6EC5               	movwf	4037,c	;volatile
 21080                           
 21081                           ;tmr5.c: 74: T5CLK = 0x04;
 21082  01323E  0E04               	movlw	4
 21083  013240  6EC6               	movwf	4038,c	;volatile
 21084                           
 21085                           ;tmr5.c: 77: TMR5H = 0xE1;
 21086  013242  0EE1               	movlw	225
 21087  013244  6EC2               	movwf	4034,c	;volatile
 21088                           
 21089                           ;tmr5.c: 80: TMR5L = 0xBA;
 21090  013246  0EBA               	movlw	186
 21091  013248  6EC1               	movwf	4033,c	;volatile
 21092                           
 21093                           ;tmr5.c: 83: timer5ReloadVal=(uint16_t)((TMR5H << 8) | TMR5L);
 21094  01324A  50C1               	movf	4033,w,c	;volatile
 21095  01324C  CFC2 F01D          	movff	4034,??_TMR5_Initialize	;volatile
 21096  013250  6A1E               	clrf	(??_TMR5_Initialize+1)& (0+255),c
 21097  013252  C01D  F01E         	movff	??_TMR5_Initialize,??_TMR5_Initialize+1
 21098  013256  6A1D               	clrf	??_TMR5_Initialize,c
 21099  013258  101D               	iorwf	??_TMR5_Initialize,w,c
 21100  01325A  0100               	movlb	0	; () banked
 21101  01325C  6FF7               	movwf	_timer5ReloadVal& (0+255),b	;volatile
 21102  01325E  501E               	movf	??_TMR5_Initialize+1,w,c
 21103  013260  6FF8               	movwf	(_timer5ReloadVal+1)& (0+255),b	;volatile
 21104                           
 21105                           ; BSR set to: 0
 21106                           ;tmr5.c: 86: PIR4bits.TMR5IF = 0;
 21107  013262  010E               	movlb	14	; () banked
 21108  013264  99CE               	bcf	206,4,b	;volatile
 21109                           
 21110                           ; BSR set to: 14
 21111                           ;tmr5.c: 89: T5CON = 0x01;
 21112  013266  0E01               	movlw	1
 21113  013268  6EC3               	movwf	4035,c	;volatile
 21114                           
 21115                           ; BSR set to: 14
 21116  01326A  0012               	return		;funcret
 21117  01326C                     __end_of_TMR5_Initialize:
 21118                           	opt stack 0
 21119                           tblptru	equ	0xFF8
 21120                           tblptrh	equ	0xFF7
 21121                           tblptrl	equ	0xFF6
 21122                           tablat	equ	0xFF5
 21123                           prodh	equ	0xFF4
 21124                           prodl	equ	0xFF3
 21125                           intcon	equ	0xFF2
 21126                           indf0	equ	0xFEF
 21127                           postinc0	equ	0xFEE
 21128                           fsr0h	equ	0xFEA
 21129                           fsr0l	equ	0xFE9
 21130                           wreg	equ	0xFE8
 21131                           indf1	equ	0xFE7
 21132                           postdec1	equ	0xFE5
 21133                           fsr1h	equ	0xFE2
 21134                           fsr1l	equ	0xFE1
 21135                           indf2	equ	0xFDF
 21136                           postinc2	equ	0xFDE
 21137                           fsr2h	equ	0xFDA
 21138                           fsr2l	equ	0xFD9
 21139                           status	equ	0xFD8
 21140                           
 21141 ;; *************** function _TMR4_Initialize *****************
 21142 ;; Defined at:
 21143 ;;		line 62 in file "mcc_generated_files/tmr4.c"
 21144 ;; Parameters:    Size  Location     Type
 21145 ;;		None
 21146 ;; Auto vars:     Size  Location     Type
 21147 ;;		None
 21148 ;; Return value:  Size  Location     Type
 21149 ;;                  1    wreg      void 
 21150 ;; Registers used:
 21151 ;;		wreg, status,2
 21152 ;; Tracked objects:
 21153 ;;		On entry : 0/0
 21154 ;;		On exit  : 0/0
 21155 ;;		Unchanged: 0/0
 21156 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21161 ;;Total ram usage:        0 bytes
 21162 ;; Hardware stack levels used:    1
 21163 ;; Hardware stack levels required when called:    2
 21164 ;; This function calls:
 21165 ;;		Nothing
 21166 ;; This function is called by:
 21167 ;;		_SYSTEM_Initialize
 21168 ;;		_Reset_hopper
 21169 ;;		_pay_coin
 21170 ;;		_gsm_on
 21171 ;;		_gsm_unsolic
 21172 ;; This function uses a non-reentrant model
 21173 ;;
 21174                           
 21175                           	psect	text121
 21176  01355A                     __ptext121:
 21177                           	opt stack 0
 21178  01355A                     _TMR4_Initialize:
 21179                           	opt stack 24
 21180                           
 21181                           ;tmr4.c: 67: T4CLKCON = 0x04;
 21182                           
 21183                           ; BSR set to: 14
 21184                           ;incstack = 0
 21185  01355A  0E04               	movlw	4
 21186  01355C  6EB9               	movwf	4025,c	;volatile
 21187                           
 21188                           ;tmr4.c: 70: T4HLT = 0x00;
 21189  01355E  0E00               	movlw	0
 21190  013560  6EB8               	movwf	4024,c	;volatile
 21191                           
 21192                           ;tmr4.c: 73: T4RST = 0x00;
 21193  013562  0E00               	movlw	0
 21194  013564  6EBA               	movwf	4026,c	;volatile
 21195                           
 21196                           ;tmr4.c: 76: T4PR = 0xA0;
 21197  013566  0EA0               	movlw	160
 21198  013568  6EB6               	movwf	4022,c	;volatile
 21199                           
 21200                           ;tmr4.c: 79: T4TMR = 0x00;
 21201  01356A  0E00               	movlw	0
 21202  01356C  6EB5               	movwf	4021,c	;volatile
 21203                           
 21204                           ;tmr4.c: 82: PIR4bits.TMR4IF = 0;
 21205  01356E  010E               	movlb	14	; () banked
 21206  013570  97CE               	bcf	206,3,b	;volatile
 21207                           
 21208                           ;tmr4.c: 85: T4CON = 0xF8;
 21209  013572  0EF8               	movlw	248
 21210  013574  6EB7               	movwf	4023,c	;volatile
 21211                           
 21212                           ; BSR set to: 14
 21213  013576  0012               	return		;funcret
 21214  013578                     __end_of_TMR4_Initialize:
 21215                           	opt stack 0
 21216                           tblptru	equ	0xFF8
 21217                           tblptrh	equ	0xFF7
 21218                           tblptrl	equ	0xFF6
 21219                           tablat	equ	0xFF5
 21220                           prodh	equ	0xFF4
 21221                           prodl	equ	0xFF3
 21222                           intcon	equ	0xFF2
 21223                           indf0	equ	0xFEF
 21224                           postinc0	equ	0xFEE
 21225                           fsr0h	equ	0xFEA
 21226                           fsr0l	equ	0xFE9
 21227                           wreg	equ	0xFE8
 21228                           indf1	equ	0xFE7
 21229                           postdec1	equ	0xFE5
 21230                           fsr1h	equ	0xFE2
 21231                           fsr1l	equ	0xFE1
 21232                           indf2	equ	0xFDF
 21233                           postinc2	equ	0xFDE
 21234                           fsr2h	equ	0xFDA
 21235                           fsr2l	equ	0xFD9
 21236                           status	equ	0xFD8
 21237                           
 21238 ;; *************** function _TMR3_Initialize *****************
 21239 ;; Defined at:
 21240 ;;		line 63 in file "mcc_generated_files/tmr3.c"
 21241 ;; Parameters:    Size  Location     Type
 21242 ;;		None
 21243 ;; Auto vars:     Size  Location     Type
 21244 ;;		None
 21245 ;; Return value:  Size  Location     Type
 21246 ;;                  1    wreg      void 
 21247 ;; Registers used:
 21248 ;;		wreg, status,2, status,0
 21249 ;; Tracked objects:
 21250 ;;		On entry : 0/0
 21251 ;;		On exit  : 0/0
 21252 ;;		Unchanged: 0/0
 21253 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21256 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21258 ;;Total ram usage:        2 bytes
 21259 ;; Hardware stack levels used:    1
 21260 ;; Hardware stack levels required when called:    2
 21261 ;; This function calls:
 21262 ;;		Nothing
 21263 ;; This function is called by:
 21264 ;;		_SYSTEM_Initialize
 21265 ;;		_mdb_poll
 21266 ;;		_mdb_unlock
 21267 ;;		_cctalk_comm
 21268 ;; This function uses a non-reentrant model
 21269 ;;
 21270                           
 21271                           	psect	text122
 21272  01326C                     __ptext122:
 21273                           	opt stack 0
 21274  01326C                     _TMR3_Initialize:
 21275                           	opt stack 24
 21276                           
 21277                           ;tmr3.c: 68: T3GCON = 0x00;
 21278                           
 21279                           ; BSR set to: 14
 21280                           ;incstack = 0
 21281  01326C  0E00               	movlw	0
 21282  01326E  6ECA               	movwf	4042,c	;volatile
 21283                           
 21284                           ;tmr3.c: 71: T3GATE = 0x00;
 21285  013270  0E00               	movlw	0
 21286  013272  6ECB               	movwf	4043,c	;volatile
 21287                           
 21288                           ;tmr3.c: 74: T3CLK = 0x05;
 21289  013274  0E05               	movlw	5
 21290  013276  6ECC               	movwf	4044,c	;volatile
 21291                           
 21292                           ;tmr3.c: 77: TMR3H = 0x9E;
 21293  013278  0E9E               	movlw	158
 21294  01327A  6EC8               	movwf	4040,c	;volatile
 21295                           
 21296                           ;tmr3.c: 80: TMR3L = 0x58;
 21297  01327C  0E58               	movlw	88
 21298  01327E  6EC7               	movwf	4039,c	;volatile
 21299                           
 21300                           ;tmr3.c: 83: timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
 21301  013280  50C7               	movf	4039,w,c	;volatile
 21302  013282  CFC8 F01D          	movff	4040,??_TMR3_Initialize	;volatile
 21303  013286  6A1E               	clrf	(??_TMR3_Initialize+1)& (0+255),c
 21304  013288  C01D  F01E         	movff	??_TMR3_Initialize,??_TMR3_Initialize+1
 21305  01328C  6A1D               	clrf	??_TMR3_Initialize,c
 21306  01328E  101D               	iorwf	??_TMR3_Initialize,w,c
 21307  013290  0100               	movlb	0	; () banked
 21308  013292  6FF9               	movwf	_timer3ReloadVal& (0+255),b	;volatile
 21309  013294  501E               	movf	??_TMR3_Initialize+1,w,c
 21310  013296  6FFA               	movwf	(_timer3ReloadVal+1)& (0+255),b	;volatile
 21311                           
 21312                           ; BSR set to: 0
 21313                           ;tmr3.c: 86: PIR4bits.TMR3IF = 0;
 21314  013298  010E               	movlb	14	; () banked
 21315  01329A  95CE               	bcf	206,2,b	;volatile
 21316                           
 21317                           ; BSR set to: 14
 21318                           ;tmr3.c: 89: T3CON = 0x01;
 21319  01329C  0E01               	movlw	1
 21320  01329E  6EC9               	movwf	4041,c	;volatile
 21321                           
 21322                           ; BSR set to: 14
 21323  0132A0  0012               	return		;funcret
 21324  0132A2                     __end_of_TMR3_Initialize:
 21325                           	opt stack 0
 21326                           tblptru	equ	0xFF8
 21327                           tblptrh	equ	0xFF7
 21328                           tblptrl	equ	0xFF6
 21329                           tablat	equ	0xFF5
 21330                           prodh	equ	0xFF4
 21331                           prodl	equ	0xFF3
 21332                           intcon	equ	0xFF2
 21333                           indf0	equ	0xFEF
 21334                           postinc0	equ	0xFEE
 21335                           fsr0h	equ	0xFEA
 21336                           fsr0l	equ	0xFE9
 21337                           wreg	equ	0xFE8
 21338                           indf1	equ	0xFE7
 21339                           postdec1	equ	0xFE5
 21340                           fsr1h	equ	0xFE2
 21341                           fsr1l	equ	0xFE1
 21342                           indf2	equ	0xFDF
 21343                           postinc2	equ	0xFDE
 21344                           fsr2h	equ	0xFDA
 21345                           fsr2l	equ	0xFD9
 21346                           status	equ	0xFD8
 21347                           
 21348 ;; *************** function _TMR2_Initialize *****************
 21349 ;; Defined at:
 21350 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 21351 ;; Parameters:    Size  Location     Type
 21352 ;;		None
 21353 ;; Auto vars:     Size  Location     Type
 21354 ;;		None
 21355 ;; Return value:  Size  Location     Type
 21356 ;;                  1    wreg      void 
 21357 ;; Registers used:
 21358 ;;		wreg, status,2
 21359 ;; Tracked objects:
 21360 ;;		On entry : 0/0
 21361 ;;		On exit  : 0/0
 21362 ;;		Unchanged: 0/0
 21363 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21368 ;;Total ram usage:        0 bytes
 21369 ;; Hardware stack levels used:    1
 21370 ;; Hardware stack levels required when called:    2
 21371 ;; This function calls:
 21372 ;;		Nothing
 21373 ;; This function is called by:
 21374 ;;		_SYSTEM_Initialize
 21375 ;;		_pay_coin
 21376 ;;		_clock_display
 21377 ;; This function uses a non-reentrant model
 21378 ;;
 21379                           
 21380                           	psect	text123
 21381  013578                     __ptext123:
 21382                           	opt stack 0
 21383  013578                     _TMR2_Initialize:
 21384                           	opt stack 24
 21385                           
 21386                           ;tmr2.c: 67: T2CLKCON = 0x05;
 21387                           
 21388                           ; BSR set to: 14
 21389                           ;incstack = 0
 21390  013578  0E05               	movlw	5
 21391  01357A  6EBF               	movwf	4031,c	;volatile
 21392                           
 21393                           ;tmr2.c: 70: T2HLT = 0x20;
 21394  01357C  0E20               	movlw	32
 21395  01357E  6EBE               	movwf	4030,c	;volatile
 21396                           
 21397                           ;tmr2.c: 73: T2RST = 0x00;
 21398  013580  0E00               	movlw	0
 21399  013582  6EC0               	movwf	4032,c	;volatile
 21400                           
 21401                           ;tmr2.c: 76: T2PR = 0x7A;
 21402  013584  0E7A               	movlw	122
 21403  013586  6EBC               	movwf	4028,c	;volatile
 21404                           
 21405                           ;tmr2.c: 79: T2TMR = 0x00;
 21406  013588  0E00               	movlw	0
 21407  01358A  6EBB               	movwf	4027,c	;volatile
 21408                           
 21409                           ;tmr2.c: 82: PIR4bits.TMR2IF = 0;
 21410  01358C  010E               	movlb	14	; () banked
 21411  01358E  93CE               	bcf	206,1,b	;volatile
 21412                           
 21413                           ;tmr2.c: 85: T2CON = 0xF1;
 21414  013590  0EF1               	movlw	241
 21415  013592  6EBD               	movwf	4029,c	;volatile
 21416                           
 21417                           ; BSR set to: 14
 21418  013594  0012               	return		;funcret
 21419  013596                     __end_of_TMR2_Initialize:
 21420                           	opt stack 0
 21421                           tblptru	equ	0xFF8
 21422                           tblptrh	equ	0xFF7
 21423                           tblptrl	equ	0xFF6
 21424                           tablat	equ	0xFF5
 21425                           prodh	equ	0xFF4
 21426                           prodl	equ	0xFF3
 21427                           intcon	equ	0xFF2
 21428                           indf0	equ	0xFEF
 21429                           postinc0	equ	0xFEE
 21430                           fsr0h	equ	0xFEA
 21431                           fsr0l	equ	0xFE9
 21432                           wreg	equ	0xFE8
 21433                           indf1	equ	0xFE7
 21434                           postdec1	equ	0xFE5
 21435                           fsr1h	equ	0xFE2
 21436                           fsr1l	equ	0xFE1
 21437                           indf2	equ	0xFDF
 21438                           postinc2	equ	0xFDE
 21439                           fsr2h	equ	0xFDA
 21440                           fsr2l	equ	0xFD9
 21441                           status	equ	0xFD8
 21442                           
 21443 ;; *************** function _TMR1_Initialize *****************
 21444 ;; Defined at:
 21445 ;;		line 63 in file "mcc_generated_files/tmr1.c"
 21446 ;; Parameters:    Size  Location     Type
 21447 ;;		None
 21448 ;; Auto vars:     Size  Location     Type
 21449 ;;		None
 21450 ;; Return value:  Size  Location     Type
 21451 ;;                  1    wreg      void 
 21452 ;; Registers used:
 21453 ;;		wreg, status,2, status,0
 21454 ;; Tracked objects:
 21455 ;;		On entry : 0/0
 21456 ;;		On exit  : 0/0
 21457 ;;		Unchanged: 0/0
 21458 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21461 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21463 ;;Total ram usage:        2 bytes
 21464 ;; Hardware stack levels used:    1
 21465 ;; Hardware stack levels required when called:    2
 21466 ;; This function calls:
 21467 ;;		Nothing
 21468 ;; This function is called by:
 21469 ;;		_SYSTEM_Initialize
 21470 ;;		_mdb_comm
 21471 ;;		_mdb_unlock
 21472 ;; This function uses a non-reentrant model
 21473 ;;
 21474                           
 21475                           	psect	text124
 21476  0132A2                     __ptext124:
 21477                           	opt stack 0
 21478  0132A2                     _TMR1_Initialize:
 21479                           	opt stack 24
 21480                           
 21481                           ;tmr1.c: 68: T1GCON = 0x00;
 21482                           
 21483                           ; BSR set to: 14
 21484                           ;incstack = 0
 21485  0132A2  0E00               	movlw	0
 21486  0132A4  6ED0               	movwf	4048,c	;volatile
 21487                           
 21488                           ;tmr1.c: 71: T1GATE = 0x00;
 21489  0132A6  0E00               	movlw	0
 21490  0132A8  6ED1               	movwf	4049,c	;volatile
 21491                           
 21492                           ;tmr1.c: 74: T1CLK = 0x05;
 21493  0132AA  0E05               	movlw	5
 21494  0132AC  6ED2               	movwf	4050,c	;volatile
 21495                           
 21496                           ;tmr1.c: 77: TMR1H = 0xF6;
 21497  0132AE  0EF6               	movlw	246
 21498  0132B0  6ECE               	movwf	4046,c	;volatile
 21499                           
 21500                           ;tmr1.c: 80: TMR1L = 0x3C;
 21501  0132B2  0E3C               	movlw	60
 21502  0132B4  6ECD               	movwf	4045,c	;volatile
 21503                           
 21504                           ;tmr1.c: 83: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 21505  0132B6  50CD               	movf	4045,w,c	;volatile
 21506  0132B8  CFCE F01D          	movff	4046,??_TMR1_Initialize	;volatile
 21507  0132BC  6A1E               	clrf	(??_TMR1_Initialize+1)& (0+255),c
 21508  0132BE  C01D  F01E         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
 21509  0132C2  6A1D               	clrf	??_TMR1_Initialize,c
 21510  0132C4  101D               	iorwf	??_TMR1_Initialize,w,c
 21511  0132C6  0100               	movlb	0	; () banked
 21512  0132C8  6FFB               	movwf	_timer1ReloadVal& (0+255),b	;volatile
 21513  0132CA  501E               	movf	??_TMR1_Initialize+1,w,c
 21514  0132CC  6FFC               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
 21515                           
 21516                           ; BSR set to: 0
 21517                           ;tmr1.c: 86: PIR4bits.TMR1IF = 0;
 21518  0132CE  010E               	movlb	14	; () banked
 21519  0132D0  91CE               	bcf	206,0,b	;volatile
 21520                           
 21521                           ; BSR set to: 14
 21522                           ;tmr1.c: 89: T1CON = 0x01;
 21523  0132D2  0E01               	movlw	1
 21524  0132D4  6ECF               	movwf	4047,c	;volatile
 21525                           
 21526                           ; BSR set to: 14
 21527  0132D6  0012               	return		;funcret
 21528  0132D8                     __end_of_TMR1_Initialize:
 21529                           	opt stack 0
 21530                           tblptru	equ	0xFF8
 21531                           tblptrh	equ	0xFF7
 21532                           tblptrl	equ	0xFF6
 21533                           tablat	equ	0xFF5
 21534                           prodh	equ	0xFF4
 21535                           prodl	equ	0xFF3
 21536                           intcon	equ	0xFF2
 21537                           indf0	equ	0xFEF
 21538                           postinc0	equ	0xFEE
 21539                           fsr0h	equ	0xFEA
 21540                           fsr0l	equ	0xFE9
 21541                           wreg	equ	0xFE8
 21542                           indf1	equ	0xFE7
 21543                           postdec1	equ	0xFE5
 21544                           fsr1h	equ	0xFE2
 21545                           fsr1l	equ	0xFE1
 21546                           indf2	equ	0xFDF
 21547                           postinc2	equ	0xFDE
 21548                           fsr2h	equ	0xFDA
 21549                           fsr2l	equ	0xFD9
 21550                           status	equ	0xFD8
 21551                           
 21552 ;; *************** function _TMR0_Initialize *****************
 21553 ;; Defined at:
 21554 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 21555 ;; Parameters:    Size  Location     Type
 21556 ;;		None
 21557 ;; Auto vars:     Size  Location     Type
 21558 ;;		None
 21559 ;; Return value:  Size  Location     Type
 21560 ;;                  1    wreg      void 
 21561 ;; Registers used:
 21562 ;;		wreg, status,2, status,0
 21563 ;; Tracked objects:
 21564 ;;		On entry : 0/0
 21565 ;;		On exit  : 0/0
 21566 ;;		Unchanged: 0/0
 21567 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21570 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21572 ;;Total ram usage:        2 bytes
 21573 ;; Hardware stack levels used:    1
 21574 ;; Hardware stack levels required when called:    2
 21575 ;; This function calls:
 21576 ;;		Nothing
 21577 ;; This function is called by:
 21578 ;;		_SYSTEM_Initialize
 21579 ;; This function uses a non-reentrant model
 21580 ;;
 21581                           
 21582                           	psect	text125
 21583  013408                     __ptext125:
 21584                           	opt stack 0
 21585  013408                     _TMR0_Initialize:
 21586                           	opt stack 27
 21587                           
 21588                           ;tmr0.c: 70: T0CON1 = 0x82;
 21589                           
 21590                           ; BSR set to: 14
 21591                           ;incstack = 0
 21592  013408  0E82               	movlw	130
 21593  01340A  6ED6               	movwf	4054,c	;volatile
 21594                           
 21595                           ;tmr0.c: 73: TMR0H = 0xA5;
 21596  01340C  0EA5               	movlw	165
 21597  01340E  6ED4               	movwf	4052,c	;volatile
 21598                           
 21599                           ;tmr0.c: 76: TMR0L = 0x2E;
 21600  013410  0E2E               	movlw	46
 21601  013412  6ED3               	movwf	4051,c	;volatile
 21602                           
 21603                           ;tmr0.c: 79: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 21604  013414  50D3               	movf	4051,w,c	;volatile
 21605  013416  CFD4 F01D          	movff	4052,??_TMR0_Initialize	;volatile
 21606  01341A  6A1E               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 21607  01341C  C01D  F01E         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 21608  013420  6A1D               	clrf	??_TMR0_Initialize,c
 21609  013422  101D               	iorwf	??_TMR0_Initialize,w,c
 21610  013424  0100               	movlb	0	; () banked
 21611  013426  6FF5               	movwf	_timer0ReloadVal16bit& (0+255),b	;volatile
 21612  013428  501E               	movf	??_TMR0_Initialize+1,w,c
 21613  01342A  6FF6               	movwf	(_timer0ReloadVal16bit+1)& (0+255),b	;volatile
 21614                           
 21615                           ; BSR set to: 0
 21616                           ;tmr0.c: 82: PIR0bits.TMR0IF = 0;
 21617  01342C  010E               	movlb	14	; () banked
 21618  01342E  9BCA               	bcf	202,5,b	;volatile
 21619                           
 21620                           ; BSR set to: 14
 21621                           ;tmr0.c: 85: T0CON0 = 0x90;
 21622  013430  0E90               	movlw	144
 21623  013432  6ED5               	movwf	4053,c	;volatile
 21624                           
 21625                           ; BSR set to: 14
 21626  013434  0012               	return		;funcret
 21627  013436                     __end_of_TMR0_Initialize:
 21628                           	opt stack 0
 21629                           tblptru	equ	0xFF8
 21630                           tblptrh	equ	0xFF7
 21631                           tblptrl	equ	0xFF6
 21632                           tablat	equ	0xFF5
 21633                           prodh	equ	0xFF4
 21634                           prodl	equ	0xFF3
 21635                           intcon	equ	0xFF2
 21636                           indf0	equ	0xFEF
 21637                           postinc0	equ	0xFEE
 21638                           fsr0h	equ	0xFEA
 21639                           fsr0l	equ	0xFE9
 21640                           wreg	equ	0xFE8
 21641                           indf1	equ	0xFE7
 21642                           postdec1	equ	0xFE5
 21643                           fsr1h	equ	0xFE2
 21644                           fsr1l	equ	0xFE1
 21645                           indf2	equ	0xFDF
 21646                           postinc2	equ	0xFDE
 21647                           fsr2h	equ	0xFDA
 21648                           fsr2l	equ	0xFD9
 21649                           status	equ	0xFD8
 21650                           
 21651 ;; *************** function _PMD_Initialize *****************
 21652 ;; Defined at:
 21653 ;;		line 82 in file "mcc_generated_files/mcc.c"
 21654 ;; Parameters:    Size  Location     Type
 21655 ;;		None
 21656 ;; Auto vars:     Size  Location     Type
 21657 ;;		None
 21658 ;; Return value:  Size  Location     Type
 21659 ;;                  1    wreg      void 
 21660 ;; Registers used:
 21661 ;;		wreg, status,2
 21662 ;; Tracked objects:
 21663 ;;		On entry : 0/0
 21664 ;;		On exit  : 0/0
 21665 ;;		Unchanged: 0/0
 21666 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21671 ;;Total ram usage:        0 bytes
 21672 ;; Hardware stack levels used:    1
 21673 ;; Hardware stack levels required when called:    2
 21674 ;; This function calls:
 21675 ;;		Nothing
 21676 ;; This function is called by:
 21677 ;;		_SYSTEM_Initialize
 21678 ;; This function uses a non-reentrant model
 21679 ;;
 21680                           
 21681                           	psect	text126
 21682  0135B2                     __ptext126:
 21683                           	opt stack 0
 21684  0135B2                     _PMD_Initialize:
 21685                           	opt stack 27
 21686                           
 21687                           ;mcc.c: 85: PMD0 = 0x00;
 21688                           
 21689                           ; BSR set to: 14
 21690                           ;incstack = 0
 21691  0135B2  0E00               	movlw	0
 21692  0135B4  010E               	movlb	14	; () banked
 21693  0135B6  6FE1               	movwf	225,b	;volatile
 21694                           
 21695                           ;mcc.c: 87: PMD1 = 0x00;
 21696  0135B8  0E00               	movlw	0
 21697  0135BA  6FE2               	movwf	226,b	;volatile
 21698                           
 21699                           ;mcc.c: 89: PMD2 = 0x00;
 21700  0135BC  0E00               	movlw	0
 21701  0135BE  6FE3               	movwf	227,b	;volatile
 21702                           
 21703                           ;mcc.c: 91: PMD3 = 0x00;
 21704  0135C0  0E00               	movlw	0
 21705  0135C2  6FE4               	movwf	228,b	;volatile
 21706                           
 21707                           ;mcc.c: 93: PMD4 = 0x00;
 21708  0135C4  0E00               	movlw	0
 21709  0135C6  6FE5               	movwf	229,b	;volatile
 21710                           
 21711                           ;mcc.c: 95: PMD5 = 0x00;
 21712  0135C8  0E00               	movlw	0
 21713  0135CA  6FE6               	movwf	230,b	;volatile
 21714                           
 21715                           ; BSR set to: 14
 21716  0135CC  0012               	return		;funcret
 21717  0135CE                     __end_of_PMD_Initialize:
 21718                           	opt stack 0
 21719                           tblptru	equ	0xFF8
 21720                           tblptrh	equ	0xFF7
 21721                           tblptrl	equ	0xFF6
 21722                           tablat	equ	0xFF5
 21723                           prodh	equ	0xFF4
 21724                           prodl	equ	0xFF3
 21725                           intcon	equ	0xFF2
 21726                           indf0	equ	0xFEF
 21727                           postinc0	equ	0xFEE
 21728                           fsr0h	equ	0xFEA
 21729                           fsr0l	equ	0xFE9
 21730                           wreg	equ	0xFE8
 21731                           indf1	equ	0xFE7
 21732                           postdec1	equ	0xFE5
 21733                           fsr1h	equ	0xFE2
 21734                           fsr1l	equ	0xFE1
 21735                           indf2	equ	0xFDF
 21736                           postinc2	equ	0xFDE
 21737                           fsr2h	equ	0xFDA
 21738                           fsr2l	equ	0xFD9
 21739                           status	equ	0xFD8
 21740                           
 21741 ;; *************** function _PIN_MANAGER_Initialize *****************
 21742 ;; Defined at:
 21743 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 21744 ;; Parameters:    Size  Location     Type
 21745 ;;		None
 21746 ;; Auto vars:     Size  Location     Type
 21747 ;;		None
 21748 ;; Return value:  Size  Location     Type
 21749 ;;                  1    wreg      void 
 21750 ;; Registers used:
 21751 ;;		wreg, status,2
 21752 ;; Tracked objects:
 21753 ;;		On entry : 0/0
 21754 ;;		On exit  : 0/0
 21755 ;;		Unchanged: 0/0
 21756 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21761 ;;Total ram usage:        0 bytes
 21762 ;; Hardware stack levels used:    1
 21763 ;; Hardware stack levels required when called:    2
 21764 ;; This function calls:
 21765 ;;		Nothing
 21766 ;; This function is called by:
 21767 ;;		_SYSTEM_Initialize
 21768 ;; This function uses a non-reentrant model
 21769 ;;
 21770                           
 21771                           	psect	text127
 21772  0123A8                     __ptext127:
 21773                           	opt stack 0
 21774  0123A8                     _PIN_MANAGER_Initialize:
 21775                           	opt stack 27
 21776                           
 21777                           ;pin_manager.c: 62: LATE = 0x00;
 21778                           
 21779                           ; BSR set to: 14
 21780                           ;incstack = 0
 21781  0123A8  0E00               	movlw	0
 21782  0123AA  6E87               	movwf	3975,c	;volatile
 21783                           
 21784                           ;pin_manager.c: 63: LATD = 0x00;
 21785  0123AC  0E00               	movlw	0
 21786  0123AE  6E86               	movwf	3974,c	;volatile
 21787                           
 21788                           ;pin_manager.c: 64: LATA = 0x00;
 21789  0123B0  0E00               	movlw	0
 21790  0123B2  6E83               	movwf	3971,c	;volatile
 21791                           
 21792                           ;pin_manager.c: 65: LATB = 0x00;
 21793  0123B4  0E00               	movlw	0
 21794  0123B6  6E84               	movwf	3972,c	;volatile
 21795                           
 21796                           ;pin_manager.c: 66: LATC = 0x00;
 21797  0123B8  0E00               	movlw	0
 21798  0123BA  6E85               	movwf	3973,c	;volatile
 21799                           
 21800                           ;pin_manager.c: 71: TRISE = 0x00;
 21801  0123BC  0E00               	movlw	0
 21802  0123BE  6E8C               	movwf	3980,c	;volatile
 21803                           
 21804                           ;pin_manager.c: 72: TRISA = 0x1F;
 21805  0123C0  0E1F               	movlw	31
 21806  0123C2  6E88               	movwf	3976,c	;volatile
 21807                           
 21808                           ;pin_manager.c: 73: TRISB = 0xD0;
 21809  0123C4  0ED0               	movlw	208
 21810  0123C6  6E89               	movwf	3977,c	;volatile
 21811                           
 21812                           ;pin_manager.c: 74: TRISC = 0x90;
 21813  0123C8  0E90               	movlw	144
 21814  0123CA  6E8A               	movwf	3978,c	;volatile
 21815                           
 21816                           ;pin_manager.c: 75: TRISD = 0x00;
 21817  0123CC  0E00               	movlw	0
 21818  0123CE  6E8B               	movwf	3979,c	;volatile
 21819                           
 21820                           ;pin_manager.c: 80: ANSELD = 0x00;
 21821  0123D0  0E00               	movlw	0
 21822  0123D2  010F               	movlb	15	; () banked
 21823  0123D4  6F26               	movwf	38,b	;volatile
 21824                           
 21825                           ;pin_manager.c: 81: ANSELC = 0x00;
 21826  0123D6  0E00               	movlw	0
 21827  0123D8  6F21               	movwf	33,b	;volatile
 21828                           
 21829                           ;pin_manager.c: 82: ANSELB = 0xC0;
 21830  0123DA  0EC0               	movlw	192
 21831  0123DC  6F19               	movwf	25,b	;volatile
 21832                           
 21833                           ;pin_manager.c: 83: ANSELE = 0x00;
 21834  0123DE  0E00               	movlw	0
 21835  0123E0  6F2E               	movwf	46,b	;volatile
 21836                           
 21837                           ;pin_manager.c: 84: ANSELA = 0x01;
 21838  0123E2  0E01               	movlw	1
 21839  0123E4  6F11               	movwf	17,b	;volatile
 21840                           
 21841                           ;pin_manager.c: 89: WPUD = 0x00;
 21842  0123E6  0E00               	movlw	0
 21843  0123E8  6F25               	movwf	37,b	;volatile
 21844                           
 21845                           ;pin_manager.c: 90: WPUE = 0x00;
 21846  0123EA  0E00               	movlw	0
 21847  0123EC  6F2D               	movwf	45,b	;volatile
 21848                           
 21849                           ;pin_manager.c: 91: WPUB = 0x10;
 21850  0123EE  0E10               	movlw	16
 21851  0123F0  6F18               	movwf	24,b	;volatile
 21852                           
 21853                           ;pin_manager.c: 92: WPUA = 0x00;
 21854  0123F2  0E00               	movlw	0
 21855  0123F4  6F10               	movwf	16,b	;volatile
 21856                           
 21857                           ;pin_manager.c: 93: WPUC = 0x00;
 21858  0123F6  0E00               	movlw	0
 21859  0123F8  6F20               	movwf	32,b	;volatile
 21860                           
 21861                           ;pin_manager.c: 98: ODCONE = 0x00;
 21862  0123FA  0E00               	movlw	0
 21863  0123FC  6F2C               	movwf	44,b	;volatile
 21864                           
 21865                           ;pin_manager.c: 99: ODCONA = 0x00;
 21866  0123FE  0E00               	movlw	0
 21867  012400  6F0F               	movwf	15,b	;volatile
 21868                           
 21869                           ;pin_manager.c: 100: ODCONB = 0x20;
 21870  012402  0E20               	movlw	32
 21871  012404  6F17               	movwf	23,b	;volatile
 21872                           
 21873                           ;pin_manager.c: 101: ODCONC = 0x08;
 21874  012406  0E08               	movlw	8
 21875  012408  6F1F               	movwf	31,b	;volatile
 21876                           
 21877                           ;pin_manager.c: 102: ODCOND = 0x00;
 21878  01240A  0E00               	movlw	0
 21879  01240C  6F24               	movwf	36,b	;volatile
 21880                           
 21881                           ; BSR set to: 15
 21882                           ;pin_manager.c: 107: SLRCONA = 0xFF;
 21883  01240E  690E               	setf	14,b	;volatile
 21884                           
 21885                           ; BSR set to: 15
 21886                           ;pin_manager.c: 108: SLRCONB = 0xFF;
 21887  012410  6916               	setf	22,b	;volatile
 21888                           
 21889                           ; BSR set to: 15
 21890                           ;pin_manager.c: 109: SLRCONC = 0xFF;
 21891  012412  691E               	setf	30,b	;volatile
 21892                           
 21893                           ; BSR set to: 15
 21894                           ;pin_manager.c: 110: SLRCOND = 0xFF;
 21895  012414  6923               	setf	35,b	;volatile
 21896                           
 21897                           ;pin_manager.c: 111: SLRCONE = 0x07;
 21898  012416  0E07               	movlw	7
 21899  012418  6F2B               	movwf	43,b	;volatile
 21900                           
 21901                           ;pin_manager.c: 120: RX1PPS = 0x17;
 21902  01241A  0E17               	movlw	23
 21903  01241C  010E               	movlb	14	; () banked
 21904  01241E  6FB5               	movwf	181,b	;volatile
 21905                           
 21906                           ;pin_manager.c: 121: RB5PPS = 0x0B;
 21907  012420  0E0B               	movlw	11
 21908  012422  6FF4               	movwf	244,b	;volatile
 21909                           
 21910                           ;pin_manager.c: 122: RC6PPS = 0x09;
 21911  012424  0E09               	movlw	9
 21912  012426  6FFD               	movwf	253,b	;volatile
 21913                           
 21914                           ;pin_manager.c: 123: RX2PPS = 0x0C;
 21915  012428  0E0C               	movlw	12
 21916  01242A  6F8D               	movwf	141,b	;volatile
 21917                           
 21918                           ; BSR set to: 14
 21919  01242C  0012               	return		;funcret
 21920  01242E                     __end_of_PIN_MANAGER_Initialize:
 21921                           	opt stack 0
 21922                           tblptru	equ	0xFF8
 21923                           tblptrh	equ	0xFF7
 21924                           tblptrl	equ	0xFF6
 21925                           tablat	equ	0xFF5
 21926                           prodh	equ	0xFF4
 21927                           prodl	equ	0xFF3
 21928                           intcon	equ	0xFF2
 21929                           indf0	equ	0xFEF
 21930                           postinc0	equ	0xFEE
 21931                           fsr0h	equ	0xFEA
 21932                           fsr0l	equ	0xFE9
 21933                           wreg	equ	0xFE8
 21934                           indf1	equ	0xFE7
 21935                           postdec1	equ	0xFE5
 21936                           fsr1h	equ	0xFE2
 21937                           fsr1l	equ	0xFE1
 21938                           indf2	equ	0xFDF
 21939                           postinc2	equ	0xFDE
 21940                           fsr2h	equ	0xFDA
 21941                           fsr2l	equ	0xFD9
 21942                           status	equ	0xFD8
 21943                           
 21944 ;; *************** function _OSCILLATOR_Initialize *****************
 21945 ;; Defined at:
 21946 ;;		line 68 in file "mcc_generated_files/mcc.c"
 21947 ;; Parameters:    Size  Location     Type
 21948 ;;		None
 21949 ;; Auto vars:     Size  Location     Type
 21950 ;;		None
 21951 ;; Return value:  Size  Location     Type
 21952 ;;                  1    wreg      void 
 21953 ;; Registers used:
 21954 ;;		wreg, status,2
 21955 ;; Tracked objects:
 21956 ;;		On entry : 0/0
 21957 ;;		On exit  : 0/0
 21958 ;;		Unchanged: 0/0
 21959 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 21960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21961 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21963 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21964 ;;Total ram usage:        0 bytes
 21965 ;; Hardware stack levels used:    1
 21966 ;; Hardware stack levels required when called:    2
 21967 ;; This function calls:
 21968 ;;		Nothing
 21969 ;; This function is called by:
 21970 ;;		_SYSTEM_Initialize
 21971 ;; This function uses a non-reentrant model
 21972 ;;
 21973                           
 21974                           	psect	text128
 21975  013618                     __ptext128:
 21976                           	opt stack 0
 21977  013618                     _OSCILLATOR_Initialize:
 21978                           	opt stack 27
 21979                           
 21980                           ;mcc.c: 71: OSCCON1 = 0x60;
 21981                           
 21982                           ; BSR set to: 14
 21983                           ;incstack = 0
 21984  013618  0E60               	movlw	96
 21985  01361A  010E               	movlb	14	; () banked
 21986  01361C  6FD8               	movwf	216,b	;volatile
 21987                           
 21988                           ;mcc.c: 73: OSCCON3 = 0x00;
 21989  01361E  0E00               	movlw	0
 21990  013620  6FDA               	movwf	218,b	;volatile
 21991                           
 21992                           ;mcc.c: 75: OSCEN = 0x00;
 21993  013622  0E00               	movlw	0
 21994  013624  6FDC               	movwf	220,b	;volatile
 21995                           
 21996                           ;mcc.c: 77: OSCFRQ = 0x08;
 21997  013626  0E08               	movlw	8
 21998  013628  6FDE               	movwf	222,b	;volatile
 21999                           
 22000                           ;mcc.c: 79: OSCTUNE = 0x00;
 22001  01362A  0E00               	movlw	0
 22002  01362C  6FDD               	movwf	221,b	;volatile
 22003                           
 22004                           ; BSR set to: 14
 22005  01362E  0012               	return		;funcret
 22006  013630                     __end_of_OSCILLATOR_Initialize:
 22007                           	opt stack 0
 22008                           tblptru	equ	0xFF8
 22009                           tblptrh	equ	0xFF7
 22010                           tblptrl	equ	0xFF6
 22011                           tablat	equ	0xFF5
 22012                           prodh	equ	0xFF4
 22013                           prodl	equ	0xFF3
 22014                           intcon	equ	0xFF2
 22015                           indf0	equ	0xFEF
 22016                           postinc0	equ	0xFEE
 22017                           fsr0h	equ	0xFEA
 22018                           fsr0l	equ	0xFE9
 22019                           wreg	equ	0xFE8
 22020                           indf1	equ	0xFE7
 22021                           postdec1	equ	0xFE5
 22022                           fsr1h	equ	0xFE2
 22023                           fsr1l	equ	0xFE1
 22024                           indf2	equ	0xFDF
 22025                           postinc2	equ	0xFDE
 22026                           fsr2h	equ	0xFDA
 22027                           fsr2l	equ	0xFD9
 22028                           status	equ	0xFD8
 22029                           
 22030 ;; *************** function _INTERRUPT_Initialize *****************
 22031 ;; Defined at:
 22032 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 22033 ;; Parameters:    Size  Location     Type
 22034 ;;		None
 22035 ;; Auto vars:     Size  Location     Type
 22036 ;;		None
 22037 ;; Return value:  Size  Location     Type
 22038 ;;                  1    wreg      void 
 22039 ;; Registers used:
 22040 ;;		None
 22041 ;; Tracked objects:
 22042 ;;		On entry : 0/0
 22043 ;;		On exit  : 0/0
 22044 ;;		Unchanged: 0/0
 22045 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22050 ;;Total ram usage:        0 bytes
 22051 ;; Hardware stack levels used:    1
 22052 ;; Hardware stack levels required when called:    2
 22053 ;; This function calls:
 22054 ;;		Nothing
 22055 ;; This function is called by:
 22056 ;;		_SYSTEM_Initialize
 22057 ;; This function uses a non-reentrant model
 22058 ;;
 22059                           
 22060                           	psect	text129
 22061  0137AA                     __ptext129:
 22062                           	opt stack 0
 22063  0137AA                     _INTERRUPT_Initialize:
 22064                           	opt stack 27
 22065                           
 22066                           ;interrupt_manager.c: 55: INTCONbits.IPEN = 0;
 22067                           
 22068                           ; BSR set to: 14
 22069                           ;incstack = 0
 22070  0137AA  9AF2               	bcf	intcon,5,c	;volatile
 22071  0137AC  0012               	return		;funcret
 22072  0137AE                     __end_of_INTERRUPT_Initialize:
 22073                           	opt stack 0
 22074                           tblptru	equ	0xFF8
 22075                           tblptrh	equ	0xFF7
 22076                           tblptrl	equ	0xFF6
 22077                           tablat	equ	0xFF5
 22078                           prodh	equ	0xFF4
 22079                           prodl	equ	0xFF3
 22080                           intcon	equ	0xFF2
 22081                           indf0	equ	0xFEF
 22082                           postinc0	equ	0xFEE
 22083                           fsr0h	equ	0xFEA
 22084                           fsr0l	equ	0xFE9
 22085                           wreg	equ	0xFE8
 22086                           indf1	equ	0xFE7
 22087                           postdec1	equ	0xFE5
 22088                           fsr1h	equ	0xFE2
 22089                           fsr1l	equ	0xFE1
 22090                           indf2	equ	0xFDF
 22091                           postinc2	equ	0xFDE
 22092                           fsr2h	equ	0xFDA
 22093                           fsr2l	equ	0xFD9
 22094                           status	equ	0xFD8
 22095                           
 22096 ;; *************** function _EUSART2_Initialize *****************
 22097 ;; Defined at:
 22098 ;;		line 59 in file "mcc_generated_files/eusart2.c"
 22099 ;; Parameters:    Size  Location     Type
 22100 ;;		None
 22101 ;; Auto vars:     Size  Location     Type
 22102 ;;		None
 22103 ;; Return value:  Size  Location     Type
 22104 ;;                  1    wreg      void 
 22105 ;; Registers used:
 22106 ;;		wreg, status,2, status,0, cstack
 22107 ;; Tracked objects:
 22108 ;;		On entry : 0/0
 22109 ;;		On exit  : 0/0
 22110 ;;		Unchanged: 0/0
 22111 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22116 ;;Total ram usage:        0 bytes
 22117 ;; Hardware stack levels used:    1
 22118 ;; Hardware stack levels required when called:    3
 22119 ;; This function calls:
 22120 ;;		_EUSART2_SetRxInterruptHandler
 22121 ;; This function is called by:
 22122 ;;		_SYSTEM_Initialize
 22123 ;; This function uses a non-reentrant model
 22124 ;;
 22125                           
 22126                           	psect	text130
 22127  01318E                     __ptext130:
 22128                           	opt stack 0
 22129  01318E                     _EUSART2_Initialize:
 22130                           	opt stack 26
 22131                           
 22132                           ;eusart2.c: 62: PIE3bits.RC2IE = 0;
 22133                           
 22134                           ;incstack = 0
 22135  01318E  010E               	movlb	14	; () banked
 22136  013190  9FC5               	bcf	197,7,b	;volatile
 22137                           
 22138                           ; BSR set to: 14
 22139                           ;eusart2.c: 63: EUSART2_SetRxInterruptHandler(EUSART2_Receive_ISR);
 22140  013192  0EB2               	movlw	low _EUSART2_Receive_ISR
 22141  013194  6E1D               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler,c
 22142  013196  0E34               	movlw	high _EUSART2_Receive_ISR
 22143  013198  6E1E               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler+1,c
 22144  01319A  0E01               	movlw	low (_EUSART2_Receive_ISR shr (0+16))
 22145  01319C  6E1F               	movwf	EUSART2_SetRxInterruptHandler@interruptHandler+2,c
 22146  01319E  EC97  F09B         	call	_EUSART2_SetRxInterruptHandler	;wreg free
 22147                           
 22148                           ;eusart2.c: 67: BAUD2CON = 0x08;
 22149  0131A2  0E08               	movlw	8
 22150  0131A4  010E               	movlb	14	; () banked
 22151  0131A6  6F9F               	movwf	159,b	;volatile
 22152                           
 22153                           ; BSR set to: 14
 22154                           ;eusart2.c: 70: RC2STA = 0x90;
 22155  0131A8  0E90               	movlw	144
 22156  0131AA  6F9D               	movwf	157,b	;volatile
 22157                           
 22158                           ; BSR set to: 14
 22159                           ;eusart2.c: 73: TX2STA = 0x24;
 22160  0131AC  0E24               	movlw	36
 22161  0131AE  6F9E               	movwf	158,b	;volatile
 22162                           
 22163                           ; BSR set to: 14
 22164                           ;eusart2.c: 76: SP2BRGL = 0x40;
 22165  0131B0  0E40               	movlw	64
 22166  0131B2  6F9B               	movwf	155,b	;volatile
 22167                           
 22168                           ; BSR set to: 14
 22169                           ;eusart2.c: 79: SP2BRGH = 0x03;
 22170  0131B4  0E03               	movlw	3
 22171  0131B6  6F9C               	movwf	156,b	;volatile
 22172                           
 22173                           ; BSR set to: 14
 22174                           ;eusart2.c: 83: eusart2RxHead = 0;
 22175  0131B8  0E00               	movlw	0
 22176  0131BA  6E48               	movwf	_eusart2RxHead,c	;volatile
 22177                           
 22178                           ; BSR set to: 14
 22179                           ;eusart2.c: 84: eusart2RxTail = 0;
 22180  0131BC  0E00               	movlw	0
 22181  0131BE  6E47               	movwf	_eusart2RxTail,c	;volatile
 22182                           
 22183                           ; BSR set to: 14
 22184                           ;eusart2.c: 85: eusart2RxCount = 0;
 22185  0131C0  0E00               	movlw	0
 22186  0131C2  6E46               	movwf	_eusart2RxCount,c	;volatile
 22187                           
 22188                           ; BSR set to: 14
 22189                           ;eusart2.c: 88: PIE3bits.RC2IE = 1;
 22190  0131C4  8FC5               	bsf	197,7,b	;volatile
 22191                           
 22192                           ; BSR set to: 14
 22193  0131C6  0012               	return		;funcret
 22194  0131C8                     __end_of_EUSART2_Initialize:
 22195                           	opt stack 0
 22196                           tblptru	equ	0xFF8
 22197                           tblptrh	equ	0xFF7
 22198                           tblptrl	equ	0xFF6
 22199                           tablat	equ	0xFF5
 22200                           prodh	equ	0xFF4
 22201                           prodl	equ	0xFF3
 22202                           intcon	equ	0xFF2
 22203                           indf0	equ	0xFEF
 22204                           postinc0	equ	0xFEE
 22205                           fsr0h	equ	0xFEA
 22206                           fsr0l	equ	0xFE9
 22207                           wreg	equ	0xFE8
 22208                           indf1	equ	0xFE7
 22209                           postdec1	equ	0xFE5
 22210                           fsr1h	equ	0xFE2
 22211                           fsr1l	equ	0xFE1
 22212                           indf2	equ	0xFDF
 22213                           postinc2	equ	0xFDE
 22214                           fsr2h	equ	0xFDA
 22215                           fsr2l	equ	0xFD9
 22216                           status	equ	0xFD8
 22217                           
 22218 ;; *************** function _EUSART2_SetRxInterruptHandler *****************
 22219 ;; Defined at:
 22220 ;;		line 158 in file "mcc_generated_files/eusart2.c"
 22221 ;; Parameters:    Size  Location     Type
 22222 ;;  interruptHan    3   18[COMRAM] PTR FTN()void 
 22223 ;;		 -> EUSART2_Receive_ISR(1), 
 22224 ;; Auto vars:     Size  Location     Type
 22225 ;;		None
 22226 ;; Return value:  Size  Location     Type
 22227 ;;                  1    wreg      void 
 22228 ;; Registers used:
 22229 ;;		wreg, status,2, status,0
 22230 ;; Tracked objects:
 22231 ;;		On entry : 0/0
 22232 ;;		On exit  : 0/0
 22233 ;;		Unchanged: 0/0
 22234 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22235 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22238 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22239 ;;Total ram usage:        3 bytes
 22240 ;; Hardware stack levels used:    1
 22241 ;; Hardware stack levels required when called:    2
 22242 ;; This function calls:
 22243 ;;		Nothing
 22244 ;; This function is called by:
 22245 ;;		_EUSART2_Initialize
 22246 ;; This function uses a non-reentrant model
 22247 ;;
 22248                           
 22249                           	psect	text131
 22250  01372E                     __ptext131:
 22251                           	opt stack 0
 22252  01372E                     _EUSART2_SetRxInterruptHandler:
 22253                           	opt stack 26
 22254                           
 22255                           ;eusart2.c: 159: EUSART2_RxDefaultInterruptHandler = interruptHandler;
 22256                           
 22257                           ; BSR set to: 14
 22258                           ;incstack = 0
 22259  01372E  C01D  F0F2         	movff	EUSART2_SetRxInterruptHandler@interruptHandler,_EUSART2_RxDefaultInterruptHandler
 22260  013732  C01E  F0F3         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+1,_EUSART2_RxDefaultInterruptHandl
      +                          er+1
 22261  013736  C01F  F0F4         	movff	EUSART2_SetRxInterruptHandler@interruptHandler+2,_EUSART2_RxDefaultInterruptHandl
      +                          er+2
 22262  01373A  0012               	return		;funcret
 22263  01373C                     __end_of_EUSART2_SetRxInterruptHandler:
 22264                           	opt stack 0
 22265                           tblptru	equ	0xFF8
 22266                           tblptrh	equ	0xFF7
 22267                           tblptrl	equ	0xFF6
 22268                           tablat	equ	0xFF5
 22269                           prodh	equ	0xFF4
 22270                           prodl	equ	0xFF3
 22271                           intcon	equ	0xFF2
 22272                           indf0	equ	0xFEF
 22273                           postinc0	equ	0xFEE
 22274                           fsr0h	equ	0xFEA
 22275                           fsr0l	equ	0xFE9
 22276                           wreg	equ	0xFE8
 22277                           indf1	equ	0xFE7
 22278                           postdec1	equ	0xFE5
 22279                           fsr1h	equ	0xFE2
 22280                           fsr1l	equ	0xFE1
 22281                           indf2	equ	0xFDF
 22282                           postinc2	equ	0xFDE
 22283                           fsr2h	equ	0xFDA
 22284                           fsr2l	equ	0xFD9
 22285                           status	equ	0xFD8
 22286                           
 22287 ;; *************** function _EUSART1_Initialize *****************
 22288 ;; Defined at:
 22289 ;;		line 56 in file "mcc_generated_files/eusart1.c"
 22290 ;; Parameters:    Size  Location     Type
 22291 ;;		None
 22292 ;; Auto vars:     Size  Location     Type
 22293 ;;		None
 22294 ;; Return value:  Size  Location     Type
 22295 ;;                  1    wreg      void 
 22296 ;; Registers used:
 22297 ;;		wreg, status,2
 22298 ;; Tracked objects:
 22299 ;;		On entry : 0/0
 22300 ;;		On exit  : 0/0
 22301 ;;		Unchanged: 0/0
 22302 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22307 ;;Total ram usage:        0 bytes
 22308 ;; Hardware stack levels used:    1
 22309 ;; Hardware stack levels required when called:    2
 22310 ;; This function calls:
 22311 ;;		Nothing
 22312 ;; This function is called by:
 22313 ;;		_SYSTEM_Initialize
 22314 ;; This function uses a non-reentrant model
 22315 ;;
 22316                           
 22317                           	psect	text132
 22318  013672                     __ptext132:
 22319                           	opt stack 0
 22320  013672                     _EUSART1_Initialize:
 22321                           	opt stack 27
 22322                           
 22323                           ;eusart1.c: 61: BAUD1CON = 0x08;
 22324                           
 22325                           ;incstack = 0
 22326  013672  0E08               	movlw	8
 22327  013674  6E9F               	movwf	3999,c	;volatile
 22328                           
 22329                           ;eusart1.c: 64: RC1STA = 0xD0;
 22330  013676  0ED0               	movlw	208
 22331  013678  6E9D               	movwf	3997,c	;volatile
 22332                           
 22333                           ;eusart1.c: 67: TX1STA = 0xEC;
 22334  01367A  0EEC               	movlw	236
 22335  01367C  6E9E               	movwf	3998,c	;volatile
 22336                           
 22337                           ;eusart1.c: 70: SP1BRGL = 0x82;
 22338  01367E  0E82               	movlw	130
 22339  013680  6E9B               	movwf	3995,c	;volatile
 22340                           
 22341                           ;eusart1.c: 73: SP1BRGH = 0x06;
 22342  013682  0E06               	movlw	6
 22343  013684  6E9C               	movwf	3996,c	;volatile
 22344  013686  0012               	return		;funcret
 22345  013688                     __end_of_EUSART1_Initialize:
 22346                           	opt stack 0
 22347                           tblptru	equ	0xFF8
 22348                           tblptrh	equ	0xFF7
 22349                           tblptrl	equ	0xFF6
 22350                           tablat	equ	0xFF5
 22351                           prodh	equ	0xFF4
 22352                           prodl	equ	0xFF3
 22353                           intcon	equ	0xFF2
 22354                           indf0	equ	0xFEF
 22355                           postinc0	equ	0xFEE
 22356                           fsr0h	equ	0xFEA
 22357                           fsr0l	equ	0xFE9
 22358                           wreg	equ	0xFE8
 22359                           indf1	equ	0xFE7
 22360                           postdec1	equ	0xFE5
 22361                           fsr1h	equ	0xFE2
 22362                           fsr1l	equ	0xFE1
 22363                           indf2	equ	0xFDF
 22364                           postinc2	equ	0xFDE
 22365                           fsr2h	equ	0xFDA
 22366                           fsr2l	equ	0xFD9
 22367                           status	equ	0xFD8
 22368                           
 22369 ;; *************** function _DAC1_Initialize *****************
 22370 ;; Defined at:
 22371 ;;		line 58 in file "mcc_generated_files/dac1.c"
 22372 ;; Parameters:    Size  Location     Type
 22373 ;;		None
 22374 ;; Auto vars:     Size  Location     Type
 22375 ;;		None
 22376 ;; Return value:  Size  Location     Type
 22377 ;;                  1    wreg      void 
 22378 ;; Registers used:
 22379 ;;		wreg, status,2
 22380 ;; Tracked objects:
 22381 ;;		On entry : 0/0
 22382 ;;		On exit  : 0/0
 22383 ;;		Unchanged: 0/0
 22384 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22389 ;;Total ram usage:        0 bytes
 22390 ;; Hardware stack levels used:    1
 22391 ;; Hardware stack levels required when called:    2
 22392 ;; This function calls:
 22393 ;;		Nothing
 22394 ;; This function is called by:
 22395 ;;		_SYSTEM_Initialize
 22396 ;;		_mdb_unlock
 22397 ;; This function uses a non-reentrant model
 22398 ;;
 22399                           
 22400                           	psect	text133
 22401  013754                     __ptext133:
 22402                           	opt stack 0
 22403  013754                     _DAC1_Initialize:
 22404                           	opt stack 24
 22405                           
 22406                           ;dac1.c: 61: DAC1CON0 = 0x80;
 22407                           
 22408                           ;incstack = 0
 22409  013754  0E80               	movlw	128
 22410  013756  010F               	movlb	15	; () banked
 22411  013758  6F33               	movwf	51,b	;volatile
 22412                           
 22413                           ;dac1.c: 63: DAC1CON1 = 0x0E;
 22414  01375A  0E0E               	movlw	14
 22415  01375C  6F34               	movwf	52,b	;volatile
 22416                           
 22417                           ; BSR set to: 15
 22418  01375E  0012               	return		;funcret
 22419  013760                     __end_of_DAC1_Initialize:
 22420                           	opt stack 0
 22421                           tblptru	equ	0xFF8
 22422                           tblptrh	equ	0xFF7
 22423                           tblptrl	equ	0xFF6
 22424                           tablat	equ	0xFF5
 22425                           prodh	equ	0xFF4
 22426                           prodl	equ	0xFF3
 22427                           intcon	equ	0xFF2
 22428                           indf0	equ	0xFEF
 22429                           postinc0	equ	0xFEE
 22430                           fsr0h	equ	0xFEA
 22431                           fsr0l	equ	0xFE9
 22432                           wreg	equ	0xFE8
 22433                           indf1	equ	0xFE7
 22434                           postdec1	equ	0xFE5
 22435                           fsr1h	equ	0xFE2
 22436                           fsr1l	equ	0xFE1
 22437                           indf2	equ	0xFDF
 22438                           postinc2	equ	0xFDE
 22439                           fsr2h	equ	0xFDA
 22440                           fsr2l	equ	0xFD9
 22441                           status	equ	0xFD8
 22442                           
 22443 ;; *************** function _CMP1_Initialize *****************
 22444 ;; Defined at:
 22445 ;;		line 58 in file "mcc_generated_files/cmp1.c"
 22446 ;; Parameters:    Size  Location     Type
 22447 ;;		None
 22448 ;; Auto vars:     Size  Location     Type
 22449 ;;		None
 22450 ;; Return value:  Size  Location     Type
 22451 ;;                  1    wreg      void 
 22452 ;; Registers used:
 22453 ;;		wreg, status,2
 22454 ;; Tracked objects:
 22455 ;;		On entry : 0/0
 22456 ;;		On exit  : 0/0
 22457 ;;		Unchanged: 0/0
 22458 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;Total ram usage:        0 bytes
 22464 ;; Hardware stack levels used:    1
 22465 ;; Hardware stack levels required when called:    2
 22466 ;; This function calls:
 22467 ;;		Nothing
 22468 ;; This function is called by:
 22469 ;;		_SYSTEM_Initialize
 22470 ;;		_mdb_unlock
 22471 ;; This function uses a non-reentrant model
 22472 ;;
 22473                           
 22474                           	psect	text134
 22475  0136B0                     __ptext134:
 22476                           	opt stack 0
 22477  0136B0                     _CMP1_Initialize:
 22478                           	opt stack 24
 22479                           
 22480                           ;cmp1.c: 62: CM1CON0 = 0x90;
 22481                           
 22482                           ; BSR set to: 15
 22483                           ;incstack = 0
 22484  0136B0  0E90               	movlw	144
 22485  0136B2  010F               	movlb	15	; () banked
 22486  0136B4  6F39               	movwf	57,b	;volatile
 22487                           
 22488                           ;cmp1.c: 65: CM1CON1 = 0x00;
 22489  0136B6  0E00               	movlw	0
 22490  0136B8  6F3A               	movwf	58,b	;volatile
 22491                           
 22492                           ;cmp1.c: 68: CM1NCH = 0x00;
 22493  0136BA  0E00               	movlw	0
 22494  0136BC  6F3B               	movwf	59,b	;volatile
 22495                           
 22496                           ;cmp1.c: 71: CM1PCH = 0x05;
 22497  0136BE  0E05               	movlw	5
 22498  0136C0  6F3C               	movwf	60,b	;volatile
 22499                           
 22500                           ; BSR set to: 15
 22501  0136C2  0012               	return		;funcret
 22502  0136C4                     __end_of_CMP1_Initialize:
 22503                           	opt stack 0
 22504                           tblptru	equ	0xFF8
 22505                           tblptrh	equ	0xFF7
 22506                           tblptrl	equ	0xFF6
 22507                           tablat	equ	0xFF5
 22508                           prodh	equ	0xFF4
 22509                           prodl	equ	0xFF3
 22510                           intcon	equ	0xFF2
 22511                           indf0	equ	0xFEF
 22512                           postinc0	equ	0xFEE
 22513                           fsr0h	equ	0xFEA
 22514                           fsr0l	equ	0xFE9
 22515                           wreg	equ	0xFE8
 22516                           indf1	equ	0xFE7
 22517                           postdec1	equ	0xFE5
 22518                           fsr1h	equ	0xFE2
 22519                           fsr1l	equ	0xFE1
 22520                           indf2	equ	0xFDF
 22521                           postinc2	equ	0xFDE
 22522                           fsr2h	equ	0xFDA
 22523                           fsr2l	equ	0xFD9
 22524                           status	equ	0xFD8
 22525                           
 22526 ;; *************** function _INTERRUPT_InterruptManager *****************
 22527 ;; Defined at:
 22528 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
 22529 ;; Parameters:    Size  Location     Type
 22530 ;;		None
 22531 ;; Auto vars:     Size  Location     Type
 22532 ;;		None
 22533 ;; Return value:  Size  Location     Type
 22534 ;;                  1    wreg      void 
 22535 ;; Registers used:
 22536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22537 ;; Tracked objects:
 22538 ;;		On entry : 0/0
 22539 ;;		On exit  : 0/0
 22540 ;;		Unchanged: 0/0
 22541 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22544 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22545 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22546 ;;Total ram usage:       18 bytes
 22547 ;; Hardware stack levels used:    1
 22548 ;; Hardware stack levels required when called:    1
 22549 ;; This function calls:
 22550 ;;		_EUSART2_Receive_ISR
 22551 ;; This function is called by:
 22552 ;;		Interrupt level 2
 22553 ;; This function uses a non-reentrant model
 22554 ;;
 22555                           
 22556                           	psect	intcode
 22557  000008                     __pintcode:
 22558                           	opt stack 0
 22559  000008                     _INTERRUPT_InterruptManager:
 22560                           	opt stack 18
 22561                           
 22562                           ; BSR set to: 15
 22563                           ;incstack = 0
 22564  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22565  00000A  CFFA F00B          	movff	pclath,??_INTERRUPT_InterruptManager
 22566  00000E  CFFB F00C          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 22567  000012  CFE9 F00D          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 22568  000016  CFEA F00E          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 22569  00001A  CFE1 F00F          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 22570  00001E  CFE2 F010          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 22571  000022  CFD9 F011          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 22572  000026  CFDA F012          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 22573  00002A  CFF3 F013          	movff	prodl,??_INTERRUPT_InterruptManager+8
 22574  00002E  CFF4 F014          	movff	prodh,??_INTERRUPT_InterruptManager+9
 22575  000032  CFF6 F015          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 22576  000036  CFF7 F016          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 22577  00003A  CFF8 F017          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 22578  00003E  CFF5 F018          	movff	tablat,??_INTERRUPT_InterruptManager+13
 22579  000042  C04F  F019         	movff	btemp,??_INTERRUPT_InterruptManager+14
 22580  000046  C050  F01A         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 22581  00004A  C051  F01B         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 22582  00004E  C052  F01C         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 22583                           
 22584                           ;interrupt_manager.c: 61: if(INTCONbits.PEIE == 1)
 22585  000052  ACF2               	btfss	intcon,6,c	;volatile
 22586  000054  D006               	goto	i2l233
 22587                           
 22588                           ;interrupt_manager.c: 62: {
 22589                           ;interrupt_manager.c: 63: if(PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1)
 22590  000056  010E               	movlb	14	; () banked
 22591  000058  BFC5               	btfsc	197,7,b	;volatile
 22592                           
 22593                           ; BSR set to: 14
 22594  00005A  AFCD               	btfss	205,7,b	;volatile
 22595  00005C  D002               	goto	i2l233
 22596                           
 22597                           ; BSR set to: 14
 22598                           ;interrupt_manager.c: 64: {
 22599                           ;interrupt_manager.c: 65: EUSART2_Receive_ISR();
 22600  00005E  EC59  F09A         	call	_EUSART2_Receive_ISR	;wreg free
 22601  000062                     i2l233:
 22602                           
 22603                           ;interrupt_manager.c: 72: else
 22604                           ;interrupt_manager.c: 73: {
 22605                           
 22606                           ;interrupt_manager.c: 70: }
 22607                           ;interrupt_manager.c: 71: }
 22608                           
 22609                           ;interrupt_manager.c: 67: else
 22610                           ;interrupt_manager.c: 68: {
 22611  000062  C01C  F052         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 22612  000066  C01B  F051         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 22613  00006A  C01A  F050         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 22614  00006E  C019  F04F         	movff	??_INTERRUPT_InterruptManager+14,btemp
 22615  000072  C018  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 22616  000076  C017  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 22617  00007A  C016  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 22618  00007E  C015  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 22619  000082  C014  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 22620  000086  C013  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 22621  00008A  C012  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 22622  00008E  C011  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 22623  000092  C010  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 22624  000096  C00F  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 22625  00009A  C00E  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 22626  00009E  C00D  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 22627  0000A2  C00C  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 22628  0000A6  C00B  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 22629  0000AA  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22630  0000AC  0011               	retfie		f
 22631  0000AE                     __end_of_INTERRUPT_InterruptManager:
 22632                           	opt stack 0
 22633                           pclatu	equ	0xFFB
 22634                           pclath	equ	0xFFA
 22635                           tblptru	equ	0xFF8
 22636                           tblptrh	equ	0xFF7
 22637                           tblptrl	equ	0xFF6
 22638                           tablat	equ	0xFF5
 22639                           prodh	equ	0xFF4
 22640                           prodl	equ	0xFF3
 22641                           intcon	equ	0xFF2
 22642                           indf0	equ	0xFEF
 22643                           postinc0	equ	0xFEE
 22644                           fsr0h	equ	0xFEA
 22645                           fsr0l	equ	0xFE9
 22646                           wreg	equ	0xFE8
 22647                           indf1	equ	0xFE7
 22648                           postdec1	equ	0xFE5
 22649                           fsr1h	equ	0xFE2
 22650                           fsr1l	equ	0xFE1
 22651                           indf2	equ	0xFDF
 22652                           postinc2	equ	0xFDE
 22653                           fsr2h	equ	0xFDA
 22654                           fsr2l	equ	0xFD9
 22655                           status	equ	0xFD8
 22656                           
 22657 ;; *************** function _EUSART2_Receive_ISR *****************
 22658 ;; Defined at:
 22659 ;;		line 137 in file "mcc_generated_files/eusart2.c"
 22660 ;; Parameters:    Size  Location     Type
 22661 ;;		None
 22662 ;; Auto vars:     Size  Location     Type
 22663 ;;		None
 22664 ;; Return value:  Size  Location     Type
 22665 ;;                  1    wreg      void 
 22666 ;; Registers used:
 22667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22668 ;; Tracked objects:
 22669 ;;		On entry : 0/0
 22670 ;;		On exit  : 0/0
 22671 ;;		Unchanged: 0/0
 22672 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 22673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22677 ;;Total ram usage:        0 bytes
 22678 ;; Hardware stack levels used:    1
 22679 ;; This function calls:
 22680 ;;		Nothing
 22681 ;; This function is called by:
 22682 ;;		_INTERRUPT_InterruptManager
 22683 ;;		_EUSART2_Initialize
 22684 ;; This function uses a non-reentrant model
 22685 ;;
 22686                           
 22687                           	psect	text136
 22688  0134B2                     __ptext136:
 22689                           	opt stack 0
 22690  0134B2                     _EUSART2_Receive_ISR:
 22691                           	opt stack 18
 22692                           
 22693                           ;eusart2.c: 140: if(1 == RC2STAbits.OERR)
 22694                           
 22695                           ;incstack = 0
 22696  0134B2  010E               	movlb	14	; () banked
 22697  0134B4  A39D               	btfss	157,1,b	;volatile
 22698  0134B6  D002               	goto	i2l693
 22699                           
 22700                           ; BSR set to: 14
 22701                           ;eusart2.c: 141: {
 22702                           ;eusart2.c: 144: RC2STAbits.CREN = 0;
 22703  0134B8  999D               	bcf	157,4,b	;volatile
 22704                           
 22705                           ;eusart2.c: 145: RC2STAbits.CREN = 1;
 22706  0134BA  899D               	bsf	157,4,b	;volatile
 22707  0134BC                     i2l693:
 22708                           
 22709                           ; BSR set to: 14
 22710                           ;eusart2.c: 146: }
 22711                           ;eusart2.c: 149: eusart2RxBuffer[eusart2RxHead++] = RC2REG;
 22712                           
 22713                           ; BSR set to: 14
 22714  0134BC  5048               	movf	_eusart2RxHead,w,c	;volatile
 22715  0134BE  0D01               	mullw	1
 22716  0134C0  0E02               	movlw	low _eusart2RxBuffer
 22717  0134C2  24F3               	addwf	prodl,w,c
 22718  0134C4  6ED9               	movwf	fsr2l,c
 22719  0134C6  0E02               	movlw	high _eusart2RxBuffer
 22720  0134C8  20F4               	addwfc	prodh,w,c
 22721  0134CA  6EDA               	movwf	fsr2h,c
 22722  0134CC  CE99 FFDF          	movff	3737,indf2	;volatile
 22723                           
 22724                           ; BSR set to: 14
 22725  0134D0  2A48               	incf	_eusart2RxHead,f,c	;volatile
 22726                           
 22727                           ; BSR set to: 14
 22728                           ;eusart2.c: 153: }
 22729                           ;eusart2.c: 154: eusart2RxCount++;
 22730                           
 22731                           ; BSR set to: 14
 22732                           
 22733                           ; BSR set to: 14
 22734                           ;eusart2.c: 151: {
 22735                           ;eusart2.c: 152: eusart2RxHead = 0;
 22736                           
 22737                           ;eusart2.c: 150: if(sizeof(eusart2RxBuffer) <= eusart2RxHead)
 22738  0134D2  2A46               	incf	_eusart2RxCount,f,c	;volatile
 22739                           
 22740                           ; BSR set to: 14
 22741  0134D4  0012               	return		;funcret
 22742  0134D6                     __end_of_EUSART2_Receive_ISR:
 22743                           	opt stack 0
 22744                           pclatu	equ	0xFFB
 22745                           pclath	equ	0xFFA
 22746                           tblptru	equ	0xFF8
 22747                           tblptrh	equ	0xFF7
 22748                           tblptrl	equ	0xFF6
 22749                           tablat	equ	0xFF5
 22750                           prodh	equ	0xFF4
 22751                           prodl	equ	0xFF3
 22752                           intcon	equ	0xFF2
 22753                           indf0	equ	0xFEF
 22754                           postinc0	equ	0xFEE
 22755                           fsr0h	equ	0xFEA
 22756                           fsr0l	equ	0xFE9
 22757                           wreg	equ	0xFE8
 22758                           indf1	equ	0xFE7
 22759                           postdec1	equ	0xFE5
 22760                           fsr1h	equ	0xFE2
 22761                           fsr1l	equ	0xFE1
 22762                           indf2	equ	0xFDF
 22763                           postinc2	equ	0xFDE
 22764                           fsr2h	equ	0xFDA
 22765                           fsr2l	equ	0xFD9
 22766                           status	equ	0xFD8
 22767                           pclatu	equ	0xFFB
 22768                           pclath	equ	0xFFA
 22769                           tblptru	equ	0xFF8
 22770                           tblptrh	equ	0xFF7
 22771                           tblptrl	equ	0xFF6
 22772                           tablat	equ	0xFF5
 22773                           prodh	equ	0xFF4
 22774                           prodl	equ	0xFF3
 22775                           intcon	equ	0xFF2
 22776                           indf0	equ	0xFEF
 22777                           postinc0	equ	0xFEE
 22778                           fsr0h	equ	0xFEA
 22779                           fsr0l	equ	0xFE9
 22780                           wreg	equ	0xFE8
 22781                           indf1	equ	0xFE7
 22782                           postdec1	equ	0xFE5
 22783                           fsr1h	equ	0xFE2
 22784                           fsr1l	equ	0xFE1
 22785                           indf2	equ	0xFDF
 22786                           postinc2	equ	0xFDE
 22787                           fsr2h	equ	0xFDA
 22788                           fsr2l	equ	0xFD9
 22789                           status	equ	0xFD8
 22790                           
 22791                           	psect	text137
 22792  000000                     __ptext137:
 22793                           	opt stack 0
 22794                           pclatu	equ	0xFFB
 22795                           pclath	equ	0xFFA
 22796                           tblptru	equ	0xFF8
 22797                           tblptrh	equ	0xFF7
 22798                           tblptrl	equ	0xFF6
 22799                           tablat	equ	0xFF5
 22800                           prodh	equ	0xFF4
 22801                           prodl	equ	0xFF3
 22802                           intcon	equ	0xFF2
 22803                           indf0	equ	0xFEF
 22804                           postinc0	equ	0xFEE
 22805                           fsr0h	equ	0xFEA
 22806                           fsr0l	equ	0xFE9
 22807                           wreg	equ	0xFE8
 22808                           indf1	equ	0xFE7
 22809                           postdec1	equ	0xFE5
 22810                           fsr1h	equ	0xFE2
 22811                           fsr1l	equ	0xFE1
 22812                           indf2	equ	0xFDF
 22813                           postinc2	equ	0xFDE
 22814                           fsr2h	equ	0xFDA
 22815                           fsr2l	equ	0xFD9
 22816                           status	equ	0xFD8
 22817                           
 22818                           	psect	rparam
 22819  0000                     pclatu	equ	0xFFB
 22820                           pclath	equ	0xFFA
 22821                           tblptru	equ	0xFF8
 22822                           tblptrh	equ	0xFF7
 22823                           tblptrl	equ	0xFF6
 22824                           tablat	equ	0xFF5
 22825                           prodh	equ	0xFF4
 22826                           prodl	equ	0xFF3
 22827                           intcon	equ	0xFF2
 22828                           indf0	equ	0xFEF
 22829                           postinc0	equ	0xFEE
 22830                           fsr0h	equ	0xFEA
 22831                           fsr0l	equ	0xFE9
 22832                           wreg	equ	0xFE8
 22833                           indf1	equ	0xFE7
 22834                           postdec1	equ	0xFE5
 22835                           fsr1h	equ	0xFE2
 22836                           fsr1l	equ	0xFE1
 22837                           indf2	equ	0xFDF
 22838                           postinc2	equ	0xFDE
 22839                           fsr2h	equ	0xFDA
 22840                           fsr2l	equ	0xFD9
 22841                           status	equ	0xFD8
 22842                           
 22843                           	psect	temp
 22844  00004F                     btemp:
 22845                           	opt stack 0
 22846  00004F                     	ds	1
 22847  0000                     int$flags	set	btemp
 22848  0000                     wtemp6	set	btemp+1
 22849                           pclatu	equ	0xFFB
 22850                           pclath	equ	0xFFA
 22851                           tblptru	equ	0xFF8
 22852                           tblptrh	equ	0xFF7
 22853                           tblptrl	equ	0xFF6
 22854                           tablat	equ	0xFF5
 22855                           prodh	equ	0xFF4
 22856                           prodl	equ	0xFF3
 22857                           intcon	equ	0xFF2
 22858                           indf0	equ	0xFEF
 22859                           postinc0	equ	0xFEE
 22860                           fsr0h	equ	0xFEA
 22861                           fsr0l	equ	0xFE9
 22862                           wreg	equ	0xFE8
 22863                           indf1	equ	0xFE7
 22864                           postdec1	equ	0xFE5
 22865                           fsr1h	equ	0xFE2
 22866                           fsr1l	equ	0xFE1
 22867                           indf2	equ	0xFDF
 22868                           postinc2	equ	0xFDE
 22869                           fsr2h	equ	0xFDA
 22870                           fsr2l	equ	0xFD9
 22871                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    1760
    Data        2
    BSS         1955
    Persistent  12
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAMh          85     34      67
    COMRAMl           1      0       1
    BANK0           160     17     160
    BANK1           256      0     256
    BANK2           256      2       2
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    gsm_receive@messagebuf	PTR unsigned char  size(2) Largest target is 512
		 -> gsmusm(BANK1[256]), gsmmsg(BIGRAMh[512]), 

    gsm_msg@msgadd	PTR unsigned char  size(2) Largest target is 3719
		 -> clockw(CODE[9]), gsmtim(BANK0[23]), nettst(CODE[11]), ussdwc(CODE[11]), 
		 -> ussdwv(CODE[23]), ussdwm(CODE[19]), clockr(CODE[10]), facres(CODE[7]), 
		 -> netoff(CODE[11]), engqry(CODE[12]), ussdw2(CODE[21]), setgsm(CODE[15]), 
		 -> smsdel(CODE[20]), smstxt(CODE[11]), noecho(CODE[9]), RAM(DATA[3719]), 

    gsm_zerobuff@gsmsgbuf	PTR unsigned char  size(2) Largest target is 512
		 -> gsmums(BIGRAMh[512]), gsmusm(BANK1[256]), gsmmsg(BIGRAMh[512]), gstime(BANK0[10]), 
		 -> gsdate(BANK0[10]), 

    Read_NVstore@storemem	PTR unsigned char  size(2) Largest target is 3
		 -> pnvcash(COMRAMh[3]), pvcash(COMRAMh[2]), 

    Write_NVstore@storemem	PTR unsigned char  size(2) Largest target is 3
		 -> pnvcash(COMRAMh[3]), pvcash(COMRAMh[2]), 

    Init_vendmem@chanlink	PTR unsigned char  size(2) Largest target is 1
		 -> chanlink1(BIGRAMl[1]), 

    lcd_string@lcdstring	PTR unsigned char  size(2) Largest target is 80
		 -> twohundredrand(CODE[8]), hundredrand(CODE[8]), fiftyrand(CODE[8]), twentyrand(CODE[8]), 
		 -> tenrand(CODE[9]), setnotes(CODE[69]), chanresetmsg(CODE[32]), chanlinkm(CODE[55]), 
		 -> vendtimem(CODE[41]), setimemsg(CODE[41]), vendsetup(CODE[67]), pricesetm2(CODE[57]), 
		 -> pricesetmsg(CODE[18]), creditclr(CODE[16]), dacmsg(CODE[13]), hoppcoin(CODE[51]), 
		 -> totalvendsm(CODE[7]), vendispmsg(CODE[21]), totalmsg(CODE[8]), cashinmsg(CODE[10]), 
		 -> initnote(CODE[37]), gstime(BANK0[10]), clocktime(CODE[6]), gsdate(BANK0[10]), 
		 -> clockdate(CODE[6]), nochange(CODE[33]), noteerr(CODE[28]), credits(CODE[13]), 
		 -> timemsg(CODE[18]), clrline(CODE[21]), enabled(CODE[10]), disabled(CODE[10]), 
		 -> sensoffmsg(CODE[31]), sensmsg(CODE[11]), linkmsg(CODE[12]), chanmsg(CODE[12]), 
		 -> clrmsg(CODE[10]), onmsg(CODE[4]), offmsg(CODE[4]), servmsg(CODE[80]), 
		 -> emptymsg(CODE[9]), inscoin(CODE[39]), 

    displ_note@notestring	PTR unsigned char  size(2) Largest target is 9
		 -> twohundredrand(CODE[8]), hundredrand(CODE[8]), fiftyrand(CODE[8]), twentyrand(CODE[8]), 
		 -> tenrand(CODE[9]), 

    EUSART2_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> EUSART2_Receive_ISR(), 

    EUSART2_RxDefaultInterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), EUSART2_Receive_ISR(), 


Critical Paths under _main in COMRAMh

    _main->_mdb_init
    _vend_init->_mdb_init
    _mdb_init->_mdb_reset
    _mdb_security->_mdb_comm
    _mdb_reset->_mdb_comm
    _price_check->_give_change
    _mdb_noten->_mdb_comm
    _give_change->_hopper_pay
    _credit_subtract->_DATAEE_WriteByte
    _credit_add->_Update_cashaudit
    _Update_cashaudit->_Write_NVstore
    _dispense->_vend_dispense
    _vend_nosense->_mdb_unlock
    _vend_dispense->_set_motortime
    _set_motortime->___wmul
    _disable_channel->_DATAEE_WriteByte
    _update_vends->_DATAEE_WriteByte
    _mdb_poll->_mdb_comm
    _mdb_comm->_init_mdbdata
    _mdb_transmit->_EUSART1_Write
    _init_mdbdata->_init_pricestore
    _init_pricestore->_DATAEE_ReadByte
    _lcd_init->_lcd_test
    _lcd_test->_lcd_writeC
    _gsm_init->_gsm_setime
    _gsm_txAT->_gsm_transmit
    _gsm_setime->_gsm_msg
    _gsm_setime->_gsm_receive
    _gsm_getbalance->_gsm_msg
    _gsm_getbalance->_gsm_receive
    _gsm_gettime->_parse_date_time
    _parse_date_time->___awdiv
    _gsm_receive->_gsm_zerobuff
    _gsm_msg->_gsm_transmit
    _gsm_transmit->_EUSART2_Write
    _disp_clock->_lcd_string
    _enter_service->_Audit
    _enter_service->_Hopper_coin
    _enter_service->_Sensor_set
    _set_notes->_enable_notes
    _enable_notes->_displ_nendis
    _save_notes->_DATAEE_WriteByte
    _displ_nendis->_lcd_string
    _displ_note->_lcd_string
    _price_set->_set_price
    _set_price->_displ_price
    _displ_price->_displ_hex
    _mdb_unlock->_TMR1_Initialize
    _mdb_unlock->_TMR3_Initialize
    _mdb_unlock->_TMR5_Initialize
    _hopper_test->_hopper_pay
    _hopper_pay->_Update_coinsout
    _pay_coin->_Reset_hopper
    _pay_coin->_switch_read
    _Update_coinsout->_Write_NVstore
    _Write_NVstore->_DATAEE_WriteByte
    _Vend_timeset->_displ_time
    _displ_time->_displ_hex
    _off_sens->_displ_sflags
    _displ_sflags->_lcd_string
    _Reset_settings->_lcd_string
    _Init_vendmem->_DATAEE_ReadByte
    _Clear_Totals->_DATAEE_WriteByte
    _Link_chan->_displ_lflags
    _displ_lflags->_lcd_string
    _Sensor_set->_displ_sens
    _displ_sens->_displ_hex
    _Hopper_coin->_Update_Hopcoin
    _butindb->_butin
    _Update_Hopcoin->_displ_hex
    _Clear_cred->_lcd_string
    _Audit->_displ_hex
    _Read_NVstore->_DATAEE_ReadByte
    _displ_noteer->_lcd_string
    _displ_code->_lcd_writeC
    _displ_nochange->_lcd_string
    _displ_credit->_displ_hex
    _lcd_string->_lcd_writeC
    _displ_hex->___ltdiv
    _lcd_writeC->_lcd_dispadd
    _lcd_dispadd->_lcd_write
    _lcd_write->_read_busy
    _credit_check->_DATAEE_ReadByte
    _EUSART2_Initialize->_EUSART2_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAMh

    None.

Critical Paths under _main in COMRAMl

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAMl

    None.

Critical Paths under _main in BANK0

    _price_check->_dispense
    _price_set->_set_price
    _displ_price->_displ_hex
    _Vend_settime->_Vend_timeset
    _displ_time->_displ_hex
    _Sens_off->_off_sens
    _Chan_link->_Link_chan
    _displ_sens->_displ_hex
    _Hopper_coin->_displ_hex
    _Update_Hopcoin->_displ_hex
    _Audit->_displ_hex
    _displ_credit->_displ_hex

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  687819
                                             16 BANK0      1     1      0
                                              0 BANK2      2     2      0
               _CMP1_GetOutputStatus
                    _DATAEE_ReadByte
                  _SYSTEM_Initialize
                              _butin
                         _credit_add
                       _displ_credit
                     _displ_nochange
                       _displ_noteer
                        _displ_price
                      _enter_service
                        _get_channel
                           _gsm_init
                            _gsm_off
                             _gsm_on
                           _lcd_init
                         _lcd_string
                           _mdb_init
                           _mdb_poll
                        _price_check
                          _vend_init
 ---------------------------------------------------------------------------------
 (1) _vend_init                                            0     0      0   43417
                     _DAC1_SetOutput
                    _DATAEE_ReadByte
                       _Init_vendmem
                       _credit_check
                     _find_highprice
                      _find_lowprice
                         _lcd_string
                           _mdb_init
 ---------------------------------------------------------------------------------
 (2) _mdb_init                                             3     3      0   22774
                                             31 COMRAMh    3     3      0
                    _DATAEE_ReadByte
               _eusartmdb_Initialize
                           _mdb_comm
                          _mdb_noten
                          _mdb_reset
                       _mdb_security
 ---------------------------------------------------------------------------------
 (3) _mdb_security                                         0     0      0    6403
                       _init_mdbdata
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _mdb_reset                                            3     3      0    3760
                                             28 COMRAMh    3     3      0
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _eusartmdb_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _find_lowprice                                        2     2      0      99
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _find_highprice                                       2     2      0      99
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _DAC1_SetOutput                                       1     1      0      31
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (1) _price_check                                          6     6      0   90519
                                              2 BANK0      6     6      0
                    _DATAEE_ReadByte
                              _butin
                       _credit_check
                    _credit_subtract
                           _dispense
                        _get_channel
                        _give_change
                         _lcd_string
                       _note_disable
 ---------------------------------------------------------------------------------
 (2) _note_disable                                         0     0      0    6403
                          _mdb_noten
 ---------------------------------------------------------------------------------
 (3) _mdb_noten                                            0     0      0    6403
                       _init_mdbdata
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (2) _give_change                                          2     2      0   39623
                                             31 COMRAMh    2     2      0
                    _DATAEE_ReadByte
                            ___lbdiv
                         _credit_add
                    _credit_subtract
                         _hopper_pay
 ---------------------------------------------------------------------------------
 (3) _credit_subtract                                      1     1      0    6790
                                             22 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _credit_add                                           1     1      0   16186
                                             29 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                   _Update_cashaudit
 ---------------------------------------------------------------------------------
 (4) _Update_cashaudit                                     1     1      0    9365
                                             28 COMRAMh    1     1      0
                       _Read_NVstore
                      _Write_NVstore
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     331
                                             18 COMRAMh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _dispense                                             2     2      0   19713
                                              0 BANK0      2     2      0
                    _DATAEE_ReadByte
                       _update_vends
                      _vend_dispense
                       _vend_nosense
 ---------------------------------------------------------------------------------
 (3) _vend_nosense                                         3     3      0      31
                                             22 COMRAMh    3     3      0
                         _mdb_unlock
 ---------------------------------------------------------------------------------
 (3) _vend_dispense                                        3     3      0   10205
                                             30 COMRAMh    3     3      0
                     _TMR0_StopTimer
                    _disable_channel
                         _mdb_unlock
                      _set_motortime
 ---------------------------------------------------------------------------------
 (4) _set_motortime                                        6     6      0    3189
                                             24 COMRAMh    6     6      0
                    _DATAEE_ReadByte
                    _TMR0_StartTimer
                     _TMR0_StopTimer
                    _TMR0_WriteTimer
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     412
                                             18 COMRAMh    6     2      4
 ---------------------------------------------------------------------------------
 (5) _TMR0_WriteTimer                                      2     0      2     152
                                             18 COMRAMh    2     0      2
 ---------------------------------------------------------------------------------
 (5) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _disable_channel                                      4     4      0    6892
                                             22 COMRAMh    4     4      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _update_vends                                         4     4      0    6858
                                             22 COMRAMh    4     4      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (1) _mdb_poll                                             1     1      0    3716
                                             28 COMRAMh    1     1      0
                    _TMR3_Initialize
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (4) _mdb_comm                                             3     2      1    3713
                                             25 COMRAMh    3     2      1
                       _EUSART1_Read
                    _TMR1_Initialize
                       _init_mdbdata
                             _mdb_on
                       _mdb_transmit
                          _mdb_waitr
 ---------------------------------------------------------------------------------
 (5) _mdb_waitr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _mdb_transmit                                         1     1      0      62
                                             19 COMRAMh    1     1      0
                      _EUSART1_Write
                          _mdb_waitx
 ---------------------------------------------------------------------------------
 (6) _mdb_waitx                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      31
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (5) _mdb_on                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _init_mdbdata                                         2     2      0    2690
                                             23 COMRAMh    2     2      0
                    _init_pricestore
 ---------------------------------------------------------------------------------
 (6) _init_pricestore                                      3     3      0    2591
                                             20 COMRAMh    3     3      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     687
                                             26 COMRAMh    2     2      0
                         _lcd_clockE
                           _lcd_test
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_test                                             1     1      0     523
                                             25 COMRAMh    1     1      0
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (1) _gsm_off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _gsm_init                                             2     2      0   40343
                                              0 BANK0      2     2      0
                      _clock_display
                     _gsm_getbalance
                            _gsm_msg
                        _gsm_netwait
                             _gsm_on
                        _gsm_receive
                         _gsm_setime
                       _gsm_transmit
                           _gsm_txAT
                       _gsm_zerobuff
 ---------------------------------------------------------------------------------
 (2) _gsm_txAT                                             0     0      0      62
                       _gsm_transmit
 ---------------------------------------------------------------------------------
 (2) _gsm_setime                                           6     6      0    6963
                                             28 COMRAMh    6     6      0
                       _EUSARTG_Read
                            _gsm_msg
                        _gsm_receive
                       _gsm_zerobuff
 ---------------------------------------------------------------------------------
 (1) _gsm_on                                               0     0      0       0
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _gsm_netwait                                          1     1      0      71
                                             18 COMRAMh    1     1      0
                       _EUSARTG_Read
 ---------------------------------------------------------------------------------
 (2) _gsm_getbalance                                       0     0      0    4663
                            _gsm_msg
                        _gsm_receive
 ---------------------------------------------------------------------------------
 (2) _clock_display                                        0     0      0   22649
                    _TMR2_Initialize
                         _disp_clock
                        _gsm_gettime
                        _gsm_receive
 ---------------------------------------------------------------------------------
 (3) _gsm_gettime                                          0     0      0    6940
                            _gsm_msg
                        _gsm_receive
                    _parse_date_time
 ---------------------------------------------------------------------------------
 (4) _parse_date_time                                      8     8      0    2277
                                             26 COMRAMh    8     8      0
                            ___awdiv
                       _gsm_zerobuff
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                             18 COMRAMh    8     4      4
 ---------------------------------------------------------------------------------
 (3) _gsm_receive                                          4     2      2    2873
                                             24 COMRAMh    4     2      2
                       _EUSARTG_Read
                       _gsm_zerobuff
 ---------------------------------------------------------------------------------
 (2) _gsm_zerobuff                                         6     2      4    1210
                                             18 COMRAMh    6     2      4
 ---------------------------------------------------------------------------------
 (4) _EUSARTG_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _gsm_msg                                              8     6      2    1790
                                             20 COMRAMh    8     6      2
                       _gsm_transmit
 ---------------------------------------------------------------------------------
 (3) _gsm_transmit                                         1     1      0      62
                                             19 COMRAMh    1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART2_Write                                        1     1      0      31
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (3) _disp_clock                                           0     0      0   12836
                         _lcd_string
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _enter_service                                        0     0      0  407632
                              _Audit
                         _Clear_cred
                        _Hopper_coin
                         _Sensor_set
                         _Vend_setup
                            _butindb
                        _hopper_test
                         _lcd_string
                         _mdb_unlock
                          _price_set
                          _set_notes
 ---------------------------------------------------------------------------------
 (2) _set_notes                                            0     0      0   56160
                            _butindb
                         _displ_note
                       _enable_notes
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _enable_notes                                         1     1      0   30001
                                             32 COMRAMh    1     1      0
                            _butindb
                       _displ_nendis
                         _lcd_string
                         _save_notes
 ---------------------------------------------------------------------------------
 (4) _save_notes                                           0     0      0    4267
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (4) _displ_nendis                                         2     2      0   12737
                                             30 COMRAMh    2     2      0
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _displ_note                                           2     0      2   13317
                                             30 COMRAMh    2     0      2
                         _lcd_string
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _price_set                                            0     0      0   35983
                       _Read_Service
                            _butindb
                         _lcd_string
                          _set_price
 ---------------------------------------------------------------------------------
 (3) _set_price                                            4     4      0   23107
                                             32 COMRAMh    2     2      0
                                             12 BANK0      2     2      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                        _displ_price
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _displ_price                                          1     1      0    3280
                                             31 COMRAMh    1     1      0
                          _displ_hex
                        _lcd_dispadd
                          _lcd_write
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (4) _mdb_unlock                                           2     2      0       0
                                             20 COMRAMh    2     2      0
                    _CMP1_Initialize
                    _DAC1_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _hopper_test                                          0     0      0   13697
                         _hopper_pay
 ---------------------------------------------------------------------------------
 (3) _hopper_pay                                           2     2      0   13697
                                             29 COMRAMh    2     2      0
                   _DATAEE_WriteByte
                    _Update_coinsout
                         _cctalk_off
                          _cctalk_on
                           _pay_coin
 ---------------------------------------------------------------------------------
 (4) _pay_coin                                             0     0      0       0
                       _Reset_hopper
                    _TMR2_Initialize
                    _TMR4_Initialize
                         _cctalk_off
                          _cctalk_on
                        _switch_read
 ---------------------------------------------------------------------------------
 (5) _switch_read                                          2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _Reset_hopper                                         2     2      0       0
                                             18 COMRAMh    2     2      0
                    _TMR4_Initialize
                         _cctalk_off
                          _cctalk_on
 ---------------------------------------------------------------------------------
 (5) _cctalk_on                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _cctalk_off                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Update_coinsout                                      1     1      0    9334
                                             28 COMRAMh    1     1      0
                       _Read_NVstore
                      _Write_NVstore
 ---------------------------------------------------------------------------------
 (5) _Write_NVstore                                        6     1      5    5269
                                             22 COMRAMh    6     1      5
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _Vend_setup                                           0     0      0  179080
                          _Chan_link
                       _Clear_Totals
                       _Init_vendmem
                     _Reset_settings
                           _Sens_off
                       _Vend_settime
                            _butindb
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _Vend_settime                                         0     0      0   48755
                       _Read_Service
                       _Vend_timeset
                            _butindb
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _Vend_timeset                                         4     4      0   35814
                                             12 BANK0      4     4      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                         _displ_time
                         _lcd_string
 ---------------------------------------------------------------------------------
 (5) _displ_time                                           2     1      1   15863
                                             31 COMRAMh    2     1      1
                          _displ_hex
                         _lcd_string
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Sens_off                                             2     2      0   46748
                                              3 BANK0      2     2      0
                       _Read_Service
                            _butindb
                        _get_channel
                         _lcd_string
                           _off_sens
 ---------------------------------------------------------------------------------
 (4) _off_sens                                             3     3      0   33807
                                              0 BANK0      3     3      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                       _displ_sflags
                         _lcd_string
 ---------------------------------------------------------------------------------
 (5) _displ_sflags                                         3     1      2   13729
                                             30 COMRAMh    3     1      2
                         _lcd_string
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Reset_settings                                       6     6      0   17075
                                             30 COMRAMh    2     2      0
                                              0 BANK0      4     4      0
                   _DATAEE_WriteByte
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Init_vendmem                                         7     7      0    2758
                                             20 COMRAMh    7     7      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _Clear_Totals                                         2     2      0    4335
                                             22 COMRAMh    2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _Chan_link                                            2     2      0   46567
                                              5 BANK0      2     2      0
                          _Link_chan
                       _Read_Service
                            _butindb
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _Link_chan                                            5     5      0   33626
                                              0 BANK0      5     5      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                       _Read_Service
                            _butindb
                       _displ_lflags
                         _lcd_string
 ---------------------------------------------------------------------------------
 (5) _displ_lflags                                         3     2      1   13669
                                             30 COMRAMh    3     2      1
                        _lcd_dispadd
                         _lcd_string
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Read_Service                                         1     1      0      34
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (2) _Sensor_set                                           1     1      0   33053
                                             33 COMRAMh    1     1      0
                            _butindb
                         _displ_sens
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _displ_sens                                           2     1      1   20084
                                             31 COMRAMh    2     1      1
               _CMP1_GetOutputStatus
                   _DATAEE_WriteByte
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Hopper_coin                                          1     1      0   38081
                                             33 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                     _Update_Hopcoin
                            _butindb
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _butindb                                              4     4      0     170
                                             21 COMRAMh    4     4      0
                              _butin
 ---------------------------------------------------------------------------------
 (3) _Update_Hopcoin                                       2     1      1   19987
                                             31 COMRAMh    2     1      1
                   _DATAEE_WriteByte
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Clear_cred                                           2     2      0   16939
                                             30 COMRAMh    2     2      0
                   _DATAEE_WriteByte
                         _lcd_string
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     4     1      3    4267
                                             18 COMRAMh    4     1      3
 ---------------------------------------------------------------------------------
 (2) _Audit                                                3     3      0   21797
                                             31 COMRAMh    3     3      0
               _CMP1_GetOutputStatus
                    _DATAEE_ReadByte
                       _Read_NVstore
                              _butin
                          _displ_hex
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _get_channel                                          1     1      0      65
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (2) _butin                                                3     3      0      68
                                             18 COMRAMh    3     3      0
 ---------------------------------------------------------------------------------
 (5) _Read_NVstore                                         6     1      5    4034
                                             20 COMRAMh    6     1      5
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (4) _CMP1_GetOutputStatus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displ_noteer                                         0     0      0   13282
                         _displ_code
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _displ_code                                           3     3      0     610
                                             25 COMRAMh    3     3      0
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (1) _displ_nochange                                       0     0      0   12901
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _displ_credit                                         1     1      0   17630
                                             31 COMRAMh    1     1      0
                       _credit_check
                          _displ_hex
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           5     2      3   12672
                                             25 COMRAMh    5     2      3
                        _lcd_dispadd
                          _lcd_write
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (5) _displ_hex                                           15    12      3    2432
                                             28 COMRAMh    3     0      3
                                              0 BANK0     12    12      0
                            ___ltdiv
                            ___ltmod
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _lcd_writeC                                           1     1      0     424
                                             24 COMRAMh    1     1      0
                        _lcd_dispadd
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_dispadd                                          2     2      0     229
                                             22 COMRAMh    2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            2     2      0     164
                                             20 COMRAMh    2     2      0
                         _lcd_clockE
                          _read_busy
 ---------------------------------------------------------------------------------
 (5) _read_busy                                            2     2      0      68
                                             18 COMRAMh    2     2      0
                         _lcd_clockH
                         _lcd_clockL
 ---------------------------------------------------------------------------------
 (6) _lcd_clockL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _lcd_clockH                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _lcd_clockE                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___ltmod                                              7     1      6     412
                                             18 COMRAMh    7     1      6
 ---------------------------------------------------------------------------------
 (6) ___ltdiv                                             10     4      6     421
                                             18 COMRAMh   10     4      6
 ---------------------------------------------------------------------------------
 (2) _credit_check                                         0     0      0    2492
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (7) _DATAEE_ReadByte                                      2     0      2    2492
                                             18 COMRAMh    2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     121
                    _CMP1_Initialize
                    _DAC1_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (5) _TMR5_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR3_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR1_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0     121
      _EUSART2_SetRxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART2_SetRxInterruptHandler                        3     0      3     121
                                             18 COMRAMh    3     0      3
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _DAC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                         18    18      0       0
                                              0 COMRAMh   18    18      0
                _EUSART2_Receive_ISR
 ---------------------------------------------------------------------------------
 (13) _EUSART2_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CMP1_GetOutputStatus
   _DATAEE_ReadByte
   _SYSTEM_Initialize
     _CMP1_Initialize
     _DAC1_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
       _EUSART2_SetRxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
   _butin
   _credit_add
     _DATAEE_ReadByte
     _DATAEE_WriteByte
     _Update_cashaudit
       _Read_NVstore
         _DATAEE_ReadByte
       _Write_NVstore
         _DATAEE_WriteByte
   _displ_credit
     _credit_check
       _DATAEE_ReadByte
     _displ_hex
       ___ltdiv
       ___ltmod
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_nochange
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_noteer
     _displ_code
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_price
     _displ_hex
       ___ltdiv
       ___ltmod
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
     _lcd_writeC
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
   _enter_service
     _Audit
       _CMP1_GetOutputStatus
       _DATAEE_ReadByte
       _Read_NVstore
         _DATAEE_ReadByte
       _butin
       _displ_hex
         ___ltdiv
         ___ltmod
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _get_channel
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Clear_cred
       _DATAEE_WriteByte
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Hopper_coin
       _DATAEE_ReadByte
       _Update_Hopcoin
         _DATAEE_WriteByte
         _displ_hex
           ___ltdiv
           ___ltmod
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _butindb
         _butin
       _displ_hex
         ___ltdiv
         ___ltmod
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Sensor_set
       _butindb
         _butin
       _displ_sens
         _CMP1_GetOutputStatus
         _DATAEE_WriteByte
         _displ_hex
           ___ltdiv
           ___ltmod
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Vend_setup
       _Chan_link
         _Link_chan
           _DATAEE_ReadByte
           _DATAEE_WriteByte
           _Read_Service
           _butindb
             _butin
           _displ_lflags
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_string
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _Read_Service
         _butindb
           _butin
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _Clear_Totals
         _DATAEE_WriteByte
       _Init_vendmem
         _DATAEE_ReadByte
       _Reset_settings
         _DATAEE_WriteByte
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _Sens_off
         _Read_Service
         _butindb
           _butin
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _off_sens
           _DATAEE_ReadByte
           _DATAEE_WriteByte
           _butindb
             _butin
           _displ_sflags
             _lcd_string
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
       _Vend_settime
         _Read_Service
         _Vend_timeset
           _DATAEE_ReadByte
           _DATAEE_WriteByte
           _butindb
             _butin
           _displ_time
             _displ_hex
               ___ltdiv
               ___ltmod
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_string
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _butindb
           _butin
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _butindb
         _butin
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _butindb
       _butin
     _hopper_test
       _hopper_pay
         _DATAEE_WriteByte
         _Update_coinsout
           _Read_NVstore
             _DATAEE_ReadByte
           _Write_NVstore
             _DATAEE_WriteByte
         _cctalk_off
         _cctalk_on
         _pay_coin
           _Reset_hopper
             _TMR4_Initialize
             _cctalk_off
             _cctalk_on
           _TMR2_Initialize
           _TMR4_Initialize
           _cctalk_off
           _cctalk_on
           _switch_read
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _mdb_unlock
       _CMP1_Initialize
       _DAC1_Initialize
       _TMR1_Initialize
       _TMR3_Initialize
       _TMR5_Initialize
     _price_set
       _Read_Service
       _butindb
         _butin
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _set_price
         _DATAEE_ReadByte
         _DATAEE_WriteByte
         _butindb
           _butin
         _displ_price
           _displ_hex
             ___ltdiv
             ___ltmod
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
     _set_notes
       _butindb
         _butin
       _displ_note
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _enable_notes
         _butindb
           _butin
         _displ_nendis
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _save_notes
           _DATAEE_WriteByte
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
   _get_channel
   _gsm_init
     _clock_display
       _TMR2_Initialize
       _disp_clock
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _gsm_gettime
         _gsm_msg
           _gsm_transmit
             _EUSART2_Write
         _gsm_receive
           _EUSARTG_Read
           _gsm_zerobuff
         _parse_date_time
           ___awdiv
           _gsm_zerobuff
       _gsm_receive
         _EUSARTG_Read
         _gsm_zerobuff
     _gsm_getbalance
       _gsm_msg
         _gsm_transmit
           _EUSART2_Write
       _gsm_receive
         _EUSARTG_Read
         _gsm_zerobuff
     _gsm_msg
       _gsm_transmit
         _EUSART2_Write
     _gsm_netwait
       _EUSARTG_Read
     _gsm_on
       _TMR4_Initialize
     _gsm_receive
       _EUSARTG_Read
       _gsm_zerobuff
     _gsm_setime
       _EUSARTG_Read
       _gsm_msg
         _gsm_transmit
           _EUSART2_Write
       _gsm_receive
         _EUSARTG_Read
         _gsm_zerobuff
       _gsm_zerobuff
     _gsm_transmit
       _EUSART2_Write
     _gsm_txAT
       _gsm_transmit
         _EUSART2_Write
     _gsm_zerobuff
   _gsm_off
   _gsm_on
     _TMR4_Initialize
   _lcd_init
     _lcd_clockE
     _lcd_test
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
   _lcd_string
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
     _lcd_writeC
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
   _mdb_init
     _DATAEE_ReadByte
     _eusartmdb_Initialize
     _mdb_comm
       _EUSART1_Read
       _TMR1_Initialize
       _init_mdbdata
         _init_pricestore
           _DATAEE_ReadByte
       _mdb_on
       _mdb_transmit
         _EUSART1_Write
         _mdb_waitx
       _mdb_waitr
     _mdb_noten
       _init_mdbdata
         _init_pricestore
           _DATAEE_ReadByte
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
     _mdb_reset
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
     _mdb_security
       _init_mdbdata
         _init_pricestore
           _DATAEE_ReadByte
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
   _mdb_poll
     _TMR3_Initialize
     _mdb_comm
       _EUSART1_Read
       _TMR1_Initialize
       _init_mdbdata
         _init_pricestore
           _DATAEE_ReadByte
       _mdb_on
       _mdb_transmit
         _EUSART1_Write
         _mdb_waitx
       _mdb_waitr
   _price_check
     _DATAEE_ReadByte
     _butin
     _credit_check
       _DATAEE_ReadByte
     _credit_subtract
       _DATAEE_ReadByte
       _DATAEE_WriteByte
     _dispense
       _DATAEE_ReadByte
       _update_vends
         _DATAEE_ReadByte
         _DATAEE_WriteByte
       _vend_dispense
         _TMR0_StopTimer
         _disable_channel
           _DATAEE_ReadByte
           _DATAEE_WriteByte
         _mdb_unlock
           _CMP1_Initialize
           _DAC1_Initialize
           _TMR1_Initialize
           _TMR3_Initialize
           _TMR5_Initialize
         _set_motortime
           _DATAEE_ReadByte
           _TMR0_StartTimer
           _TMR0_StopTimer
           _TMR0_WriteTimer
           ___wmul
       _vend_nosense
         _mdb_unlock
           _CMP1_Initialize
           _DAC1_Initialize
           _TMR1_Initialize
           _TMR3_Initialize
           _TMR5_Initialize
     _get_channel
     _give_change
       _DATAEE_ReadByte
       ___lbdiv
       _credit_add
         _DATAEE_ReadByte
         _DATAEE_WriteByte
         _Update_cashaudit
           _Read_NVstore
             _DATAEE_ReadByte
           _Write_NVstore
             _DATAEE_WriteByte
       _credit_subtract
         _DATAEE_ReadByte
         _DATAEE_WriteByte
       _hopper_pay
         _DATAEE_WriteByte
         _Update_coinsout
           _Read_NVstore
             _DATAEE_ReadByte
           _Write_NVstore
             _DATAEE_WriteByte
         _cctalk_off
         _cctalk_on
         _pay_coin
           _Reset_hopper
             _TMR4_Initialize
             _cctalk_off
             _cctalk_on
           _TMR2_Initialize
           _TMR4_Initialize
           _cctalk_off
           _cctalk_on
           _switch_read
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _note_disable
       _mdb_noten
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
             _init_pricestore
               _DATAEE_ReadByte
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
   _vend_init
     _DAC1_SetOutput
     _DATAEE_ReadByte
     _Init_vendmem
       _DATAEE_ReadByte
     _credit_check
       _DATAEE_ReadByte
     _find_highprice
     _find_lowprice
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _mdb_init
       _DATAEE_ReadByte
       _eusartmdb_Initialize
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
       _mdb_noten
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
             _init_pricestore
               _DATAEE_ReadByte
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
       _mdb_reset
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
             _init_pricestore
               _DATAEE_ReadByte
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
       _mdb_security
         _init_mdbdata
           _init_pricestore
             _DATAEE_ReadByte
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
             _init_pricestore
               _DATAEE_ReadByte
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART2_Receive_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMh            E7D      0     600      37       41.4%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      33        0.0%
BANK13             100      0       0      34        0.0%
BITBANK12          100      0       0      31        0.0%
BANK12             100      0       0      32        0.0%
BITBANK11          100      0       0      29        0.0%
BANK11             100      0       0      30        0.0%
BITBANK10          100      0       0      27        0.0%
BANK10             100      0       0      28        0.0%
BITBANK9           100      0       0      24        0.0%
BANK9              100      0       0      25        0.0%
BITBANK8           100      0       0      22        0.0%
BANK8              100      0       0      23        0.0%
BITBANK7           100      0       0      20        0.0%
BANK7              100      0       0      21        0.0%
BITBANK6           100      0       0      18        0.0%
BANK6              100      0       0      19        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      17        0.0%
BITBANK4           100      0       0      14        0.0%
BANK4              100      0       0      15        0.0%
BITBANK3           100      0       0      12        0.0%
BANK3              100      0       0      13        0.0%
BITBANK2           100      0       0      10        0.0%
BANK2              100      2       2      11        0.8%
BITBANK1           100      0       0       8        0.0%
BANK1              100      0     100       9      100.0%
BITBANK0            A0      0       0       6        0.0%
BANK0               A0     11      A0       7      100.0%
BITBANK14           88      0       0      35        0.0%
BANK14              88      0       0      36        0.0%
COMRAMh             55     22      43       2       78.8%
BITCOMRAMh          55      0       0       0        0.0%
BIGRAMl              2      0       0      38        0.0%
BITCOMRAMl           1      0       0       1        0.0%
COMRAMl              1      0       1       3      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       4        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1E6      26        0.0%
DATA                 0      0     7E6       5        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Nov  2 14:14:36 2018

                             lcd_writeC@lcdata 0023                         __end_of_displ_nochange 3340  
                         __end_of_Clear_Totals 30A4                         disable_channel@channel 0023  
                              ??_clock_display 002D                              ??_disable_channel 0021  
                                 _update_vends 2B58                                   ?_displ_price 0000  
                                  __CFG_CP$OFF 000000                              ??_CMP1_Initialize 001D  
                                 ___awdiv@sign 0022                                  ?_displ_credit 0000  
                          ___wmul@multiplicand 001F                                ??_vend_dispense 0029  
                                ?_displ_lflags 0029                                  ?_displ_nendis 000B  
                                ?_displ_sflags 0029                                lcd_write@lcdata 0020  
                                ?_displ_noteer 0000                                    __CFG_LVP$ON 000000  
                                          LATE 000F87                                _DAC1_Initialize 3754  
                                          l114 36D2                                            l290 3142  
                                          _PR2 000FBC                                            _PR4 000FB6  
                                 __CFG_CPD$OFF 000000                                _timer1ReloadVal 00FB  
                      __size_of_PMD_Initialize 001C                                _TMR2_Initialize 3578  
                                          prod 000FF3                                            wreg 000FE8  
                             ??_Update_Hopcoin 002B                        __end_of_parse_date_time 08A0  
                               _DAC1_SetOutput 377E                                   ?_give_change 000B  
                               ??_credit_check 001F                                    main@channel 00F1  
                                 _BAUD1CONbits 000F9F                                   __CFG_ZCD$OFF 000000  
                                ?_mdb_security 0000                                           l1260 0A94  
                                         l1252 0A6A                                           l1270 0AD8  
                                         l1262 0A9A                                           l1271 0AEA  
                                         l1255 0A7C                                           l3200 131C  
                                         l1248 0A24                                           l3201 1332  
                                         l1265 0AA0                                           l1257 0AD2  
                                         l3202 1348                                           l1290 1DB0  
                                         l1274 0B6C                                           l1258 0AC8  
                                         l3211 25BA                                           l3203 135E  
                                         l1291 1DB6                                           l1275 0B28  
                                         l1259 0AAC                                           l1267 0AA6  
                              _timer3ReloadVal 00F9                                           l2420 1B06  
                                         l3212 260E                                           l3204 1374  
                                         l1292 1DBE                                           l1284 1D96  
                                         l2421 1AE2                                           l3213 25C2  
                                         l1285 1DD6                                           l1293 1DC4  
                                         l3214 2622                                           l1294 1DCA  
                                         l1286 1D9E                                           l2430 15EE  
                                         l2503 234E                                           l2511 233E  
                                         l2423 1B4E                                           l3215 25D4  
                                         l1287 1E0E                                           l1295 1DD0  
                                         l2431 1676                                           l2504 2326  
                                         l2424 1B12                                           l3216 25E8  
                                         l1288 1DA4                                           l3240 0BB6  
                                         l1289 1DAA                                           l3241 0BBE  
                                         l2442 3302                                           l2514 234A  
                                         l2522 17B2                                           l3250 0C06  
                                         l3242 0BC6                                           l2443 32DE  
                                         l2507 2364                                           l2523 1808  
                                         l2603 16C8                                           l3251 0C0A  
                                         l3243 0BCE                                           l2451 2C06  
                                         l2508 2330                                           l2524 17BA  
                                         l2620 25A8                                           l2436 322C  
                                         l3180 346A                                           l3260 0C34  
                                         l3252 0C14                                           l3236 0BD8  
                                         l3228 2EA8                                           l2509 233A  
                                         l2525 181C                                           l2605 16EA  
                                         l2437 3206                                           l3261 0C38  
                                         l3253 0C18                                           l3237 0BA6  
                                         l2429 15EC                                           l1910 2870  
                                         l2462 2EF2                                           l2526 17D0  
                                         l1830 2206                                           l2630 1260  
                                         l3270 1194                                           l3246 0C3E  
                                         l3254 0C1C                                           l1911 2886  
                                         l1823 2646                                           l2527 17E6  
                                         l2607 174C                                           l2631 129A  
                                         l2615 2552                                           l2551 0DF8  
                                         l3271 116A                                           l3255 0C20  
                                         l3247 0BFA                                           l3239 0BAE  
                                         l2544 35A6                                           l2464 2F04  
                                         l1824 2656                                           l2528 182C  
                                         l2608 172C                                           l2640 144E  
                                         l2552 0EB0                                           l3256 0C24  
                                         l3248 0C02                                           l2545 359E  
                                         l2481 05AC                                           l2465 2EFE  
                                         l2553 0E02                                           l2537 24F2  
                                         l3265 1138                                           l3257 0C28  
                                         l3249 0C90                                           l2626 121C  
                                         l2618 2588                                           l2570 0F8C  
                                         l2562 0EEE                                           l4250 36AC  
                                         l2554 0EC6                                           l2538 2504  
                                         l3266 1108                                           l3258 0C2C  
                                         l1907 289C                                           l1835 1C9E  
                                         l2627 12BC                                           l2619 259E  
                                         l2563 0FB2                                           l2555 0E38  
                                         l2539 250E                                           l3195 13C2  
                                         l3179 3480                                           l3259 0C30  
                                         l1908 285A                                           l1860 100C  
                                         l2476 04CA                                           l2492 1902  
                                         l1828 220E                                           l2636 1416  
                                         l2628 1224                                           l2564 0EF6  
                                         l4260 2718                                           l2556 0E70  
                                         l3196 12FA                                           l3188 2234  
                                         l1909 28B0                                           l1861 1014  
                                         l2477 057E                                           l2493 188A  
                                         l1829 21EE                                           l2637 1400  
                                         l2629 12D0                                           l2565 0FD8  
                                         l4261 2762                                           l3197 1396  
                                         l1925 364A                                           l3269 1160  
                                         l3189 221A                                           l1870 108C  
                                         l1862 101C                                           l2494 18D0  
                                         l2486 3094                                           l2566 0F1A  
                                         l1846 3394                                           l3198 1306  
                                         l3278 11DA                                           l1919 33B2  
                                         l1871 1094                                           l1863 1024  
                                         l2479 0556                                           l2495 1892  
                                         l2487 3080                                           l2639 1464  
                                         l2567 0F3E                                           l4271 2132  
                                         l3199 13BC                                           l1880 1BC8  
                                         l1872 109C                                           l1856 102C  
                                         l2496 18E4                                           l2584 0CF4  
                                         l2576 2E30                                           l2568 0F62  
                                         l1881 1B6A                                           l1873 10A4  
                                         l1857 0FFC                                           l2497 189E  
                                         l2585 0D9A                                           l2577 2E46  
                                         l2569 0F68                                           l4273 2114  
                                         l5401 08BE                                           l1890 14E4  
                                         l1866 10AC                                           l1858 1062  
                                         l2498 18AA                                           l2586 0CFC  
                                         l2578 2E50                                           l4266 30DC  
                                         l4282 213C                                           l5410 3042  
                                         l1883 1BEE                                           l1891 14EC  
                                         l1867 107C                                           l1859 1004  
                                         l2595 299E                                           l2587 0DAE  
                                         l4291 2188                                           l4259 2766  
                                         l5411 3056                                           l5403 0920  
                                         l1884 1BD4                                           l1892 1566  
                                         l2596 29CE                                           l2588 0D3A  
                                         l4284 2154                                           l5420 07B8  
                                         l5404 094A                                           l1893 14F2  
                                         l1869 1084                                           l2597 29D8  
                                         l2589 0D78                                           l4277 212E  
                                         l4287 216A                                           l5423 0864  
                                         l5503 293E                                           l4296 2C3E  
                                         l5424 07DA                                           l5408 302E  
                                         l5504 2922                                           l5440 0020  
                                         l4297 2C56                                           l5417 07CC  
                                         l4298 2C60                                           l5426 0898  
                                         l5506 2964                                           l5450 0084  
                                         l5442 002A                                           l4810 2FDE  
                                         l5427 0870                                           l5419 07C4  
                                         l5435 26D6                                           l5507 2948  
                                         l5451 0068                                           l5443 0034  
                                         l5380 3694                                           l5516 36E4  
                                         l5436 26F0                                           l5444 0390  
                                         l5453 0198                                           l5454 00AC  
                                         l5391 1E1E                                           l5455 016E  
                                         l5447 005E                                           l4815 2FA0  
                                         l5392 1E6E                                           l5480 2D0A  
                                         l5448 0058                                           l4808 2FE0  
                                         l4816 2F72                                           l5393 1E2E  
                                         l5385 3454                                           l5457 02B2  
                                         l4825 2E98                                           l4809 2FB2  
                                         l4817 2F9E                                           l5386 3440  
                                         l5458 01C6                                           l4826 2E5C  
                                         l5459 0288                                           l4771 061E  
                                         l5900 2834                                           l4772 066E  
                                         l4764 05C8                                           l5901 2840  
                                         l5477 2CDC                                           l4781 2DF4  
                                         l4773 066A                                           l5910 2DA0  
                                         l4790 22DE                                           l4782 2DFC  
                                         l4774 0726                                           l4766 05D8  
                                         l5911 2DAC                                           l5399 08AA  
                                         l4791 22D2                                           l4775 06AC  
                                         l4767 060A                                           l4776 06FE  
                                         l4768 05E4                                           l4777 071E  
                                         l4769 0602                                           l5906 2D80  
                                         l5907 2D76                                           l5851 310E  
                                         l5692 2490                                           l5852 3116  
                                         l5693 249A                                           l5685 2442  
                                         l4797 2302                                           l5694 24A8  
                                         l5686 2452                                           l5847 30F8  
                                         l5688 2470                                           l5848 30F2  
                                         l5689 2468                                           l5896 280A  
                                         l5897 2800                                           _LATA 000F83  
                                         _LATB 000F84                                           _LATC 000F85  
                                         _LATD 000F86                                           _LATE 000F87  
                                         _T2PR 000FBC                                           u5020 2D84  
                                         u5100 1560                                           u5110 159C  
                                         _T4PR 000FB6                                           u5107 1556  
                                         u5300 2C16                                           u5117 1592  
                                         u5310 2C22                                           u5302 2C18  
                                         u5312 2C24                                           u6200 22EA  
                                         u5065 3150                                           u5090 1528  
                                         u5066 3152                                           u5420 2474  
                                         _PMD0 000EE1                                           _PMD1 000EE2  
                                         u6230 230E                                           _PMD2 000EE3  
                                         _PMD3 000EE4                                           u5520 1756  
                                         _PMD4 000EE5                                           u5097 151E  
                                         _PMD5 000EE6                                           u5450 372A  
                                         u5610 11A8                                           u6260 30FC  
                                         u6174 2B1C                                           u6175 2B18  
                                         u5560 113E                                           u6184 22C2  
                                         u5625 11B2                                           u6185 22BE  
                                         u5730 217A                                           u7307 1D60  
                                         u5627 11B4                                           u5820 2D08  
                                         u7317 090C                                           u5670 2124  
                                         u5590 119E                                           u7407 14AA  
                                         u7327 0936                                           u5575 118C  
                                         u5760 1E64                                           u7417 29C0  
                                         u7337 0092                                           u5577 118E  
                                         u5770 1EA4                                           u5754 29F4  
                                         u7507 366A                                           u7427 35D6  
                                         u7347 03E6                                           u5755 29F0  
                                         u7267 2784                                           u5940 30A0  
                                         u7437 2F14                                           u7357 1912  
                                         u7277 2B40                                           u4990 280E  
                                         u7447 1F38                                           u7367 2C34  
                                         u5767 1E5A                                           u7287 1CE2  
                                         u5960 2336                                           u7457 2AAC  
                                         u7377 2C48                                           u5777 1E9A  
                                         u7297 1CF4                                           u6690 1CF2  
                                         u7467 2ADA                                           u7387 30B6  
                                         u7477 3740                                           u7397 253E  
                                         u7487 374C                                           u7497 3660  
                                         _TMR2 000FBB                                           _TMR4 000FB5  
                __size_of_eusartmdb_Initialize 0016                                    _totalvendsm FFE4  
                                         _WPUA 000F10                                           _WPUB 000F18  
                                         _WPUC 000F20                                           _WPUD 000F25  
                                         _WPUE 000F2D                          ??_EUSART2_Receive_ISR 000B  
                                _EUSART1_Write 36F6                                  __CFG_FCMEN$ON 000000  
                                _EUSART2_Write 3712                                           _cash 003B  
                                         _dest 00AB                                           _main 0A0C  
                                         _exit FB1B                                  ?_EUSART1_Read 000B  
                              _TMR0_StartTimer 3796                                  ?_mdb_transmit 0000  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                           btemp 004F  
                                         prodh 000FF4                                           prodl 000FF3  
                                         start 00AE                                _timer5ReloadVal 00F7  
                         __end_of_chanresetmsg FDEF                                     _Clear_cred 1EB0  
                              _TMR3_Initialize 326C                       disable_channel@errormask 0024  
                       __size_of_enter_service 00A2                                  ?_EUSARTG_Read 0000  
                                __CFG_CSWEN$ON 000000                              ??_init_pricestore 001F  
                                 ___param_bank 000000                                ?_displ_nochange 0000  
                                __CFG_SCANE$ON 000000                                    _switch_read 2C0E  
                               ??_displ_credit 002A                      __size_of_DATAEE_WriteByte 003A  
                           vend_nosense@chanel 0023                                 ??_displ_lflags 002A  
                      __end_of_TMR0_Initialize 3436                                 ??_displ_nendis 0029  
                               ??_displ_sflags 002B                 __size_of_OSCILLATOR_Initialize 0018  
                               ??_displ_noteer 0029                                  ?_Read_NVstore 001F  
                __end_of_OSCILLATOR_Initialize 3630                                   ?_gsm_gettime 0000  
                                        l12029 36F8                                          l12057 3714  
                                        l13873 1CCE                                          ?_main 000B  
                              __end_of___awdiv 24B2                                __end_of___lbdiv 311A  
                                __CFG_WDTE$OFF 000000                                          _T1CLK 000FD2  
                              ___awdiv@divisor 001F                                   ?_gsm_receive 0023  
                                        _T1CON 000FCF                                          _T3CLK 000FCC  
                                        _T2CON 000FBD                                          _LATA6 007C1E  
                                        _T3CON 000FC9                                          _LATA7 007C1F  
                                        _CMOUT 000F3D                                          _T5CLK 000FC6  
                                        _T4CON 000FB7                                          _T2HLT 000FBE  
                                        _T5CON 000FC3                                __end_of___ltdiv 284E  
                                        _T4HLT 000FB8                                 __CFG_DEBUG$OFF 000000  
                              __end_of___ltmod 2DBA                                          _T2TMR 000FBB  
                                        _T2RST 000FC0                                          _T4TMR 000FB5  
                                        i2l233 0062                                          _T4RST 000FBA  
                              _TMR0_WriteTimer 376A                         __end_of_DAC1_SetOutput 3786  
                                 ?_gsm_netwait 0000                                          i2l693 34BC  
                          price_check@savechan 00E5                                ___awdiv@counter 0021  
                                        _OSCEN 000EDC                         __size_of_Write_NVstore 0036  
                                        _TMR0H 000FD4                                          _TMR1H 000FCE  
                              __end_of_cc_poll FB61                                          _TMR0L 000FD3  
                                        _TMR1L 000FCD                                          _TMR3H 000FC8  
                                        _TMR3L 000FC7                                          _TMR5H 000FC2  
                                        _TMR5L 000FC1                                ??_find_lowprice 001D  
                                        _PORTA 000F8D                                __end_of_cc_test FB6C  
                                        _PORTD 000F90                                __end_of_cc_stop FB67  
                                        _TRISA 000F88                                          _TRISB 000F89  
                                        _TRISC 000F8A                                          _TRISD 000F8B  
                                        _TRISE 000F8C                                __end_of_chanmsg FF1C  
                                ?_Read_Service 000B                                __end_of_cashint FB54  
                              __end_of_cashinv FB58                             off_sens@senseflags 00E3  
                                        _Audit 03F8                                  __CFG_WRT0$OFF 000000  
                              _TMR4_Initialize 355A                                  __CFG_WRT1$OFF 000000  
                                __CFG_WRT2$OFF 000000                                  __CFG_WRT3$OFF 000000  
                                __CFG_WRT4$OFF 000000                                  __CFG_WRT5$OFF 000000  
                                __CFG_WRT6$OFF 000000                                  __CFG_WRT7$OFF 000000  
                              __end_of_enabled FF91                                 __CFG_EBTR0$OFF 000000  
                            lcd_write@savelatd 001F                                 __CFG_EBTR1$OFF 000000  
                               __CFG_EBTR2$OFF 000000                                 __CFG_EBTR3$OFF 000000  
                              __end_of_credclr F9ED                                 __CFG_EBTR4$OFF 000000  
                              __end_of_credmem FB5A                                 __CFG_EBTR5$OFF 000000  
                              __end_of_credits FF04                                 __CFG_EBTR6$OFF 000000  
                               __CFG_EBTR7$OFF 000000                                __end_of_clrline FE80  
                              __end_of_dispclr FB91                                  __CFG_WRTB$OFF 000000  
                                __CFG_WRTC$OFF 000000                                __end_of_dispoff FB8A  
                                __CFG_WRTD$OFF 000000                                  ??_Hopper_coin 002C  
                                        _bflag 0045                                _DATAEE_ReadByte 3600  
                               __CFG_EBTRB$OFF 000000                                 ??_mdb_security 0027  
                         parse_date_time@hhour 0029                                __end_of_butindb 2F26  
                              __end_of_dsphome FB8F                                          _line1 FB86  
                                        _line2 FB85                                          _line3 FB84  
                                        _line4 FB83                                          _count 00FD  
                                        _butin 2A9E                                __end_of_gsm_off 37A2  
                              __end_of_mastadd FB6E                                          _dummy 0087  
                              __end_of_gsm_msg 1EB0                                __end_of_hopcoin FB48  
                              __end_of_inithop FA56                                          _vcash 00A2  
                              __end_of_inscoin FD89                                          _onmsg FFFB  
                           __CFG_MCLRE$EXTMCLR 000000                                __end_of_linkmsg FF28  
                              __end_of_second1 FB60                                find_highprice@i 001E  
                               ?_EUSART1_Write 000B                        __end_of_TMR1_Initialize 32D8  
                                ?_Init_vendmem 000B                                 ?_EUSART2_Write 000B  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_noteerr FE2A                                   ?_hopper_test 0000  
                              __end_of_tenrand FFAC                                __end_of_sensmsg FF5F  
                              __end_of_sensval FB4C                                __end_of_timemsg FEB9  
                              __end_of_servmsg FBE5                                 ??_EUSART1_Read 001D  
                               ??_mdb_transmit 001E                                          status 000FD8  
                                        wtemp6 0050                              ??_Update_coinsout 0027  
                              ___lbdiv@divisor 001D                                ___lbdiv@counter 001F  
                               ??_EUSARTG_Read 001D                                 _Reset_settings 13C8  
                              _TMR5_Initialize 3236                   __end_of_CMP1_GetOutputStatus 372E  
                              __initialization 28B4                              set_motortime@time 0027  
                             ??_find_highprice 001D                                    butin@butons 001F  
                   __end_of_EUSART1_Initialize 3688                                   __end_of_main 0B76  
                      __end_of_DAC1_Initialize 3760                                   __end_of_exit FB20  
                           __size_of_Chan_link 0062                            displ_time@motortime 002B  
                      __end_of_TMR2_Initialize 3596                                 ??_Read_NVstore 0024  
                  ?_INTERRUPT_InterruptManager 000B                                         ??_main 0200  
                               find_lowprice@i 001E                                  __activetblptr 000003  
                              ?_DAC1_SetOutput 000B                           __end_of_enable_notes 2628  
                               ??_Read_Service 001D                                    butindb@butt 0023  
                             __end_of_Sens_off 25AE                                         ?_Audit 0000  
                                _enter_service 1D72                               ?_parse_date_time 000B  
                      __end_of_TMR0_StartTimer 379A                     __end_of_EUSART2_Initialize 31C8  
                                       ?_butin 0000                                         _CM1NCH 000F3B  
                                       _CM1PCH 000F3C                               ___awdiv@dividend 001D  
                               ??_Init_vendmem 001F                                         _ANSELA 000F11  
                                       _ANSELB 000F19                                         _ANSELC 000F21  
                                       _ANSELD 000F26                                         _ANSELE 000F2E  
                                       _T0CON0 000FD5                                         _T0CON1 000FD6  
                                       _T1GATE 000FD1                                         _T1GCON 000FD0  
                                       _T3GATE 000FCB                                         _T3GCON 000FCA  
                                       _T5GATE 000FC5                                         _T5GCON 000FC4  
                                       _RC1REG 000F99                                         _RC2REG 000E99  
                                       _RC1STA 000F9D                                         _RC2STA 000E9D  
                                       _RB5PPS 000EF4                                         _ODCONA 000F0F  
                                       _ODCONB 000F17                                         _ODCONC 000F1F  
                                       _RC6PPS 000EFD                                         _ODCOND 000F24  
                                       _ODCONE 000F2C                       __size_of_credit_subtract 0056  
                             credit_add@credit 0028                        __end_of_TMR3_Initialize 32A2  
                               __CFG_WDTCCS$SC 000000                                         _TABLAT 000FF5  
                                ?_init_mdbdata 000B                               __end_of_cc_level FB66  
                                       _OSCFRQ 000EDE                                         _NVMDAT 000F80  
                                       _RX1PPS 000EB5                                         _RX2PPS 000E8D  
                             __end_of_cc_reset FB6D                                         _TX1REG 000F9A  
                                       _TX2REG 000E9A                                         _TX1STA 000F9E  
                                       _TX2STA 000E9E                            __end_of_Hopper_coin 1908  
                       __end_of_Reset_settings 14BA                          __size_of_Clear_Totals 003E  
                                _Write_NVstore 3200                             __size_of_Link_chan 00D8  
                             __end_of_cashoutv FB4A                                    ?_Clear_cred 0000  
                               __CFG_PWRTE$OFF 000000                        DAC1_SetOutput@inputData 001D  
                         __size_of_get_channel 001C                                 __CFG_XINST$OFF 000000  
                                ?_gsm_transmit 000B                               __end_of_disabled FF87  
                         __size_of_lcd_dispadd 0018                               __end_of_auditmsg FAAD  
                             __end_of_dispaddr FB90                               __end_of_lcd_init 1D72  
                             __end_of_lcd_test 365C                               __end_of_mdb_comm 11E2  
                             __end_of_dispense 2E08                               __end_of_mdb_init 27E4  
                                ?_gsm_zerobuff 001D                               __end_of_mdb_poll 0C96  
                         __end_of_credit_check 351A                                         _cc_pay FB68  
                                       _cc_pin FB64                                         ___wmul 348C  
                                       _dacmsg FEEA                                      ??___awdiv 0021  
                                    ??___lbdiv 001E                                   ?_price_check 0000  
                               __CFG_STVREN$ON 000000                                         _baudra FA84  
                                       _change 003E                              ?_Update_cashaudit 000B  
                                       _facres FFDD                        __end_of_TMR0_WriteTimer 3774  
                                       _dconfg FB10                                     _Sensor_set 175C  
                                displ_nendis@x 002A                                   give_change@i 002B  
                                    ??___ltdiv 0023                                         _airtim FAAD  
                              mdb_reset@i_4246 0029                                      ??___ltmod 0023  
                                       _clockr FF5F                                         _clockw FF91  
                                       _credit 003C                                         _lcdata 0044  
                                       _engfmt FAE4                                         _clrmsg FF73  
                                       _dispon FB91                                         _mdb_on 379A  
                                       _dispsl FB87                                     _Vend_setup 0ECC  
                                       _dispsr FB88                                         _ercode 00B3  
                                       _engqry FF04                               __end_of_emptymsg FFB5  
                                       _engwrt FAF7                                         _gsdate 00D7  
                                       _hexnum 009D                                         _hopadd FB6E  
                             __end_of_gsm_init 0A0C                               __end_of_gsm_txAT 3712  
                                       _gsm_on 3774                               __end_of_off_sens 12D6  
                             ?_TMR0_Initialize 0000                        __end_of_TMR4_Initialize 3578  
                                       _mcount 00B0                                         _offmsg FFF7  
                                       _gsmmsg 0602                                         _gsmtim 00B6  
                                       clear_0 28D4                                         clear_1 28E8  
                                       clear_2 28FA                                         clear_3 2906  
                                       _gstime 00CD                                         _loctim FA56  
                                       _gsmums 0402                                         _netoff FF28  
                                       _gsmusm 0100                                         _noecho FF9A  
                             ___awdiv@quotient 0023                             ??_Update_cashaudit 0027  
                             __end_of_hoperror FB22                                         _nettst FF33  
                             __end_of_hoppcoin FD10                               __end_of_initnote FDAE  
                                       _nvcash 0097                                         _noteen 00AE  
                                       _senset FA75                                         _setgsm FEDB  
                                       _pvcash 004C                                         _prodid FB16  
                             __end_of_pay_coin 218C                                         _slvadd 00B1  
                                       _smscap FACF                                         _smsdel FE80  
                             __end_of_nochange FDCF                           __size_of_displ_price 0040  
                                       _ownnum FAEE                                         _smslst FA66  
                                       _stradd 0043                                         _tvends 008F  
                                       _smstxt FF49                              read_busy@savelatd 001E  
                            read_busy@savelate 001D                        __end_of_DATAEE_ReadByte 3618  
                                       _pwrsta FB00                                         _ussdw2 FE41  
                             __end_of_second_5 FB5E                                         _usdtst FAC4  
                                       _ussdrd FADA                                         _ussdwc FF3E  
                                       _ussdwe FAB9                                         _ussdwm FE94  
                                       _ussdwv FE2A                                    gsm_setime@i 002C  
                                  gsm_setime@x 002B                                      ??_butindb 0020  
                               _PMD_Initialize 35B2                                      ??_gsm_off 001D  
                                    ??_gsm_msg 0021                                 ?_enter_service 0000  
                             __end_of_notebits FB4E                               __end_of_pricemsg FB10  
                             __end_of_notetest FAA0                                   __mediumconst F91E  
                             __end_of_setnotes FC2A                                         tblptrh 000FF7  
                                       tblptrl 000FF6                               __end_of_vendtest FA2C  
                                       tblptru 000FF8                           Update_Hopcoin@newval 002B  
                              ??_EUSART1_Write 001D                                   _Clear_Totals 3066  
                              ??_EUSART2_Write 001D                               __end_of_totalmsg FFBD  
                            __end_of_Chan_link 29DE                               ___lbdiv@dividend 001E  
                         __size_of_give_change 0054                  __size_of_INTERRUPT_Initialize 0004  
                               ??_init_mdbdata 0022                           __end_of_displ_credit 3374  
                              _eusart2RxBuffer 0202                               ?_TMR1_Initialize 0000  
                      __end_of_TMR5_Initialize 326C                           __end_of_displ_lflags 2216  
                            displ_lflags@lchan 002B                              _SYSTEM_Initialize 3154  
                              _disable_channel 29DE                           __end_of_displ_nendis 33A6  
                          Vend_timeset@channel 00F0                                     __accesstop 0060  
                      __end_of__initialization 290E                           __end_of_displ_sflags 1CC0  
                                 __pbssBIGRAMh 0202                           __end_of_displ_noteer 3408  
                   Reset_settings@chanlinkbits 00E1                                 ?_Write_NVstore 0021  
                        __end_of_note_features FB7C                                _CMP1_Initialize 36B0  
                              ?_Reset_settings 0000                             ?_SYSTEM_Initialize 000B  
                        __end_of_theft_attempt FB70                                   __pbssCOMRAMh 002D  
                                ___rparam_used 000001                                   __pbssCOMRAMl 004E  
                        Clear_Totals@eeaddress 0021                                 ??_gsm_transmit 001E  
                                __end_of_Audit 05B2                                 ??_gsm_zerobuff 0021  
                   Reset_settings@chantimebits 00E3                                   __pidataBANK0 37AE  
                          ??_SYSTEM_Initialize 0020                               ?_DAC1_Initialize 0000  
                         __end_of_mdb_security 353A                               _DATAEE_WriteByte 311A  
                                __end_of_line1 FB87                                  __end_of_line2 FB86  
                                __end_of_line3 FB85                                  __end_of_line4 FB84  
                                __end_of_butin 2AFC                                  __end_of_onmsg FFFF  
                        __end_of_note_rejected FB71                               ?_TMR2_Initialize 0000  
                           __size_of_cctalk_on 0004                               ___lbdiv@quotient 0020  
                        __end_of_note_security FB81                         __end_of_PMD_Initialize 35CE  
                         __end_of_EUSART1_Read 36D6                           __end_of_mdb_transmit 36F6  
                                   _cc_countrq FB67                           __size_of_gsm_gettime 0020  
                            __end_of_Link_chan 175C                                   _chanresetmsg FDCF  
                                      ??_Audit 002A                           __size_of_gsm_receive 0056  
                         __end_of_EUSARTG_Read 36E8                            __size_of_Clear_cred 0098  
                                update_vends@x 0023                           __size_of_gsm_netwait 0064  
                         _CMP1_GetOutputStatus 3720                                 Write_NVstore@i 0026  
                           __size_of_displ_hex 00B6                          __end_of_set_motortime 1FDC  
                                  _Hopper_coin 1832                               ?_TMR0_StartTimer 000B  
                           __size_of_lcd_write 0032                                        ??_butin 001D  
                    __end_of_SYSTEM_Initialize 318E                             __size_of_mdb_reset 0086  
                           __size_of_mdb_noten 0044                             __size_of_mdb_waitr 0006  
                           __size_of_mdb_waitx 0006                                  ?_Reset_hopper 000B  
                              _init_pricestore 2E56                                  _eusart2RxHead 0048  
                                   __pbssBANK0 0060                                     __pbssBANK1 0100  
                                _eusart2RxTail 0047                            displ_hex@hexnumsave 00E9  
                             ?_TMR3_Initialize 0000                           __end_of_Read_NVstore 330C  
                      __size_of_gsm_getbalance 0070                           displ_price@vendprice 002A  
                             ??_displ_nochange 0029                                  _chan1linkbits FB44  
                         __size_of_hopper_test 0014                                     _cctalk_off 37A6  
                                _chan2linkbits FB42                             __size_of_read_busy 0042  
                         __end_of_Read_Service 35E8                              ??_credit_subtract 0021  
                                _chan3linkbits FB40                                      ?_Sens_off 0000  
                                _chan4linkbits FB3E                        __size_of_TMR0_StopTimer 0004  
                                 ?_switch_read 0000                                        ?___wmul 001D  
                                _chan5linkbits FB3C                                    ?_Sensor_set 0000  
                             ?_TMR0_WriteTimer 001D                   __end_of_eusartmdb_Initialize 3646  
                                  ?_Vend_setup 0000                                  _chan6linkbits FB3A  
                        __size_of_enable_notes 007A                                        ?_mdb_on 0000  
                                      _CM1CON0 000F39                                        _CM1CON1 000F3A  
                        __end_of_clock_display 3066                           __end_of_Init_vendmem 1B56  
                                      ?_gsm_on 0000                                  _chan7linkbits FB38  
                             ?_TMR4_Initialize 0000                                ?_PMD_Initialize 0000  
                                _chan8linkbits FB36                                ??_enter_service 002D  
                           __size_of_set_price 0118                             __size_of_set_notes 00F2  
                        __end_of_vend_dispense 2322                             __size_of_price_set 0080  
                             ?_DATAEE_ReadByte 001D                             __size_of_vend_init 00E0  
                        displ_nendis@note2disp 0029                                     _credit_add 2BB4  
                            __end_of_cc_adpoll FB62                                     _lcd_clockE 365C  
                                   _lcd_clockH 3748                                     _lcd_clockL 373C  
                            __end_of_cc_enable FB6B                                        _SP1BRGH 000F9C  
                                      _SP1BRGL 000F9B                                        _SP2BRGH 000E9C  
                                      _SP2BRGL 000E9B                                     _lcdaddress 00B2  
                                      _OSCCON1 000ED8                                        _OSCCON3 000EDA  
                                   _disp_clock 1FDC                                _Update_coinsout 2A3E  
                      __end_of_disable_channel 2A3E                    __end_of_EUSART2_Receive_ISR 34D6  
                                      _TBLPTRH 000FF7                              __end_of_chan1time FB34  
                                      _TBLPTRL 000FF6                                        _TBLPTRU 000FF8  
                            __end_of_chan2time FB32                          ?_CMP1_GetOutputStatus 000B  
                            __end_of_chan3time FB30                              __end_of_chan4time FB2E  
                              off_sens@chanbit 00E2                              __end_of_chan5time FB2C  
                            __end_of_chan6time FB2A                                        _NVMADRH 000F7F  
                              off_sens@channel 00E1                                        _NVMADRL 000F7E  
                                   _jammed_err FB76                              __end_of_chan7time FB28  
                                      _OSCTUNE 000EDD                              __end_of_chan8time FB26  
                                      _NVMCON2 000F82                              __end_of_cc_newpin FB64  
                            __end_of_cc_serial FB63                              gsm_zerobuff@count 001F  
                                   _displ_code 0FDE                                        _SLRCONA 000F0E  
                                      _SLRCONB 000F16                                        _SLRCONC 000F1E  
                                      _SLRCOND 000F23                                        _SLRCONE 000F2B  
                                      _PPSLOCK 000EA0                                     _displ_note 31C8  
                                   _displ_sens 2628                                     _displ_time 206E  
                      __end_of_CMP1_Initialize 36C4                                 ??_Reset_hopper 001D  
                            __end_of_cc_status FB6A                                     _lcd_string 14BA  
                                   _dispcursor FB8C                                     _lcd_writeC 284E  
                                    ?_lcd_init 0000                                  ?_Vend_timeset 0000  
                                ?_Vend_settime 0000                                      ?_lcd_test 0000  
                                    ?_dispense 0000                                      ?_mdb_comm 0024  
                                    ?_mdb_init 0000                                     _dispshleft FB8A  
                                   _dispnormal FB8D                                      ?_mdb_poll 0000  
                              ??_Write_NVstore 0026                                     _mdb_unlock 1908  
                            __end_of_chanlinkm FCDD                              __end_of_cashinmsg FF73  
                             ?_TMR5_Initialize 0000                              __end_of_cctalk_on 37A6  
                         DATAEE_WriteByte@bAdd 001D                                      ?_gsm_init 0000  
                                    ?_gsm_txAT 0000                                      ?_off_sens 0000  
                               displ_hex@value 00E1                             give_change@paycash 002A  
                        __size_of_credit_check 0022                                      ?_pay_coin 0000  
                             hopper_pay@change 0029                                   _enable_notes 25AE  
                                ?_note_disable 000B                                        __Hparam 0000  
                            __end_of_clockdate FFF1                                 dispense@chanel 00E2  
                                      __Lparam 0000                                     ??_Sens_off 00E4  
                            __end_of_clocktime FFF7                               init_pricestore@i 0021  
                   __CFG_RSTOSC$HFINTOSC_64MHZ 000000                              __end_of_creditclr FEDB  
                               mdb_comm@mcount 0024                              __end_of_displ_hex 1C0C  
                            __end_of_dispfunc1 FB95                              __end_of_dispfunc2 FB94  
                            __end_of_dispfunc3 FB93                                        ___awdiv 242E  
                                      ___lbdiv 30E0                              __end_of_lcd_write 33D8  
                            __end_of_fiftyrand FFD5                                __size_of___wmul 0026  
                               mdb_comm@slvadd 0025                                        ___ltdiv 27E4  
                            __end_of_mdb_reset 229C                              __end_of_mdb_noten 2EE4  
                                      ___ltmod 2D66                              __end_of_mdb_waitr 378C  
                             ??_DAC1_SetOutput 001D                              __end_of_mdb_waitx 3792  
                                      _cc_poll FB60                                        _cc_test FB6B  
                                      _cc_stop FB66                                __size_of_mdb_on 0004  
                                      _dbcount 00A4                                     _gsm_setime 0000  
                             set_price@channel 00EE                                        _channel 0032  
                                      __pcinit 28B4                                        _chanmsg FF10  
                                      _cashint FB52                           __end_of_init_mdbdata 348C  
                                      _cashinv FB56                                __size_of_gsm_on 000A  
                         __size_of_price_check 017C                                        __ramtop 0F00  
                                      _chkbyte 0041                                     _hopercount 00FE  
                                      _enabled FF87                                     _errorflags 00AD  
                                      __ptext0 0A0C                                        __ptext1 15A4  
                                      __ptext2 277A                                        __ptext3 351A  
                                      __ptext4 2216                                        __ptext5 3630  
                                      __ptext6 2F68                                        __ptext7 2FA8  
                                      __ptext8 377E                                        __ptext9 05B2  
                                      _credclr F9C3                                        _credmem FB58  
                                      _credits FEF7                                        _command 00A9  
                                      _clrline FE6B                                        _dispclr FB90  
                                      _dispoff FB89                                        _mdbdata 0060  
                                      _lcdfunc 00B5                                        _lcdline 00B4  
                                    _T1CONbits 000FCF                                     _hopper_pay 270C  
                                      _butindb 2EE4                                        _dsphome FB8E  
                        _OSCILLATOR_Initialize 3618                                      _T2CONbits 000FBD  
                                      _gsm_off 379E                                        _mastadd FB6D  
                                      _gsm_msg 1E14                                        _hopcoin FB46  
                             set_price@buttons 00ED                                   gsm_receive@x 0026  
                                      _buttons 003A                        __end_of_init_pricestore 2EA0  
                                      _inithop FA42                                        _gsmbyte 0031  
                                    _T3CONbits 000FC9                                        _inscoin FD62  
                                      _linkmsg FF1C                                      _CMOUTbits 000F3D  
                            __end_of_read_busy 2F68                                        _second1 FB5E  
                                    _T4CONbits 000FB7                             _EUSART1_Initialize 3672  
                     ??_PIN_MANAGER_Initialize 001D                                      _T2HLTbits 000FBE  
                         __end_of_gsm_transmit 369C                          __size_of_displ_credit 0034  
                                    _T5CONbits 000FC3                                        _nobytes 00AA  
                        __end_of_find_lowprice 2FA8                                        _senschk 00A8  
                                      _noteerr FE0E                          __size_of_displ_lflags 008A  
                                 gsm_netwait@x 001D                                        _tenrand FFA3  
                                      _notenum 00FF                                        _sensmsg FF54  
                                      _sensval FB4A                                        _senspos 0037  
                                    _T4HLTbits 000FB8                          __size_of_displ_nendis 0032  
                                      _pnvcash 0049                                        _venderr 00A7  
                                      _timemsg FEA7                                        _servmsg FB95  
                         __end_of_gsm_zerobuff 3462                          __size_of_displ_sflags 00B4  
                               ??_Vend_timeset 00ED                                 ??_Vend_settime 002C  
                        __size_of_displ_noteer 0030                     __size_of_SYSTEM_Initialize 003A  
                                 _credit_check 34F8                                     ??_lcd_init 0025  
                                   ??_lcd_test 0024                                     ??_dispense 002C  
                                   ??_mdb_comm 0025                                     ??_mdb_init 002A  
                         end_of_initialization 290E                              __end_of_secondadd FB5C  
                                   ??_mdb_poll 0027                                      _T2RSTbits 000FC0  
                          __size_of_Sensor_set 00D6                            ?_EUSART1_Initialize 000B  
                          __size_of_Vend_setup 0112                                      _T4RSTbits 000FBA  
                                   ??_gsm_init 00E1                                     ??_gsm_txAT 001F  
                                   ??_off_sens 002C                              __end_of_note_poll FB80  
                            __end_of_motimemsg F996                              __end_of_set_price 0ECC  
                            __end_of_set_notes 13C8                        __size_of_Update_Hopcoin 0086  
                            __end_of_note_type FB7F                                  ?_vend_nosense 0000  
                            __end_of_price_set 2532                                     _save_notes 34D6  
                            __end_of_just_busy FB79                                     ??_pay_coin 001F  
                                  ?_cctalk_off 000B                                 ??_note_disable 0027  
                            __end_of_priceexit FA42                              __end_of_nosentime FB24  
                            __end_of_sensoffms F9C3                              __end_of_setimemsg FD62  
                                 ??_Clear_cred 0029                              __end_of_vend_init 1684  
                       price_check@chanlinkbit 00E7                          __size_of_mdb_security 0020  
                             ___ltdiv@dividend 001D                              __end_of_rom_error FB78  
                           _EUSART2_Initialize 318E                              __end_of_vendtimem FD39  
                            __end_of_vendsetup FC6D                              __end_of_vendstore FB56  
                                   _note_reset FB82                                     _sens_error FB79  
                                   _note_setup FB81                                        postdec1 000FE5  
                                      postinc0 000FEE                                        postinc2 000FDE  
                        __size_of_EUSART1_Read 0012                                     _motr_error FB7A  
                        __size_of_mdb_transmit 000E                                     _just_reset FB75  
                                Read_NVstore@i 0024                                     _pricesetm2 FC6D  
                        gsm_receive@messagebuf 0023                                     _sensoffmsg FDEF  
                         ??_EUSART1_Initialize 001D                                     _pricestore FB50  
                        __CFG_WDTCPS$WDTCPS_31 000000                            ?_EUSART2_Initialize 0000  
                     Init_vendmem@chanlinkbits 0021                                   _displ_credit 3340  
                      __end_of_Update_coinsout 2A9E                                   _displ_lflags 218C  
                        __size_of_EUSARTG_Read 0012                                   _displ_nendis 3374  
                                    _PORTBbits 000F8E                                     _venderrors FB4E  
                             displ_code@ercode 0026                                   _displ_sflags 1C0C  
                                   _vendispmsg FE56                                   _displ_noteer 33D8  
                                   _settimemsg F9ED                              displ_sens@dmsgpos 002A  
                                  ?_credit_add 0000                             displ_lflags@chanel 002A  
                                  ?_lcd_clockE 0000                                    ?_lcd_clockH 0000  
                                  ?_lcd_clockL 0000                         ??_CMP1_GetOutputStatus 001D  
                                  ?_disp_clock 000B                           Vend_timeset@chantime 00EF  
                             ?_disable_channel 0000                               ___ltdiv@quotient 0023  
                        __size_of_Read_NVstore 0034                             __end_of_Clear_cred 1F48  
                                  ?_displ_code 000B                      __size_of_Update_cashaudit 00C4  
                                  ?_displ_note 0029                                    ?_displ_sens 002A  
                                  ?_displ_time 002A                              displ_sens@smsgpos 002B  
                                  ?_lcd_string 0024                                    ?_lcd_writeC 0000  
                          EUSART1_Write@txData 001D                               ?_CMP1_Initialize 000B  
                             ??_Reset_settings 0029                               __CFG_FEXTOSC$OFF 000000  
                     __end_of_DATAEE_WriteByte 3154                                   _mdb_security 351A  
                         ??_EUSART2_Initialize 0020                                    ?_mdb_unlock 0000  
                         _eusartmdb_Initialize 3630                          __size_of_Read_Service 001A  
                            displ_time@channel 002A                                  ??_get_channel 001D  
                               _gsm_getbalance 269C                              get_channel@butons 001D  
                               ??_vend_nosense 0021                       __size_of_parse_date_time 0172  
                                    _Chan_link 297C                                   _EUSART1_Read 36C4  
                          __end_of_cashbox_err FB74                                   _mdb_transmit 36E8  
                                ??_lcd_dispadd 0021                                     displ_hex@i 00EC  
                          __end_of_chanlinkmsg F95C                            set_motortime@chanel 0025  
                        __size_of_Init_vendmem 00BA                                   _EUSARTG_Read 36D6  
                         _timer0ReloadVal16bit 00F5                                 _TMR0_StopTimer 3792  
                              __pcstackCOMRAMh 000B                                __pcstackCOMRAMl 0000  
                      Update_coinsout@coinsout 0027                                     mdb_reset@i 0028  
                                ?_update_vends 0000                   __end_of_INTERRUPT_Initialize 37AE  
                                ??_displ_price 002A                           __end_of_Reset_hopper 30E0  
                           mdb_transmit@txbyte 001E                                     _twentyrand FFD5  
                               __end_of_cc_pay FB69                                 __end_of_cc_pin FB65  
                           price_check@savebut 00E6                                 __end_of___wmul 34B2  
                               __end_of_dacmsg FEF7                                 __end_of_baudra FA92  
                                  ?_gsm_setime 0000                                 __end_of_facres FFE4  
                               __end_of_dconfg FB16                           __size_of_switch_read 0058  
                               __end_of_airtim FAB9                                 __end_of_clockr FF69  
                               __end_of_clockw FF9A                                 __end_of_engfmt FAEE  
                               __end_of_clrmsg FF7D                                 __end_of_dispon FB92  
                               __end_of_mdb_on 379E                                 __end_of_dispsl FB88  
                               __end_of_dispsr FB89                                 __end_of_engqry FF10  
                                 _Read_NVstore 32D8                               displ_credit@cash 002A  
                               __end_of_engwrt FB00                                 __end_of_hopadd FB6F  
                          parse_date_time@hour 002A                         ?_OSCILLATOR_Initialize 0000  
                               __end_of_gsm_on 377E                                 __end_of_offmsg FFFB  
                               __end_of_loctim FA66                                 __end_of_netoff FF33  
                               __end_of_noecho FFA3                                 __end_of_nettst FF3E  
                                  ?_hopper_pay 0000                                 __end_of_senset FA84  
                               __end_of_setgsm FEEA                                 __end_of_prodid FB1B  
                               __end_of_smscap FADA                                 __end_of_smsdel FE94  
                               __end_of_ownnum FAF7                                 __end_of_smslst FA75  
                      __size_of_find_highprice 0040                                 __end_of_smstxt FF54  
                               __end_of_pwrsta FB08                                 __end_of_ussdw2 FE56  
                               __end_of_usdtst FACF                                 __end_of_ussdrd FAE4  
                               __end_of_ussdwc FF49                                 __end_of_ussdwe FAC4  
                               __end_of_ussdwm FEA7                               ?_init_pricestore 0000  
                               __end_of_ussdwv FE41                            __size_of_cctalk_off 0004  
                          start_initialization 28B4                                   _Read_Service 35CE  
                                ??_give_change 002A                       __size_of_TMR0_Initialize 002E  
              __size_of_PIN_MANAGER_Initialize 0086                                   ?_Hopper_coin 0000  
                           update_vends@chanel 0024                                      _Link_chan 1684  
EUSART2_SetRxInterruptHandler@interruptHandler 001D                                _credit_subtract 2C66  
                      Update_cashaudit@addcash 0027                         __end_of_gsm_getbalance 270C  
                        ?_eusartmdb_Initialize 0000                          __end_of_EUSART1_Write 3704  
                        __end_of_EUSART2_Write 3720                                   _Init_vendmem 1A9C  
                                   ?_Chan_link 0000                                    ?_save_notes 0000  
                          DATAEE_ReadByte@bAdd 001D                                  Init_vendmem@i 0025  
                       __end_of_TMR0_StopTimer 3796                            __size_of_credit_add 005A  
                             __CFG_LPBOREN$OFF 000000                            __size_of_lcd_clockE 0016  
                          __size_of_lcd_clockH 000C                            __size_of_lcd_clockL 000C  
                     __size_of_TMR1_Initialize 0036                          __size_of_init_mdbdata 002A  
                               ??_update_vends 0021                            __end_of_get_channel 35B2  
                          __size_of_disp_clock 0092                               ??_PMD_Initialize 001D  
                                     ??___wmul 0021                                   ??_Sensor_set 002C  
                          __size_of_displ_code 0106                            __end_of_lcd_dispadd 3600  
                         __end_of_Vend_timeset 0DB4                           __end_of_Vend_settime 2E56  
                            __size_of_Sens_off 007C                            __size_of_displ_note 0038  
                          __size_of_displ_sens 0074                                   ??_Vend_setup 002C  
                          __size_of_displ_time 0092                                       ??_mdb_on 001D  
                                  __pdataBANK0 00FE                            __size_of_lcd_string 00EA  
                          __size_of_lcd_writeC 0066                                       ??_gsm_on 001D  
                                ??_gsm_gettime 002D                          __size_of_gsm_transmit 0014  
                             ?_Update_coinsout 0000                            __size_of_mdb_unlock 00D0  
                                ??_gsm_receive 0025                         displ_sflags@senseflags 002B  
                                ??_gsm_netwait 001D                          __size_of_gsm_zerobuff 002C  
                               _eusart2RxCount 0046                       __size_of_DAC1_Initialize 000C  
                          __end_of_displ_price 3028                            gsm_receive@noofline 0025  
                         __end_of_note_disable 376A                               dispense@sensmask 00E1  
                                __pcstackBANK0 00E1                                  __pcstackBANK2 0200  
                     __size_of_TMR2_Initialize 001E                            __end_of_dispshright FB8C  
                                   ?_Link_chan 0000                                  butindb@butval 0022  
                                    _cc_adpoll FB61                                    _cashbox_err FB73  
                               set_motortime@i 0026                                      _cc_enable FB6A  
                         __end_of_note_removed FB75                            EUSART2_Write@txData 001D  
                                  _chanlinkmsg F91F                                ?_gsm_getbalance 0000  
                                    _chan1time FB32                                  ??_hopper_test 002A  
                        credit_subtract@credit 0021                           __end_of_note_stacker FB7D  
                                    _chan2time FB30                                      _chan3time FB2E  
                                    _chan4time FB2C                                      _chan5time FB2A  
                                    _chan6time FB28                                      _chan7time FB26  
                                    _chan8time FB24                                      _cc_newpin FB63  
                         init_mdbdata@initdata 0022                                      _cc_serial FB62  
                           __end_of_Sensor_set 1832                ??_EUSART2_SetRxInterruptHandler 0020  
                                 _init_mdbdata 3462                              __size_of_lcd_init 00B2  
                          __end_of_give_change 2D66                            __size_of_gsm_setime 03F8  
                            __size_of_lcd_test 0016                             __end_of_Vend_setup 0FDE  
                            __size_of_mdb_comm 00FE                              __size_of_dispense 004E  
                                    _cc_status FB69                              __size_of_mdb_init 006A  
                               _Update_Hopcoin 2322                              __size_of_mdb_poll 0120  
                                    __pnvBANK0 00F2                       __size_of_TMR0_StartTimer 0004  
                                    _chanlink1 000003                                      _chanlink2 000004  
                                    _chanlink3 000005                                      _chanlink4 000006  
                                    _chanlink5 000007                                      _chanlink6 000008  
                                    _chanlink7 000009                                      _chanlink8 00000A  
                                    _chanlinkm FCA6                                ?_TMR0_StopTimer 000B  
                                    _cashinmsg FF69                            __size_of_hopper_pay 006E  
                            __size_of_gsm_init 016C                              __size_of_gsm_txAT 000E  
                            __size_of_off_sens 00F4                                      _cctalk_on 37A2  
                       _PIN_MANAGER_Initialize 23A8                                   _gsm_transmit 3688  
                            __size_of_pay_coin 008C                       __size_of_TMR3_Initialize 0036  
                                    __pintcode 0008                              ??_parse_date_time 0025  
                                __pmediumconst F91E                                   _gsm_zerobuff 3436  
                                     ?___awdiv 001D                                      __ptext100 32D8  
                                    __ptext101 3720                                       ?___lbdiv 001D  
                                    __ptext110 33A6                                      __ptext102 33D8  
                                    __ptext111 2F26                                      __ptext103 0FDE  
                                    __ptext120 3236                                      __ptext112 373C  
                                    __ptext104 330C                                      __ptext121 355A  
                                    __ptext113 3748                                      __ptext105 3340  
                                    __ptext130 318E                                      __ptext122 326C  
                                    __ptext114 365C                                      __ptext106 14BA  
                                    __ptext131 372E                                      __ptext123 3578  
                                    __ptext115 2D66                                      __ptext107 1B56  
                                    __ptext132 3672                                      __ptext124 32A2  
                                    __ptext116 27E4                                      __ptext108 284E  
                                    __ptext133 3754                                      __ptext125 3408  
                                    __ptext117 34F8                                      __ptext109 35E8  
                                    __ptext134 36B0                                      __ptext126 35B2  
                                    __ptext118 3600                                      __ptext127 23A8  
                                    __ptext119 3154                                      __ptext136 34B2  
                                    __ptext128 3618                                      __ptext137 0000  
                                    __ptext129 37AA                               Link_chan@chanbit 00E3  
                             Link_chan@channel 00E4                                       ?___ltdiv 001D  
                                    _clockdate FFEB                                       ?___ltmod 001D  
                       __size_of_set_motortime 0094                                      _clocktime FFF1  
                             __CFG_PPS1WAY$OFF 000000                                      _creditclr FECB  
                                     _DAC1CON0 000F33                                       _DAC1CON1 000F34  
                 ??_INTERRUPT_InterruptManager 000B                                      _displ_hex 1B56  
                                    _dispfunc1 FB94                                      _dispfunc2 FB93  
                                    _dispfunc3 FB92                                 gsm_msg@msgbkup 0023  
                                    _lcd_write 33A6                             Hopper_coin@coinval 002C  
                                    _fiftyrand FFCD                                      _highprice 0036  
                                    _mdb_reset 2216                                      _mdb_noten 2EA0  
                                    _mdb_waitr 3786                                      _mdb_waitx 378C  
                                     _BAUD1CON 000F9F                                       _BAUD2CON 000E9F  
                         __end_of_vend_nosense 2B58                        __end_of_credit_subtract 2CBC  
                                     ?_butindb 0000                                       ?_gsm_off 0000  
                                     ?_gsm_msg 001F                          __end_of_enter_service 1E14  
                          __size_of_save_notes 0022                       __size_of_TMR0_WriteTimer 000A  
                               __size_of_Audit 01BA                            __end_of_gsm_gettime 355A  
                                    _mdbtxbyte 00AC                       __size_of_TMR4_Initialize 001E  
                             _Update_cashaudit 19D8                                 _acept_disabled FB72  
                          __end_of_gsm_receive 2D12                         ??_eusartmdb_Initialize 001D  
                          __end_of_gsm_netwait 297C                                 __size_of_butin 005E  
                                     _T2CLKCON 000FBF                       __size_of_DATAEE_ReadByte 0018  
                                    _read_busy 2F26                                       _T4CLKCON 000FB9  
                                    _errormask 0033                           _INTERRUPT_Initialize 37AA  
                       __end_of_Update_Hopcoin 23A8                               ___ltmod@dividend 001D  
                        lcd_dispadd@lcdaddress 0021                         __size_of_clock_display 003E  
                            ??_TMR0_Initialize 001D                   __size_of_EUSART2_Receive_ISR 0024  
                               ___wmul@product 0021                          __end_of_Write_NVstore 3236  
                                     _LATAbits 000F83                                    _get_channel 3596  
                                     _LATCbits 000F85                                    ??_Chan_link 00E6  
                                    _secondadd FB5A                          lcd_dispadd@lcdatasave 0022  
                                 ??_cctalk_off 001D                                       _PIE3bits 000EC5  
                                _note_features FB7B                                    _lcd_dispadd 35E8  
                       __size_of_vend_dispense 0086                            __CFG_BORV$VBOR_2P45 000000  
                                _theft_attempt FB6F                                     ?_cctalk_on 0000  
                        __size_of_Reset_hopper 003C            __size_of_INTERRUPT_InterruptManager 00A6  
                           __end_of_cc_countrq FB68                            __end_of_hopper_test 36B0  
                                     _PIR0bits 000ECA                                ___ltdiv@divisor 0020  
                                     _PIR3bits 000ECD                                       _PIR4bits 000ECE  
                                     _PIR7bits 000ED1                                ___ltdiv@counter 0026  
                                    _note_poll FB7F                                      _motimemsg F95C  
                                    _set_price 0DB4                                      _set_notes 12D6  
                     __size_of_TMR5_Initialize 0036                                      _note_type FB7E  
                                    _price_set 24B2                                      _just_busy FB78  
                                    _priceexit FA2C                                      _nosentime FB22  
                                    _sensoffms F996                                  ??_price_check 00E3  
                                    _pricevend 007F                                      _setimemsg FD39  
                                    _vend_init 15A4                                      _sensorval 0038  
                                    _rom_error FB77                                    _displ_price 2FE8  
                                    _vendprice 0039                                      _vendtimem FD10  
                                    _vendsetup FC2A                        __size_of_displ_nochange 0034  
                                    _vendstore FB54                                  _note_rejected FB70  
                            ??_TMR1_Initialize 001D                                     ?_displ_hex 0027  
                           Link_chan@linkflags 00E5                                     ?_lcd_write 0000  
                            ___wmul@multiplier 001D                                  _note_security FB80  
                          __end_of_hundredrand FFCD                                     ?_mdb_reset 0000  
                                   ?_mdb_noten 0000                                    _dispshright FB8B  
                                   ?_mdb_waitr 0000                                     ?_mdb_waitx 000B  
                               _find_highprice 2FA8                                   ??_credit_add 0028  
                                 ??_lcd_clockE 001D                                   ??_lcd_clockH 001D  
                                 ??_lcd_clockL 001D                         Write_NVstore@storesize 0025  
                                    mdb_comm@i 0026                         __end_of_acept_disabled FB73  
                                 ??_disp_clock 0029                                      mdb_init@i 002C  
                           __end_of_cctalk_off 37AA                          DATAEE_WriteByte@bData 001F  
                                 ??_displ_code 0024                                    _give_change 2D12  
                                    mdb_poll@i 0027                                displ_hex@hexnum 0027  
                                ?_Clear_Totals 000B                                   ??_displ_note 002B  
                                 ??_displ_sens 002B                                   ??_displ_time 002B  
                                  ??_Link_chan 00E1                           __end_of_update_vends 2BB4  
                                 ??_lcd_string 0027                                   ??_lcd_writeC 0023  
                                   ?_read_busy 0000                                  _set_motortime 1F48  
                        ?_INTERRUPT_Initialize 0000                              ??_DAC1_Initialize 001D  
                                 _Reset_hopper 30A4                                   ??_mdb_unlock 001F  
                            ?_DATAEE_WriteByte 001D                                ?_Update_Hopcoin 002A  
                         __size_of_Hopper_coin 00D6                              ??_TMR2_Initialize 001D  
                           ??_DATAEE_WriteByte 0020                            lcd_string@lcdstring 0024  
                        __size_of_Vend_timeset 011E                          __size_of_Vend_settime 004E  
                                     __Hrparam 0000          __end_of_EUSART2_SetRxInterruptHandler 373C  
       __size_of_EUSART2_SetRxInterruptHandler 000E                  _EUSART2_SetRxInterruptHandler 372E  
                             Sensor_set@dacpos 002C                                       _Sens_off 2532  
                                     __Lrparam 0000                             __end_of_credit_add 2C0E  
                                   ?_set_price 0000                             __CFG_BOREN$SBORDIS 000000  
                                   ?_set_notes 0000                             __end_of_lcd_clockE 3672  
                                   ?_price_set 0000                             __end_of_lcd_clockH 3754  
                           __end_of_lcd_clockL 3748                         __size_of_find_lowprice 0040  
                                   ?_vend_init 0000                             __end_of_disp_clock 206E  
                      ??_OSCILLATOR_Initialize 001D                             Read_Service@senval 001D  
                           __end_of_jammed_err FB77                              ??_TMR0_StartTimer 001D  
                           __end_of_displ_code 10E4                               __size_of___awdiv 0084  
                             __size_of___lbdiv 003A                                   ??_gsm_setime 0027  
                           __end_of_displ_note 3200                             __end_of_displ_sens 269C  
                           __end_of_displ_time 2100                    __size_of_EUSART1_Initialize 0016  
                             __size_of___ltdiv 006A                          __size_of_note_disable 000A  
                             __size_of___ltmod 0054                             __end_of_lcd_string 15A4  
                           __end_of_dispcursor FB8D                             __end_of_lcd_writeC 28B4  
                                _clock_display 3028                         __end_of_find_highprice 2FE8  
                               _invalid_escrow FB71                            __end_of_note_escrow FB7E  
                                  _gsm_gettime 353A                             __end_of_dispshleft FB8B  
                           __end_of_dispnormal FB8E                              ??_TMR3_Initialize 001D  
                             parse_date_time@i 002C                               parse_date_time@x 002B  
                           __end_of_mdb_unlock 19D8                                   ??_hopper_pay 0028  
                                     _cc_level FB65                                    _gsm_receive 2CBC  
                      Update_Hopcoin@direction 002A                            __end_of_price_check 072E  
                                     _cc_reset FB6C                                    _gsm_netwait 2918  
                                _vend_dispense 229C                               ?_credit_subtract 000B  
                                  _dspposition 0042                                     _T0CON0bits 000FD5  
                             __size_of_butindb 0042                                       _chanmask 0034  
                             __size_of_gsm_off 0004                               __size_of_gsm_msg 009C  
                                     _cctflags 004E                                       _cashoutv FB48  
                               ??_Clear_Totals 0021                        __size_of_DAC1_SetOutput 0008  
                __size_of_CMP1_GetOutputStatus 000E                                       __ptext10 3760  
                                     __ptext11 2EA0                                       __ptext20 1F48  
                                     __ptext12 2D12                            __end_of_pricesetmsg FECB  
                                     __ptext21 348C                                       __ptext13 2C66  
                                   _T1GCONbits 000FD0                                       __ptext30 36E8  
                                     __ptext22 376A                                       __ptext14 2BB4  
                                     __ptext31 378C                                       __ptext23 3792  
                                     __ptext15 19D8                                       __ptext40 08A0  
                                     __ptext32 36F6                                       __ptext24 3796  
                                     __ptext16 30E0                                       __ptext41 3704  
                                     __ptext33 379A                                       __ptext25 29DE  
                                     __ptext17 2DBA                                       __ptext50 2CBC  
                                     __ptext42 0000                                       __ptext34 3462  
                                     __ptext26 2B58                                       __ptext18 2AFC  
                                     __ptext51 3436                                       __ptext43 3774  
                                     __ptext35 2E56                                       __ptext27 0B76  
                                     __ptext19 229C                                       __ptext60 34D6  
                                     __ptext52 36D6                                       __ptext44 2918  
                                     __ptext36 36C4                                       __ptext28 10E4  
                                     __ptext61 3374                                       __ptext53 1E14  
                                     __ptext45 269C                                       __ptext37 1CC0  
                                     __ptext29 3786                                       __ptext70 2C0E  
                                     __ptext62 31C8                                       __ptext54 3688  
                                     __ptext46 3028                                       __ptext38 3646  
                                     __ptext71 30A4                                       __ptext63 24B2  
                                     __ptext55 3712                                       __ptext47 353A  
                                     __ptext39 379E                                       __ptext80 2532  
                                     __ptext72 37A2                                       __ptext64 0DB4  
                                     __ptext56 1FDC                                       __ptext48 072E  
                                     __ptext81 11E2                                       __ptext73 37A6  
                                     __ptext65 2FE8                                       __ptext57 1D72  
                                     __ptext49 242E                                       __ptext90 175C  
                                     __ptext82 1C0C                                       __ptext74 2A3E  
                                     __ptext66 1908                                       __ptext58 12D6  
                                     __ptext91 2628                                       __ptext83 13C8  
                                     __ptext75 3200                                       __ptext67 369C  
                                     __ptext59 25AE                                       __ptext92 1832  
                                     __ptext84 1A9C                                       __ptext76 0ECC  
                                     __ptext68 270C                                       __ptext93 2EE4  
                                     __ptext85 3066                                       __ptext77 2E08  
                                     __ptext69 2100                                       __ptext94 2322  
                                     __ptext86 297C                                       __ptext78 0C96  
                                     __ptext95 1EB0                                       __ptext87 1684  
                                     __ptext79 206E                                       __ptext96 311A  
                                     __ptext88 218C                                       __ptext97 03F8  
                                     __ptext89 35CE                                       __ptext98 3596  
                                     __ptext99 2A9E                                       _disabled FF7D  
                               ?_set_motortime 0000                            __end_of_sensorflags FB36  
                                     _auditmsg FAA0                                       _dispaddr FB8F  
                                     _lcd_init 1CC0                                  gsm_msg@gsmstr 0026  
                                     _lcd_test 3646                                       _dispense 2DBA  
                                     _mdb_comm 10E4                                  gsm_msg@msgadd 001F  
                                     _mdb_init 277A                                   _Vend_timeset 0C96  
                                 _Vend_settime 2E08                                       _mdb_poll 0B76  
                                     _mdbflags 0040                        TMR0_WriteTimer@timerVal 001D  
                                   _T3GCONbits 000FCA                    DATAEE_WriteByte@GIEBitValue 0020  
                            ??_TMR0_WriteTimer 001F                    __size_of_EUSART2_Initialize 003A  
                                  _hopper_test 369C                                       _emptymsg FFAC  
                        __end_of_chan1linkbits FB46                                       _gsm_init 08A0  
                            ??_TMR4_Initialize 001D                                       _gsm_txAT 3704  
                                     _off_sens 11E2                                  __size_of_main 016A  
                                     _gsmflags 0030                                     _T5GCONbits 000FC4  
                     __size_of_disable_channel 0060                                       _hoperror FB20  
                           __end_of_gsm_setime 03F8                                   ??_save_notes 0021  
                                     _hoppcoin FCDD                                       _initnote FD89  
                        __end_of_chan2linkbits FB44                                       _hpserial 009A  
                                     _pay_coin 2100                                       _nochange FDAE  
                              ___ltmod@divisor 0020                              ??_DATAEE_ReadByte 001F  
                         __CFG_WDTCWS$WDTCWS_7 000000                          __end_of_chan3linkbits FB42  
                     __size_of_CMP1_Initialize 0014                                       _second_5 FB5C  
                              ___ltmod@counter 0023                                    ??_cctalk_on 001D  
                                 _note_disable 3760                          __end_of_chan4linkbits FB40  
                           __end_of_hopper_pay 277A                                       _noofline 00A6  
                                   _RC1STAbits 000F9D                                       _vcashout 00A0  
                                     _notebits FB4C                                     _RC2STAbits 000E9D  
                                     _notebyte 00AF                                       _pricemsg FB08  
                        __end_of_chan5linkbits FB3E                                       _lowprice 0035  
                                     _notetest FA92                                  ??_switch_read 001D  
                                     _venflags 002D                                       _setnotes FBE5  
                                init_mdbdata@i 0023                                       _vendtest FA13  
                                  _hundredrand FFC5                          __end_of_chan6linkbits FB3C  
                                     int$flags 004F                         __end_of_invalid_escrow FB72  
                        __size_of_vend_nosense 005C                                       _outcoins 003D  
                        __end_of_chan7linkbits FB3A                                   _note_removed FB74  
           __end_of_INTERRUPT_InterruptManager 00AE                     _INTERRUPT_InterruptManager 0008  
                               ?_clock_display 0000                          Write_NVstore@storeadd 0021  
                        Read_NVstore@storesize 0023                          Write_NVstore@storemem 0023  
                                     _totalmsg FFB5                                   _note_stacker FB7C  
                        __end_of_chan8linkbits FB38                                ?_find_highprice 0000  
                                  ??_displ_hex 002A                                    ??_lcd_write 001F  
                            ??_TMR5_Initialize 001D                                    ??_mdb_reset 0027  
                                  ??_mdb_noten 0027                                 ?_vend_dispense 0000  
                                  ??_mdb_waitr 001D                                    ??_mdb_waitx 001D  
                                   _INTCONbits 000FF2                               ??_gsm_getbalance 0027  
                                  _NVMCON1bits 000F81                             __end_of_save_notes 34F8  
                                 price_check@i 00E8                         ??_INTERRUPT_Initialize 001D  
                                _find_lowprice 2F68                                    ??_read_busy 001D  
                          vend_dispense@chanel 002B                             __end_of_note_reset FB83  
                               _twohundredrand FFBD                             __end_of_sens_error FB7A  
                           __end_of_note_setup FB82                                       intlevel2 0000  
                             ??_TMR0_StopTimer 001D                             __end_of_motr_error FB7B  
                              _parse_date_time 072E                       __size_of_init_pricestore 004A  
                           __end_of_just_reset FB76                             __end_of_pricesetm2 FCA6  
                           __end_of_sensoffmsg FE0E                        ?_PIN_MANAGER_Initialize 000B  
                           __end_of_pricestore FB52                              __CFG_CLKOUTEN$OFF 000000  
                                ?_enable_notes 0000                                   _vend_nosense 2AFC  
                                  _PPSLOCKbits 000EA0                             __end_of_venderrors FB50  
                           __end_of_vendispmsg FE6B                            __end_of_totalvendsm FFEB  
                           __end_of_settimemsg FA13                        __size_of_Reset_settings 00F2  
                          displ_sflags@chanbit 002A                                    _note_escrow FB7D  
                                  ??_set_price 002B                                    ??_set_notes 002C  
                                  ??_price_set 002D                       __end_of_Update_cashaudit 1A9C  
                         Read_NVstore@storeadd 001F                                    ??_vend_init 002D  
                         Read_NVstore@storemem 0021                                    _noteen_byte 003F  
                                  _price_check 05B2                                 _displ_nochange 330C  
               ?_EUSART2_SetRxInterruptHandler 001D                              lcd_string@lcdline 0026  
                       __size_of_EUSART1_Write 000E                           displ_note@notestring 0029  
                       __size_of_EUSART2_Write 000E                                     Audit@vends 002C  
                          _EUSART2_Receive_ISR 34B2                                     _RX1PPSbits 000EB5  
                                  _pricesetmsg FEB9                            __end_of_switch_read 2C66  
                                   _RX2PPSbits 000E8D                          __size_of_update_vends 005C  
                                  _sensorflags FB34                              lcd_test@character 0024  
                                gsm_zerobuff@x 0021                                _TMR0_Initialize 3408  
                           gsm_transmit@txbyte 001E                                ??_set_motortime 0023  
                           displ_sflags@chanel 0029                                 ?_find_lowprice 0000  
                         Init_vendmem@chanlink 0023                           gsm_zerobuff@gsmsgbuf 001D  
                       __end_of_twohundredrand FFC5                       __size_of_Update_coinsout 0060  
                                ?_credit_check 0000                                     _TX1STAbits 000F9E  
                                   _TX2STAbits 000E9E                 __end_of_PIN_MANAGER_Initialize 242E  
                         ?_EUSART2_Receive_ISR 0000                            enable_notes@notenum 002B  
                                 ?_get_channel 0000                             __end_of_twentyrand FFDD  
                               ??_enable_notes 002B                                   ?_lcd_dispadd 0000  
                              _TMR1_Initialize 32A2              _EUSART2_RxDefaultInterruptHandler 00F2  
                         displ_lflags@linkflgs 0029  
