

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sat Mar 24 14:34:22 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataCOMRAMh,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	nvCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   112                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   113                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   114                           	dabs	1,0x3,1,_chanlink1
   115                           	dabs	1,0xA,1,_chanlink8
   116                           	dabs	1,0x9,1,_chanlink7
   117                           	dabs	1,0x8,1,_chanlink6
   118                           	dabs	1,0x7,1,_chanlink5
   119                           	dabs	1,0x6,1,_chanlink4
   120                           	dabs	1,0x5,1,_chanlink3
   121                           	dabs	1,0x4,1,_chanlink2
   122  0000                     
   123                           ; Version 1.44
   124                           ; Generated 14/09/2017 GMT
   125                           ; 
   126                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   127                           ; All rights reserved.
   128                           ; 
   129                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   130                           ; 
   131                           ; Redistribution and use in source and binary forms, with or without modification, are
   132                           ; permitted provided that the following conditions are met:
   133                           ; 
   134                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   135                           ;        conditions and the following disclaimer.
   136                           ; 
   137                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   138                           ;        of conditions and the following disclaimer in the documentation and/or other
   139                           ;        materials provided with the distribution.
   140                           ; 
   141                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   142                           ;        software without specific prior written permission.
   143                           ; 
   144                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   145                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   146                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   147                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   148                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   149                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   150                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   151                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   152                           ; 
   153                           ; 
   154                           ; Code-generator required, PIC18F47K40 Definitions
   155                           ; 
   156                           ; SFR Addresses
   157  0000                     
   158                           	psect	idataBANK0
   159  0120C6                     __pidataBANK0:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _hopercount
   163  0120C6  03                 	db	3
   164                           
   165                           	psect	idataCOMRAMh
   166  0120C7                     __pidataCOMRAMh:
   167                           	opt stack 0
   168                           
   169                           ;initializer for _notenum
   170  0120C7  FF                 	db	255
   171                           
   172                           	psect	mediumconst
   173  00FAA6                     __pmediumconst:
   174                           	opt stack 0
   175  00FAA6  00                 	db	0
   176  00FAA7                     _chanlinkmsg:
   177                           	opt stack 0
   178  00FAA7  50                 	db	80
   179  00FAA8  75                 	db	117
   180  00FAA9  73                 	db	115
   181  00FAAA  68                 	db	104
   182  00FAAB  20                 	db	32
   183  00FAAC  42                 	db	66
   184  00FAAD  75                 	db	117
   185  00FAAE  74                 	db	116
   186  00FAAF  74                 	db	116
   187  00FAB0  6F                 	db	111
   188  00FAB1  6E                 	db	110
   189  00FAB2  20                 	db	32
   190  00FAB3  74                 	db	116
   191  00FAB4  6F                 	db	111
   192  00FAB5  20                 	db	32
   193  00FAB6  4C                 	db	76
   194  00FAB7  69                 	db	105
   195  00FAB8  6E                 	db	110
   196  00FAB9  6B                 	db	107
   197  00FABA  20                 	db	32
   198  00FABB  50                 	db	80
   199  00FABC  75                 	db	117
   200  00FABD  73                 	db	115
   201  00FABE  68                 	db	104
   202  00FABF  20                 	db	32
   203  00FAC0  61                 	db	97
   204  00FAC1  67                 	db	103
   205  00FAC2  61                 	db	97
   206  00FAC3  69                 	db	105
   207  00FAC4  6E                 	db	110
   208  00FAC5  20                 	db	32
   209  00FAC6  74                 	db	116
   210  00FAC7  6F                 	db	111
   211  00FAC8  20                 	db	32
   212  00FAC9  55                 	db	85
   213  00FACA  6E                 	db	110
   214  00FACB  6C                 	db	108
   215  00FACC  69                 	db	105
   216  00FACD  6E                 	db	110
   217  00FACE  6B                 	db	107
   218  00FACF  50                 	db	80
   219  00FAD0  75                 	db	117
   220  00FAD1  73                 	db	115
   221  00FAD2  68                 	db	104
   222  00FAD3  20                 	db	32
   223  00FAD4  53                 	db	83
   224  00FAD5  65                 	db	101
   225  00FAD6  72                 	db	114
   226  00FAD7  76                 	db	118
   227  00FAD8  69                 	db	105
   228  00FAD9  63                 	db	99
   229  00FADA  65                 	db	101
   230  00FADB  20                 	db	32
   231  00FADC  74                 	db	116
   232  00FADD  6F                 	db	111
   233  00FADE  20                 	db	32
   234  00FADF  45                 	db	69
   235  00FAE0  78                 	db	120
   236  00FAE1  69                 	db	105
   237  00FAE2  74                 	db	116
   238  00FAE3  00                 	db	0
   239  00FAE4                     __end_of_chanlinkmsg:
   240                           	opt stack 0
   241  00FAE4                     _motimemsg:
   242                           	opt stack 0
   243  00FAE4  20                 	db	32
   244  00FAE5  50                 	db	80
   245  00FAE6  72                 	db	114
   246  00FAE7  65                 	db	101
   247  00FAE8  73                 	db	115
   248  00FAE9  73                 	db	115
   249  00FAEA  20                 	db	32
   250  00FAEB  43                 	db	67
   251  00FAEC  68                 	db	104
   252  00FAED  61                 	db	97
   253  00FAEE  6E                 	db	110
   254  00FAEF  6E                 	db	110
   255  00FAF0  65                 	db	101
   256  00FAF1  6C                 	db	108
   257  00FAF2  20                 	db	32
   258  00FAF3  56                 	db	86
   259  00FAF4  65                 	db	101
   260  00FAF5  6E                 	db	110
   261  00FAF6  64                 	db	100
   262  00FAF7  20                 	db	32
   263  00FAF8  42                 	db	66
   264  00FAF9  75                 	db	117
   265  00FAFA  74                 	db	116
   266  00FAFB  74                 	db	116
   267  00FAFC  6F                 	db	111
   268  00FAFD  6E                 	db	110
   269  00FAFE  20                 	db	32
   270  00FAFF  6F                 	db	111
   271  00FB00  72                 	db	114
   272  00FB01  20                 	db	32
   273  00FB02  50                 	db	80
   274  00FB03  72                 	db	114
   275  00FB04  65                 	db	101
   276  00FB05  73                 	db	115
   277  00FB06  73                 	db	115
   278  00FB07  20                 	db	32
   279  00FB08  20                 	db	32
   280  00FB09  20                 	db	32
   281  00FB0A  20                 	db	32
   282  00FB0B  20                 	db	32
   283  00FB0C  20                 	db	32
   284  00FB0D  20                 	db	32
   285  00FB0E  53                 	db	83
   286  00FB0F  65                 	db	101
   287  00FB10  72                 	db	114
   288  00FB11  76                 	db	118
   289  00FB12  69                 	db	105
   290  00FB13  63                 	db	99
   291  00FB14  65                 	db	101
   292  00FB15  20                 	db	32
   293  00FB16  74                 	db	116
   294  00FB17  6F                 	db	111
   295  00FB18  20                 	db	32
   296  00FB19  45                 	db	69
   297  00FB1A  78                 	db	120
   298  00FB1B  69                 	db	105
   299  00FB1C  74                 	db	116
   300  00FB1D  00                 	db	0
   301  00FB1E                     __end_of_motimemsg:
   302                           	opt stack 0
   303  00FB1E                     _sensoffms:
   304                           	opt stack 0
   305  00FB1E  48                 	db	72
   306  00FB1F  6F                 	db	111
   307  00FB20  6C                 	db	108
   308  00FB21  64                 	db	100
   309  00FB22  20                 	db	32
   310  00FB23  63                 	db	99
   311  00FB24  68                 	db	104
   312  00FB25  61                 	db	97
   313  00FB26  6E                 	db	110
   314  00FB27  6E                 	db	110
   315  00FB28  65                 	db	101
   316  00FB29  6C                 	db	108
   317  00FB2A  20                 	db	32
   318  00FB2B  62                 	db	98
   319  00FB2C  75                 	db	117
   320  00FB2D  74                 	db	116
   321  00FB2E  74                 	db	116
   322  00FB2F  6F                 	db	111
   323  00FB30  6E                 	db	110
   324  00FB31  20                 	db	32
   325  00FB32  6F                 	db	111
   326  00FB33  72                 	db	114
   327  00FB34  20                 	db	32
   328  00FB35  50                 	db	80
   329  00FB36  75                 	db	117
   330  00FB37  73                 	db	115
   331  00FB38  68                 	db	104
   332  00FB39  20                 	db	32
   333  00FB3A  73                 	db	115
   334  00FB3B  65                 	db	101
   335  00FB3C  72                 	db	114
   336  00FB3D  76                 	db	118
   337  00FB3E  69                 	db	105
   338  00FB3F  63                 	db	99
   339  00FB40  65                 	db	101
   340  00FB41  20                 	db	32
   341  00FB42  74                 	db	116
   342  00FB43  6F                 	db	111
   343  00FB44  20                 	db	32
   344  00FB45  20                 	db	32
   345  00FB46  65                 	db	101
   346  00FB47  78                 	db	120
   347  00FB48  69                 	db	105
   348  00FB49  74                 	db	116
   349  00FB4A  00                 	db	0
   350  00FB4B                     __end_of_sensoffms:
   351                           	opt stack 0
   352  00FB4B                     _credclr:
   353                           	opt stack 0
   354  00FB4B  50                 	db	80
   355  00FB4C  75                 	db	117
   356  00FB4D  73                 	db	115
   357  00FB4E  68                 	db	104
   358  00FB4F  20                 	db	32
   359  00FB50  62                 	db	98
   360  00FB51  75                 	db	117
   361  00FB52  74                 	db	116
   362  00FB53  74                 	db	116
   363  00FB54  6F                 	db	111
   364  00FB55  6E                 	db	110
   365  00FB56  20                 	db	32
   366  00FB57  31                 	db	49
   367  00FB58  20                 	db	32
   368  00FB59  74                 	db	116
   369  00FB5A  6F                 	db	111
   370  00FB5B  20                 	db	32
   371  00FB5C  63                 	db	99
   372  00FB5D  6C                 	db	108
   373  00FB5E  65                 	db	101
   374  00FB5F  61                 	db	97
   375  00FB60  72                 	db	114
   376  00FB61  20                 	db	32
   377  00FB62  63                 	db	99
   378  00FB63  72                 	db	114
   379  00FB64  65                 	db	101
   380  00FB65  64                 	db	100
   381  00FB66  69                 	db	105
   382  00FB67  74                 	db	116
   383  00FB68  73                 	db	115
   384  00FB69  20                 	db	32
   385  00FB6A  20                 	db	32
   386  00FB6B  20                 	db	32
   387  00FB6C  61                 	db	97
   388  00FB6D  6E                 	db	110
   389  00FB6E  64                 	db	100
   390  00FB6F  20                 	db	32
   391  00FB70  65                 	db	101
   392  00FB71  78                 	db	120
   393  00FB72  69                 	db	105
   394  00FB73  74                 	db	116
   395  00FB74  00                 	db	0
   396  00FB75                     __end_of_credclr:
   397                           	opt stack 0
   398  00FB75                     _settimemsg:
   399                           	opt stack 0
   400  00FB75  50                 	db	80
   401  00FB76  72                 	db	114
   402  00FB77  65                 	db	101
   403  00FB78  73                 	db	115
   404  00FB79  73                 	db	115
   405  00FB7A  20                 	db	32
   406  00FB7B  31                 	db	49
   407  00FB7C  20                 	db	32
   408  00FB7D  3D                 	db	61
   409  00FB7E  20                 	db	32
   410  00FB7F  2B                 	db	43
   411  00FB80  20                 	db	32
   412  00FB81  6F                 	db	111
   413  00FB82  72                 	db	114
   414  00FB83  20                 	db	32
   415  00FB84  32                 	db	50
   416  00FB85  20                 	db	32
   417  00FB86  3D                 	db	61
   418  00FB87  20                 	db	32
   419  00FB88  2D                 	db	45
   420  00FB89  20                 	db	32
   421  00FB8A  20                 	db	32
   422  00FB8B  50                 	db	80
   423  00FB8C  72                 	db	114
   424  00FB8D  65                 	db	101
   425  00FB8E  73                 	db	115
   426  00FB8F  73                 	db	115
   427  00FB90  20                 	db	32
   428  00FB91  38                 	db	56
   429  00FB92  20                 	db	32
   430  00FB93  74                 	db	116
   431  00FB94  6F                 	db	111
   432  00FB95  20                 	db	32
   433  00FB96  45                 	db	69
   434  00FB97  78                 	db	120
   435  00FB98  69                 	db	105
   436  00FB99  74                 	db	116
   437  00FB9A  00                 	db	0
   438  00FB9B                     __end_of_settimemsg:
   439                           	opt stack 0
   440  00FB9B                     _vendtest:
   441                           	opt stack 0
   442  00FB9B  20                 	db	32
   443  00FB9C  50                 	db	80
   444  00FB9D  75                 	db	117
   445  00FB9E  73                 	db	115
   446  00FB9F  68                 	db	104
   447  00FBA0  20                 	db	32
   448  00FBA1  62                 	db	98
   449  00FBA2  75                 	db	117
   450  00FBA3  74                 	db	116
   451  00FBA4  74                 	db	116
   452  00FBA5  6F                 	db	111
   453  00FBA6  6E                 	db	110
   454  00FBA7  20                 	db	32
   455  00FBA8  74                 	db	116
   456  00FBA9  6F                 	db	111
   457  00FBAA  20                 	db	32
   458  00FBAB  20                 	db	32
   459  00FBAC  20                 	db	32
   460  00FBAD  20                 	db	32
   461  00FBAE  20                 	db	32
   462  00FBAF  76                 	db	118
   463  00FBB0  65                 	db	101
   464  00FBB1  6E                 	db	110
   465  00FBB2  64                 	db	100
   466  00FBB3  00                 	db	0
   467  00FBB4                     __end_of_vendtest:
   468                           	opt stack 0
   469  00FBB4                     _priceexit:
   470                           	opt stack 0
   471  00FBB4  50                 	db	80
   472  00FBB5  72                 	db	114
   473  00FBB6  65                 	db	101
   474  00FBB7  73                 	db	115
   475  00FBB8  73                 	db	115
   476  00FBB9  20                 	db	32
   477  00FBBA  73                 	db	115
   478  00FBBB  65                 	db	101
   479  00FBBC  72                 	db	114
   480  00FBBD  76                 	db	118
   481  00FBBE  69                 	db	105
   482  00FBBF  63                 	db	99
   483  00FBC0  65                 	db	101
   484  00FBC1  20                 	db	32
   485  00FBC2  74                 	db	116
   486  00FBC3  6F                 	db	111
   487  00FBC4  20                 	db	32
   488  00FBC5  65                 	db	101
   489  00FBC6  78                 	db	120
   490  00FBC7  69                 	db	105
   491  00FBC8  74                 	db	116
   492  00FBC9  00                 	db	0
   493  00FBCA                     __end_of_priceexit:
   494                           	opt stack 0
   495  00FBCA                     _inithop:
   496                           	opt stack 0
   497  00FBCA  20                 	db	32
   498  00FBCB  20                 	db	32
   499  00FBCC  49                 	db	73
   500  00FBCD  6E                 	db	110
   501  00FBCE  69                 	db	105
   502  00FBCF  74                 	db	116
   503  00FBD0  69                 	db	105
   504  00FBD1  61                 	db	97
   505  00FBD2  6C                 	db	108
   506  00FBD3  69                 	db	105
   507  00FBD4  7A                 	db	122
   508  00FBD5  65                 	db	101
   509  00FBD6  20                 	db	32
   510  00FBD7  48                 	db	72
   511  00FBD8  6F                 	db	111
   512  00FBD9  70                 	db	112
   513  00FBDA  70                 	db	112
   514  00FBDB  65                 	db	101
   515  00FBDC  72                 	db	114
   516  00FBDD  00                 	db	0
   517  00FBDE                     __end_of_inithop:
   518                           	opt stack 0
   519  00FBDE                     _senset:
   520                           	opt stack 0
   521  00FBDE  20                 	db	32
   522  00FBDF  20                 	db	32
   523  00FBE0  53                 	db	83
   524  00FBE1  65                 	db	101
   525  00FBE2  74                 	db	116
   526  00FBE3  75                 	db	117
   527  00FBE4  70                 	db	112
   528  00FBE5  20                 	db	32
   529  00FBE6  53                 	db	83
   530  00FBE7  65                 	db	101
   531  00FBE8  6E                 	db	110
   532  00FBE9  73                 	db	115
   533  00FBEA  6F                 	db	111
   534  00FBEB  72                 	db	114
   535  00FBEC  00                 	db	0
   536  00FBED                     __end_of_senset:
   537                           	opt stack 0
   538  00FBED                     _notetest:
   539                           	opt stack 0
   540  00FBED  20                 	db	32
   541  00FBEE  20                 	db	32
   542  00FBEF  49                 	db	73
   543  00FBF0  6E                 	db	110
   544  00FBF1  73                 	db	115
   545  00FBF2  65                 	db	101
   546  00FBF3  72                 	db	114
   547  00FBF4  74                 	db	116
   548  00FBF5  20                 	db	32
   549  00FBF6  4E                 	db	78
   550  00FBF7  6F                 	db	111
   551  00FBF8  74                 	db	116
   552  00FBF9  65                 	db	101
   553  00FBFA  00                 	db	0
   554  00FBFB                     __end_of_notetest:
   555                           	opt stack 0
   556  00FBFB                     _auditmsg:
   557                           	opt stack 0
   558  00FBFB  20                 	db	32
   559  00FBFC  20                 	db	32
   560  00FBFD  41                 	db	65
   561  00FBFE  75                 	db	117
   562  00FBFF  64                 	db	100
   563  00FC00  69                 	db	105
   564  00FC01  74                 	db	116
   565  00FC02  20                 	db	32
   566  00FC03  4D                 	db	77
   567  00FC04  6F                 	db	111
   568  00FC05  64                 	db	100
   569  00FC06  65                 	db	101
   570  00FC07  00                 	db	0
   571  00FC08                     __end_of_auditmsg:
   572                           	opt stack 0
   573  00FC08                     _pricemsg:
   574                           	opt stack 0
   575  00FC08  50                 	db	80
   576  00FC09  72                 	db	114
   577  00FC0A  69                 	db	105
   578  00FC0B  63                 	db	99
   579  00FC0C  65                 	db	101
   580  00FC0D  20                 	db	32
   581  00FC0E  52                 	db	82
   582  00FC0F  00                 	db	0
   583  00FC10                     __end_of_pricemsg:
   584                           	opt stack 0
   585  00FC10                     _exit:
   586                           	opt stack 0
   587  00FC10  45                 	db	69
   588  00FC11  78                 	db	120
   589  00FC12  69                 	db	105
   590  00FC13  74                 	db	116
   591  00FC14  00                 	db	0
   592  00FC15                     __end_of_exit:
   593                           	opt stack 0
   594  00FC15                     _hoperror:
   595                           	opt stack 0
   596  00FC15  002E               	dw	46
   597  00FC17                     __end_of_hoperror:
   598                           	opt stack 0
   599  00FC17                     _chan8time:
   600                           	opt stack 0
   601  00FC17  002D               	dw	45
   602  00FC19                     __end_of_chan8time:
   603                           	opt stack 0
   604  00FC19                     _chan7time:
   605                           	opt stack 0
   606  00FC19  002C               	dw	44
   607  00FC1B                     __end_of_chan7time:
   608                           	opt stack 0
   609  00FC1B                     _chan6time:
   610                           	opt stack 0
   611  00FC1B  002B               	dw	43
   612  00FC1D                     __end_of_chan6time:
   613                           	opt stack 0
   614  00FC1D                     _chan5time:
   615                           	opt stack 0
   616  00FC1D  002A               	dw	42
   617  00FC1F                     __end_of_chan5time:
   618                           	opt stack 0
   619  00FC1F                     _chan4time:
   620                           	opt stack 0
   621  00FC1F  0029               	dw	41
   622  00FC21                     __end_of_chan4time:
   623                           	opt stack 0
   624  00FC21                     _chan3time:
   625                           	opt stack 0
   626  00FC21  0028               	dw	40
   627  00FC23                     __end_of_chan3time:
   628                           	opt stack 0
   629  00FC23                     _chan2time:
   630                           	opt stack 0
   631  00FC23  0027               	dw	39
   632  00FC25                     __end_of_chan2time:
   633                           	opt stack 0
   634  00FC25                     _chan1time:
   635                           	opt stack 0
   636  00FC25  0026               	dw	38
   637  00FC27                     __end_of_chan1time:
   638                           	opt stack 0
   639  00FC27                     _sensorflags:
   640                           	opt stack 0
   641  00FC27  0025               	dw	37
   642  00FC29                     __end_of_sensorflags:
   643                           	opt stack 0
   644  00FC29                     _chan8linkbits:
   645                           	opt stack 0
   646  00FC29  0024               	dw	36
   647  00FC2B                     __end_of_chan8linkbits:
   648                           	opt stack 0
   649  00FC2B                     _chan7linkbits:
   650                           	opt stack 0
   651  00FC2B  0023               	dw	35
   652  00FC2D                     __end_of_chan7linkbits:
   653                           	opt stack 0
   654  00FC2D                     _chan6linkbits:
   655                           	opt stack 0
   656  00FC2D  0022               	dw	34
   657  00FC2F                     __end_of_chan6linkbits:
   658                           	opt stack 0
   659  00FC2F                     _chan5linkbits:
   660                           	opt stack 0
   661  00FC2F  0021               	dw	33
   662  00FC31                     __end_of_chan5linkbits:
   663                           	opt stack 0
   664  00FC31                     _chan4linkbits:
   665                           	opt stack 0
   666  00FC31  0020               	dw	32
   667  00FC33                     __end_of_chan4linkbits:
   668                           	opt stack 0
   669  00FC33                     _chan3linkbits:
   670                           	opt stack 0
   671  00FC33  001F               	dw	31
   672  00FC35                     __end_of_chan3linkbits:
   673                           	opt stack 0
   674  00FC35                     _chan2linkbits:
   675                           	opt stack 0
   676  00FC35  001E               	dw	30
   677  00FC37                     __end_of_chan2linkbits:
   678                           	opt stack 0
   679  00FC37                     _chan1linkbits:
   680                           	opt stack 0
   681  00FC37  001D               	dw	29
   682  00FC39                     __end_of_chan1linkbits:
   683                           	opt stack 0
   684  00FC39                     _hopcoin:
   685                           	opt stack 0
   686  00FC39  001C               	dw	28
   687  00FC3B                     __end_of_hopcoin:
   688                           	opt stack 0
   689  00FC3B                     _cashoutv:
   690                           	opt stack 0
   691  00FC3B  001A               	dw	26
   692  00FC3D                     __end_of_cashoutv:
   693                           	opt stack 0
   694  00FC3D                     _sensval:
   695                           	opt stack 0
   696  00FC3D  0019               	dw	25
   697  00FC3F                     __end_of_sensval:
   698                           	opt stack 0
   699  00FC3F                     _notebits:
   700                           	opt stack 0
   701  00FC3F  0018               	dw	24
   702  00FC41                     __end_of_notebits:
   703                           	opt stack 0
   704  00FC41                     _venderrors:
   705                           	opt stack 0
   706  00FC41  0017               	dw	23
   707  00FC43                     __end_of_venderrors:
   708                           	opt stack 0
   709  00FC43                     _pricestore:
   710                           	opt stack 0
   711  00FC43  000F               	dw	15
   712  00FC45                     __end_of_pricestore:
   713                           	opt stack 0
   714  00FC45                     _vendstore:
   715                           	opt stack 0
   716  00FC45  0007               	dw	7
   717  00FC47                     __end_of_vendstore:
   718                           	opt stack 0
   719  00FC47                     _cashint:
   720                           	opt stack 0
   721  00FC47  0004               	dw	4
   722  00FC49                     __end_of_cashint:
   723                           	opt stack 0
   724  00FC49                     _cashinv:
   725                           	opt stack 0
   726  00FC49  0002               	dw	2
   727  00FC4B                     __end_of_cashinv:
   728                           	opt stack 0
   729  00FC4B                     _credmem:
   730                           	opt stack 0
   731  00FC4B  0000               	dw	0
   732  00FC4D                     __end_of_credmem:
   733                           	opt stack 0
   734  00FC4D                     _secondadd:
   735                           	opt stack 0
   736  00FC4D  1E46               	dw	7750
   737  00FC4F                     __end_of_secondadd:
   738                           	opt stack 0
   739  00FC4F                     _second_5:
   740                           	opt stack 0
   741  00FC4F  0F23               	dw	3875
   742  00FC51                     __end_of_second_5:
   743                           	opt stack 0
   744  00FC51                     _second1:
   745                           	opt stack 0
   746  00FC51  E1BA               	dw	57786
   747  00FC53                     __end_of_second1:
   748                           	opt stack 0
   749  00FC53                     _cc_poll:
   750                           	opt stack 0
   751  00FC53  FE                 	db	254
   752  00FC54                     __end_of_cc_poll:
   753                           	opt stack 0
   754  00FC54                     _cc_adpoll:
   755                           	opt stack 0
   756  00FC54  FD                 	db	253
   757  00FC55                     __end_of_cc_adpoll:
   758                           	opt stack 0
   759  00FC55                     _cc_serial:
   760                           	opt stack 0
   761  00FC55  F2                 	db	242
   762  00FC56                     __end_of_cc_serial:
   763                           	opt stack 0
   764  00FC56                     _cc_newpin:
   765                           	opt stack 0
   766  00FC56  DB                 	db	219
   767  00FC57                     __end_of_cc_newpin:
   768                           	opt stack 0
   769  00FC57                     _cc_pin:
   770                           	opt stack 0
   771  00FC57  DA                 	db	218
   772  00FC58                     __end_of_cc_pin:
   773                           	opt stack 0
   774  00FC58                     _cc_level:
   775                           	opt stack 0
   776  00FC58  EC                 	db	236
   777  00FC59                     __end_of_cc_level:
   778                           	opt stack 0
   779  00FC59                     _cc_stop:
   780                           	opt stack 0
   781  00FC59  AC                 	db	172
   782  00FC5A                     __end_of_cc_stop:
   783                           	opt stack 0
   784  00FC5A                     _cc_countrq:
   785                           	opt stack 0
   786  00FC5A  A8                 	db	168
   787  00FC5B                     __end_of_cc_countrq:
   788                           	opt stack 0
   789  00FC5B                     _cc_pay:
   790                           	opt stack 0
   791  00FC5B  A7                 	db	167
   792  00FC5C                     __end_of_cc_pay:
   793                           	opt stack 0
   794  00FC5C                     _cc_status:
   795                           	opt stack 0
   796  00FC5C  A6                 	db	166
   797  00FC5D                     __end_of_cc_status:
   798                           	opt stack 0
   799  00FC5D                     _cc_enable:
   800                           	opt stack 0
   801  00FC5D  A4                 	db	164
   802  00FC5E                     __end_of_cc_enable:
   803                           	opt stack 0
   804  00FC5E                     _cc_test:
   805                           	opt stack 0
   806  00FC5E  A3                 	db	163
   807  00FC5F                     __end_of_cc_test:
   808                           	opt stack 0
   809  00FC5F                     _cc_reset:
   810                           	opt stack 0
   811  00FC5F  01                 	db	1
   812  00FC60                     __end_of_cc_reset:
   813                           	opt stack 0
   814  00FC60                     _mastadd:
   815                           	opt stack 0
   816  00FC60  01                 	db	1
   817  00FC61                     __end_of_mastadd:
   818                           	opt stack 0
   819  00FC61                     _hopadd:
   820                           	opt stack 0
   821  00FC61  03                 	db	3
   822  00FC62                     __end_of_hopadd:
   823                           	opt stack 0
   824  00FC62                     _theft_attempt:
   825                           	opt stack 0
   826  00FC62  0C                 	db	12
   827  00FC63                     __end_of_theft_attempt:
   828                           	opt stack 0
   829  00FC63                     _note_rejected:
   830                           	opt stack 0
   831  00FC63  0B                 	db	11
   832  00FC64                     __end_of_note_rejected:
   833                           	opt stack 0
   834  00FC64                     _invalid_escrow:
   835                           	opt stack 0
   836  00FC64  0A                 	db	10
   837  00FC65                     __end_of_invalid_escrow:
   838                           	opt stack 0
   839  00FC65                     _acept_disabled:
   840                           	opt stack 0
   841  00FC65  09                 	db	9
   842  00FC66                     __end_of_acept_disabled:
   843                           	opt stack 0
   844  00FC66                     _cashbox_err:
   845                           	opt stack 0
   846  00FC66  08                 	db	8
   847  00FC67                     __end_of_cashbox_err:
   848                           	opt stack 0
   849  00FC67                     _note_removed:
   850                           	opt stack 0
   851  00FC67  07                 	db	7
   852  00FC68                     __end_of_note_removed:
   853                           	opt stack 0
   854  00FC68                     _just_reset:
   855                           	opt stack 0
   856  00FC68  06                 	db	6
   857  00FC69                     __end_of_just_reset:
   858                           	opt stack 0
   859  00FC69                     _jammed_err:
   860                           	opt stack 0
   861  00FC69  05                 	db	5
   862  00FC6A                     __end_of_jammed_err:
   863                           	opt stack 0
   864  00FC6A                     _rom_error:
   865                           	opt stack 0
   866  00FC6A  04                 	db	4
   867  00FC6B                     __end_of_rom_error:
   868                           	opt stack 0
   869  00FC6B                     _just_busy:
   870                           	opt stack 0
   871  00FC6B  03                 	db	3
   872  00FC6C                     __end_of_just_busy:
   873                           	opt stack 0
   874  00FC6C                     _sens_error:
   875                           	opt stack 0
   876  00FC6C  02                 	db	2
   877  00FC6D                     __end_of_sens_error:
   878                           	opt stack 0
   879  00FC6D                     _motr_error:
   880                           	opt stack 0
   881  00FC6D  01                 	db	1
   882  00FC6E                     __end_of_motr_error:
   883                           	opt stack 0
   884  00FC6E                     _note_features:
   885                           	opt stack 0
   886  00FC6E  33                 	db	51
   887  00FC6F                     __end_of_note_features:
   888                           	opt stack 0
   889  00FC6F                     _note_stacker:
   890                           	opt stack 0
   891  00FC6F  36                 	db	54
   892  00FC70                     __end_of_note_stacker:
   893                           	opt stack 0
   894  00FC70                     _note_escrow:
   895                           	opt stack 0
   896  00FC70  35                 	db	53
   897  00FC71                     __end_of_note_escrow:
   898                           	opt stack 0
   899  00FC71                     _note_type:
   900                           	opt stack 0
   901  00FC71  34                 	db	52
   902  00FC72                     __end_of_note_type:
   903                           	opt stack 0
   904  00FC72                     _note_poll:
   905                           	opt stack 0
   906  00FC72  33                 	db	51
   907  00FC73                     __end_of_note_poll:
   908                           	opt stack 0
   909  00FC73                     _note_security:
   910                           	opt stack 0
   911  00FC73  32                 	db	50
   912  00FC74                     __end_of_note_security:
   913                           	opt stack 0
   914  00FC74                     _note_setup:
   915                           	opt stack 0
   916  00FC74  31                 	db	49
   917  00FC75                     __end_of_note_setup:
   918                           	opt stack 0
   919  00FC75                     _note_reset:
   920                           	opt stack 0
   921  00FC75  30                 	db	48
   922  00FC76                     __end_of_note_reset:
   923                           	opt stack 0
   924  00FC76                     _line4:
   925                           	opt stack 0
   926  00FC76  54                 	db	84
   927  00FC77                     __end_of_line4:
   928                           	opt stack 0
   929  00FC77                     _line3:
   930                           	opt stack 0
   931  00FC77  14                 	db	20
   932  00FC78                     __end_of_line3:
   933                           	opt stack 0
   934  00FC78                     _line2:
   935                           	opt stack 0
   936  00FC78  40                 	db	64
   937  00FC79                     __end_of_line2:
   938                           	opt stack 0
   939  00FC79                     _line1:
   940                           	opt stack 0
   941  00FC79  00                 	db	0
   942  00FC7A                     __end_of_line1:
   943                           	opt stack 0
   944  00FC7A                     _dispsl:
   945                           	opt stack 0
   946  00FC7A  18                 	db	24
   947  00FC7B                     __end_of_dispsl:
   948                           	opt stack 0
   949  00FC7B                     _dispsr:
   950                           	opt stack 0
   951  00FC7B  1B                 	db	27
   952  00FC7C                     __end_of_dispsr:
   953                           	opt stack 0
   954  00FC7C                     _dispoff:
   955                           	opt stack 0
   956  00FC7C  08                 	db	8
   957  00FC7D                     __end_of_dispoff:
   958                           	opt stack 0
   959  00FC7D                     _dispshleft:
   960                           	opt stack 0
   961  00FC7D  07                 	db	7
   962  00FC7E                     __end_of_dispshleft:
   963                           	opt stack 0
   964  00FC7E                     _dispshright:
   965                           	opt stack 0
   966  00FC7E  05                 	db	5
   967  00FC7F                     __end_of_dispshright:
   968                           	opt stack 0
   969  00FC7F                     _dispcursor:
   970                           	opt stack 0
   971  00FC7F  04                 	db	4
   972  00FC80                     __end_of_dispcursor:
   973                           	opt stack 0
   974  00FC80                     _dispnormal:
   975                           	opt stack 0
   976  00FC80  06                 	db	6
   977  00FC81                     __end_of_dispnormal:
   978                           	opt stack 0
   979  00FC81                     _dsphome:
   980                           	opt stack 0
   981  00FC81  02                 	db	2
   982  00FC82                     __end_of_dsphome:
   983                           	opt stack 0
   984  00FC82                     _dispaddr:
   985                           	opt stack 0
   986  00FC82  A8                 	db	168
   987  00FC83                     __end_of_dispaddr:
   988                           	opt stack 0
   989  00FC83                     _dispclr:
   990                           	opt stack 0
   991  00FC83  01                 	db	1
   992  00FC84                     __end_of_dispclr:
   993                           	opt stack 0
   994  00FC84                     _dispon:
   995                           	opt stack 0
   996  00FC84  0C                 	db	12
   997  00FC85                     __end_of_dispon:
   998                           	opt stack 0
   999  00FC85                     _dispfunc3:
  1000                           	opt stack 0
  1001  00FC85  2C                 	db	44
  1002  00FC86                     __end_of_dispfunc3:
  1003                           	opt stack 0
  1004  00FC86                     _dispfunc2:
  1005                           	opt stack 0
  1006  00FC86  28                 	db	40
  1007  00FC87                     __end_of_dispfunc2:
  1008                           	opt stack 0
  1009  00FC87                     _dispfunc1:
  1010                           	opt stack 0
  1011  00FC87  24                 	db	36
  1012  00FC88                     __end_of_dispfunc1:
  1013                           	opt stack 0
  1014  00FC88                     _servmsg:
  1015                           	opt stack 0
  1016  00FC88  31                 	db	49
  1017  00FC89  20                 	db	32
  1018  00FC8A  3D                 	db	61
  1019  00FC8B  20                 	db	32
  1020  00FC8C  41                 	db	65
  1021  00FC8D  75                 	db	117
  1022  00FC8E  64                 	db	100
  1023  00FC8F  69                 	db	105
  1024  00FC90  74                 	db	116
  1025  00FC91  20                 	db	32
  1026  00FC92  32                 	db	50
  1027  00FC93  20                 	db	32
  1028  00FC94  3D                 	db	61
  1029  00FC95  20                 	db	32
  1030  00FC96  53                 	db	83
  1031  00FC97  65                 	db	101
  1032  00FC98  6E                 	db	110
  1033  00FC99  73                 	db	115
  1034  00FC9A  6F                 	db	111
  1035  00FC9B  72                 	db	114
  1036  00FC9C  33                 	db	51
  1037  00FC9D  3D                 	db	61
  1038  00FC9E  48                 	db	72
  1039  00FC9F  6F                 	db	111
  1040  00FCA0  70                 	db	112
  1041  00FCA1  2D                 	db	45
  1042  00FCA2  43                 	db	67
  1043  00FCA3  6F                 	db	111
  1044  00FCA4  69                 	db	105
  1045  00FCA5  6E                 	db	110
  1046  00FCA6  20                 	db	32
  1047  00FCA7  34                 	db	52
  1048  00FCA8  3D                 	db	61
  1049  00FCA9  4E                 	db	78
  1050  00FCAA  6F                 	db	111
  1051  00FCAB  74                 	db	116
  1052  00FCAC  65                 	db	101
  1053  00FCAD  2D                 	db	45
  1054  00FCAE  65                 	db	101
  1055  00FCAF  6E                 	db	110
  1056  00FCB0  35                 	db	53
  1057  00FCB1  3D                 	db	61
  1058  00FCB2  43                 	db	67
  1059  00FCB3  72                 	db	114
  1060  00FCB4  65                 	db	101
  1061  00FCB5  64                 	db	100
  1062  00FCB6  2D                 	db	45
  1063  00FCB7  63                 	db	99
  1064  00FCB8  6C                 	db	108
  1065  00FCB9  72                 	db	114
  1066  00FCBA  20                 	db	32
  1067  00FCBB  36                 	db	54
  1068  00FCBC  3D                 	db	61
  1069  00FCBD  50                 	db	80
  1070  00FCBE  72                 	db	114
  1071  00FCBF  69                 	db	105
  1072  00FCC0  63                 	db	99
  1073  00FCC1  65                 	db	101
  1074  00FCC2  73                 	db	115
  1075  00FCC3  20                 	db	32
  1076  00FCC4  37                 	db	55
  1077  00FCC5  3D                 	db	61
  1078  00FCC6  56                 	db	86
  1079  00FCC7  65                 	db	101
  1080  00FCC8  6E                 	db	110
  1081  00FCC9  64                 	db	100
  1082  00FCCA  20                 	db	32
  1083  00FCCB  73                 	db	115
  1084  00FCCC  65                 	db	101
  1085  00FCCD  74                 	db	116
  1086  00FCCE  75                 	db	117
  1087  00FCCF  70                 	db	112
  1088  00FCD0  20                 	db	32
  1089  00FCD1  38                 	db	56
  1090  00FCD2  3D                 	db	61
  1091  00FCD3  45                 	db	69
  1092  00FCD4  78                 	db	120
  1093  00FCD5  69                 	db	105
  1094  00FCD6  74                 	db	116
  1095  00FCD7  00                 	db	0
  1096  00FCD8                     __end_of_servmsg:
  1097                           	opt stack 0
  1098  00FCD8                     _vendsetup:
  1099                           	opt stack 0
  1100  00FCD8  50                 	db	80
  1101  00FCD9  75                 	db	117
  1102  00FCDA  73                 	db	115
  1103  00FCDB  68                 	db	104
  1104  00FCDC  20                 	db	32
  1105  00FCDD  31                 	db	49
  1106  00FCDE  20                 	db	32
  1107  00FCDF  3D                 	db	61
  1108  00FCE0  20                 	db	32
  1109  00FCE1  56                 	db	86
  1110  00FCE2  65                 	db	101
  1111  00FCE3  6E                 	db	110
  1112  00FCE4  64                 	db	100
  1113  00FCE5  20                 	db	32
  1114  00FCE6  54                 	db	84
  1115  00FCE7  69                 	db	105
  1116  00FCE8  6D                 	db	109
  1117  00FCE9  65                 	db	101
  1118  00FCEA  2C                 	db	44
  1119  00FCEB  20                 	db	32
  1120  00FCEC  32                 	db	50
  1121  00FCED  20                 	db	32
  1122  00FCEE  3D                 	db	61
  1123  00FCEF  20                 	db	32
  1124  00FCF0  43                 	db	67
  1125  00FCF1  68                 	db	104
  1126  00FCF2  61                 	db	97
  1127  00FCF3  6E                 	db	110
  1128  00FCF4  20                 	db	32
  1129  00FCF5  4C                 	db	76
  1130  00FCF6  69                 	db	105
  1131  00FCF7  6E                 	db	110
  1132  00FCF8  6B                 	db	107
  1133  00FCF9  2C                 	db	44
  1134  00FCFA  20                 	db	32
  1135  00FCFB  20                 	db	32
  1136  00FCFC  20                 	db	32
  1137  00FCFD  20                 	db	32
  1138  00FCFE  20                 	db	32
  1139  00FCFF  20                 	db	32
  1140  00FD00  33                 	db	51
  1141  00FD01  20                 	db	32
  1142  00FD02  3D                 	db	61
  1143  00FD03  20                 	db	32
  1144  00FD04  53                 	db	83
  1145  00FD05  65                 	db	101
  1146  00FD06  6E                 	db	110
  1147  00FD07  73                 	db	115
  1148  00FD08  6F                 	db	111
  1149  00FD09  72                 	db	114
  1150  00FD0A  20                 	db	32
  1151  00FD0B  4F                 	db	79
  1152  00FD0C  66                 	db	102
  1153  00FD0D  66                 	db	102
  1154  00FD0E  2C                 	db	44
  1155  00FD0F  20                 	db	32
  1156  00FD10  20                 	db	32
  1157  00FD11  20                 	db	32
  1158  00FD12  20                 	db	32
  1159  00FD13  20                 	db	32
  1160  00FD14  34                 	db	52
  1161  00FD15  20                 	db	32
  1162  00FD16  3D                 	db	61
  1163  00FD17  20                 	db	32
  1164  00FD18  52                 	db	82
  1165  00FD19  65                 	db	101
  1166  00FD1A  73                 	db	115
  1167  00FD1B  65                 	db	101
  1168  00FD1C  74                 	db	116
  1169  00FD1D  2C                 	db	44
  1170  00FD1E  20                 	db	32
  1171  00FD1F  38                 	db	56
  1172  00FD20  20                 	db	32
  1173  00FD21  3D                 	db	61
  1174  00FD22  20                 	db	32
  1175  00FD23  65                 	db	101
  1176  00FD24  78                 	db	120
  1177  00FD25  69                 	db	105
  1178  00FD26  74                 	db	116
  1179  00FD27  00                 	db	0
  1180  00FD28                     __end_of_vendsetup:
  1181                           	opt stack 0
  1182  00FD28                     _setnotes:
  1183                           	opt stack 0
  1184  00FD28  45                 	db	69
  1185  00FD29  6E                 	db	110
  1186  00FD2A  61                 	db	97
  1187  00FD2B  62                 	db	98
  1188  00FD2C  6C                 	db	108
  1189  00FD2D  65                 	db	101
  1190  00FD2E  20                 	db	32
  1191  00FD2F  2F                 	db	47
  1192  00FD30  20                 	db	32
  1193  00FD31  44                 	db	68
  1194  00FD32  69                 	db	105
  1195  00FD33  73                 	db	115
  1196  00FD34  61                 	db	97
  1197  00FD35  62                 	db	98
  1198  00FD36  6C                 	db	108
  1199  00FD37  65                 	db	101
  1200  00FD38  20                 	db	32
  1201  00FD39  20                 	db	32
  1202  00FD3A  20                 	db	32
  1203  00FD3B  20                 	db	32
  1204  00FD3C  31                 	db	49
  1205  00FD3D  20                 	db	32
  1206  00FD3E  3D                 	db	61
  1207  00FD3F  20                 	db	32
  1208  00FD40  52                 	db	82
  1209  00FD41  31                 	db	49
  1210  00FD42  30                 	db	48
  1211  00FD43  2C                 	db	44
  1212  00FD44  20                 	db	32
  1213  00FD45  32                 	db	50
  1214  00FD46  20                 	db	32
  1215  00FD47  3D                 	db	61
  1216  00FD48  20                 	db	32
  1217  00FD49  52                 	db	82
  1218  00FD4A  32                 	db	50
  1219  00FD4B  30                 	db	48
  1220  00FD4C  20                 	db	32
  1221  00FD4D  20                 	db	32
  1222  00FD4E  20                 	db	32
  1223  00FD4F  20                 	db	32
  1224  00FD50  33                 	db	51
  1225  00FD51  20                 	db	32
  1226  00FD52  3D                 	db	61
  1227  00FD53  20                 	db	32
  1228  00FD54  52                 	db	82
  1229  00FD55  35                 	db	53
  1230  00FD56  30                 	db	48
  1231  00FD57  2C                 	db	44
  1232  00FD58  20                 	db	32
  1233  00FD59  34                 	db	52
  1234  00FD5A  20                 	db	32
  1235  00FD5B  3D                 	db	61
  1236  00FD5C  20                 	db	32
  1237  00FD5D  52                 	db	82
  1238  00FD5E  31                 	db	49
  1239  00FD5F  30                 	db	48
  1240  00FD60  30                 	db	48
  1241  00FD61  20                 	db	32
  1242  00FD62  20                 	db	32
  1243  00FD63  20                 	db	32
  1244  00FD64  35                 	db	53
  1245  00FD65  20                 	db	32
  1246  00FD66  3D                 	db	61
  1247  00FD67  20                 	db	32
  1248  00FD68  52                 	db	82
  1249  00FD69  32                 	db	50
  1250  00FD6A  30                 	db	48
  1251  00FD6B  30                 	db	48
  1252  00FD6C  00                 	db	0
  1253  00FD6D                     __end_of_setnotes:
  1254                           	opt stack 0
  1255  00FD6D                     _pricesetm2:
  1256                           	opt stack 0
  1257  00FD6D  50                 	db	80
  1258  00FD6E  72                 	db	114
  1259  00FD6F  65                 	db	101
  1260  00FD70  73                 	db	115
  1261  00FD71  73                 	db	115
  1262  00FD72  20                 	db	32
  1263  00FD73  63                 	db	99
  1264  00FD74  68                 	db	104
  1265  00FD75  61                 	db	97
  1266  00FD76  6E                 	db	110
  1267  00FD77  6E                 	db	110
  1268  00FD78  65                 	db	101
  1269  00FD79  6C                 	db	108
  1270  00FD7A  20                 	db	32
  1271  00FD7B  62                 	db	98
  1272  00FD7C  75                 	db	117
  1273  00FD7D  74                 	db	116
  1274  00FD7E  74                 	db	116
  1275  00FD7F  6F                 	db	111
  1276  00FD80  6E                 	db	110
  1277  00FD81  20                 	db	32
  1278  00FD82  20                 	db	32
  1279  00FD83  20                 	db	32
  1280  00FD84  20                 	db	32
  1281  00FD85  74                 	db	116
  1282  00FD86  6F                 	db	111
  1283  00FD87  20                 	db	32
  1284  00FD88  73                 	db	115
  1285  00FD89  65                 	db	101
  1286  00FD8A  74                 	db	116
  1287  00FD8B  20                 	db	32
  1288  00FD8C  70                 	db	112
  1289  00FD8D  72                 	db	114
  1290  00FD8E  69                 	db	105
  1291  00FD8F  63                 	db	99
  1292  00FD90  65                 	db	101
  1293  00FD91  20                 	db	32
  1294  00FD92  20                 	db	32
  1295  00FD93  20                 	db	32
  1296  00FD94  20                 	db	32
  1297  00FD95  20                 	db	32
  1298  00FD96  20                 	db	32
  1299  00FD97  53                 	db	83
  1300  00FD98  65                 	db	101
  1301  00FD99  72                 	db	114
  1302  00FD9A  76                 	db	118
  1303  00FD9B  69                 	db	105
  1304  00FD9C  63                 	db	99
  1305  00FD9D  65                 	db	101
  1306  00FD9E  20                 	db	32
  1307  00FD9F  3D                 	db	61
  1308  00FDA0  20                 	db	32
  1309  00FDA1  45                 	db	69
  1310  00FDA2  78                 	db	120
  1311  00FDA3  69                 	db	105
  1312  00FDA4  74                 	db	116
  1313  00FDA5  00                 	db	0
  1314  00FDA6                     __end_of_pricesetm2:
  1315                           	opt stack 0
  1316  00FDA6                     _chanlinkm:
  1317                           	opt stack 0
  1318  00FDA6  50                 	db	80
  1319  00FDA7  72                 	db	114
  1320  00FDA8  65                 	db	101
  1321  00FDA9  73                 	db	115
  1322  00FDAA  73                 	db	115
  1323  00FDAB  20                 	db	32
  1324  00FDAC  63                 	db	99
  1325  00FDAD  68                 	db	104
  1326  00FDAE  61                 	db	97
  1327  00FDAF  6E                 	db	110
  1328  00FDB0  6E                 	db	110
  1329  00FDB1  65                 	db	101
  1330  00FDB2  6C                 	db	108
  1331  00FDB3  20                 	db	32
  1332  00FDB4  62                 	db	98
  1333  00FDB5  75                 	db	117
  1334  00FDB6  74                 	db	116
  1335  00FDB7  74                 	db	116
  1336  00FDB8  6F                 	db	111
  1337  00FDB9  6E                 	db	110
  1338  00FDBA  20                 	db	32
  1339  00FDBB  20                 	db	32
  1340  00FDBC  20                 	db	32
  1341  00FDBD  20                 	db	32
  1342  00FDBE  74                 	db	116
  1343  00FDBF  6F                 	db	111
  1344  00FDC0  20                 	db	32
  1345  00FDC1  6C                 	db	108
  1346  00FDC2  69                 	db	105
  1347  00FDC3  6E                 	db	110
  1348  00FDC4  6B                 	db	107
  1349  00FDC5  20                 	db	32
  1350  00FDC6  74                 	db	116
  1351  00FDC7  6F                 	db	111
  1352  00FDC8  20                 	db	32
  1353  00FDC9  20                 	db	32
  1354  00FDCA  20                 	db	32
  1355  00FDCB  20                 	db	32
  1356  00FDCC  20                 	db	32
  1357  00FDCD  20                 	db	32
  1358  00FDCE  53                 	db	83
  1359  00FDCF  65                 	db	101
  1360  00FDD0  72                 	db	114
  1361  00FDD1  76                 	db	118
  1362  00FDD2  69                 	db	105
  1363  00FDD3  63                 	db	99
  1364  00FDD4  65                 	db	101
  1365  00FDD5  20                 	db	32
  1366  00FDD6  3D                 	db	61
  1367  00FDD7  20                 	db	32
  1368  00FDD8  45                 	db	69
  1369  00FDD9  78                 	db	120
  1370  00FDDA  69                 	db	105
  1371  00FDDB  74                 	db	116
  1372  00FDDC  00                 	db	0
  1373  00FDDD                     __end_of_chanlinkm:
  1374                           	opt stack 0
  1375  00FDDD                     _hoppcoin:
  1376                           	opt stack 0
  1377  00FDDD  48                 	db	72
  1378  00FDDE  6F                 	db	111
  1379  00FDDF  70                 	db	112
  1380  00FDE0  70                 	db	112
  1381  00FDE1  65                 	db	101
  1382  00FDE2  72                 	db	114
  1383  00FDE3  20                 	db	32
  1384  00FDE4  43                 	db	67
  1385  00FDE5  6F                 	db	111
  1386  00FDE6  69                 	db	105
  1387  00FDE7  6E                 	db	110
  1388  00FDE8  20                 	db	32
  1389  00FDE9  20                 	db	32
  1390  00FDEA  20                 	db	32
  1391  00FDEB  20                 	db	32
  1392  00FDEC  20                 	db	32
  1393  00FDED  20                 	db	32
  1394  00FDEE  20                 	db	32
  1395  00FDEF  20                 	db	32
  1396  00FDF0  20                 	db	32
  1397  00FDF1  42                 	db	66
  1398  00FDF2  75                 	db	117
  1399  00FDF3  74                 	db	116
  1400  00FDF4  74                 	db	116
  1401  00FDF5  6F                 	db	111
  1402  00FDF6  6E                 	db	110
  1403  00FDF7  20                 	db	32
  1404  00FDF8  31                 	db	49
  1405  00FDF9  20                 	db	32
  1406  00FDFA  3D                 	db	61
  1407  00FDFB  20                 	db	32
  1408  00FDFC  2B                 	db	43
  1409  00FDFD  20                 	db	32
  1410  00FDFE  26                 	db	38
  1411  00FDFF  20                 	db	32
  1412  00FE00  32                 	db	50
  1413  00FE01  20                 	db	32
  1414  00FE02  3D                 	db	61
  1415  00FE03  20                 	db	32
  1416  00FE04  2D                 	db	45
  1417  00FE05  20                 	db	32
  1418  00FE06  56                 	db	86
  1419  00FE07  61                 	db	97
  1420  00FE08  6C                 	db	108
  1421  00FE09  75                 	db	117
  1422  00FE0A  65                 	db	101
  1423  00FE0B  20                 	db	32
  1424  00FE0C  3D                 	db	61
  1425  00FE0D  20                 	db	32
  1426  00FE0E  52                 	db	82
  1427  00FE0F  00                 	db	0
  1428  00FE10                     __end_of_hoppcoin:
  1429                           	opt stack 0
  1430  00FE10                     _vendtimem:
  1431                           	opt stack 0
  1432  00FE10  50                 	db	80
  1433  00FE11  75                 	db	117
  1434  00FE12  73                 	db	115
  1435  00FE13  68                 	db	104
  1436  00FE14  20                 	db	32
  1437  00FE15  31                 	db	49
  1438  00FE16  20                 	db	32
  1439  00FE17  3D                 	db	61
  1440  00FE18  20                 	db	32
  1441  00FE19  2B                 	db	43
  1442  00FE1A  2E                 	db	46
  1443  00FE1B  35                 	db	53
  1444  00FE1C  20                 	db	32
  1445  00FE1D  73                 	db	115
  1446  00FE1E  65                 	db	101
  1447  00FE1F  63                 	db	99
  1448  00FE20  6F                 	db	111
  1449  00FE21  6E                 	db	110
  1450  00FE22  64                 	db	100
  1451  00FE23  20                 	db	32
  1452  00FE24  50                 	db	80
  1453  00FE25  75                 	db	117
  1454  00FE26  73                 	db	115
  1455  00FE27  68                 	db	104
  1456  00FE28  20                 	db	32
  1457  00FE29  32                 	db	50
  1458  00FE2A  20                 	db	32
  1459  00FE2B  3D                 	db	61
  1460  00FE2C  20                 	db	32
  1461  00FE2D  2D                 	db	45
  1462  00FE2E  2E                 	db	46
  1463  00FE2F  35                 	db	53
  1464  00FE30  20                 	db	32
  1465  00FE31  73                 	db	115
  1466  00FE32  65                 	db	101
  1467  00FE33  63                 	db	99
  1468  00FE34  6F                 	db	111
  1469  00FE35  6E                 	db	110
  1470  00FE36  64                 	db	100
  1471  00FE37  20                 	db	32
  1472  00FE38  00                 	db	0
  1473  00FE39                     __end_of_vendtimem:
  1474                           	opt stack 0
  1475  00FE39                     _setimemsg:
  1476                           	opt stack 0
  1477  00FE39  50                 	db	80
  1478  00FE3A  75                 	db	117
  1479  00FE3B  73                 	db	115
  1480  00FE3C  68                 	db	104
  1481  00FE3D  20                 	db	32
  1482  00FE3E  63                 	db	99
  1483  00FE3F  68                 	db	104
  1484  00FE40  61                 	db	97
  1485  00FE41  6E                 	db	110
  1486  00FE42  6E                 	db	110
  1487  00FE43  65                 	db	101
  1488  00FE44  6C                 	db	108
  1489  00FE45  20                 	db	32
  1490  00FE46  62                 	db	98
  1491  00FE47  75                 	db	117
  1492  00FE48  74                 	db	116
  1493  00FE49  74                 	db	116
  1494  00FE4A  6F                 	db	111
  1495  00FE4B  6E                 	db	110
  1496  00FE4C  20                 	db	32
  1497  00FE4D  50                 	db	80
  1498  00FE4E  75                 	db	117
  1499  00FE4F  73                 	db	115
  1500  00FE50  68                 	db	104
  1501  00FE51  20                 	db	32
  1502  00FE52  73                 	db	115
  1503  00FE53  65                 	db	101
  1504  00FE54  72                 	db	114
  1505  00FE55  76                 	db	118
  1506  00FE56  69                 	db	105
  1507  00FE57  63                 	db	99
  1508  00FE58  65                 	db	101
  1509  00FE59  20                 	db	32
  1510  00FE5A  74                 	db	116
  1511  00FE5B  6F                 	db	111
  1512  00FE5C  20                 	db	32
  1513  00FE5D  65                 	db	101
  1514  00FE5E  78                 	db	120
  1515  00FE5F  69                 	db	105
  1516  00FE60  74                 	db	116
  1517  00FE61  00                 	db	0
  1518  00FE62                     __end_of_setimemsg:
  1519                           	opt stack 0
  1520  00FE62                     _inscoin:
  1521                           	opt stack 0
  1522  00FE62  49                 	db	73
  1523  00FE63  6E                 	db	110
  1524  00FE64  73                 	db	115
  1525  00FE65  65                 	db	101
  1526  00FE66  72                 	db	114
  1527  00FE67  74                 	db	116
  1528  00FE68  20                 	db	32
  1529  00FE69  4E                 	db	78
  1530  00FE6A  6F                 	db	111
  1531  00FE6B  74                 	db	116
  1532  00FE6C  65                 	db	101
  1533  00FE6D  73                 	db	115
  1534  00FE6E  20                 	db	32
  1535  00FE6F  26                 	db	38
  1536  00FE70  20                 	db	32
  1537  00FE71  50                 	db	80
  1538  00FE72  72                 	db	114
  1539  00FE73  65                 	db	101
  1540  00FE74  73                 	db	115
  1541  00FE75  73                 	db	115
  1542  00FE76  4C                 	db	76
  1543  00FE77  69                 	db	105
  1544  00FE78  74                 	db	116
  1545  00FE79  20                 	db	32
  1546  00FE7A  42                 	db	66
  1547  00FE7B  75                 	db	117
  1548  00FE7C  74                 	db	116
  1549  00FE7D  74                 	db	116
  1550  00FE7E  6F                 	db	111
  1551  00FE7F  6E                 	db	110
  1552  00FE80  20                 	db	32
  1553  00FE81  54                 	db	84
  1554  00FE82  6F                 	db	111
  1555  00FE83  20                 	db	32
  1556  00FE84  56                 	db	86
  1557  00FE85  65                 	db	101
  1558  00FE86  6E                 	db	110
  1559  00FE87  64                 	db	100
  1560  00FE88  00                 	db	0
  1561  00FE89                     __end_of_inscoin:
  1562                           	opt stack 0
  1563  00FE89                     _initnote:
  1564                           	opt stack 0
  1565  00FE89  20                 	db	32
  1566  00FE8A  20                 	db	32
  1567  00FE8B  20                 	db	32
  1568  00FE8C  20                 	db	32
  1569  00FE8D  20                 	db	32
  1570  00FE8E  49                 	db	73
  1571  00FE8F  6E                 	db	110
  1572  00FE90  69                 	db	105
  1573  00FE91  74                 	db	116
  1574  00FE92  69                 	db	105
  1575  00FE93  61                 	db	97
  1576  00FE94  6C                 	db	108
  1577  00FE95  69                 	db	105
  1578  00FE96  7A                 	db	122
  1579  00FE97  65                 	db	101
  1580  00FE98  20                 	db	32
  1581  00FE99  20                 	db	32
  1582  00FE9A  20                 	db	32
  1583  00FE9B  20                 	db	32
  1584  00FE9C  20                 	db	32
  1585  00FE9D  20                 	db	32
  1586  00FE9E  20                 	db	32
  1587  00FE9F  20                 	db	32
  1588  00FEA0  20                 	db	32
  1589  00FEA1  20                 	db	32
  1590  00FEA2  4E                 	db	78
  1591  00FEA3  6F                 	db	111
  1592  00FEA4  74                 	db	116
  1593  00FEA5  65                 	db	101
  1594  00FEA6  20                 	db	32
  1595  00FEA7  52                 	db	82
  1596  00FEA8  65                 	db	101
  1597  00FEA9  61                 	db	97
  1598  00FEAA  64                 	db	100
  1599  00FEAB  65                 	db	101
  1600  00FEAC  72                 	db	114
  1601  00FEAD  00                 	db	0
  1602  00FEAE                     __end_of_initnote:
  1603                           	opt stack 0
  1604  00FEAE                     _nochange:
  1605                           	opt stack 0
  1606  00FEAE  4E                 	db	78
  1607  00FEAF  6F                 	db	111
  1608  00FEB0  20                 	db	32
  1609  00FEB1  43                 	db	67
  1610  00FEB2  68                 	db	104
  1611  00FEB3  61                 	db	97
  1612  00FEB4  6E                 	db	110
  1613  00FEB5  67                 	db	103
  1614  00FEB6  65                 	db	101
  1615  00FEB7  20                 	db	32
  1616  00FEB8  55                 	db	85
  1617  00FEB9  73                 	db	115
  1618  00FEBA  65                 	db	101
  1619  00FEBB  20                 	db	32
  1620  00FEBC  45                 	db	69
  1621  00FEBD  78                 	db	120
  1622  00FEBE  61                 	db	97
  1623  00FEBF  63                 	db	99
  1624  00FEC0  74                 	db	116
  1625  00FEC1  20                 	db	32
  1626  00FEC2  20                 	db	32
  1627  00FEC3  20                 	db	32
  1628  00FEC4  20                 	db	32
  1629  00FEC5  20                 	db	32
  1630  00FEC6  20                 	db	32
  1631  00FEC7  41                 	db	65
  1632  00FEC8  6D                 	db	109
  1633  00FEC9  6F                 	db	111
  1634  00FECA  75                 	db	117
  1635  00FECB  6E                 	db	110
  1636  00FECC  74                 	db	116
  1637  00FECD  21                 	db	33
  1638  00FECE  00                 	db	0
  1639  00FECF                     __end_of_nochange:
  1640                           	opt stack 0
  1641  00FECF                     _chanresetmsg:
  1642                           	opt stack 0
  1643  00FECF  52                 	db	82
  1644  00FED0  65                 	db	101
  1645  00FED1  73                 	db	115
  1646  00FED2  65                 	db	101
  1647  00FED3  74                 	db	116
  1648  00FED4  20                 	db	32
  1649  00FED5  74                 	db	116
  1650  00FED6  6F                 	db	111
  1651  00FED7  20                 	db	32
  1652  00FED8  44                 	db	68
  1653  00FED9  65                 	db	101
  1654  00FEDA  66                 	db	102
  1655  00FEDB  61                 	db	97
  1656  00FEDC  75                 	db	117
  1657  00FEDD  6C                 	db	108
  1658  00FEDE  74                 	db	116
  1659  00FEDF  20                 	db	32
  1660  00FEE0  20                 	db	32
  1661  00FEE1  20                 	db	32
  1662  00FEE2  20                 	db	32
  1663  00FEE3  53                 	db	83
  1664  00FEE4  74                 	db	116
  1665  00FEE5  61                 	db	97
  1666  00FEE6  72                 	db	114
  1667  00FEE7  74                 	db	116
  1668  00FEE8  20                 	db	32
  1669  00FEE9  41                 	db	65
  1670  00FEEA  67                 	db	103
  1671  00FEEB  61                 	db	97
  1672  00FEEC  69                 	db	105
  1673  00FEED  6E                 	db	110
  1674  00FEEE  00                 	db	0
  1675  00FEEF                     __end_of_chanresetmsg:
  1676                           	opt stack 0
  1677  00FEEF                     _sensoffmsg:
  1678                           	opt stack 0
  1679  00FEEF  50                 	db	80
  1680  00FEF0  75                 	db	117
  1681  00FEF1  73                 	db	115
  1682  00FEF2  68                 	db	104
  1683  00FEF3  20                 	db	32
  1684  00FEF4  31                 	db	49
  1685  00FEF5  20                 	db	32
  1686  00FEF6  3D                 	db	61
  1687  00FEF7  20                 	db	32
  1688  00FEF8  4F                 	db	79
  1689  00FEF9  6E                 	db	110
  1690  00FEFA  2C                 	db	44
  1691  00FEFB  20                 	db	32
  1692  00FEFC  32                 	db	50
  1693  00FEFD  20                 	db	32
  1694  00FEFE  3D                 	db	61
  1695  00FEFF  20                 	db	32
  1696  00FF00  4F                 	db	79
  1697  00FF01  66                 	db	102
  1698  00FF02  66                 	db	102
  1699  00FF03  2C                 	db	44
  1700  00FF04  20                 	db	32
  1701  00FF05  38                 	db	56
  1702  00FF06  20                 	db	32
  1703  00FF07  3D                 	db	61
  1704  00FF08  20                 	db	32
  1705  00FF09  45                 	db	69
  1706  00FF0A  78                 	db	120
  1707  00FF0B  69                 	db	105
  1708  00FF0C  74                 	db	116
  1709  00FF0D  00                 	db	0
  1710  00FF0E                     __end_of_sensoffmsg:
  1711                           	opt stack 0
  1712  00FF0E                     _noteerr:
  1713                           	opt stack 0
  1714  00FF0E  20                 	db	32
  1715  00FF0F  20                 	db	32
  1716  00FF10  20                 	db	32
  1717  00FF11  4E                 	db	78
  1718  00FF12  6F                 	db	111
  1719  00FF13  74                 	db	116
  1720  00FF14  65                 	db	101
  1721  00FF15  20                 	db	32
  1722  00FF16  65                 	db	101
  1723  00FF17  72                 	db	114
  1724  00FF18  72                 	db	114
  1725  00FF19  6F                 	db	111
  1726  00FF1A  72                 	db	114
  1727  00FF1B  20                 	db	32
  1728  00FF1C  20                 	db	32
  1729  00FF1D  20                 	db	32
  1730  00FF1E  20                 	db	32
  1731  00FF1F  20                 	db	32
  1732  00FF20  63                 	db	99
  1733  00FF21  6F                 	db	111
  1734  00FF22  64                 	db	100
  1735  00FF23  65                 	db	101
  1736  00FF24  20                 	db	32
  1737  00FF25  3D                 	db	61
  1738  00FF26  20                 	db	32
  1739  00FF27  30                 	db	48
  1740  00FF28  78                 	db	120
  1741  00FF29  00                 	db	0
  1742  00FF2A                     __end_of_noteerr:
  1743                           	opt stack 0
  1744  00FF2A                     _clrline:
  1745                           	opt stack 0
  1746  00FF2A  20                 	db	32
  1747  00FF2B  20                 	db	32
  1748  00FF2C  20                 	db	32
  1749  00FF2D  20                 	db	32
  1750  00FF2E  20                 	db	32
  1751  00FF2F  20                 	db	32
  1752  00FF30  20                 	db	32
  1753  00FF31  20                 	db	32
  1754  00FF32  20                 	db	32
  1755  00FF33  20                 	db	32
  1756  00FF34  20                 	db	32
  1757  00FF35  20                 	db	32
  1758  00FF36  20                 	db	32
  1759  00FF37  20                 	db	32
  1760  00FF38  20                 	db	32
  1761  00FF39  20                 	db	32
  1762  00FF3A  20                 	db	32
  1763  00FF3B  20                 	db	32
  1764  00FF3C  20                 	db	32
  1765  00FF3D  20                 	db	32
  1766  00FF3E  00                 	db	0
  1767  00FF3F                     __end_of_clrline:
  1768                           	opt stack 0
  1769  00FF3F                     _timemsg:
  1770                           	opt stack 0
  1771  00FF3F  54                 	db	84
  1772  00FF40  69                 	db	105
  1773  00FF41  6D                 	db	109
  1774  00FF42  65                 	db	101
  1775  00FF43  20                 	db	32
  1776  00FF44  69                 	db	105
  1777  00FF45  6E                 	db	110
  1778  00FF46  20                 	db	32
  1779  00FF47  31                 	db	49
  1780  00FF48  2F                 	db	47
  1781  00FF49  32                 	db	50
  1782  00FF4A  73                 	db	115
  1783  00FF4B  65                 	db	101
  1784  00FF4C  63                 	db	99
  1785  00FF4D  20                 	db	32
  1786  00FF4E  3D                 	db	61
  1787  00FF4F  20                 	db	32
  1788  00FF50  00                 	db	0
  1789  00FF51                     __end_of_timemsg:
  1790                           	opt stack 0
  1791  00FF51                     _pricesetmsg:
  1792                           	opt stack 0
  1793  00FF51  20                 	db	32
  1794  00FF52  20                 	db	32
  1795  00FF53  20                 	db	32
  1796  00FF54  50                 	db	80
  1797  00FF55  72                 	db	114
  1798  00FF56  69                 	db	105
  1799  00FF57  63                 	db	99
  1800  00FF58  65                 	db	101
  1801  00FF59  20                 	db	32
  1802  00FF5A  73                 	db	115
  1803  00FF5B  65                 	db	101
  1804  00FF5C  74                 	db	116
  1805  00FF5D  20                 	db	32
  1806  00FF5E  6D                 	db	109
  1807  00FF5F  6F                 	db	111
  1808  00FF60  64                 	db	100
  1809  00FF61  65                 	db	101
  1810  00FF62  00                 	db	0
  1811  00FF63                     __end_of_pricesetmsg:
  1812                           	opt stack 0
  1813  00FF63                     _creditclr:
  1814                           	opt stack 0
  1815  00FF63  43                 	db	67
  1816  00FF64  72                 	db	114
  1817  00FF65  65                 	db	101
  1818  00FF66  64                 	db	100
  1819  00FF67  69                 	db	105
  1820  00FF68  74                 	db	116
  1821  00FF69  73                 	db	115
  1822  00FF6A  20                 	db	32
  1823  00FF6B  43                 	db	67
  1824  00FF6C  6C                 	db	108
  1825  00FF6D  65                 	db	101
  1826  00FF6E  61                 	db	97
  1827  00FF6F  72                 	db	114
  1828  00FF70  65                 	db	101
  1829  00FF71  64                 	db	100
  1830  00FF72  00                 	db	0
  1831  00FF73                     __end_of_creditclr:
  1832                           	opt stack 0
  1833  00FF73                     _dacmsg:
  1834                           	opt stack 0
  1835  00FF73  53                 	db	83
  1836  00FF74  65                 	db	101
  1837  00FF75  6E                 	db	110
  1838  00FF76  73                 	db	115
  1839  00FF77  69                 	db	105
  1840  00FF78  74                 	db	116
  1841  00FF79  69                 	db	105
  1842  00FF7A  76                 	db	118
  1843  00FF7B  69                 	db	105
  1844  00FF7C  74                 	db	116
  1845  00FF7D  79                 	db	121
  1846  00FF7E  20                 	db	32
  1847  00FF7F  00                 	db	0
  1848  00FF80                     __end_of_dacmsg:
  1849                           	opt stack 0
  1850  00FF80                     _credits:
  1851                           	opt stack 0
  1852  00FF80  20                 	db	32
  1853  00FF81  20                 	db	32
  1854  00FF82  43                 	db	67
  1855  00FF83  72                 	db	114
  1856  00FF84  65                 	db	101
  1857  00FF85  64                 	db	100
  1858  00FF86  69                 	db	105
  1859  00FF87  74                 	db	116
  1860  00FF88  20                 	db	32
  1861  00FF89  3D                 	db	61
  1862  00FF8A  20                 	db	32
  1863  00FF8B  52                 	db	82
  1864  00FF8C  00                 	db	0
  1865  00FF8D                     __end_of_credits:
  1866                           	opt stack 0
  1867  00FF8D                     _chanmsg:
  1868                           	opt stack 0
  1869  00FF8D  20                 	db	32
  1870  00FF8E  20                 	db	32
  1871  00FF8F  20                 	db	32
  1872  00FF90  43                 	db	67
  1873  00FF91  68                 	db	104
  1874  00FF92  61                 	db	97
  1875  00FF93  6E                 	db	110
  1876  00FF94  6E                 	db	110
  1877  00FF95  65                 	db	101
  1878  00FF96  6C                 	db	108
  1879  00FF97  20                 	db	32
  1880  00FF98  00                 	db	0
  1881  00FF99                     __end_of_chanmsg:
  1882                           	opt stack 0
  1883  00FF99                     _linkmsg:
  1884                           	opt stack 0
  1885  00FF99  6C                 	db	108
  1886  00FF9A  69                 	db	105
  1887  00FF9B  6E                 	db	110
  1888  00FF9C  6B                 	db	107
  1889  00FF9D  65                 	db	101
  1890  00FF9E  64                 	db	100
  1891  00FF9F  20                 	db	32
  1892  00FFA0  74                 	db	116
  1893  00FFA1  6F                 	db	111
  1894  00FFA2  20                 	db	32
  1895  00FFA3  3A                 	db	58
  1896  00FFA4  00                 	db	0
  1897  00FFA5                     __end_of_linkmsg:
  1898                           	opt stack 0
  1899  00FFA5                     _sensmsg:
  1900                           	opt stack 0
  1901  00FFA5  53                 	db	83
  1902  00FFA6  65                 	db	101
  1903  00FFA7  6E                 	db	110
  1904  00FFA8  73                 	db	115
  1905  00FFA9  6F                 	db	111
  1906  00FFAA  72                 	db	114
  1907  00FFAB  20                 	db	32
  1908  00FFAC  69                 	db	105
  1909  00FFAD  73                 	db	115
  1910  00FFAE  20                 	db	32
  1911  00FFAF  00                 	db	0
  1912  00FFB0                     __end_of_sensmsg:
  1913                           	opt stack 0
  1914  00FFB0                     _clrmsg:
  1915                           	opt stack 0
  1916  00FFB0  20                 	db	32
  1917  00FFB1  20                 	db	32
  1918  00FFB2  20                 	db	32
  1919  00FFB3  20                 	db	32
  1920  00FFB4  20                 	db	32
  1921  00FFB5  20                 	db	32
  1922  00FFB6  20                 	db	32
  1923  00FFB7  20                 	db	32
  1924  00FFB8  20                 	db	32
  1925  00FFB9  00                 	db	0
  1926  00FFBA                     __end_of_clrmsg:
  1927                           	opt stack 0
  1928  00FFBA                     _disabled:
  1929                           	opt stack 0
  1930  00FFBA  20                 	db	32
  1931  00FFBB  64                 	db	100
  1932  00FFBC  69                 	db	105
  1933  00FFBD  73                 	db	115
  1934  00FFBE  61                 	db	97
  1935  00FFBF  62                 	db	98
  1936  00FFC0  6C                 	db	108
  1937  00FFC1  65                 	db	101
  1938  00FFC2  64                 	db	100
  1939  00FFC3  00                 	db	0
  1940  00FFC4                     __end_of_disabled:
  1941                           	opt stack 0
  1942  00FFC4                     _enabled:
  1943                           	opt stack 0
  1944  00FFC4  20                 	db	32
  1945  00FFC5  65                 	db	101
  1946  00FFC6  6E                 	db	110
  1947  00FFC7  61                 	db	97
  1948  00FFC8  62                 	db	98
  1949  00FFC9  6C                 	db	108
  1950  00FFCA  65                 	db	101
  1951  00FFCB  64                 	db	100
  1952  00FFCC  20                 	db	32
  1953  00FFCD  00                 	db	0
  1954  00FFCE                     __end_of_enabled:
  1955                           	opt stack 0
  1956  00FFCE                     _tenrand:
  1957                           	opt stack 0
  1958  00FFCE  20                 	db	32
  1959  00FFCF  20                 	db	32
  1960  00FFD0  20                 	db	32
  1961  00FFD1  52                 	db	82
  1962  00FFD2  31                 	db	49
  1963  00FFD3  30                 	db	48
  1964  00FFD4  20                 	db	32
  1965  00FFD5  20                 	db	32
  1966  00FFD6  00                 	db	0
  1967  00FFD7                     __end_of_tenrand:
  1968                           	opt stack 0
  1969  00FFD7                     _twohundredrand:
  1970                           	opt stack 0
  1971  00FFD7  20                 	db	32
  1972  00FFD8  20                 	db	32
  1973  00FFD9  52                 	db	82
  1974  00FFDA  32                 	db	50
  1975  00FFDB  30                 	db	48
  1976  00FFDC  30                 	db	48
  1977  00FFDD  20                 	db	32
  1978  00FFDE  00                 	db	0
  1979  00FFDF                     __end_of_twohundredrand:
  1980                           	opt stack 0
  1981  00FFDF                     _hundredrand:
  1982                           	opt stack 0
  1983  00FFDF  20                 	db	32
  1984  00FFE0  20                 	db	32
  1985  00FFE1  52                 	db	82
  1986  00FFE2  31                 	db	49
  1987  00FFE3  30                 	db	48
  1988  00FFE4  30                 	db	48
  1989  00FFE5  20                 	db	32
  1990  00FFE6  00                 	db	0
  1991  00FFE7                     __end_of_hundredrand:
  1992                           	opt stack 0
  1993  00FFE7                     _fiftyrand:
  1994                           	opt stack 0
  1995  00FFE7  20                 	db	32
  1996  00FFE8  20                 	db	32
  1997  00FFE9  52                 	db	82
  1998  00FFEA  35                 	db	53
  1999  00FFEB  30                 	db	48
  2000  00FFEC  20                 	db	32
  2001  00FFED  20                 	db	32
  2002  00FFEE  00                 	db	0
  2003  00FFEF                     __end_of_fiftyrand:
  2004                           	opt stack 0
  2005  00FFEF                     _twentyrand:
  2006                           	opt stack 0
  2007  00FFEF  20                 	db	32
  2008  00FFF0  20                 	db	32
  2009  00FFF1  52                 	db	82
  2010  00FFF2  32                 	db	50
  2011  00FFF3  30                 	db	48
  2012  00FFF4  20                 	db	32
  2013  00FFF5  20                 	db	32
  2014  00FFF6  00                 	db	0
  2015  00FFF7                     __end_of_twentyrand:
  2016                           	opt stack 0
  2017  00FFF7                     _offmsg:
  2018                           	opt stack 0
  2019  00FFF7  4F                 	db	79
  2020  00FFF8  66                 	db	102
  2021  00FFF9  66                 	db	102
  2022  00FFFA  00                 	db	0
  2023  00FFFB                     __end_of_offmsg:
  2024                           	opt stack 0
  2025  00FFFB                     _onmsg:
  2026                           	opt stack 0
  2027  00FFFB  4F                 	db	79
  2028  00FFFC  6E                 	db	110
  2029  00FFFD  20                 	db	32
  2030  00FFFE  00                 	db	0
  2031  00FFFF                     __end_of_onmsg:
  2032                           	opt stack 0
  2033  00FFFF  00                 	db	0	; dummy byte at the end
  2034  0000                     
  2035                           	psect	nvBANK0
  2036  0000B8                     __pnvBANK0:
  2037                           	opt stack 0
  2038  0000B8                     _timer0ReloadVal16bit:
  2039                           	opt stack 0
  2040  0000B8                     	ds	2
  2041  0000BA                     _timer5ReloadVal:
  2042                           	opt stack 0
  2043  0000BA                     	ds	2
  2044  0000BC                     _timer3ReloadVal:
  2045                           	opt stack 0
  2046  0000BC                     	ds	2
  2047  0000BE                     _timer1ReloadVal:
  2048                           	opt stack 0
  2049  0000BE                     	ds	2
  2050  0000                     _RX2PPSbits	set	3725
  2051  0000                     _RB5PPS	set	3828
  2052  0000                     _PPSLOCKbits	set	3744
  2053  0000                     _PPSLOCK	set	3744
  2054  0000                     _PIR4bits	set	3790
  2055  0000                     _PIR7bits	set	3793
  2056  0000                     _IPR0bits	set	3770
  2057  0000                     _PMD5	set	3814
  2058  0000                     _PMD4	set	3813
  2059  0000                     _PMD3	set	3812
  2060  0000                     _PMD2	set	3811
  2061  0000                     _PMD1	set	3810
  2062  0000                     _PMD0	set	3809
  2063  0000                     _OSCTUNE	set	3805
  2064  0000                     _OSCFRQ	set	3806
  2065  0000                     _OSCEN	set	3804
  2066  0000                     _OSCCON3	set	3802
  2067  0000                     _OSCCON1	set	3800
  2068  0000                     _PIR3bits	set	3789
  2069  0000                     _PIR0bits	set	3786
  2070  0000                     _RC6PPS	set	3837
  2071  0000                     _RX1PPSbits	set	3765
  2072  0000                     _PIE0bits	set	3778
  2073  0000                     _CMOUT	set	3901
  2074  0000                     _DAC1CON1	set	3892
  2075  0000                     _DAC1CON0	set	3891
  2076  0000                     _CMOUTbits	set	3901
  2077  0000                     _CM1PCH	set	3900
  2078  0000                     _CM1NCH	set	3899
  2079  0000                     _CM1CON1	set	3898
  2080  0000                     _CM1CON0	set	3897
  2081  0000                     _ODCOND	set	3876
  2082  0000                     _ODCONC	set	3871
  2083  0000                     _ODCONB	set	3863
  2084  0000                     _ODCONA	set	3855
  2085  0000                     _ODCONE	set	3884
  2086  0000                     _WPUC	set	3872
  2087  0000                     _WPUA	set	3856
  2088  0000                     _WPUB	set	3864
  2089  0000                     _WPUE	set	3885
  2090  0000                     _WPUD	set	3877
  2091  0000                     _ANSELA	set	3857
  2092  0000                     _ANSELE	set	3886
  2093  0000                     _ANSELD	set	3878
  2094  0000                     _ANSELB	set	3865
  2095  0000                     _ANSELC	set	3873
  2096  0000                     _PORTBbits	set	3982
  2097  0000                     _BAUD1CONbits	set	3999
  2098  0000                     _LATCbits	set	3973
  2099  0000                     _TX1STAbits	set	3998
  2100  0000                     _PORTA	set	3981
  2101  0000                     _PORTD	set	3984
  2102  0000                     _PR4	set	4022
  2103  0000                     _TMR4	set	4021
  2104  0000                     _T4CONbits	set	4023
  2105  0000                     _T4RSTbits	set	4026
  2106  0000                     _T4HLTbits	set	4024
  2107  0000                     _T4CON	set	4023
  2108  0000                     _T4TMR	set	4021
  2109  0000                     _T4PR	set	4022
  2110  0000                     _T4RST	set	4026
  2111  0000                     _T4HLT	set	4024
  2112  0000                     _T4CLKCON	set	4025
  2113  0000                     _PR2	set	4028
  2114  0000                     _TMR2	set	4027
  2115  0000                     _T2CONbits	set	4029
  2116  0000                     _T2RSTbits	set	4032
  2117  0000                     _T2HLTbits	set	4030
  2118  0000                     _T2CON	set	4029
  2119  0000                     _T2TMR	set	4027
  2120  0000                     _T2PR	set	4028
  2121  0000                     _T2RST	set	4032
  2122  0000                     _T2HLT	set	4030
  2123  0000                     _T2CLKCON	set	4031
  2124  0000                     _T0CON0bits	set	4053
  2125  0000                     _T0CON0	set	4053
  2126  0000                     _TMR0L	set	4051
  2127  0000                     _TMR0H	set	4052
  2128  0000                     _T0CON1	set	4054
  2129  0000                     _T5GCONbits	set	4036
  2130  0000                     _T5CONbits	set	4035
  2131  0000                     _T5CON	set	4035
  2132  0000                     _TMR5L	set	4033
  2133  0000                     _TMR5H	set	4034
  2134  0000                     _T5CLK	set	4038
  2135  0000                     _T5GATE	set	4037
  2136  0000                     _T5GCON	set	4036
  2137  0000                     _T3GCONbits	set	4042
  2138  0000                     _T3CONbits	set	4041
  2139  0000                     _T3CON	set	4041
  2140  0000                     _TMR3L	set	4039
  2141  0000                     _TMR3H	set	4040
  2142  0000                     _T3CLK	set	4044
  2143  0000                     _T3GATE	set	4043
  2144  0000                     _T3GCON	set	4042
  2145  0000                     _T1GCONbits	set	4048
  2146  0000                     _T1CONbits	set	4047
  2147  0000                     _T1CON	set	4047
  2148  0000                     _TMR1L	set	4045
  2149  0000                     _TMR1H	set	4046
  2150  0000                     _T1CLK	set	4050
  2151  0000                     _T1GATE	set	4049
  2152  0000                     _T1GCON	set	4048
  2153  0000                     _NVMDAT	set	3968
  2154  0000                     _NVMADRL	set	3966
  2155  0000                     _NVMADRH	set	3967
  2156  0000                     _NVMCON2	set	3970
  2157  0000                     _TABLAT	set	4085
  2158  0000                     _TBLPTRL	set	4086
  2159  0000                     _TBLPTRH	set	4087
  2160  0000                     _TBLPTRU	set	4088
  2161  0000                     _NVMCON1bits	set	3969
  2162  0000                     _INTCONbits	set	4082
  2163  0000                     _TX1REG	set	3994
  2164  0000                     _RC1REG	set	3993
  2165  0000                     _RC1STAbits	set	3997
  2166  0000                     _SP1BRGH	set	3996
  2167  0000                     _SP1BRGL	set	3995
  2168  0000                     _TX1STA	set	3998
  2169  0000                     _RC1STA	set	3997
  2170  0000                     _BAUD1CON	set	3999
  2171  0000                     _TRISD	set	3979
  2172  0000                     _TRISC	set	3978
  2173  0000                     _TRISB	set	3977
  2174  0000                     _TRISA	set	3976
  2175  0000                     _TRISE	set	3980
  2176  0000                     _LATC	set	3973
  2177  0000                     _LATB	set	3972
  2178  0000                     _LATA	set	3971
  2179  0000                     _LATD	set	3974
  2180  0000                     _LATE	set	3975
  2181  0000                     _LATA6	set	31774
  2182  0000                     _LATA7	set	31775
  2183                           
  2184                           	psect	nvCOMRAMh
  2185  00004C                     __pnvCOMRAMh:
  2186                           	opt stack 0
  2187  00004C                     _count:
  2188                           	opt stack 0
  2189  00004C                     	ds	1
  2190                           
  2191                           ; #config settings
  2192  0000                     
  2193                           	psect	cinit
  2194  011A84                     __pcinit:
  2195                           	opt stack 0
  2196  011A84                     start_initialization:
  2197                           	opt stack 0
  2198  011A84                     __initialization:
  2199                           	opt stack 0
  2200                           
  2201                           ; Initialize objects allocated to BANK0 (1 bytes)
  2202                           ; load TBLPTR registers with __pidataBANK0
  2203  011A84  0EC6               	movlw	low __pidataBANK0
  2204  011A86  6EF6               	movwf	tblptrl,c
  2205  011A88  0E20               	movlw	high __pidataBANK0
  2206  011A8A  6EF7               	movwf	tblptrh,c
  2207  011A8C  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  2208  011A8E  6EF8               	movwf	tblptru,c
  2209  011A90  0009               	tblrd		*+	;fetch initializer
  2210  011A92  CFF5 F0C0          	movff	tablat,__pdataBANK0
  2211                           
  2212                           ; Initialize objects allocated to COMRAMh (1 bytes)
  2213                           ; load TBLPTR registers with __pidataCOMRAMh
  2214  011A96  0EC7               	movlw	low __pidataCOMRAMh
  2215  011A98  6EF6               	movwf	tblptrl,c
  2216  011A9A  0E20               	movlw	high __pidataCOMRAMh
  2217  011A9C  6EF7               	movwf	tblptrh,c
  2218  011A9E  0E01               	movlw	low (__pidataCOMRAMh shr (0+16))
  2219  011AA0  6EF8               	movwf	tblptru,c
  2220  011AA2  0009               	tblrd		*+	;fetch initializer
  2221  011AA4  CFF5 F04D          	movff	tablat,__pdataCOMRAMh
  2222                           
  2223                           ; Clear objects allocated to BANK0 (71 bytes)
  2224  011AA8  EE00  F060         	lfsr	0,__pbssBANK0
  2225  011AAC  0E47               	movlw	71
  2226  011AAE                     clear_0:
  2227  011AAE  6AEE               	clrf	postinc0,c
  2228  011AB0  06E8               	decf	wreg,f,c
  2229  011AB2  E1FD               	bnz	clear_0
  2230                           
  2231                           ; Clear objects allocated to COMRAMh (30 bytes)
  2232  011AB4  EE00  F02E         	lfsr	0,__pbssCOMRAMh
  2233  011AB8  0E1E               	movlw	30
  2234  011ABA                     clear_1:
  2235  011ABA  6AEE               	clrf	postinc0,c
  2236  011ABC  06E8               	decf	wreg,f,c
  2237  011ABE  E1FD               	bnz	clear_1
  2238                           
  2239                           ; Clear objects allocated to COMRAMl (1 bytes)
  2240  011AC0  6A4E               	clrf	__pbssCOMRAMl& (0+255),c
  2241  011AC2                     end_of_initialization:
  2242                           	opt stack 0
  2243  011AC2                     __end_of__initialization:
  2244                           	opt stack 0
  2245  011AC2  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2246  011AC4  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2247  011AC6  0100               	movlb	0
  2248  011AC8  EF00  F080         	goto	_main	;jump to C main() function
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           
  2256                           	psect	bssCOMRAMh
  2257  00002E                     __pbssCOMRAMh:
  2258                           	opt stack 0
  2259  00002E                     _venflags:
  2260                           	opt stack 0
  2261  00002E                     	ds	3
  2262  000031                     _dbcount:
  2263                           	opt stack 0
  2264  000031                     	ds	2
  2265  000033                     _outcoins:
  2266                           	opt stack 0
  2267  000033                     	ds	1
  2268  000034                     _venderr:
  2269                           	opt stack 0
  2270  000034                     	ds	1
  2271  000035                     _senschk:
  2272                           	opt stack 0
  2273  000035                     	ds	1
  2274  000036                     _senspos:
  2275                           	opt stack 0
  2276  000036                     	ds	1
  2277  000037                     _sensorval:
  2278                           	opt stack 0
  2279  000037                     	ds	1
  2280  000038                     _vendprice:
  2281                           	opt stack 0
  2282  000038                     	ds	1
  2283  000039                     _buttons:
  2284                           	opt stack 0
  2285  000039                     	ds	1
  2286  00003A                     _cash:
  2287                           	opt stack 0
  2288  00003A                     	ds	1
  2289  00003B                     _credit:
  2290                           	opt stack 0
  2291  00003B                     	ds	1
  2292  00003C                     _noteen_byte:
  2293                           	opt stack 0
  2294  00003C                     	ds	1
  2295  00003D                     _noteen:
  2296                           	opt stack 0
  2297  00003D                     	ds	1
  2298  00003E                     _mdbflags:
  2299                           	opt stack 0
  2300  00003E                     	ds	1
  2301  00003F                     _chkbyte:
  2302                           	opt stack 0
  2303  00003F                     	ds	1
  2304  000040                     _notebyte:
  2305                           	opt stack 0
  2306  000040                     	ds	1
  2307  000041                     _mcount:
  2308                           	opt stack 0
  2309  000041                     	ds	1
  2310  000042                     _dspposition:
  2311                           	opt stack 0
  2312  000042                     	ds	1
  2313  000043                     _ercode:
  2314                           	opt stack 0
  2315  000043                     	ds	1
  2316  000044                     _stradd:
  2317                           	opt stack 0
  2318  000044                     	ds	1
  2319  000045                     _lcdata:
  2320                           	opt stack 0
  2321  000045                     	ds	1
  2322  000046                     _bflag:
  2323                           	opt stack 0
  2324  000046                     	ds	1
  2325  000047                     _pnvcash:
  2326                           	opt stack 0
  2327  000047                     	ds	3
  2328  00004A                     _pvcash:
  2329                           	opt stack 0
  2330  00004A                     	ds	2
  2331                           tblptru	equ	0xFF8
  2332                           tblptrh	equ	0xFF7
  2333                           tblptrl	equ	0xFF6
  2334                           tablat	equ	0xFF5
  2335                           postinc0	equ	0xFEE
  2336                           wreg	equ	0xFE8
  2337                           
  2338                           	psect	dataCOMRAMh
  2339  00004D                     __pdataCOMRAMh:
  2340                           	opt stack 0
  2341  00004D                     _notenum:
  2342                           	opt stack 0
  2343  00004D                     	ds	1
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           
  2351                           	psect	bssCOMRAMl
  2352  00004E                     __pbssCOMRAMl:
  2353                           	opt stack 0
  2354  00004E                     _cctflags:
  2355                           	opt stack 0
  2356  00004E                     	ds	1
  2357                           tblptru	equ	0xFF8
  2358                           tblptrh	equ	0xFF7
  2359                           tblptrl	equ	0xFF6
  2360                           tablat	equ	0xFF5
  2361                           postinc0	equ	0xFEE
  2362                           wreg	equ	0xFE8
  2363                           
  2364                           	psect	bssBANK0
  2365  000060                     __pbssBANK0:
  2366                           	opt stack 0
  2367  000060                     _mdbdata:
  2368                           	opt stack 0
  2369  000060                     	ds	32
  2370  000080                     _pricevend:
  2371                           	opt stack 0
  2372  000080                     	ds	8
  2373  000088                     _tvends:
  2374                           	opt stack 0
  2375  000088                     	ds	8
  2376  000090                     _nvcash:
  2377                           	opt stack 0
  2378  000090                     	ds	3
  2379  000093                     _hpserial:
  2380                           	opt stack 0
  2381  000093                     	ds	3
  2382  000096                     _hexnum:
  2383                           	opt stack 0
  2384  000096                     	ds	3
  2385  000099                     _vcashout:
  2386                           	opt stack 0
  2387  000099                     	ds	2
  2388  00009B                     _vcash:
  2389                           	opt stack 0
  2390  00009B                     	ds	2
  2391  00009D                     _change:
  2392                           	opt stack 0
  2393  00009D                     	ds	1
  2394  00009E                     _command:
  2395                           	opt stack 0
  2396  00009E                     	ds	1
  2397  00009F                     _nobytes:
  2398                           	opt stack 0
  2399  00009F                     	ds	1
  2400  0000A0                     _dest:
  2401                           	opt stack 0
  2402  0000A0                     	ds	1
  2403  0000A1                     _mdbtxbyte:
  2404                           	opt stack 0
  2405  0000A1                     	ds	1
  2406  0000A2                     _errorflags:
  2407                           	opt stack 0
  2408  0000A2                     	ds	1
  2409  0000A3                     _slvadd:
  2410                           	opt stack 0
  2411  0000A3                     	ds	1
  2412  0000A4                     _lcdaddress:
  2413                           	opt stack 0
  2414  0000A4                     	ds	1
  2415  0000A5                     _lcdline:
  2416                           	opt stack 0
  2417  0000A5                     	ds	1
  2418  0000A6                     _lcdfunc:
  2419                           	opt stack 0
  2420  0000A6                     	ds	1
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           
  2428                           	psect	dataBANK0
  2429  0000C0                     __pdataBANK0:
  2430                           	opt stack 0
  2431  0000C0                     _hopercount:
  2432                           	opt stack 0
  2433  0000C0                     	ds	1
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           
  2441                           	psect	cstackBANK0
  2442  0000A7                     __pcstackBANK0:
  2443                           	opt stack 0
  2444  0000A7                     Link_chan@chanbit:
  2445                           	opt stack 0
  2446  0000A7                     off_sens@channel:
  2447                           	opt stack 0
  2448  0000A7                     displ_hex@value:
  2449                           	opt stack 0
  2450                           
  2451                           ; 8 bytes @ 0x0
  2452  0000A7                     	ds	1
  2453  0000A8                     Link_chan@channel:
  2454                           	opt stack 0
  2455  0000A8                     off_sens@chanbit:
  2456                           	opt stack 0
  2457                           
  2458                           ; 1 bytes @ 0x1
  2459  0000A8                     	ds	1
  2460  0000A9                     Link_chan@linkflags:
  2461                           	opt stack 0
  2462  0000A9                     off_sens@senseflags:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x2
  2466  0000A9                     	ds	1
  2467  0000AA                     ??_Chan_link:
  2468                           
  2469                           ; 1 bytes @ 0x3
  2470  0000AA                     	ds	5
  2471  0000AF                     displ_hex@hexnumsave:
  2472                           	opt stack 0
  2473                           
  2474                           ; 3 bytes @ 0x8
  2475  0000AF                     	ds	3
  2476  0000B2                     displ_hex@i:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0xB
  2480  0000B2                     	ds	1
  2481  0000B3                     set_price@buttons:
  2482                           	opt stack 0
  2483  0000B3                     Vend_timeset@chantime:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0xC
  2487  0000B3                     	ds	1
  2488  0000B4                     set_price@channel:
  2489                           	opt stack 0
  2490  0000B4                     Vend_timeset@channel:
  2491                           	opt stack 0
  2492                           
  2493                           ; 1 bytes @ 0xD
  2494  0000B4                     	ds	1
  2495  0000B5                     ??_main:
  2496                           
  2497                           ; 1 bytes @ 0xE
  2498  0000B5                     	ds	2
  2499  0000B7                     main@channel:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x10
  2503  0000B7                     	ds	1
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           
  2511                           	psect	cstackCOMRAMh
  2512  00000B                     __pcstackCOMRAMh:
  2513                           	opt stack 0
  2514  00000B                     ??_INTERRUPT_InterruptManagerHigh:
  2515  00000B                     
  2516                           ; 1 bytes @ 0x0
  2517  00000B                     	ds	18
  2518  00001D                     ??_TMR3_Initialize:
  2519  00001D                     ??_TMR5_Initialize:
  2520  00001D                     ??_TMR1_Initialize:
  2521  00001D                     ??_TMR0_Initialize:
  2522  00001D                     ??_butin:
  2523  00001D                     ?___ltdiv:
  2524                           	opt stack 0
  2525  00001D                     ?___ltmod:
  2526                           	opt stack 0
  2527  00001D                     EUSART1_Write@txData:
  2528                           	opt stack 0
  2529  00001D                     DAC1_SetOutput@inputData:
  2530                           	opt stack 0
  2531  00001D                     read_busy@savelate:
  2532                           	opt stack 0
  2533  00001D                     Read_Service@senval:
  2534                           	opt stack 0
  2535  00001D                     get_channel@channel:
  2536                           	opt stack 0
  2537  00001D                     init_mdbdata@initdata:
  2538                           	opt stack 0
  2539  00001D                     DATAEE_WriteByte@bAdd:
  2540                           	opt stack 0
  2541  00001D                     DATAEE_ReadByte@bAdd:
  2542                           	opt stack 0
  2543  00001D                     ___ltdiv@dividend:
  2544                           	opt stack 0
  2545  00001D                     ___ltmod@dividend:
  2546                           	opt stack 0
  2547                           
  2548                           ; 3 bytes @ 0x12
  2549  00001D                     	ds	1
  2550  00001E                     read_busy@savelatd:
  2551                           	opt stack 0
  2552  00001E                     butin@butons:
  2553                           	opt stack 0
  2554  00001E                     get_channel@butons:
  2555                           	opt stack 0
  2556  00001E                     init_mdbdata@i:
  2557                           	opt stack 0
  2558  00001E                     mdb_transmit@txbyte:
  2559                           	opt stack 0
  2560                           
  2561                           ; 1 bytes @ 0x13
  2562  00001E                     	ds	1
  2563  00001F                     ??_mdb_unlock:
  2564  00001F                     ??_butindb:
  2565  00001F                     ??_Init_vendmem:
  2566  00001F                     DATAEE_WriteByte@bData:
  2567                           	opt stack 0
  2568  00001F                     lcd_write@savelatd:
  2569                           	opt stack 0
  2570  00001F                     mdb_comm@mcount:
  2571                           	opt stack 0
  2572  00001F                     Read_NVstore@storeadd:
  2573                           	opt stack 0
  2574                           
  2575                           ; 2 bytes @ 0x14
  2576  00001F                     	ds	1
  2577  000020                     DATAEE_WriteByte@GIEBitValue:
  2578                           	opt stack 0
  2579  000020                     lcd_write@lcdata:
  2580                           	opt stack 0
  2581  000020                     mdb_comm@slvadd:
  2582                           	opt stack 0
  2583  000020                     ___ltdiv@divisor:
  2584                           	opt stack 0
  2585  000020                     ___ltmod@divisor:
  2586                           	opt stack 0
  2587                           
  2588                           ; 3 bytes @ 0x15
  2589  000020                     	ds	1
  2590  000021                     lcd_dispadd@lcdaddress:
  2591                           	opt stack 0
  2592  000021                     credit_subtract@credit:
  2593                           	opt stack 0
  2594  000021                     butindb@butval:
  2595                           	opt stack 0
  2596  000021                     mdb_comm@i:
  2597                           	opt stack 0
  2598  000021                     Init_vendmem@chanlinkbits:
  2599                           	opt stack 0
  2600  000021                     Write_NVstore@storeadd:
  2601                           	opt stack 0
  2602  000021                     Read_NVstore@storemem:
  2603                           	opt stack 0
  2604                           
  2605                           ; 2 bytes @ 0x16
  2606  000021                     	ds	1
  2607  000022                     ??_mdb_reset:
  2608  000022                     lcd_dispadd@lcdatasave:
  2609                           	opt stack 0
  2610  000022                     butindb@butt:
  2611                           	opt stack 0
  2612  000022                     mdb_poll@i:
  2613                           	opt stack 0
  2614                           
  2615                           ; 1 bytes @ 0x17
  2616  000022                     	ds	1
  2617  000023                     lcd_writeC@lcdata:
  2618                           	opt stack 0
  2619  000023                     Read_NVstore@storesize:
  2620                           	opt stack 0
  2621  000023                     mdb_reset@i:
  2622                           	opt stack 0
  2623  000023                     ___ltmod@counter:
  2624                           	opt stack 0
  2625  000023                     Init_vendmem@chanlink:
  2626                           	opt stack 0
  2627  000023                     Write_NVstore@storemem:
  2628                           	opt stack 0
  2629  000023                     ___ltdiv@quotient:
  2630                           	opt stack 0
  2631                           
  2632                           ; 3 bytes @ 0x18
  2633  000023                     	ds	1
  2634  000024                     ??_displ_code:
  2635  000024                     lcd_test@character:
  2636                           	opt stack 0
  2637  000024                     Read_NVstore@i:
  2638                           	opt stack 0
  2639  000024                     mdb_reset@i_3738:
  2640                           	opt stack 0
  2641  000024                     lcd_string@lcdstring:
  2642                           	opt stack 0
  2643                           
  2644                           ; 2 bytes @ 0x19
  2645  000024                     	ds	1
  2646  000025                     ??_lcd_init:
  2647  000025                     ??_mdb_init:
  2648  000025                     Init_vendmem@i:
  2649                           	opt stack 0
  2650  000025                     Write_NVstore@storesize:
  2651                           	opt stack 0
  2652                           
  2653                           ; 1 bytes @ 0x1A
  2654  000025                     	ds	1
  2655  000026                     displ_code@ercode:
  2656                           	opt stack 0
  2657  000026                     lcd_string@lcdline:
  2658                           	opt stack 0
  2659  000026                     Write_NVstore@i:
  2660                           	opt stack 0
  2661  000026                     ___ltdiv@counter:
  2662                           	opt stack 0
  2663                           
  2664                           ; 1 bytes @ 0x1B
  2665  000026                     	ds	1
  2666  000027                     ??_lcd_string:
  2667  000027                     Update_cashaudit@addcash:
  2668                           	opt stack 0
  2669  000027                     mdb_init@i:
  2670                           	opt stack 0
  2671  000027                     displ_hex@hexnum:
  2672                           	opt stack 0
  2673                           
  2674                           ; 3 bytes @ 0x1C
  2675  000027                     	ds	1
  2676  000028                     credit_add@credit:
  2677                           	opt stack 0
  2678                           
  2679                           ; 1 bytes @ 0x1D
  2680  000028                     	ds	1
  2681  000029                     ??_Clear_cred:
  2682  000029                     ??_Reset_settings:
  2683  000029                     displ_lflags@linkflgs:
  2684                           	opt stack 0
  2685  000029                     displ_sflags@chanel:
  2686                           	opt stack 0
  2687  000029                     displ_nendis@note2disp:
  2688                           	opt stack 0
  2689  000029                     displ_note@notestring:
  2690                           	opt stack 0
  2691                           
  2692                           ; 2 bytes @ 0x1E
  2693  000029                     	ds	1
  2694  00002A                     displ_sens@dmsgpos:
  2695                           	opt stack 0
  2696  00002A                     displ_lflags@chanel:
  2697                           	opt stack 0
  2698  00002A                     displ_sflags@chanbit:
  2699                           	opt stack 0
  2700  00002A                     displ_time@channel:
  2701                           	opt stack 0
  2702  00002A                     displ_nendis@x:
  2703                           	opt stack 0
  2704  00002A                     displ_credit@cash:
  2705                           	opt stack 0
  2706  00002A                     displ_price@vendprice:
  2707                           	opt stack 0
  2708  00002A                     Update_Hopcoin@direction:
  2709                           	opt stack 0
  2710                           
  2711                           ; 1 bytes @ 0x1F
  2712  00002A                     	ds	1
  2713  00002B                     ??_set_price:
  2714  00002B                     displ_sens@smsgpos:
  2715                           	opt stack 0
  2716  00002B                     displ_lflags@lchan:
  2717                           	opt stack 0
  2718  00002B                     displ_sflags@senseflags:
  2719                           	opt stack 0
  2720  00002B                     displ_time@motortime:
  2721                           	opt stack 0
  2722  00002B                     Update_Hopcoin@newval:
  2723                           	opt stack 0
  2724  00002B                     enable_notes@notenum:
  2725                           	opt stack 0
  2726  00002B                     Reset_settings@chanlinkbits:
  2727                           	opt stack 0
  2728                           
  2729                           ; 2 bytes @ 0x20
  2730  00002B                     	ds	1
  2731  00002C                     ??_Vend_timeset:
  2732  00002C                     ??_Link_chan:
  2733  00002C                     Hopper_coin@coinval:
  2734                           	opt stack 0
  2735  00002C                     Sensor_set@dacpos:
  2736                           	opt stack 0
  2737                           
  2738                           ; 1 bytes @ 0x21
  2739  00002C                     	ds	1
  2740  00002D                     
  2741                           ; 1 bytes @ 0x22
  2742  00002D                     	ds	1
  2743  00002E                     tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           
  2750                           ; 1 bytes @ 0x23
  2751                           
  2752                           	psect	cstackCOMRAMl
  2753  000000                     __pcstackCOMRAMl:
  2754                           	opt stack 0
  2755  000000                     tblptru	equ	0xFF8
  2756                           tblptrh	equ	0xFF7
  2757                           tblptrl	equ	0xFF6
  2758                           tablat	equ	0xFF5
  2759                           postinc0	equ	0xFEE
  2760                           wreg	equ	0xFE8
  2761                           
  2762                           ; 1 bytes @ 0x0
  2763 ;;
  2764 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2765 ;;
  2766 ;; *************** function _main *****************
  2767 ;; Defined at:
  2768 ;;		line 57 in file "main.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;		None
  2771 ;; Auto vars:     Size  Location     Type
  2772 ;;  channel         1   16[BANK0 ] unsigned char 
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  1    wreg      void 
  2775 ;; Registers used:
  2776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;Total ram usage:        3 bytes
  2787 ;; Hardware stack levels required when called:   13
  2788 ;; This function calls:
  2789 ;;		_CMP1_GetOutputStatus
  2790 ;;		_DATAEE_ReadByte
  2791 ;;		_SYSTEM_Initialize
  2792 ;;		_butin
  2793 ;;		_credit_add
  2794 ;;		_credit_subtract
  2795 ;;		_displ_credit
  2796 ;;		_displ_nochange
  2797 ;;		_displ_noteer
  2798 ;;		_displ_price
  2799 ;;		_enter_service
  2800 ;;		_get_channel
  2801 ;;		_lcd_init
  2802 ;;		_lcd_string
  2803 ;;		_mdb_init
  2804 ;;		_mdb_poll
  2805 ;;		_price_check
  2806 ;;		_vend_init
  2807 ;; This function is called by:
  2808 ;;		Startup code after reset
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text0
  2813  010000                     __ptext0:
  2814                           	opt stack 0
  2815  010000                     _main:
  2816                           	opt stack 18
  2817                           
  2818                           ;main.c: 60: SYSTEM_Initialize();
  2819                           
  2820                           ;incstack = 0
  2821  010000  ECFD  F08D         	call	_SYSTEM_Initialize	;wreg free
  2822                           
  2823                           ;main.c: 62: lcd_init();
  2824  010004  EC5D  F088         	call	_lcd_init	;wreg free
  2825                           
  2826                           ;main.c: 63: vend_init();
  2827  010008  ECA9  F087         	call	_vend_init	;wreg free
  2828  01000C                     l1005:
  2829  01000C  F000               	nop		;# 
  2830                           
  2831                           ;main.c: 68: DAC1CON1 = 0x00;
  2832  01000E  0E00               	movlw	0
  2833  010010  010F               	movlb	15	; () banked
  2834  010012  6F34               	movwf	52,b	;volatile
  2835                           
  2836                           ; BSR set to: 15
  2837                           ;main.c: 69: if (!CMP1_GetOutputStatus())
  2838  010014  EC32  F090         	call	_CMP1_GetOutputStatus	;wreg free
  2839  010018  0900               	iorlw	0
  2840  01001A  B4D8               	btfsc	status,2,c
  2841                           
  2842                           ;main.c: 70: {
  2843                           ;main.c: 71: venflags.service = 1;
  2844  01001C  8E2E               	bsf	_venflags,7,c
  2845                           
  2846                           ;main.c: 73: }
  2847                           ;main.c: 74: DAC1CON1 = sensorval;
  2848  01001E  C037  FF34         	movff	_sensorval,3892	;volatile
  2849                           
  2850                           ;main.c: 76: if(venflags.service == 1)
  2851  010022  BE2E               	btfsc	_venflags,7,c
  2852                           
  2853                           ;main.c: 77: {
  2854                           ;main.c: 78: enter_service();
  2855  010024  EC02  F089         	call	_enter_service	;wreg free
  2856                           
  2857                           ;main.c: 79: }
  2858                           ;main.c: 81: if(venflags.inscoin == 1)
  2859  010028  A42E               	btfss	_venflags,2,c
  2860  01002A  D013               	goto	l1009
  2861                           
  2862                           ;main.c: 82: {
  2863                           ;main.c: 83: lcd_string(inscoin, line1);
  2864  01002C  0E62               	movlw	low _inscoin
  2865  01002E  6E24               	movwf	lcd_string@lcdstring,c
  2866  010030  0EFE               	movlw	high _inscoin
  2867  010032  6E25               	movwf	lcd_string@lcdstring+1,c
  2868  010034  0E79               	movlw	low _line1
  2869  010036  6EF6               	movwf	tblptrl,c
  2870  010038                     	if	1	;There is more than 1 active tblptr byte
  2871  010038  0EFC               	movlw	high _line1
  2872  01003A  6EF7               	movwf	tblptrh,c
  2873  01003C                     	endif
  2874  01003C                     	if	1	;There are 3 active tblptr bytes
  2875  01003C  0E00               	movlw	low (_line1 shr (0+16))
  2876  01003E  6EF8               	movwf	tblptru,c
  2877  010040                     	endif
  2878  010040  0008               	tblrd		*
  2879  010042  CFF5 F026          	movff	tablat,lcd_string@lcdline
  2880  010046  EC03  F088         	call	_lcd_string	;wreg free
  2881                           
  2882                           ;main.c: 84: venflags.inscoin = 0;
  2883  01004A  942E               	bcf	_venflags,2,c
  2884                           
  2885                           ;main.c: 85: if(venflags.nochange)
  2886  01004C  B62E               	btfsc	_venflags,3,c
  2887                           
  2888                           ;main.c: 86: {
  2889                           ;main.c: 87: displ_nochange();
  2890  01004E  EC69  F08E         	call	_displ_nochange	;wreg free
  2891  010052                     l1009:
  2892                           
  2893                           ;main.c: 88: }
  2894                           ;main.c: 89: }
  2895                           ;main.c: 90: if(venflags.initialrun == 1)
  2896  010052  AA2E               	btfss	_venflags,5,c
  2897  010054  D007               	goto	l1010
  2898                           
  2899                           ;main.c: 91: {
  2900                           ;main.c: 92: credit_add(0x00);
  2901  010056  0E00               	movlw	0
  2902  010058  EC22  F08C         	call	_credit_add
  2903                           
  2904                           ;main.c: 93: credit_subtract(0x00);
  2905  01005C  0E00               	movlw	0
  2906  01005E  EC7A  F08C         	call	_credit_subtract
  2907                           
  2908                           ;main.c: 94: venflags.initialrun = 0;
  2909  010062  9A2E               	bcf	_venflags,5,c
  2910  010064                     l1010:
  2911                           
  2912                           ;main.c: 96: }
  2913                           ;main.c: 97: if(venflags.credisplay == 1)
  2914  010064  A82E               	btfss	_venflags,4,c
  2915  010066  D005               	goto	l1012
  2916                           
  2917                           ;main.c: 98: {
  2918                           ;main.c: 99: displ_credit();
  2919  010068  EC83  F08E         	call	_displ_credit	;wreg free
  2920                           
  2921                           ;main.c: 100: if(venflags.nochange)
  2922  01006C  B62E               	btfsc	_venflags,3,c
  2923                           
  2924                           ;main.c: 101: {
  2925                           ;main.c: 102: displ_nochange();
  2926  01006E  EC69  F08E         	call	_displ_nochange	;wreg free
  2927  010072                     l1012:
  2928                           
  2929                           ;main.c: 103: }
  2930                           ;main.c: 104: }
  2931                           ;main.c: 106: if(PIR4bits.TMR3IF)
  2932  010072  010E               	movlb	14	; () banked
  2933  010074  A5CE               	btfss	206,2,b	;volatile
  2934  010076  D02B               	goto	l1027
  2935                           
  2936                           ; BSR set to: 14
  2937                           ;main.c: 107: {
  2938                           ;main.c: 108: credit = mdb_poll();
  2939  010078  EC9A  F080         	call	_mdb_poll	;wreg free
  2940  01007C  6E3B               	movwf	_credit,c	;volatile
  2941                           
  2942                           ;main.c: 109: if(credit != 0x00)
  2943  01007E  503B               	movf	_credit,w,c	;volatile
  2944  010080  B4D8               	btfsc	status,2,c
  2945  010082  D022               	goto	l1014
  2946                           
  2947                           ;main.c: 110: {
  2948                           ;main.c: 111: if(mdbflags.noteerr == 1)
  2949  010084  B23E               	btfsc	_mdbflags,1,c
  2950  010086  D00D               	goto	l1016
  2951  010088  D01A               	goto	l1015
  2952  01008A  EC8A  F08B         	call	_mdb_init	;wreg free
  2953  01008E  D003               	goto	l1022
  2954  010090                     l1019:
  2955                           
  2956                           ;main.c: 122: if(mdbflags.vending)
  2957  010090  A83E               	btfss	_mdbflags,4,c
  2958                           
  2959                           ;main.c: 126: else
  2960                           ;main.c: 127: {
  2961                           ;main.c: 128: mdb_init();
  2962                           
  2963                           ;main.c: 125: }
  2964                           
  2965                           ;main.c: 123: {
  2966                           ;main.c: 124: credit = 0;
  2967  010092  EC8A  F08B         	call	_mdb_init	;wreg free
  2968  010096                     l1022:
  2969                           
  2970                           ;main.c: 136: credit = 0;
  2971                           
  2972                           ;main.c: 135: case 0x0C : mdbflags.noteerr == 0;
  2973                           
  2974                           ;main.c: 134: break;
  2975                           
  2976                           ;main.c: 133: credit = 0;
  2977  010096  0E00               	movlw	0
  2978  010098  6E3B               	movwf	_credit,c	;volatile
  2979                           
  2980                           ;main.c: 137: break;
  2981  01009A  D019               	goto	l1027
  2982  01009C  EC02  F08F         	call	_displ_noteer	;wreg free
  2983                           
  2984                           ;main.c: 139: }
  2985  0100A0  D016               	goto	l1027
  2986  0100A2                     l1016:
  2987  0100A2  503B               	movf	_credit,w,c	;volatile
  2988                           
  2989                           ; Switch size 1, requested type "space"
  2990                           ; Number of cases is 4, Range of values is 6 to 16
  2991                           ; switch strategies available:
  2992                           ; Name         Instructions Cycles
  2993                           ; simple_byte           13     7 (average)
  2994                           ;	Chosen strategy is simple_byte
  2995  0100A4  0A06               	xorlw	6	; case 6
  2996  0100A6  B4D8               	btfsc	status,2,c
  2997  0100A8  D7F0               	goto	l1017
  2998  0100AA  0A0F               	xorlw	15	; case 9
  2999  0100AC  B4D8               	btfsc	status,2,c
  3000  0100AE  D7F0               	goto	l1019
  3001  0100B0  0A05               	xorlw	5	; case 12
  3002  0100B2  B4D8               	btfsc	status,2,c
  3003  0100B4  D7F0               	goto	l1022
  3004  0100B6  0A1C               	xorlw	28	; case 16
  3005  0100B8  B4D8               	btfsc	status,2,c
  3006  0100BA  D7ED               	goto	l1022
  3007  0100BC  D7EF               	goto	l1024
  3008  0100BE                     l1015:
  3009                           
  3010                           ;main.c: 141: else
  3011                           ;main.c: 142: {
  3012                           ;main.c: 143: credit_add(credit);
  3013  0100BE  503B               	movf	_credit,w,c	;volatile
  3014  0100C0  EC22  F08C         	call	_credit_add
  3015                           
  3016                           ;main.c: 144: venflags.iscredit = 1;
  3017  0100C4  802E               	bsf	_venflags,0,c
  3018                           
  3019                           ;main.c: 145: }
  3020                           ;main.c: 146: }
  3021  0100C6  D003               	goto	l1027
  3022  0100C8                     l1014:
  3023                           
  3024                           ;main.c: 147: else
  3025                           ;main.c: 148: {
  3026                           ;main.c: 149: if(mdbflags.noteerr == 1)
  3027  0100C8  B23E               	btfsc	_mdbflags,1,c
  3028                           
  3029                           ;main.c: 150: {
  3030                           ;main.c: 151: displ_noteer();
  3031  0100CA  EC02  F08F         	call	_displ_noteer	;wreg free
  3032  0100CE                     l1027:
  3033                           
  3034                           ;main.c: 152: }
  3035                           ;main.c: 155: }
  3036                           ;main.c: 156: }
  3037                           ;main.c: 157: if(venflags.iscredit)
  3038  0100CE  A02E               	btfss	_venflags,0,c
  3039  0100D0  D003               	goto	l1028
  3040                           
  3041                           ;main.c: 158: {
  3042                           ;main.c: 159: price_check();
  3043  0100D2  EC61  F090         	call	_price_check	;wreg free
  3044                           
  3045                           ;main.c: 160: }
  3046  0100D6  D79A               	goto	l1005
  3047  0100D8                     l1028:
  3048                           
  3049                           ;main.c: 161: else
  3050                           ;main.c: 162: {
  3051                           ;main.c: 163: if(butin() != 0)
  3052  0100D8  EC1D  F08D         	call	_butin	;wreg free
  3053  0100DC  0900               	iorlw	0
  3054  0100DE  B4D8               	btfsc	status,2,c
  3055  0100E0  D024               	goto	l1030
  3056                           
  3057                           ;main.c: 164: {
  3058                           ;main.c: 166: buttons = butin();
  3059  0100E2  EC1D  F08D         	call	_butin	;wreg free
  3060  0100E6  6E39               	movwf	_buttons,c	;volatile
  3061                           
  3062                           ;main.c: 167: if(!venflags.pricedisplay)
  3063  0100E8  B430               	btfsc	_venflags+2,2,c
  3064  0100EA  D790               	goto	l1005
  3065                           
  3066                           ;main.c: 168: {
  3067                           ;main.c: 169: uint8_t channel = get_channel(buttons);
  3068  0100EC  5039               	movf	_buttons,w,c	;volatile
  3069  0100EE  EC99  F08F         	call	_get_channel
  3070  0100F2  0100               	movlb	0	; () banked
  3071  0100F4  6FB7               	movwf	main@channel& (0+255),b
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;main.c: 170: vendprice = DATAEE_ReadByte(pricestore + channel);
  3075  0100F6  0E43               	movlw	low _pricestore
  3076  0100F8  6EF6               	movwf	tblptrl,c
  3077  0100FA                     	if	1	;There is more than 1 active tblptr byte
  3078  0100FA  0EFC               	movlw	high _pricestore
  3079  0100FC  6EF7               	movwf	tblptrh,c
  3080  0100FE                     	endif
  3081  0100FE                     	if	1	;There are 3 active tblptr bytes
  3082  0100FE  0E00               	movlw	low (_pricestore shr (0+16))
  3083  010100  6EF8               	movwf	tblptru,c
  3084  010102                     	endif
  3085  010102  0009               	tblrd		*+
  3086  010104  CFF5 F0B5          	movff	tablat,??_main
  3087  010108  0009               	tblrd		*+
  3088  01010A  CFF5 F0B6          	movff	tablat,??_main+1
  3089  01010E  51B7               	movf	main@channel& (0+255),w,b
  3090  010110  25B5               	addwf	??_main& (0+255),w,b
  3091  010112  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  3092  010114  0E00               	movlw	0
  3093  010116  21B6               	addwfc	(??_main+1)& (0+255),w,b
  3094  010118  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  3095  01011A  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  3096  01011E  6E38               	movwf	_vendprice,c	;volatile
  3097                           
  3098                           ;main.c: 171: displ_price(vendprice);
  3099  010120  5038               	movf	_vendprice,w,c	;volatile
  3100  010122  EC87  F08D         	call	_displ_price
  3101                           
  3102                           ;main.c: 172: venflags.pricedisplay = 1;
  3103  010126  8430               	bsf	_venflags+2,2,c
  3104                           
  3105                           ;main.c: 173: }
  3106                           ;main.c: 174: }
  3107  010128  D771               	goto	l1005
  3108  01012A                     l1030:
  3109                           
  3110                           ;main.c: 175: else
  3111                           ;main.c: 176: {
  3112                           ;main.c: 177: if(venflags.pricedisplay)
  3113  01012A  A430               	btfss	_venflags+2,2,c
  3114  01012C  D76F               	goto	l1005
  3115                           
  3116                           ;main.c: 178: {
  3117                           ;main.c: 179: venflags.pricedisplay = 0;
  3118  01012E  9430               	bcf	_venflags+2,2,c
  3119                           
  3120                           ;main.c: 180: venflags.inscoin = 1;
  3121  010130  842E               	bsf	_venflags,2,c
  3122  010132  D76C               	goto	l1005
  3123  010134                     __end_of_main:
  3124                           	opt stack 0
  3125                           tblptru	equ	0xFF8
  3126                           tblptrh	equ	0xFF7
  3127                           tblptrl	equ	0xFF6
  3128                           tablat	equ	0xFF5
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           status	equ	0xFD8
  3132                           
  3133 ;; *************** function _vend_init *****************
  3134 ;; Defined at:
  3135 ;;		line 33 in file "vend.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    8
  3156 ;; This function calls:
  3157 ;;		_DAC1_SetOutput
  3158 ;;		_DATAEE_ReadByte
  3159 ;;		_Init_vendmem
  3160 ;;		_credit_check
  3161 ;;		_lcd_string
  3162 ;;		_mdb_init
  3163 ;; This function is called by:
  3164 ;;		_main
  3165 ;; This function uses a non-reentrant model
  3166 ;;
  3167                           
  3168                           	psect	text1
  3169  010F52                     __ptext1:
  3170                           	opt stack 0
  3171  010F52                     _vend_init:
  3172                           	opt stack 22
  3173                           
  3174                           ;vend.c: 36: ((uint8_t*) &venderr)[0] = DATAEE_ReadByte(venderrors);
  3175                           
  3176                           ;incstack = 0
  3177  010F52  0E41               	movlw	low _venderrors
  3178  010F54  6EF6               	movwf	tblptrl,c
  3179  010F56                     	if	1	;There is more than 1 active tblptr byte
  3180  010F56  0EFC               	movlw	high _venderrors
  3181  010F58  6EF7               	movwf	tblptrh,c
  3182  010F5A                     	endif
  3183  010F5A                     	if	1	;There are 3 active tblptr bytes
  3184  010F5A  0E00               	movlw	low (_venderrors shr (0+16))
  3185  010F5C  6EF8               	movwf	tblptru,c
  3186  010F5E                     	endif
  3187  010F5E  0009               	tblrd		*+
  3188  010F60  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  3189  010F64  000A               	tblrd		*-
  3190  010F66  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  3191  010F6A  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  3192  010F6E  6E34               	movwf	_venderr,c
  3193                           
  3194                           ;vend.c: 38: if(DATAEE_ReadByte(hoperror) != 0)
  3195  010F70  0E15               	movlw	low _hoperror
  3196  010F72  6EF6               	movwf	tblptrl,c
  3197  010F74                     	if	1	;There is more than 1 active tblptr byte
  3198  010F74  0EFC               	movlw	high _hoperror
  3199  010F76  6EF7               	movwf	tblptrh,c
  3200  010F78                     	endif
  3201  010F78                     	if	1	;There are 3 active tblptr bytes
  3202  010F78  0E00               	movlw	low (_hoperror shr (0+16))
  3203  010F7A  6EF8               	movwf	tblptru,c
  3204  010F7C                     	endif
  3205  010F7C  0009               	tblrd		*+
  3206  010F7E  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  3207  010F82  000A               	tblrd		*-
  3208  010F84  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  3209  010F88  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  3210  010F8C  0900               	iorlw	0
  3211  010F8E  B4D8               	btfsc	status,2,c
  3212  010F90  D002               	goto	l2012
  3213                           
  3214                           ;vend.c: 39: {
  3215                           ;vend.c: 40: venflags.nochange = 1;
  3216  010F92  862E               	bsf	_venflags,3,c
  3217                           
  3218                           ;vend.c: 41: }
  3219  010F94  D001               	goto	l2013
  3220  010F96                     l2012:
  3221                           
  3222                           ;vend.c: 42: else
  3223                           ;vend.c: 43: {
  3224                           ;vend.c: 44: venflags.nochange = 0;
  3225  010F96  962E               	bcf	_venflags,3,c
  3226  010F98                     l2013:
  3227                           
  3228                           ;vend.c: 45: }
  3229                           ;vend.c: 47: Init_vendmem();
  3230  010F98  EC97  F086         	call	_Init_vendmem	;wreg free
  3231                           
  3232                           ;vend.c: 49: sensorval = DATAEE_ReadByte(sensval);
  3233  010F9C  0E3D               	movlw	low _sensval
  3234  010F9E  6EF6               	movwf	tblptrl,c
  3235  010FA0                     	if	1	;There is more than 1 active tblptr byte
  3236  010FA0  0EFC               	movlw	high _sensval
  3237  010FA2  6EF7               	movwf	tblptrh,c
  3238  010FA4                     	endif
  3239  010FA4                     	if	1	;There are 3 active tblptr bytes
  3240  010FA4  0E00               	movlw	low (_sensval shr (0+16))
  3241  010FA6  6EF8               	movwf	tblptru,c
  3242  010FA8                     	endif
  3243  010FA8  0009               	tblrd		*+
  3244  010FAA  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  3245  010FAE  000A               	tblrd		*-
  3246  010FB0  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  3247  010FB4  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  3248  010FB8  6E37               	movwf	_sensorval,c	;volatile
  3249                           
  3250                           ;vend.c: 50: DAC1_SetOutput(sensorval);
  3251  010FBA  5037               	movf	_sensorval,w,c	;volatile
  3252  010FBC  EC46  F090         	call	_DAC1_SetOutput
  3253                           
  3254                           ;vend.c: 55: lcd_string(initnote, line1);
  3255  010FC0  0E89               	movlw	low _initnote
  3256  010FC2  6E24               	movwf	lcd_string@lcdstring,c
  3257  010FC4  0EFE               	movlw	high _initnote
  3258  010FC6  6E25               	movwf	lcd_string@lcdstring+1,c
  3259  010FC8  0E79               	movlw	low _line1
  3260  010FCA  6EF6               	movwf	tblptrl,c
  3261  010FCC                     	if	1	;There is more than 1 active tblptr byte
  3262  010FCC  0EFC               	movlw	high _line1
  3263  010FCE  6EF7               	movwf	tblptrh,c
  3264  010FD0                     	endif
  3265  010FD0                     	if	1	;There are 3 active tblptr bytes
  3266  010FD0  0E00               	movlw	low (_line1 shr (0+16))
  3267  010FD2  6EF8               	movwf	tblptru,c
  3268  010FD4                     	endif
  3269  010FD4  0008               	tblrd		*
  3270  010FD6  CFF5 F026          	movff	tablat,lcd_string@lcdline
  3271  010FDA  EC03  F088         	call	_lcd_string	;wreg free
  3272                           
  3273                           ;vend.c: 56: mdb_init();
  3274  010FDE  EC8A  F08B         	call	_mdb_init	;wreg free
  3275                           
  3276                           ;vend.c: 58: venflags.pricedisplay = 0;
  3277  010FE2  9430               	bcf	_venflags+2,2,c
  3278                           
  3279                           ;vend.c: 59: venflags.service = 0;
  3280  010FE4  9E2E               	bcf	_venflags,7,c
  3281                           
  3282                           ;vend.c: 60: venflags.initialrun = 1;
  3283  010FE6  8A2E               	bsf	_venflags,5,c
  3284                           
  3285                           ;vend.c: 61: if(credit_check() == 0)
  3286  010FE8  EC69  F08F         	call	_credit_check	;wreg free
  3287  010FEC  0900               	iorlw	0
  3288  010FEE  A4D8               	btfss	status,2,c
  3289  010FF0  D005               	goto	l2014
  3290                           
  3291                           ;vend.c: 62: {
  3292                           ;vend.c: 63: venflags.iscredit = 0;
  3293  010FF2  902E               	bcf	_venflags,0,c
  3294                           
  3295                           ;vend.c: 64: venflags.inscoin = 1;
  3296  010FF4  842E               	bsf	_venflags,2,c
  3297                           
  3298                           ;vend.c: 65: venflags.credisplay = 0;
  3299  010FF6  982E               	bcf	_venflags,4,c
  3300                           
  3301                           ;vend.c: 66: mdbflags.noteerr = 0;
  3302  010FF8  923E               	bcf	_mdbflags,1,c
  3303                           
  3304                           ;vend.c: 67: }
  3305  010FFA  0012               	return	
  3306  010FFC                     l2014:
  3307                           
  3308                           ;vend.c: 68: else
  3309                           ;vend.c: 69: {
  3310                           ;vend.c: 70: venflags.iscredit = 1;
  3311  010FFC  802E               	bsf	_venflags,0,c
  3312                           
  3313                           ;vend.c: 71: venflags.inscoin = 0;
  3314  010FFE  942E               	bcf	_venflags,2,c
  3315                           
  3316                           ;vend.c: 72: venflags.credisplay = 1;
  3317  011000  882E               	bsf	_venflags,4,c
  3318                           
  3319                           ;vend.c: 73: mdbflags.noteerr = 0;
  3320  011002  923E               	bcf	_mdbflags,1,c
  3321  011004  0012               	return	
  3322  011006                     __end_of_vend_init:
  3323                           	opt stack 0
  3324                           tblptru	equ	0xFF8
  3325                           tblptrh	equ	0xFF7
  3326                           tblptrl	equ	0xFF6
  3327                           tablat	equ	0xFF5
  3328                           postinc0	equ	0xFEE
  3329                           wreg	equ	0xFE8
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _mdb_init *****************
  3333 ;; Defined at:
  3334 ;;		line 21 in file "mdb.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  i               1   28[COMRAM] unsigned char 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;                  1    wreg      void 
  3341 ;; Registers used:
  3342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;Total ram usage:        3 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; Hardware stack levels required when called:    6
  3355 ;; This function calls:
  3356 ;;		_DATAEE_ReadByte
  3357 ;;		_eusartmdb_Initialize
  3358 ;;		_mdb_comm
  3359 ;;		_mdb_noten
  3360 ;;		_mdb_reset
  3361 ;;		_mdb_security
  3362 ;; This function is called by:
  3363 ;;		_main
  3364 ;;		_vend_init
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text2
  3369  011714                     __ptext2:
  3370                           	opt stack 0
  3371  011714                     _mdb_init:
  3372                           	opt stack 23
  3373                           
  3374                           ;mdb.c: 23: _delay((unsigned long)((250)*(12000000/4000.0)));
  3375                           
  3376                           ;incstack = 0
  3377  011714  0E04               	movlw	4
  3378  011716  6E26               	movwf	(??_mdb_init+1)& (0+255),c
  3379  011718  0ECF               	movlw	207
  3380  01171A  6E25               	movwf	??_mdb_init& (0+255),c
  3381  01171C  0E02               	movlw	2
  3382  01171E                     u4137:
  3383  01171E  2EE8               	decfsz	wreg,f,c
  3384  011720  D7FE               	bra	u4137
  3385  011722  2E25               	decfsz	??_mdb_init& (0+255),f,c
  3386  011724  D7FC               	bra	u4137
  3387  011726  2E26               	decfsz	(??_mdb_init+1)& (0+255),f,c
  3388  011728  D7FA               	bra	u4137
  3389                           
  3390                           ;mdb.c: 24: noteen_byte = DATAEE_ReadByte(notebits);
  3391  01172A  0E3F               	movlw	low _notebits
  3392  01172C  6EF6               	movwf	tblptrl,c
  3393  01172E                     	if	1	;There is more than 1 active tblptr byte
  3394  01172E  0EFC               	movlw	high _notebits
  3395  011730  6EF7               	movwf	tblptrh,c
  3396  011732                     	endif
  3397  011732                     	if	1	;There are 3 active tblptr bytes
  3398  011732  0E00               	movlw	low (_notebits shr (0+16))
  3399  011734  6EF8               	movwf	tblptru,c
  3400  011736                     	endif
  3401  011736  0009               	tblrd		*+
  3402  011738  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  3403  01173C  000A               	tblrd		*-
  3404  01173E  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  3405  011742  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  3406  011746  6E3C               	movwf	_noteen_byte,c	;volatile
  3407                           
  3408                           ;mdb.c: 25: ((uint8_t*) &noteen)[0] = noteen_byte;
  3409  011748  C03C  F03D         	movff	_noteen_byte,_noteen	;volatile
  3410                           
  3411                           ;mdb.c: 26: eusartmdb_Initialize();
  3412  01174C  ECE7  F08F         	call	_eusartmdb_Initialize	;wreg free
  3413                           
  3414                           ;mdb.c: 27: mdbflags.noteerr = 0;
  3415  011750  923E               	bcf	_mdbflags,1,c
  3416                           
  3417                           ;mdb.c: 28: mdbflags.isdata = 0;
  3418  011752  903E               	bcf	_mdbflags,0,c
  3419                           
  3420                           ;mdb.c: 29: mdb_reset();
  3421  011754  ECDB  F089         	call	_mdb_reset	;wreg free
  3422                           
  3423                           ;mdb.c: 30: mdb_noten();
  3424  011758  ECA7  F08D         	call	_mdb_noten	;wreg free
  3425                           
  3426                           ;mdb.c: 31: mdb_security();
  3427  01175C  EC7A  F08F         	call	_mdb_security	;wreg free
  3428                           
  3429                           ;mdb.c: 32: uint8_t i = mdb_comm(note_poll, 0x00);
  3430  011760  0E00               	movlw	0
  3431  011762  6E1F               	movwf	mdb_comm@mcount,c
  3432  011764  0E72               	movlw	low _note_poll
  3433  011766  6EF6               	movwf	tblptrl,c
  3434  011768                     	if	1	;There is more than 1 active tblptr byte
  3435  011768  0EFC               	movlw	high _note_poll
  3436  01176A  6EF7               	movwf	tblptrh,c
  3437  01176C                     	endif
  3438  01176C                     	if	1	;There are 3 active tblptr bytes
  3439  01176C  0E00               	movlw	low (_note_poll shr (0+16))
  3440  01176E  6EF8               	movwf	tblptru,c
  3441  011770                     	endif
  3442  011770  0008               	tblrd		*
  3443  011772  50F5               	movf	tablat,w,c
  3444  011774  EC3D  F083         	call	_mdb_comm
  3445  011778  6E27               	movwf	mdb_init@i,c
  3446  01177A  0012               	return		;funcret
  3447  01177C                     __end_of_mdb_init:
  3448                           	opt stack 0
  3449                           tblptru	equ	0xFF8
  3450                           tblptrh	equ	0xFF7
  3451                           tblptrl	equ	0xFF6
  3452                           tablat	equ	0xFF5
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           status	equ	0xFD8
  3456                           
  3457 ;; *************** function _mdb_security *****************
  3458 ;; Defined at:
  3459 ;;		line 151 in file "mdb.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;		None
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;		None
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;Total ram usage:        0 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    5
  3480 ;; This function calls:
  3481 ;;		_init_mdbdata
  3482 ;;		_mdb_comm
  3483 ;; This function is called by:
  3484 ;;		_mdb_init
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text3
  3489  011EF4                     __ptext3:
  3490                           	opt stack 0
  3491  011EF4                     _mdb_security:
  3492                           	opt stack 23
  3493                           
  3494                           ;mdb.c: 153: init_mdbdata(0x00);
  3495                           
  3496                           ;incstack = 0
  3497  011EF4  0E00               	movlw	0
  3498  011EF6  EC45  F08F         	call	_init_mdbdata
  3499                           
  3500                           ;mdb.c: 154: mdb_comm(note_security, 0x01);
  3501  011EFA  0E01               	movlw	1
  3502  011EFC  6E1F               	movwf	mdb_comm@mcount,c
  3503  011EFE  0E73               	movlw	low _note_security
  3504  011F00  6EF6               	movwf	tblptrl,c
  3505  011F02                     	if	1	;There is more than 1 active tblptr byte
  3506  011F02  0EFC               	movlw	high _note_security
  3507  011F04  6EF7               	movwf	tblptrh,c
  3508  011F06                     	endif
  3509  011F06                     	if	1	;There are 3 active tblptr bytes
  3510  011F06  0E00               	movlw	low (_note_security shr (0+16))
  3511  011F08  6EF8               	movwf	tblptru,c
  3512  011F0A                     	endif
  3513  011F0A  0008               	tblrd		*
  3514  011F0C  50F5               	movf	tablat,w,c
  3515  011F0E  EC3D  F083         	call	_mdb_comm
  3516  011F12  0012               	return		;funcret
  3517  011F14                     __end_of_mdb_security:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           postinc0	equ	0xFEE
  3524                           wreg	equ	0xFE8
  3525                           status	equ	0xFD8
  3526                           
  3527 ;; *************** function _mdb_reset *****************
  3528 ;; Defined at:
  3529 ;;		line 36 in file "mdb.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  i               1   24[COMRAM] unsigned char 
  3534 ;;  i               1   25[COMRAM] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  1    wreg      unsigned char 
  3537 ;; Registers used:
  3538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;Total ram usage:        3 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    5
  3551 ;; This function calls:
  3552 ;;		_mdb_comm
  3553 ;; This function is called by:
  3554 ;;		_mdb_init
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text4
  3559  0113B6                     __ptext4:
  3560                           	opt stack 0
  3561  0113B6                     _mdb_reset:
  3562                           	opt stack 23
  3563                           
  3564                           ;mdb.c: 41: mdbflags.timeout = 1;
  3565                           
  3566                           ;incstack = 0
  3567  0113B6  863E               	bsf	_mdbflags,3,c
  3568                           
  3569                           ;mdb.c: 42: while(mdbflags.timeout)
  3570  0113B8  D00D               	goto	l2702
  3571  0113BA                     
  3572                           ;mdb.c: 43: {
  3573                           ;mdb.c: 44: uint8_t i = mdb_comm(note_reset, 0x00);
  3574  0113BA  0E00               	movlw	0
  3575  0113BC  6E1F               	movwf	mdb_comm@mcount,c
  3576  0113BE  0E75               	movlw	low _note_reset
  3577  0113C0  6EF6               	movwf	tblptrl,c
  3578  0113C2                     	if	1	;There is more than 1 active tblptr byte
  3579  0113C2  0EFC               	movlw	high _note_reset
  3580  0113C4  6EF7               	movwf	tblptrh,c
  3581  0113C6                     	endif
  3582  0113C6                     	if	1	;There are 3 active tblptr bytes
  3583  0113C6  0E00               	movlw	low (_note_reset shr (0+16))
  3584  0113C8  6EF8               	movwf	tblptru,c
  3585  0113CA                     	endif
  3586  0113CA  0008               	tblrd		*
  3587  0113CC  50F5               	movf	tablat,w,c
  3588  0113CE  EC3D  F083         	call	_mdb_comm
  3589  0113D2  6E23               	movwf	mdb_reset@i,c
  3590  0113D4                     l2702:
  3591  0113D4  B63E               	btfsc	_mdbflags,3,c
  3592  0113D6  D7F1               	goto	l2703
  3593  0113D8  F000               	nop		;# 
  3594                           
  3595                           ;mdb.c: 47: uint8_t i = mdb_comm(note_poll, 0x00);
  3596  0113DA  0E00               	movlw	0
  3597  0113DC  6E1F               	movwf	mdb_comm@mcount,c
  3598  0113DE  0E72               	movlw	low _note_poll
  3599  0113E0  6EF6               	movwf	tblptrl,c
  3600  0113E2                     	if	1	;There is more than 1 active tblptr byte
  3601  0113E2  0EFC               	movlw	high _note_poll
  3602  0113E4  6EF7               	movwf	tblptrh,c
  3603  0113E6                     	endif
  3604  0113E6                     	if	1	;There are 3 active tblptr bytes
  3605  0113E6  0E00               	movlw	low (_note_poll shr (0+16))
  3606  0113E8  6EF8               	movwf	tblptru,c
  3607  0113EA                     	endif
  3608  0113EA  0008               	tblrd		*
  3609  0113EC  50F5               	movf	tablat,w,c
  3610  0113EE  EC3D  F083         	call	_mdb_comm
  3611  0113F2  6E24               	movwf	mdb_reset@i_3738,c
  3612                           
  3613                           ;mdb.c: 48: if(mdbdata[--i] == just_reset)
  3614  0113F4  0624               	decf	mdb_reset@i_3738,f,c
  3615  0113F6  5024               	movf	mdb_reset@i_3738,w,c
  3616  0113F8  0D01               	mullw	1
  3617  0113FA  0E60               	movlw	low _mdbdata
  3618  0113FC  24F3               	addwf	prodl,w,c
  3619  0113FE  6ED9               	movwf	fsr2l,c
  3620  011400  0E00               	movlw	high _mdbdata
  3621  011402  20F4               	addwfc	prodh,w,c
  3622  011404  6EDA               	movwf	fsr2h,c
  3623  011406  50DF               	movf	indf2,w,c
  3624  011408  6E22               	movwf	??_mdb_reset& (0+255),c
  3625  01140A  0E68               	movlw	low _just_reset
  3626  01140C  6EF6               	movwf	tblptrl,c
  3627  01140E                     	if	1	;There is more than 1 active tblptr byte
  3628  01140E  0EFC               	movlw	high _just_reset
  3629  011410  6EF7               	movwf	tblptrh,c
  3630  011412                     	endif
  3631  011412                     	if	1	;There are 3 active tblptr bytes
  3632  011412  0E00               	movlw	low (_just_reset shr (0+16))
  3633  011414  6EF8               	movwf	tblptru,c
  3634  011416                     	endif
  3635  011416  0008               	tblrd		*
  3636  011418  50F5               	movf	tablat,w,c
  3637  01141A  1822               	xorwf	??_mdb_reset,w,c
  3638  01141C  A4D8               	btfss	status,2,c
  3639  01141E  0012               	return	
  3640                           
  3641                           ;mdb.c: 49: {
  3642                           ;mdb.c: 51: i = mdb_comm(note_poll, 0x00);
  3643  011420  0E00               	movlw	0
  3644  011422  6E1F               	movwf	mdb_comm@mcount,c
  3645  011424  0E72               	movlw	low _note_poll
  3646  011426  6EF6               	movwf	tblptrl,c
  3647  011428                     	if	1	;There is more than 1 active tblptr byte
  3648  011428  0EFC               	movlw	high _note_poll
  3649  01142A  6EF7               	movwf	tblptrh,c
  3650  01142C                     	endif
  3651  01142C                     	if	1	;There are 3 active tblptr bytes
  3652  01142C  0E00               	movlw	low (_note_poll shr (0+16))
  3653  01142E  6EF8               	movwf	tblptru,c
  3654  011430                     	endif
  3655  011430  0008               	tblrd		*
  3656  011432  50F5               	movf	tablat,w,c
  3657  011434  EC3D  F083         	call	_mdb_comm
  3658  011438  6E24               	movwf	mdb_reset@i_3738,c
  3659  01143A  0012               	return	
  3660  01143C                     __end_of_mdb_reset:
  3661                           	opt stack 0
  3662                           tblptru	equ	0xFF8
  3663                           tblptrh	equ	0xFF7
  3664                           tblptrl	equ	0xFF6
  3665                           tablat	equ	0xFF5
  3666                           prodh	equ	0xFF4
  3667                           prodl	equ	0xFF3
  3668                           postinc0	equ	0xFEE
  3669                           wreg	equ	0xFE8
  3670                           indf2	equ	0xFDF
  3671                           fsr2h	equ	0xFDA
  3672                           fsr2l	equ	0xFD9
  3673                           status	equ	0xFD8
  3674                           
  3675 ;; *************** function _mdb_noten *****************
  3676 ;; Defined at:
  3677 ;;		line 135 in file "mdb.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;		None
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;Total ram usage:        0 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    5
  3698 ;; This function calls:
  3699 ;;		_init_mdbdata
  3700 ;;		_mdb_comm
  3701 ;; This function is called by:
  3702 ;;		_mdb_init
  3703 ;;		_note_disable
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text5
  3708  011B4E                     __ptext5:
  3709                           	opt stack 0
  3710  011B4E                     _mdb_noten:
  3711                           	opt stack 23
  3712                           
  3713                           ;mdb.c: 138: init_mdbdata(0x00);
  3714                           
  3715                           ;incstack = 0
  3716  011B4E  0E00               	movlw	0
  3717  011B50  EC45  F08F         	call	_init_mdbdata
  3718                           
  3719                           ;mdb.c: 140: mcount = 3;
  3720  011B54  0E03               	movlw	3
  3721  011B56  6E41               	movwf	_mcount,c
  3722                           
  3723                           ;mdb.c: 142: mdbdata[0] = 0x00;
  3724  011B58  0E00               	movlw	0
  3725  011B5A  0100               	movlb	0	; () banked
  3726  011B5C  6F60               	movwf	_mdbdata& (0+255),b
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;mdb.c: 143: mdbdata[1] = 0x00;
  3730  011B5E  0E00               	movlw	0
  3731  011B60  6F61               	movwf	(_mdbdata+1)& (0+255),b
  3732                           
  3733                           ; BSR set to: 0
  3734                           ;mdb.c: 145: mdbdata[2] = noteen_byte;
  3735  011B62  C03C  F062         	movff	_noteen_byte,_mdbdata+2	;volatile
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;mdb.c: 147: mdbdata[3] = 0x00;
  3739  011B66  0E00               	movlw	0
  3740  011B68  6F63               	movwf	(_mdbdata+3)& (0+255),b
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;mdb.c: 148: mcount = mdb_comm(note_type, mcount);
  3744  011B6A  C041  F01F         	movff	_mcount,mdb_comm@mcount
  3745  011B6E  0E71               	movlw	low _note_type
  3746  011B70  6EF6               	movwf	tblptrl,c
  3747  011B72                     	if	1	;There is more than 1 active tblptr byte
  3748  011B72  0EFC               	movlw	high _note_type
  3749  011B74  6EF7               	movwf	tblptrh,c
  3750  011B76                     	endif
  3751  011B76                     	if	1	;There are 3 active tblptr bytes
  3752  011B76  0E00               	movlw	low (_note_type shr (0+16))
  3753  011B78  6EF8               	movwf	tblptru,c
  3754  011B7A                     	endif
  3755  011B7A  0008               	tblrd		*
  3756  011B7C  50F5               	movf	tablat,w,c
  3757  011B7E  EC3D  F083         	call	_mdb_comm
  3758  011B82  6E41               	movwf	_mcount,c
  3759                           
  3760                           ;mdb.c: 149: mdbflags.vending = 0;
  3761  011B84  983E               	bcf	_mdbflags,4,c
  3762  011B86  0012               	return		;funcret
  3763  011B88                     __end_of_mdb_noten:
  3764                           	opt stack 0
  3765                           tblptru	equ	0xFF8
  3766                           tblptrh	equ	0xFF7
  3767                           tblptrl	equ	0xFF6
  3768                           tablat	equ	0xFF5
  3769                           prodh	equ	0xFF4
  3770                           prodl	equ	0xFF3
  3771                           postinc0	equ	0xFEE
  3772                           wreg	equ	0xFE8
  3773                           indf2	equ	0xFDF
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function _eusartmdb_Initialize *****************
  3779 ;; Defined at:
  3780 ;;		line 55 in file "eusart_mdb.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    2
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_mdb_init
  3805 ;;		_cctalk_init
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text6
  3810  011FCE                     __ptext6:
  3811                           	opt stack 0
  3812  011FCE                     _eusartmdb_Initialize:
  3813                           	opt stack 26
  3814                           
  3815                           ;eusart_mdb.c: 60: BAUD1CON = 0x08;
  3816                           
  3817                           ;incstack = 0
  3818  011FCE  0E08               	movlw	8
  3819  011FD0  6E9F               	movwf	3999,c	;volatile
  3820                           
  3821                           ;eusart_mdb.c: 63: RC1STA = 0xD0;
  3822  011FD2  0ED0               	movlw	208
  3823  011FD4  6E9D               	movwf	3997,c	;volatile
  3824                           
  3825                           ;eusart_mdb.c: 66: TX1STA = 0xEC;
  3826  011FD6  0EEC               	movlw	236
  3827  011FD8  6E9E               	movwf	3998,c	;volatile
  3828                           
  3829                           ;eusart_mdb.c: 69: SP1BRGL = 0x38;
  3830  011FDA  0E38               	movlw	56
  3831  011FDC  6E9B               	movwf	3995,c	;volatile
  3832                           
  3833                           ;eusart_mdb.c: 72: SP1BRGH = 0x01;
  3834  011FDE  0E01               	movlw	1
  3835  011FE0  6E9C               	movwf	3996,c	;volatile
  3836  011FE2  0012               	return		;funcret
  3837  011FE4                     __end_of_eusartmdb_Initialize:
  3838                           	opt stack 0
  3839                           tblptru	equ	0xFF8
  3840                           tblptrh	equ	0xFF7
  3841                           tblptrl	equ	0xFF6
  3842                           tablat	equ	0xFF5
  3843                           prodh	equ	0xFF4
  3844                           prodl	equ	0xFF3
  3845                           postinc0	equ	0xFEE
  3846                           wreg	equ	0xFE8
  3847                           indf2	equ	0xFDF
  3848                           fsr2h	equ	0xFDA
  3849                           fsr2l	equ	0xFD9
  3850                           status	equ	0xFD8
  3851                           
  3852 ;; *************** function _DAC1_SetOutput *****************
  3853 ;; Defined at:
  3854 ;;		line 65 in file "mcc_generated_files/dac1.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;  inputData       1    wreg     unsigned char 
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;  inputData       1   18[COMRAM] unsigned char 
  3859 ;; Return value:  Size  Location     Type
  3860 ;;                  1    wreg      void 
  3861 ;; Registers used:
  3862 ;;		wreg
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;Total ram usage:        1 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    2
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_vend_init
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text7
  3883  01208C                     __ptext7:
  3884                           	opt stack 0
  3885  01208C                     _DAC1_SetOutput:
  3886                           	opt stack 27
  3887                           
  3888                           ;incstack = 0
  3889                           ;DAC1_SetOutput@inputData stored from wreg
  3890  01208C  6E1D               	movwf	DAC1_SetOutput@inputData,c
  3891                           
  3892                           ;dac1.c: 67: DAC1CON1 = inputData;
  3893  01208E  C01D  FF34         	movff	DAC1_SetOutput@inputData,3892	;volatile
  3894  012092  0012               	return		;funcret
  3895  012094                     __end_of_DAC1_SetOutput:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           prodh	equ	0xFF4
  3902                           prodl	equ	0xFF3
  3903                           postinc0	equ	0xFEE
  3904                           wreg	equ	0xFE8
  3905                           indf2	equ	0xFDF
  3906                           fsr2h	equ	0xFDA
  3907                           fsr2l	equ	0xFD9
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _price_check *****************
  3911 ;; Defined at:
  3912 ;;		line 10 in file "dispense.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		None
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    2
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_main
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           	psect	text8
  3941  0120C2                     __ptext8:
  3942                           	opt stack 0
  3943  0120C2                     _price_check:
  3944                           	opt stack 28
  3945                           
  3946                           ;incstack = 0
  3947  0120C2  0012               	return		;funcret
  3948  0120C4                     __end_of_price_check:
  3949                           	opt stack 0
  3950                           tblptru	equ	0xFF8
  3951                           tblptrh	equ	0xFF7
  3952                           tblptrl	equ	0xFF6
  3953                           tablat	equ	0xFF5
  3954                           prodh	equ	0xFF4
  3955                           prodl	equ	0xFF3
  3956                           postinc0	equ	0xFEE
  3957                           wreg	equ	0xFE8
  3958                           indf2	equ	0xFDF
  3959                           fsr2h	equ	0xFDA
  3960                           fsr2l	equ	0xFD9
  3961                           status	equ	0xFD8
  3962                           
  3963 ;; *************** function _mdb_poll *****************
  3964 ;; Defined at:
  3965 ;;		line 157 in file "mdb.c"
  3966 ;; Parameters:    Size  Location     Type
  3967 ;;		None
  3968 ;; Auto vars:     Size  Location     Type
  3969 ;;  i               1   23[COMRAM] unsigned char 
  3970 ;; Return value:  Size  Location     Type
  3971 ;;                  1    wreg      unsigned char 
  3972 ;; Registers used:
  3973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3974 ;; Tracked objects:
  3975 ;;		On entry : 0/0
  3976 ;;		On exit  : 0/0
  3977 ;;		Unchanged: 0/0
  3978 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3983 ;;Total ram usage:        1 bytes
  3984 ;; Hardware stack levels used:    1
  3985 ;; Hardware stack levels required when called:    5
  3986 ;; This function calls:
  3987 ;;		_TMR3_Initialize
  3988 ;;		_mdb_comm
  3989 ;; This function is called by:
  3990 ;;		_main
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text9
  3995  010134                     __ptext9:
  3996                           	opt stack 0
  3997  010134                     _mdb_poll:
  3998                           	opt stack 25
  3999                           
  4000                           ;mdb.c: 161: TMR3_Initialize();
  4001                           
  4002                           ;incstack = 0
  4003  010134  EC33  F08E         	call	_TMR3_Initialize	;wreg free
  4004                           
  4005                           ;mdb.c: 162: uint8_t i = mdb_comm(note_poll, 0x00);
  4006  010138  0E00               	movlw	0
  4007  01013A  6E1F               	movwf	mdb_comm@mcount,c
  4008  01013C  0E72               	movlw	low _note_poll
  4009  01013E  6EF6               	movwf	tblptrl,c
  4010  010140                     	if	1	;There is more than 1 active tblptr byte
  4011  010140  0EFC               	movlw	high _note_poll
  4012  010142  6EF7               	movwf	tblptrh,c
  4013  010144                     	endif
  4014  010144                     	if	1	;There are 3 active tblptr bytes
  4015  010144  0E00               	movlw	low (_note_poll shr (0+16))
  4016  010146  6EF8               	movwf	tblptru,c
  4017  010148                     	endif
  4018  010148  0008               	tblrd		*
  4019  01014A  50F5               	movf	tablat,w,c
  4020  01014C  EC3D  F083         	call	_mdb_comm
  4021  010150  6E22               	movwf	mdb_poll@i,c
  4022                           
  4023                           ;mdb.c: 163: notebyte = mdbdata[0];
  4024  010152  C060  F040         	movff	_mdbdata,_notebyte
  4025                           
  4026                           ;mdb.c: 165: if((mdbdata[0] & 0x80) != 0)
  4027  010156  0100               	movlb	0	; () banked
  4028  010158  AF60               	btfss	_mdbdata& (0+255),7,b
  4029  01015A  D050               	goto	l2759
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;mdb.c: 166: {
  4033                           ;mdb.c: 167: notebyte = mdbdata[0] & 0x7F;
  4034  01015C  5160               	movf	_mdbdata& (0+255),w,b
  4035  01015E  0B7F               	andlw	127
  4036  010160  6E40               	movwf	_notebyte,c
  4037                           
  4038                           ;mdb.c: 168: switch(notebyte)
  4039  010162  D019               	goto	l2749
  4040  010164                     
  4041                           ; BSR set to: 0
  4042  010164  0E0A               	movlw	10
  4043  010166  6E3B               	movwf	_credit,c	;volatile
  4044                           
  4045                           ;mdb.c: 171: return credit;
  4046  010168  503B               	movf	_credit,w,c	;volatile
  4047  01016A  0012               	return	
  4048  01016C  0E14               	movlw	20
  4049  01016E  6E3B               	movwf	_credit,c	;volatile
  4050                           
  4051                           ;mdb.c: 173: return credit;
  4052  010170  503B               	movf	_credit,w,c	;volatile
  4053  010172  0012               	return	
  4054  010174  0E32               	movlw	50
  4055  010176  6E3B               	movwf	_credit,c	;volatile
  4056                           
  4057                           ;mdb.c: 175: return credit;
  4058  010178  503B               	movf	_credit,w,c	;volatile
  4059  01017A  0012               	return	
  4060  01017C  0E64               	movlw	100
  4061  01017E  6E3B               	movwf	_credit,c	;volatile
  4062                           
  4063                           ;mdb.c: 177: return credit;
  4064  010180  503B               	movf	_credit,w,c	;volatile
  4065  010182  0012               	return	
  4066  010184  0EC8               	movlw	200
  4067  010186  6E3B               	movwf	_credit,c	;volatile
  4068                           
  4069                           ;mdb.c: 179: return credit;
  4070  010188  503B               	movf	_credit,w,c	;volatile
  4071  01018A  0012               	return	
  4072  01018C  0E10               	movlw	16
  4073  01018E  6E3B               	movwf	_credit,c	;volatile
  4074                           
  4075                           ;mdb.c: 181: mdbflags.noteerr = 1;
  4076  010190  823E               	bsf	_mdbflags,1,c
  4077                           
  4078                           ;mdb.c: 182: return credit;
  4079  010192  503B               	movf	_credit,w,c	;volatile
  4080                           
  4081                           ;mdb.c: 183: }
  4082  010194  0012               	return	
  4083  010196                     l2749:
  4084  010196  5040               	movf	_notebyte,w,c
  4085                           
  4086                           ; Switch size 1, requested type "space"
  4087                           ; Number of cases is 5, Range of values is 0 to 4
  4088                           ; switch strategies available:
  4089                           ; Name         Instructions Cycles
  4090                           ; simple_byte           16     9 (average)
  4091                           ;	Chosen strategy is simple_byte
  4092  010198  0A00               	xorlw	0	; case 0
  4093  01019A  B4D8               	btfsc	status,2,c
  4094  01019C  D7E3               	goto	l2750
  4095  01019E  0A01               	xorlw	1	; case 1
  4096  0101A0  B4D8               	btfsc	status,2,c
  4097  0101A2  D7E4               	goto	l2752
  4098  0101A4  0A03               	xorlw	3	; case 2
  4099  0101A6  B4D8               	btfsc	status,2,c
  4100  0101A8  D7E5               	goto	l2753
  4101  0101AA  0A01               	xorlw	1	; case 3
  4102  0101AC  B4D8               	btfsc	status,2,c
  4103  0101AE  D7E6               	goto	l2754
  4104  0101B0  0A07               	xorlw	7	; case 4
  4105  0101B2  B4D8               	btfsc	status,2,c
  4106  0101B4  D7E7               	goto	l2755
  4107  0101B6  D7EA               	goto	l2756
  4108  0101B8  0E00               	movlw	0
  4109  0101BA  6E3B               	movwf	_credit,c	;volatile
  4110                           
  4111                           ;mdb.c: 191: return credit;
  4112  0101BC  503B               	movf	_credit,w,c	;volatile
  4113  0101BE  0012               	return	
  4114  0101C0  0E01               	movlw	1
  4115  0101C2  D01A               	goto	L11
  4116  0101C4  0E02               	movlw	2
  4117  0101C6  D018               	goto	L11
  4118  0101C8  0E00               	movlw	0
  4119  0101CA  6E3B               	movwf	_credit,c	;volatile
  4120                           
  4121                           ;mdb.c: 200: mdbflags.noteerr = 0;
  4122  0101CC  923E               	bcf	_mdbflags,1,c
  4123                           
  4124                           ;mdb.c: 201: return credit;
  4125  0101CE  503B               	movf	_credit,w,c	;volatile
  4126  0101D0  0012               	return	
  4127  0101D2  0E04               	movlw	4
  4128  0101D4  D011               	goto	L11
  4129  0101D6  0E05               	movlw	5
  4130  0101D8  D00F               	goto	L11
  4131  0101DA  0E06               	movlw	6
  4132  0101DC  D00D               	goto	L11
  4133  0101DE  0E07               	movlw	7
  4134  0101E0  D00B               	goto	L11
  4135  0101E2  0E08               	movlw	8
  4136  0101E4  D009               	goto	L11
  4137  0101E6  0E09               	movlw	9
  4138  0101E8  D007               	goto	L11
  4139  0101EA  0E0A               	movlw	10
  4140  0101EC  D005               	goto	L11
  4141  0101EE  0E0B               	movlw	11
  4142  0101F0  D003               	goto	L11
  4143  0101F2  0E0C               	movlw	12
  4144  0101F4  D001               	goto	L11
  4145  0101F6  0E00               	movlw	0
  4146  0101F8                     L11:
  4147  0101F8  6E3B               	movwf	_credit,c	;volatile
  4148                           
  4149                           ;mdb.c: 230: }
  4150  0101FA  D02A               	goto	l2762
  4151  0101FC                     l2759:
  4152  0101FC  0100               	movlb	0	; () banked
  4153  0101FE  5160               	movf	_mdbdata& (0+255),w,b
  4154                           
  4155                           ; Switch size 1, requested type "space"
  4156                           ; Number of cases is 13, Range of values is 0 to 12
  4157                           ; switch strategies available:
  4158                           ; Name         Instructions Cycles
  4159                           ; simple_byte           40    21 (average)
  4160                           ;	Chosen strategy is simple_byte
  4161  010200  0A00               	xorlw	0	; case 0
  4162  010202  B4D8               	btfsc	status,2,c
  4163  010204  D7D9               	goto	l2760
  4164  010206  0A01               	xorlw	1	; case 1
  4165  010208  B4D8               	btfsc	status,2,c
  4166  01020A  D7DA               	goto	l2761
  4167  01020C  0A03               	xorlw	3	; case 2
  4168  01020E  B4D8               	btfsc	status,2,c
  4169  010210  D7D9               	goto	l2763
  4170  010212  0A01               	xorlw	1	; case 3
  4171  010214  B4D8               	btfsc	status,2,c
  4172  010216  D7D8               	goto	l2764
  4173  010218  0A07               	xorlw	7	; case 4
  4174  01021A  B4D8               	btfsc	status,2,c
  4175  01021C  D7DA               	goto	l2765
  4176  01021E  0A01               	xorlw	1	; case 5
  4177  010220  B4D8               	btfsc	status,2,c
  4178  010222  D7D9               	goto	l2766
  4179  010224  0A03               	xorlw	3	; case 6
  4180  010226  B4D8               	btfsc	status,2,c
  4181  010228  D7D8               	goto	l2767
  4182  01022A  0A01               	xorlw	1	; case 7
  4183  01022C  B4D8               	btfsc	status,2,c
  4184  01022E  D7D7               	goto	l2768
  4185  010230  0A0F               	xorlw	15	; case 8
  4186  010232  B4D8               	btfsc	status,2,c
  4187  010234  D7D6               	goto	l2769
  4188  010236  0A01               	xorlw	1	; case 9
  4189  010238  B4D8               	btfsc	status,2,c
  4190  01023A  D7D5               	goto	l2770
  4191  01023C  0A03               	xorlw	3	; case 10
  4192  01023E  B4D8               	btfsc	status,2,c
  4193  010240  D7D4               	goto	l2771
  4194  010242  0A01               	xorlw	1	; case 11
  4195  010244  B4D8               	btfsc	status,2,c
  4196  010246  D7D3               	goto	l2772
  4197  010248  0A07               	xorlw	7	; case 12
  4198  01024A  B4D8               	btfsc	status,2,c
  4199  01024C  D7D2               	goto	l2773
  4200  01024E  D7D3               	goto	l2774
  4201  010250                     l2762:
  4202                           
  4203                           ;mdb.c: 231: mdbflags.noteerr = 1;
  4204  010250  823E               	bsf	_mdbflags,1,c
  4205                           
  4206                           ;mdb.c: 232: return credit;
  4207  010252  503B               	movf	_credit,w,c	;volatile
  4208  010254  0012               	return	
  4209  010256                     __end_of_mdb_poll:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           postinc0	equ	0xFEE
  4218                           wreg	equ	0xFE8
  4219                           indf2	equ	0xFDF
  4220                           fsr2h	equ	0xFDA
  4221                           fsr2l	equ	0xFD9
  4222                           status	equ	0xFD8
  4223                           
  4224 ;; *************** function _mdb_comm *****************
  4225 ;; Defined at:
  4226 ;;		line 237 in file "mdb.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  slvadd          1    wreg     unsigned char 
  4229 ;;  mcount          1   20[COMRAM] unsigned char 
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  slvadd          1   21[COMRAM] unsigned char 
  4232 ;;  i               1   22[COMRAM] unsigned char 
  4233 ;; Return value:  Size  Location     Type
  4234 ;;                  1    wreg      unsigned char 
  4235 ;; Registers used:
  4236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4237 ;; Tracked objects:
  4238 ;;		On entry : 0/0
  4239 ;;		On exit  : 0/0
  4240 ;;		Unchanged: 0/0
  4241 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4242 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;Total ram usage:        3 bytes
  4247 ;; Hardware stack levels used:    1
  4248 ;; Hardware stack levels required when called:    4
  4249 ;; This function calls:
  4250 ;;		_EUSART1_Read
  4251 ;;		_TMR1_Initialize
  4252 ;;		_init_mdbdata
  4253 ;;		_mdb_on
  4254 ;;		_mdb_transmit
  4255 ;;		_mdb_waitr
  4256 ;; This function is called by:
  4257 ;;		_mdb_init
  4258 ;;		_mdb_reset
  4259 ;;		_mdb_noten
  4260 ;;		_mdb_security
  4261 ;;		_mdb_poll
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text10
  4266  01067A                     __ptext10:
  4267                           	opt stack 0
  4268  01067A                     _mdb_comm:
  4269                           	opt stack 23
  4270                           
  4271                           ;incstack = 0
  4272                           ;mdb_comm@slvadd stored from wreg
  4273  01067A  6E20               	movwf	mdb_comm@slvadd,c
  4274                           
  4275                           ;mdb.c: 240: uint8_t i = 0;
  4276  01067C  0E00               	movlw	0
  4277  01067E  6E21               	movwf	mdb_comm@i,c
  4278                           
  4279                           ;mdb.c: 242: TX1STAbits.TX9D = 1;
  4280  010680  809E               	bsf	3998,0,c	;volatile
  4281                           
  4282                           ;mdb.c: 243: mdb_on();
  4283  010682  EC5F  F090         	call	_mdb_on	;wreg free
  4284                           
  4285                           ;mdb.c: 247: mdb_transmit(slvadd);
  4286  010686  5020               	movf	mdb_comm@slvadd,w,c
  4287  010688  EC24  F090         	call	_mdb_transmit
  4288                           
  4289                           ;mdb.c: 248: TX1STAbits.TX9D = 0;
  4290  01068C  909E               	bcf	3998,0,c	;volatile
  4291                           
  4292                           ;mdb.c: 252: chkbyte = slvadd;
  4293  01068E  C020  F03F         	movff	mdb_comm@slvadd,_chkbyte
  4294                           
  4295                           ;mdb.c: 253: if(mcount != 0)
  4296  010692  501F               	movf	mdb_comm@mcount,w,c
  4297  010694  B4D8               	btfsc	status,2,c
  4298  010696  D01E               	goto	u3220
  4299                           
  4300                           ;mdb.c: 254: {
  4301                           ;mdb.c: 255: i = mcount + 1;
  4302  010698  281F               	incf	mdb_comm@mcount,w,c
  4303  01069A  6E21               	movwf	mdb_comm@i,c
  4304                           
  4305                           ;mdb.c: 256: while(i != 0)
  4306  01069C  D018               	goto	l2778
  4307  01069E                     
  4308                           ;mdb.c: 257: {
  4309                           ;mdb.c: 258: mdb_transmit(mdbdata[mcount]);
  4310  01069E  501F               	movf	mdb_comm@mcount,w,c
  4311  0106A0  0D01               	mullw	1
  4312  0106A2  0E60               	movlw	low _mdbdata
  4313  0106A4  24F3               	addwf	prodl,w,c
  4314  0106A6  6ED9               	movwf	fsr2l,c
  4315  0106A8  0E00               	movlw	high _mdbdata
  4316  0106AA  20F4               	addwfc	prodh,w,c
  4317  0106AC  6EDA               	movwf	fsr2h,c
  4318  0106AE  50DF               	movf	indf2,w,c
  4319  0106B0  EC24  F090         	call	_mdb_transmit
  4320                           
  4321                           ;mdb.c: 261: chkbyte = chkbyte + mdbdata[mcount];
  4322  0106B4  501F               	movf	mdb_comm@mcount,w,c
  4323  0106B6  0D01               	mullw	1
  4324  0106B8  0E60               	movlw	low _mdbdata
  4325  0106BA  24F3               	addwf	prodl,w,c
  4326  0106BC  6ED9               	movwf	fsr2l,c
  4327  0106BE  0E00               	movlw	high _mdbdata
  4328  0106C0  20F4               	addwfc	prodh,w,c
  4329  0106C2  6EDA               	movwf	fsr2h,c
  4330  0106C4  50DF               	movf	indf2,w,c
  4331  0106C6  243F               	addwf	_chkbyte,w,c
  4332  0106C8  6E3F               	movwf	_chkbyte,c
  4333                           
  4334                           ;mdb.c: 262: i--;
  4335  0106CA  0621               	decf	mdb_comm@i,f,c
  4336                           
  4337                           ;mdb.c: 263: mcount--;
  4338  0106CC  061F               	decf	mdb_comm@mcount,f,c
  4339  0106CE                     l2778:
  4340  0106CE  5021               	movf	mdb_comm@i,w,c
  4341  0106D0  A4D8               	btfss	status,2,c
  4342  0106D2  D7E5               	goto	l2779
  4343  0106D4                     u3220:
  4344                           
  4345                           ;mdb.c: 264: }
  4346                           ;mdb.c: 265: }
  4347                           ;mdb.c: 266: mdb_transmit(chkbyte);
  4348  0106D4  503F               	movf	_chkbyte,w,c
  4349  0106D6  EC24  F090         	call	_mdb_transmit
  4350                           
  4351                           ;mdb.c: 273: init_mdbdata(0xFF);
  4352  0106DA  0EFF               	movlw	255
  4353  0106DC  EC45  F08F         	call	_init_mdbdata
  4354                           
  4355                           ;mdb.c: 274: TMR1_Initialize();
  4356  0106E0  EC4E  F08E         	call	_TMR1_Initialize	;wreg free
  4357                           
  4358                           ;mdb.c: 275: dbcount = 0;
  4359  0106E4  0E00               	movlw	0
  4360  0106E6  6E32               	movwf	_dbcount+1,c
  4361  0106E8  0E00               	movlw	0
  4362  0106EA  6E31               	movwf	_dbcount,c
  4363                           
  4364                           ;mdb.c: 276: mdbflags.isdata = 0;
  4365  0106EC  903E               	bcf	_mdbflags,0,c
  4366                           
  4367                           ;mdb.c: 277: i = 0;
  4368  0106EE  0E00               	movlw	0
  4369  0106F0  6E21               	movwf	mdb_comm@i,c
  4370                           
  4371                           ;mdb.c: 279: while(!PIR4bits.TMR1IF && !mdbflags.isdata)
  4372  0106F2  D01E               	goto	u3250
  4373  0106F4                     
  4374                           ;mdb.c: 280: {
  4375                           ;mdb.c: 282: dbcount++;
  4376  0106F4  4A31               	infsnz	_dbcount,f,c
  4377  0106F6  2A32               	incf	_dbcount+1,f,c
  4378                           
  4379                           ;mdb.c: 283: mdbflags.isdata = 0;
  4380  0106F8  903E               	bcf	_mdbflags,0,c
  4381                           
  4382                           ;mdb.c: 286: while(PIR3bits.RC1IF && !mdbflags.isdata)
  4383  0106FA  D015               	goto	l2783
  4384  0106FC                     
  4385                           ;mdb.c: 287: {
  4386                           ;mdb.c: 290: mdbdata[i] = EUSART1_Read();
  4387  0106FC  5021               	movf	mdb_comm@i,w,c
  4388  0106FE  0D01               	mullw	1
  4389  010700  0E60               	movlw	low _mdbdata
  4390  010702  24F3               	addwf	prodl,w,c
  4391  010704  6ED9               	movwf	fsr2l,c
  4392  010706  0E00               	movlw	high _mdbdata
  4393  010708  20F4               	addwfc	prodh,w,c
  4394  01070A  6EDA               	movwf	fsr2h,c
  4395  01070C  EC12  F090         	call	_EUSART1_Read	;wreg free
  4396  010710  6EDF               	movwf	indf2,c
  4397                           
  4398                           ;mdb.c: 291: mdb_waitr();
  4399  010712  EC56  F090         	call	_mdb_waitr	;wreg free
  4400                           
  4401                           ;mdb.c: 293: mdbflags.isdata = RC1STAbits.RX9D;
  4402  010716  A09D               	btfss	3997,0,c	;volatile
  4403  010718  D002               	bra	u3235
  4404  01071A  803E               	bsf	_mdbflags,0,c
  4405  01071C  D001               	bra	u3237
  4406  01071E                     u3235:
  4407  01071E  903E               	bcf	_mdbflags,0,c
  4408  010720                     u3237:
  4409                           
  4410                           ;mdb.c: 294: TMR1_Initialize();
  4411  010720  EC4E  F08E         	call	_TMR1_Initialize	;wreg free
  4412                           
  4413                           ;mdb.c: 295: i++;
  4414  010724  2A21               	incf	mdb_comm@i,f,c
  4415  010726                     l2783:
  4416  010726  010E               	movlb	14	; () banked
  4417  010728  ABCD               	btfss	205,5,b	;volatile
  4418  01072A  D002               	goto	u3250
  4419                           
  4420                           ; BSR set to: 14
  4421  01072C  A03E               	btfss	_mdbflags,0,c
  4422  01072E  D7E6               	goto	l2784
  4423  010730                     u3250:
  4424                           
  4425                           ; BSR set to: 14
  4426                           
  4427                           ; BSR set to: 14
  4428  010730  010E               	movlb	14	; () banked
  4429  010732  B1CE               	btfsc	206,0,b	;volatile
  4430  010734  D002               	goto	u3270
  4431                           
  4432                           ; BSR set to: 14
  4433  010736  A03E               	btfss	_mdbflags,0,c
  4434  010738  D7DD               	goto	l2782
  4435  01073A                     u3270:
  4436                           
  4437                           ; BSR set to: 14
  4438                           ;mdb.c: 297: }
  4439                           ;mdb.c: 299: }
  4440                           ;mdb.c: 301: i--;
  4441                           
  4442                           ; BSR set to: 14
  4443                           
  4444                           ; BSR set to: 14
  4445  01073A  0621               	decf	mdb_comm@i,f,c
  4446                           
  4447                           ; BSR set to: 14
  4448                           ;mdb.c: 303: mdbflags.timeout = PIR4bits.TMR1IF;
  4449  01073C  A1CE               	btfss	206,0,b	;volatile
  4450  01073E  D002               	bra	u3285
  4451  010740  863E               	bsf	_mdbflags,3,c
  4452  010742  D001               	bra	u3287
  4453  010744                     u3285:
  4454  010744  963E               	bcf	_mdbflags,3,c
  4455  010746                     u3287:
  4456                           
  4457                           ;mdb.c: 305: if(mdbflags.isdata == 1 && mdbdata[i] != 0x00)
  4458  010746  A03E               	btfss	_mdbflags,0,c
  4459  010748  D011               	goto	l2791
  4460  01074A  5021               	movf	mdb_comm@i,w,c
  4461  01074C  0D01               	mullw	1
  4462  01074E  0E60               	movlw	low _mdbdata
  4463  010750  24F3               	addwf	prodl,w,c
  4464  010752  6ED9               	movwf	fsr2l,c
  4465  010754  0E00               	movlw	high _mdbdata
  4466  010756  20F4               	addwfc	prodh,w,c
  4467  010758  6EDA               	movwf	fsr2h,c
  4468  01075A  50DF               	movf	indf2,w,c
  4469  01075C  B4D8               	btfsc	status,2,c
  4470  01075E  D006               	goto	l2791
  4471                           
  4472                           ;mdb.c: 306: {
  4473                           ;mdb.c: 307: TX1STAbits.TX9D = 1;
  4474  010760  809E               	bsf	3998,0,c	;volatile
  4475                           
  4476                           ;mdb.c: 308: mdb_on();
  4477  010762  EC5F  F090         	call	_mdb_on	;wreg free
  4478                           
  4479                           ;mdb.c: 309: mdb_transmit(0x00);
  4480  010766  0E00               	movlw	0
  4481  010768  EC24  F090         	call	_mdb_transmit
  4482  01076C                     l2791:
  4483                           
  4484                           ;mdb.c: 311: }
  4485                           ;mdb.c: 313: mdb_on();
  4486  01076C  EC5F  F090         	call	_mdb_on	;wreg free
  4487                           
  4488                           ;mdb.c: 315: return(i);
  4489  010770  5021               	movf	mdb_comm@i,w,c
  4490  010772  0012               	return	
  4491  010774                     __end_of_mdb_comm:
  4492                           	opt stack 0
  4493                           tblptru	equ	0xFF8
  4494                           tblptrh	equ	0xFF7
  4495                           tblptrl	equ	0xFF6
  4496                           tablat	equ	0xFF5
  4497                           prodh	equ	0xFF4
  4498                           prodl	equ	0xFF3
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           indf2	equ	0xFDF
  4502                           fsr2h	equ	0xFDA
  4503                           fsr2l	equ	0xFD9
  4504                           status	equ	0xFD8
  4505                           
  4506 ;; *************** function _mdb_waitr *****************
  4507 ;; Defined at:
  4508 ;;		line 339 in file "mdb.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      void 
  4515 ;; Registers used:
  4516 ;;		None
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used:    1
  4528 ;; Hardware stack levels required when called:    2
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_mdb_comm
  4533 ;;		_cctalk_read
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           	psect	text11
  4538  0120AC                     __ptext11:
  4539                           	opt stack 0
  4540  0120AC                     _mdb_waitr:
  4541                           	opt stack 24
  4542                           
  4543                           ;mdb.c: 342: {
  4544                           
  4545                           ;mdb.c: 341: while(BAUD1CONbits.RCIDL == 0)
  4546                           
  4547                           ;incstack = 0
  4548  0120AC  BC9F               	btfsc	3999,6,c	;volatile
  4549  0120AE  0012               	return	
  4550  0120B0  D7FD               	goto	_mdb_waitr
  4551  0120B2                     __end_of_mdb_waitr:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           postinc0	equ	0xFEE
  4560                           wreg	equ	0xFE8
  4561                           indf2	equ	0xFDF
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function _mdb_transmit *****************
  4567 ;; Defined at:
  4568 ;;		line 440 in file "mdb.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  txbyte          1    wreg     unsigned char 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  txbyte          1   19[COMRAM] unsigned char 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  1    wreg      void 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, cstack
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4583 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4585 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4586 ;;Total ram usage:        1 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    3
  4589 ;; This function calls:
  4590 ;;		_EUSART1_Write
  4591 ;;		_mdb_waitx
  4592 ;; This function is called by:
  4593 ;;		_mdb_comm
  4594 ;;		_mdb_test
  4595 ;;		_cctalk_comm
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text12
  4600  012048                     __ptext12:
  4601                           	opt stack 0
  4602  012048                     _mdb_transmit:
  4603                           	opt stack 23
  4604                           
  4605                           ;incstack = 0
  4606                           ;mdb_transmit@txbyte stored from wreg
  4607  012048  6E1E               	movwf	mdb_transmit@txbyte,c
  4608                           
  4609                           ;mdb.c: 442: EUSART1_Write(txbyte);
  4610  01204A  501E               	movf	mdb_transmit@txbyte,w,c
  4611  01204C  EC2B  F090         	call	_EUSART1_Write
  4612                           
  4613                           ;mdb.c: 443: mdb_waitx();
  4614  012050  EC59  F090         	call	_mdb_waitx	;wreg free
  4615  012054  0012               	return		;funcret
  4616  012056                     __end_of_mdb_transmit:
  4617                           	opt stack 0
  4618                           tblptru	equ	0xFF8
  4619                           tblptrh	equ	0xFF7
  4620                           tblptrl	equ	0xFF6
  4621                           tablat	equ	0xFF5
  4622                           prodh	equ	0xFF4
  4623                           prodl	equ	0xFF3
  4624                           postinc0	equ	0xFEE
  4625                           wreg	equ	0xFE8
  4626                           indf2	equ	0xFDF
  4627                           fsr2h	equ	0xFDA
  4628                           fsr2l	equ	0xFD9
  4629                           status	equ	0xFD8
  4630                           
  4631 ;; *************** function _mdb_waitx *****************
  4632 ;; Defined at:
  4633 ;;		line 331 in file "mdb.c"
  4634 ;; Parameters:    Size  Location     Type
  4635 ;;		None
  4636 ;; Auto vars:     Size  Location     Type
  4637 ;;		None
  4638 ;; Return value:  Size  Location     Type
  4639 ;;                  1    wreg      void 
  4640 ;; Registers used:
  4641 ;;		None
  4642 ;; Tracked objects:
  4643 ;;		On entry : 0/0
  4644 ;;		On exit  : 0/0
  4645 ;;		Unchanged: 0/0
  4646 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4651 ;;Total ram usage:        0 bytes
  4652 ;; Hardware stack levels used:    1
  4653 ;; Hardware stack levels required when called:    2
  4654 ;; This function calls:
  4655 ;;		Nothing
  4656 ;; This function is called by:
  4657 ;;		_mdb_transmit
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           	psect	text13
  4662  0120B2                     __ptext13:
  4663                           	opt stack 0
  4664  0120B2                     _mdb_waitx:
  4665                           	opt stack 23
  4666                           
  4667                           ;mdb.c: 334: {
  4668                           
  4669                           ;mdb.c: 333: while(TX1STAbits.TRMT == 0)
  4670                           
  4671                           ;incstack = 0
  4672  0120B2  B29E               	btfsc	3998,1,c	;volatile
  4673  0120B4  0012               	return	
  4674  0120B6  D7FD               	goto	_mdb_waitx
  4675  0120B8                     __end_of_mdb_waitx:
  4676                           	opt stack 0
  4677                           tblptru	equ	0xFF8
  4678                           tblptrh	equ	0xFF7
  4679                           tblptrl	equ	0xFF6
  4680                           tablat	equ	0xFF5
  4681                           prodh	equ	0xFF4
  4682                           prodl	equ	0xFF3
  4683                           postinc0	equ	0xFEE
  4684                           wreg	equ	0xFE8
  4685                           indf2	equ	0xFDF
  4686                           fsr2h	equ	0xFDA
  4687                           fsr2l	equ	0xFD9
  4688                           status	equ	0xFD8
  4689                           
  4690 ;; *************** function _EUSART1_Write *****************
  4691 ;; Defined at:
  4692 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  txData          1    wreg     unsigned char 
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;  txData          1   18[COMRAM] unsigned char 
  4697 ;; Return value:  Size  Location     Type
  4698 ;;                  1    wreg      void 
  4699 ;; Registers used:
  4700 ;;		wreg
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4709 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4710 ;;Total ram usage:        1 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    2
  4713 ;; This function calls:
  4714 ;;		Nothing
  4715 ;; This function is called by:
  4716 ;;		_mdb_transmit
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           	psect	text14
  4721  012056                     __ptext14:
  4722                           	opt stack 0
  4723  012056                     _EUSART1_Write:
  4724                           	opt stack 23
  4725                           
  4726                           ;incstack = 0
  4727                           ;EUSART1_Write@txData stored from wreg
  4728  012056  6E1D               	movwf	EUSART1_Write@txData,c
  4729  012058                     
  4730                           ;eusart1.c: 96: {
  4731                           
  4732                           ;eusart1.c: 95: while(0 == PIR3bits.TX1IF)
  4733  012058  010E               	movlb	14	; () banked
  4734  01205A  A9CD               	btfss	205,4,b	;volatile
  4735  01205C  D7FD               	goto	l8665
  4736                           
  4737                           ; BSR set to: 14
  4738                           ;eusart1.c: 97: }
  4739                           ;eusart1.c: 99: TX1REG = txData;
  4740                           
  4741                           ; BSR set to: 14
  4742  01205E  C01D  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  4743                           
  4744                           ; BSR set to: 14
  4745  012062  0012               	return		;funcret
  4746  012064                     __end_of_EUSART1_Write:
  4747                           	opt stack 0
  4748                           tblptru	equ	0xFF8
  4749                           tblptrh	equ	0xFF7
  4750                           tblptrl	equ	0xFF6
  4751                           tablat	equ	0xFF5
  4752                           prodh	equ	0xFF4
  4753                           prodl	equ	0xFF3
  4754                           postinc0	equ	0xFEE
  4755                           wreg	equ	0xFE8
  4756                           indf2	equ	0xFDF
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function _mdb_on *****************
  4762 ;; Defined at:
  4763 ;;		line 318 in file "mdb.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;		None
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		None
  4772 ;; Tracked objects:
  4773 ;;		On entry : 0/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;Total ram usage:        0 bytes
  4782 ;; Hardware stack levels used:    1
  4783 ;; Hardware stack levels required when called:    2
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		_mdb_comm
  4788 ;;		_mdb_test
  4789 ;;		_cctalk_init
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text15
  4794  0120BE                     __ptext15:
  4795                           	opt stack 0
  4796  0120BE                     _mdb_on:
  4797                           	opt stack 24
  4798                           
  4799                           ;mdb.c: 324: LATCbits.LATC0 = 1;
  4800                           
  4801                           ; BSR set to: 14
  4802                           ;incstack = 0
  4803  0120BE  8085               	bsf	3973,0,c	;volatile
  4804  0120C0  0012               	return		;funcret
  4805  0120C2                     __end_of_mdb_on:
  4806                           	opt stack 0
  4807                           tblptru	equ	0xFF8
  4808                           tblptrh	equ	0xFF7
  4809                           tblptrl	equ	0xFF6
  4810                           tablat	equ	0xFF5
  4811                           prodh	equ	0xFF4
  4812                           prodl	equ	0xFF3
  4813                           postinc0	equ	0xFEE
  4814                           wreg	equ	0xFE8
  4815                           indf2	equ	0xFDF
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _init_mdbdata *****************
  4821 ;; Defined at:
  4822 ;;		line 13 in file "mdb.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;  initdata        1    wreg     unsigned char 
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;  initdata        1   18[COMRAM] unsigned char 
  4827 ;;  i               1   19[COMRAM] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:        2 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    2
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_mdb_noten
  4848 ;;		_mdb_security
  4849 ;;		_mdb_comm
  4850 ;;		_cctalk_pinenter
  4851 ;;		_cctalk_comm
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           	psect	text16
  4856  011E8A                     __ptext16:
  4857                           	opt stack 0
  4858  011E8A                     _init_mdbdata:
  4859                           	opt stack 24
  4860                           
  4861                           ;incstack = 0
  4862                           ;init_mdbdata@initdata stored from wreg
  4863  011E8A  6E1D               	movwf	init_mdbdata@initdata,c
  4864                           
  4865                           ;mdb.c: 15: for(uint8_t i = 0;i < 33; i++)
  4866  011E8C  0E00               	movlw	0
  4867  011E8E  6E1E               	movwf	init_mdbdata@i,c
  4868  011E90                     l8851:
  4869  011E90  0E20               	movlw	32
  4870  011E92  641E               	cpfsgt	init_mdbdata@i,c
  4871  011E94  D001               	goto	l2694
  4872  011E96  0012               	return	
  4873  011E98                     l2694:
  4874                           
  4875                           ;mdb.c: 16: {
  4876                           ;mdb.c: 17: mdbdata[i] = initdata;
  4877  011E98  501E               	movf	init_mdbdata@i,w,c
  4878  011E9A  0D01               	mullw	1
  4879  011E9C  0E60               	movlw	low _mdbdata
  4880  011E9E  24F3               	addwf	prodl,w,c
  4881  011EA0  6ED9               	movwf	fsr2l,c
  4882  011EA2  0E00               	movlw	high _mdbdata
  4883  011EA4  20F4               	addwfc	prodh,w,c
  4884  011EA6  6EDA               	movwf	fsr2h,c
  4885  011EA8  C01D  FFDF         	movff	init_mdbdata@initdata,indf2
  4886  011EAC  2A1E               	incf	init_mdbdata@i,f,c
  4887  011EAE  D7F0               	goto	l8851
  4888  011EB0                     __end_of_init_mdbdata:
  4889                           	opt stack 0
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           prodh	equ	0xFF4
  4895                           prodl	equ	0xFF3
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           indf2	equ	0xFDF
  4899                           fsr2h	equ	0xFDA
  4900                           fsr2l	equ	0xFD9
  4901                           status	equ	0xFD8
  4902                           
  4903 ;; *************** function _EUSART1_Read *****************
  4904 ;; Defined at:
  4905 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  4906 ;; Parameters:    Size  Location     Type
  4907 ;;		None
  4908 ;; Auto vars:     Size  Location     Type
  4909 ;;		None
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  1    wreg      unsigned char 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;Total ram usage:        0 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    2
  4926 ;; This function calls:
  4927 ;;		Nothing
  4928 ;; This function is called by:
  4929 ;;		_mdb_comm
  4930 ;;		_cctalk_read
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text17
  4935  012024                     __ptext17:
  4936                           	opt stack 0
  4937  012024                     _EUSART1_Read:
  4938                           	opt stack 24
  4939                           
  4940                           ;eusart1.c: 78: {
  4941                           
  4942                           ;eusart1.c: 77: while(!PIR3bits.RC1IF)
  4943                           
  4944                           ;incstack = 0
  4945  012024  010E               	movlb	14	; () banked
  4946  012026  ABCD               	btfss	205,5,b	;volatile
  4947  012028  D7FD               	goto	_EUSART1_Read
  4948                           
  4949                           ; BSR set to: 14
  4950                           ;eusart1.c: 79: }
  4951                           ;eusart1.c: 82: if(1 == RC1STAbits.OERR)
  4952  01202A  A29D               	btfss	3997,1,c	;volatile
  4953  01202C  D002               	goto	l91
  4954                           
  4955                           ; BSR set to: 14
  4956                           ;eusart1.c: 83: {
  4957                           ;eusart1.c: 86: RC1STAbits.CREN = 0;
  4958  01202E  989D               	bcf	3997,4,c	;volatile
  4959                           
  4960                           ;eusart1.c: 87: RC1STAbits.CREN = 1;
  4961  012030  889D               	bsf	3997,4,c	;volatile
  4962  012032                     l91:
  4963                           
  4964                           ; BSR set to: 14
  4965                           ;eusart1.c: 88: }
  4966                           ;eusart1.c: 90: return RC1REG;
  4967                           
  4968                           ; BSR set to: 14
  4969  012032  5099               	movf	3993,w,c	;volatile
  4970  012034  0012               	return	
  4971  012036                     __end_of_EUSART1_Read:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           indf2	equ	0xFDF
  4982                           fsr2h	equ	0xFDA
  4983                           fsr2l	equ	0xFD9
  4984                           status	equ	0xFD8
  4985                           
  4986 ;; *************** function _lcd_init *****************
  4987 ;; Defined at:
  4988 ;;		line 11 in file "lcd.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;		None
  4991 ;; Auto vars:     Size  Location     Type
  4992 ;;		None
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      void 
  4995 ;; Registers used:
  4996 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;Total ram usage:        2 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    8
  5009 ;; This function calls:
  5010 ;;		_lcd_clockE
  5011 ;;		_lcd_test
  5012 ;;		_lcd_write
  5013 ;; This function is called by:
  5014 ;;		_main
  5015 ;; This function uses a non-reentrant model
  5016 ;;
  5017                           
  5018                           	psect	text18
  5019  0110BA                     __ptext18:
  5020                           	opt stack 0
  5021  0110BA                     _lcd_init:
  5022                           	opt stack 22
  5023                           
  5024                           ;lcd.c: 13: LATE = 0x00;
  5025                           
  5026                           ; BSR set to: 14
  5027                           ;incstack = 0
  5028  0110BA  0E00               	movlw	0
  5029  0110BC  6E87               	movwf	3975,c	;volatile
  5030                           
  5031                           ;lcd.c: 15: LATD = 0x03;
  5032  0110BE  0E03               	movlw	3
  5033  0110C0  6E86               	movwf	3974,c	;volatile
  5034                           
  5035                           ;lcd.c: 16: for(count = 3; count > 0; count-- )
  5036  0110C2  0E03               	movlw	3
  5037  0110C4  6E4C               	movwf	_count,c
  5038  0110C6                     l9689:
  5039  0110C6  504C               	movf	_count,w,c
  5040  0110C8  0A80               	xorlw	128
  5041  0110CA  0F7F               	addlw	-129
  5042  0110CC  A0D8               	btfss	status,0,c
  5043  0110CE  D00B               	goto	u3650
  5044                           
  5045                           ;lcd.c: 17: {
  5046                           ;lcd.c: 18: lcd_clockE();
  5047  0110D0  EC39  F090         	call	_lcd_clockE	;wreg free
  5048                           
  5049                           ;lcd.c: 19: _delay((unsigned long)((5)*(12000000/4000.0)));
  5050  0110D4  0E14               	movlw	20
  5051  0110D6  6E25               	movwf	??_lcd_init& (0+255),c
  5052  0110D8  0E7A               	movlw	122
  5053  0110DA                     u4147:
  5054  0110DA  2EE8               	decfsz	wreg,f,c
  5055  0110DC  D7FE               	bra	u4147
  5056  0110DE  2E25               	decfsz	??_lcd_init& (0+255),f,c
  5057  0110E0  D7FC               	bra	u4147
  5058  0110E2  064C               	decf	_count,f,c
  5059  0110E4  D7F0               	goto	l9689
  5060  0110E6                     u3650:
  5061                           
  5062                           ;lcd.c: 21: }
  5063                           ;lcd.c: 22: _delay((unsigned long)((50)*(12000000/4000000.0)));
  5064  0110E6  0E32               	movlw	50
  5065  0110E8                     u4157:
  5066  0110E8  2EE8               	decfsz	wreg,f,c
  5067  0110EA  D7FE               	bra	u4157
  5068                           
  5069                           ;lcd.c: 23: LATD = 0x02;
  5070  0110EC  0E02               	movlw	2
  5071  0110EE  6E86               	movwf	3974,c	;volatile
  5072                           
  5073                           ;lcd.c: 24: lcd_clockE();
  5074  0110F0  EC39  F090         	call	_lcd_clockE	;wreg free
  5075                           
  5076                           ;lcd.c: 27: lcd_write(dispfunc3);
  5077  0110F4  0E85               	movlw	low _dispfunc3
  5078  0110F6  6EF6               	movwf	tblptrl,c
  5079  0110F8                     	if	1	;There is more than 1 active tblptr byte
  5080  0110F8  0EFC               	movlw	high _dispfunc3
  5081  0110FA  6EF7               	movwf	tblptrh,c
  5082  0110FC                     	endif
  5083  0110FC                     	if	1	;There are 3 active tblptr bytes
  5084  0110FC  0E00               	movlw	low (_dispfunc3 shr (0+16))
  5085  0110FE  6EF8               	movwf	tblptru,c
  5086  011100                     	endif
  5087  011100  0008               	tblrd		*
  5088  011102  50F5               	movf	tablat,w,c
  5089  011104  ECE9  F08E         	call	_lcd_write
  5090                           
  5091                           ;lcd.c: 29: lcd_write(dispon);
  5092  011108  0E84               	movlw	low _dispon
  5093  01110A  6EF6               	movwf	tblptrl,c
  5094  01110C                     	if	1	;There is more than 1 active tblptr byte
  5095  01110C  0EFC               	movlw	high _dispon
  5096  01110E  6EF7               	movwf	tblptrh,c
  5097  011110                     	endif
  5098  011110                     	if	1	;There are 3 active tblptr bytes
  5099  011110  0E00               	movlw	low (_dispon shr (0+16))
  5100  011112  6EF8               	movwf	tblptru,c
  5101  011114                     	endif
  5102  011114  0008               	tblrd		*
  5103  011116  50F5               	movf	tablat,w,c
  5104  011118  ECE9  F08E         	call	_lcd_write
  5105                           
  5106                           ;lcd.c: 31: lcd_write(dispnormal);
  5107  01111C  0E80               	movlw	low _dispnormal
  5108  01111E  6EF6               	movwf	tblptrl,c
  5109  011120                     	if	1	;There is more than 1 active tblptr byte
  5110  011120  0EFC               	movlw	high _dispnormal
  5111  011122  6EF7               	movwf	tblptrh,c
  5112  011124                     	endif
  5113  011124                     	if	1	;There are 3 active tblptr bytes
  5114  011124  0E00               	movlw	low (_dispnormal shr (0+16))
  5115  011126  6EF8               	movwf	tblptru,c
  5116  011128                     	endif
  5117  011128  0008               	tblrd		*
  5118  01112A  50F5               	movf	tablat,w,c
  5119  01112C  ECE9  F08E         	call	_lcd_write
  5120                           
  5121                           ;lcd.c: 33: lcd_write(dispclr);
  5122  011130  0E83               	movlw	low _dispclr
  5123  011132  6EF6               	movwf	tblptrl,c
  5124  011134                     	if	1	;There is more than 1 active tblptr byte
  5125  011134  0EFC               	movlw	high _dispclr
  5126  011136  6EF7               	movwf	tblptrh,c
  5127  011138                     	endif
  5128  011138                     	if	1	;There are 3 active tblptr bytes
  5129  011138  0E00               	movlw	low (_dispclr shr (0+16))
  5130  01113A  6EF8               	movwf	tblptru,c
  5131  01113C                     	endif
  5132  01113C  0008               	tblrd		*
  5133  01113E  50F5               	movf	tablat,w,c
  5134  011140  ECE9  F08E         	call	_lcd_write
  5135                           
  5136                           ;lcd.c: 35: lcd_test();
  5137  011144  ECF2  F08F         	call	_lcd_test	;wreg free
  5138                           
  5139                           ;lcd.c: 36: _delay((unsigned long)((250)*(12000000/4000.0)));
  5140  011148  0E04               	movlw	4
  5141  01114A  6E26               	movwf	(??_lcd_init+1)& (0+255),c
  5142  01114C  0ECF               	movlw	207
  5143  01114E  6E25               	movwf	??_lcd_init& (0+255),c
  5144  011150  0E02               	movlw	2
  5145  011152                     u4167:
  5146  011152  2EE8               	decfsz	wreg,f,c
  5147  011154  D7FE               	bra	u4167
  5148  011156  2E25               	decfsz	??_lcd_init& (0+255),f,c
  5149  011158  D7FC               	bra	u4167
  5150  01115A  2E26               	decfsz	(??_lcd_init+1)& (0+255),f,c
  5151  01115C  D7FA               	bra	u4167
  5152  01115E  F000               	nop		;# 
  5153  011160  0012               	return		;funcret
  5154  011162                     __end_of_lcd_init:
  5155                           	opt stack 0
  5156                           tblptru	equ	0xFF8
  5157                           tblptrh	equ	0xFF7
  5158                           tblptrl	equ	0xFF6
  5159                           tablat	equ	0xFF5
  5160                           prodh	equ	0xFF4
  5161                           prodl	equ	0xFF3
  5162                           postinc0	equ	0xFEE
  5163                           wreg	equ	0xFE8
  5164                           indf2	equ	0xFDF
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;; *************** function _lcd_test *****************
  5170 ;; Defined at:
  5171 ;;		line 302 in file "lcd.c"
  5172 ;; Parameters:    Size  Location     Type
  5173 ;;		None
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  character       1   25[COMRAM] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  1    wreg      void 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5180 ;; Tracked objects:
  5181 ;;		On entry : 0/0
  5182 ;;		On exit  : 0/0
  5183 ;;		Unchanged: 0/0
  5184 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5186 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;Total ram usage:        1 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    7
  5192 ;; This function calls:
  5193 ;;		_lcd_writeC
  5194 ;; This function is called by:
  5195 ;;		_lcd_init
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text19
  5200  011FE4                     __ptext19:
  5201                           	opt stack 0
  5202  011FE4                     _lcd_test:
  5203                           	opt stack 22
  5204                           
  5205                           ;lcd.c: 304: uint8_t character = 0x30;
  5206                           
  5207                           ;incstack = 0
  5208  011FE4  0E30               	movlw	48
  5209  011FE6  D004               	goto	L12
  5210  011FE8                     
  5211                           ;lcd.c: 306: {
  5212                           ;lcd.c: 307: lcd_writeC(character);
  5213  011FE8  5024               	movf	lcd_test@character,w,c
  5214  011FEA  ECBE  F08B         	call	_lcd_writeC
  5215                           
  5216                           ;lcd.c: 308: character = character+ 1;
  5217  011FEE  2824               	incf	lcd_test@character,w,c
  5218  011FF0                     L12:
  5219  011FF0  6E24               	movwf	lcd_test@character,c
  5220  011FF2  0E7F               	movlw	127
  5221  011FF4  6424               	cpfsgt	lcd_test@character,c
  5222  011FF6  D7F8               	goto	l1564
  5223  011FF8  0012               	return	
  5224  011FFA                     __end_of_lcd_test:
  5225                           	opt stack 0
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           postinc0	equ	0xFEE
  5233                           wreg	equ	0xFE8
  5234                           indf2	equ	0xFDF
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _enter_service *****************
  5240 ;; Defined at:
  5241 ;;		line 206 in file "main.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;		None
  5246 ;; Return value:  Size  Location     Type
  5247 ;;                  1    wreg      void 
  5248 ;; Registers used:
  5249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5250 ;; Tracked objects:
  5251 ;;		On entry : 0/0
  5252 ;;		On exit  : 0/0
  5253 ;;		Unchanged: 0/0
  5254 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;Total ram usage:        0 bytes
  5260 ;; Hardware stack levels used:    1
  5261 ;; Hardware stack levels required when called:   12
  5262 ;; This function calls:
  5263 ;;		_Audit
  5264 ;;		_Clear_cred
  5265 ;;		_Hopper_coin
  5266 ;;		_Sensor_set
  5267 ;;		_Vend_setup
  5268 ;;		_butindb
  5269 ;;		_lcd_string
  5270 ;;		_mdb_unlock
  5271 ;;		_price_set
  5272 ;;		_set_notes
  5273 ;; This function is called by:
  5274 ;;		_main
  5275 ;; This function uses a non-reentrant model
  5276 ;;
  5277                           
  5278                           	psect	text20
  5279  011204                     __ptext20:
  5280                           	opt stack 0
  5281  011204                     _enter_service:
  5282                           	opt stack 18
  5283                           
  5284                           ;main.c: 208: mdb_unlock();
  5285                           
  5286                           ;incstack = 0
  5287  011204  EC74  F085         	call	_mdb_unlock	;wreg free
  5288                           
  5289                           ;main.c: 209: lcd_string(servmsg, line1);
  5290  011208  0E88               	movlw	low _servmsg
  5291  01120A  6E24               	movwf	lcd_string@lcdstring,c
  5292  01120C  0EFC               	movlw	high _servmsg
  5293  01120E  6E25               	movwf	lcd_string@lcdstring+1,c
  5294  011210  0E79               	movlw	low _line1
  5295  011212  6EF6               	movwf	tblptrl,c
  5296  011214                     	if	1	;There is more than 1 active tblptr byte
  5297  011214  0EFC               	movlw	high _line1
  5298  011216  6EF7               	movwf	tblptrh,c
  5299  011218                     	endif
  5300  011218                     	if	1	;There are 3 active tblptr bytes
  5301  011218  0E00               	movlw	low (_line1 shr (0+16))
  5302  01121A  6EF8               	movwf	tblptru,c
  5303  01121C                     	endif
  5304  01121C  0008               	tblrd		*
  5305  01121E  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5306  011222  EC03  F088         	call	_lcd_string	;wreg free
  5307                           
  5308                           ;main.c: 212: while(venflags.service)
  5309  011226  D036               	goto	l1042
  5310  011228                     
  5311                           ;main.c: 213: {
  5312                           ;main.c: 214: buttons = butindb();
  5313  011228  ECD0  F08E         	call	_butindb	;wreg free
  5314  01122C  6E39               	movwf	_buttons,c	;volatile
  5315                           
  5316                           ;main.c: 215: switch(buttons)
  5317  01122E  D019               	goto	l1040
  5318  011230  EC62  F090         	call	_Audit	;wreg free
  5319                           
  5320                           ;main.c: 218: break;
  5321  011234  D02F               	goto	l1042
  5322  011236  EC9E  F084         	call	_Sensor_set	;wreg free
  5323                           
  5324                           ;main.c: 220: break;
  5325  01123A  D02C               	goto	l1042
  5326  01123C  EC09  F085         	call	_Hopper_coin	;wreg free
  5327                           
  5328                           ;main.c: 222: break;
  5329  011240  D029               	goto	l1042
  5330  011242  ECBA  F083         	call	_set_notes	;wreg free
  5331                           
  5332                           ;main.c: 224: break;
  5333  011246  D026               	goto	l1042
  5334  011248  EC4F  F08C         	call	_Clear_cred	;wreg free
  5335                           
  5336                           ;main.c: 226: venflags.service = 0;
  5337  01124C  9E2E               	bcf	_venflags,7,c
  5338  01124E  00FF               	reset		;# 
  5339  011250  EC61  F08A         	call	_price_set	;wreg free
  5340                           
  5341                           ;main.c: 229: break;
  5342  011254  D01F               	goto	l1042
  5343  011256  ECB7  F081         	call	_Vend_setup	;wreg free
  5344                           
  5345                           ;main.c: 231: break;
  5346  01125A  D01C               	goto	l1042
  5347  01125C                     l1049:
  5348  01125C  9E2E               	bcf	_venflags,7,c
  5349  01125E  00FF               	reset		;# 
  5350                           
  5351                           ;main.c: 235: }
  5352                           
  5353                           ;main.c: 234: break;
  5354  011260  D019               	goto	l1042
  5355  011262                     l1040:
  5356  011262  5039               	movf	_buttons,w,c	;volatile
  5357                           
  5358                           ; Switch size 1, requested type "space"
  5359                           ; Number of cases is 8, Range of values is 1 to 128
  5360                           ; switch strategies available:
  5361                           ; Name         Instructions Cycles
  5362                           ; simple_byte           25    13 (average)
  5363                           ;	Chosen strategy is simple_byte
  5364  011264  0A01               	xorlw	1	; case 1
  5365  011266  B4D8               	btfsc	status,2,c
  5366  011268  D7E3               	goto	l1041
  5367  01126A  0A03               	xorlw	3	; case 2
  5368  01126C  B4D8               	btfsc	status,2,c
  5369  01126E  D7E3               	goto	l1043
  5370  011270  0A06               	xorlw	6	; case 4
  5371  011272  B4D8               	btfsc	status,2,c
  5372  011274  D7E3               	goto	l1044
  5373  011276  0A0C               	xorlw	12	; case 8
  5374  011278  B4D8               	btfsc	status,2,c
  5375  01127A  D7E3               	goto	l1045
  5376  01127C  0A18               	xorlw	24	; case 16
  5377  01127E  B4D8               	btfsc	status,2,c
  5378  011280  D7E3               	goto	l1046
  5379  011282  0A30               	xorlw	48	; case 32
  5380  011284  B4D8               	btfsc	status,2,c
  5381  011286  D7E4               	goto	l1047
  5382  011288  0A60               	xorlw	96	; case 64
  5383  01128A  B4D8               	btfsc	status,2,c
  5384  01128C  D7E4               	goto	l1048
  5385  01128E  0AC0               	xorlw	192	; case 128
  5386  011290  B4D8               	btfsc	status,2,c
  5387  011292  D7E4               	goto	l1049
  5388  011294                     l1042:
  5389  011294  AE2E               	btfss	_venflags,7,c
  5390  011296  0012               	return	
  5391  011298  D7C7               	goto	l1039
  5392  01129A                     __end_of_enter_service:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           indf2	equ	0xFDF
  5403                           fsr2h	equ	0xFDA
  5404                           fsr2l	equ	0xFD9
  5405                           status	equ	0xFD8
  5406                           
  5407 ;; *************** function _set_notes *****************
  5408 ;; Defined at:
  5409 ;;		line 57 in file "mdb.c"
  5410 ;; Parameters:    Size  Location     Type
  5411 ;;		None
  5412 ;; Auto vars:     Size  Location     Type
  5413 ;;		None
  5414 ;; Return value:  Size  Location     Type
  5415 ;;                  1    wreg      void 
  5416 ;; Registers used:
  5417 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5418 ;; Tracked objects:
  5419 ;;		On entry : 0/0
  5420 ;;		On exit  : 0/0
  5421 ;;		Unchanged: 0/0
  5422 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;Total ram usage:        0 bytes
  5428 ;; Hardware stack levels used:    1
  5429 ;; Hardware stack levels required when called:   10
  5430 ;; This function calls:
  5431 ;;		_butindb
  5432 ;;		_displ_note
  5433 ;;		_enable_notes
  5434 ;;		_lcd_string
  5435 ;; This function is called by:
  5436 ;;		_enter_service
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text21
  5441  010774                     __ptext21:
  5442                           	opt stack 0
  5443  010774                     _set_notes:
  5444                           	opt stack 19
  5445                           
  5446                           ;mdb.c: 59: lcd_string(setnotes, line1);
  5447                           
  5448                           ;incstack = 0
  5449  010774  0E28               	movlw	low _setnotes
  5450  010776  6E24               	movwf	lcd_string@lcdstring,c
  5451  010778  0EFD               	movlw	high _setnotes
  5452  01077A  6E25               	movwf	lcd_string@lcdstring+1,c
  5453  01077C  0E79               	movlw	low _line1
  5454  01077E  6EF6               	movwf	tblptrl,c
  5455  010780                     	if	1	;There is more than 1 active tblptr byte
  5456  010780  0EFC               	movlw	high _line1
  5457  010782  6EF7               	movwf	tblptrh,c
  5458  010784                     	endif
  5459  010784                     	if	1	;There are 3 active tblptr bytes
  5460  010784  0E00               	movlw	low (_line1 shr (0+16))
  5461  010786  6EF8               	movwf	tblptru,c
  5462  010788                     	endif
  5463  010788  0008               	tblrd		*
  5464  01078A  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5465  01078E  EC03  F088         	call	_lcd_string	;wreg free
  5466                           
  5467                           ;mdb.c: 60: mdbflags.noteset = 1;
  5468  010792  8A3E               	bsf	_mdbflags,5,c
  5469                           
  5470                           ;mdb.c: 61: mdbflags.endis = 1;
  5471  010794  8C3E               	bsf	_mdbflags,6,c
  5472                           
  5473                           ;mdb.c: 62: while(mdbflags.noteset)
  5474  010796  D064               	goto	l2709
  5475  010798                     
  5476                           ;mdb.c: 63: {
  5477                           ;mdb.c: 64: buttons = butindb();
  5478  010798  ECD0  F08E         	call	_butindb	;wreg free
  5479  01079C  6E39               	movwf	_buttons,c	;volatile
  5480                           
  5481                           ;mdb.c: 65: notenum = buttons;
  5482  01079E  C039  F04D         	movff	_buttons,_notenum	;volatile
  5483                           
  5484                           ;mdb.c: 66: switch(buttons)
  5485  0107A2  D048               	goto	l2711
  5486  0107A4  0ECE               	movlw	low _tenrand
  5487  0107A6  6E29               	movwf	displ_note@notestring,c
  5488  0107A8  0EFF               	movlw	high _tenrand
  5489  0107AA  6E2A               	movwf	displ_note@notestring+1,c
  5490  0107AC  ECE1  F08D         	call	_displ_note	;wreg free
  5491  0107B0  6E42               	movwf	_dspposition,c
  5492                           
  5493                           ;mdb.c: 70: enable_notes(0x01);
  5494  0107B2  0E01               	movlw	1
  5495  0107B4  ECA1  F08A         	call	_enable_notes
  5496                           
  5497                           ;mdb.c: 71: break;
  5498  0107B8  D050               	goto	l2713
  5499  0107BA  0EEF               	movlw	low _twentyrand
  5500  0107BC  6E29               	movwf	displ_note@notestring,c
  5501  0107BE  0EFF               	movlw	high _twentyrand
  5502  0107C0  6E2A               	movwf	displ_note@notestring+1,c
  5503  0107C2  ECE1  F08D         	call	_displ_note	;wreg free
  5504  0107C6  6E42               	movwf	_dspposition,c
  5505                           
  5506                           ;mdb.c: 74: enable_notes(0x02);
  5507  0107C8  0E02               	movlw	2
  5508  0107CA  ECA1  F08A         	call	_enable_notes
  5509                           
  5510                           ;mdb.c: 75: break;
  5511  0107CE  D045               	goto	l2713
  5512  0107D0  0EE7               	movlw	low _fiftyrand
  5513  0107D2  6E29               	movwf	displ_note@notestring,c
  5514  0107D4  0EFF               	movlw	high _fiftyrand
  5515  0107D6  6E2A               	movwf	displ_note@notestring+1,c
  5516  0107D8  ECE1  F08D         	call	_displ_note	;wreg free
  5517  0107DC  6E42               	movwf	_dspposition,c
  5518                           
  5519                           ;mdb.c: 78: enable_notes(0x04);
  5520  0107DE  0E04               	movlw	4
  5521  0107E0  ECA1  F08A         	call	_enable_notes
  5522                           
  5523                           ;mdb.c: 79: break;
  5524  0107E4  D03A               	goto	l2713
  5525  0107E6  0EDF               	movlw	low _hundredrand
  5526  0107E8  6E29               	movwf	displ_note@notestring,c
  5527  0107EA  0EFF               	movlw	high _hundredrand
  5528  0107EC  6E2A               	movwf	displ_note@notestring+1,c
  5529  0107EE  ECE1  F08D         	call	_displ_note	;wreg free
  5530  0107F2  6E42               	movwf	_dspposition,c
  5531                           
  5532                           ;mdb.c: 82: enable_notes(0x08);
  5533  0107F4  0E08               	movlw	8
  5534  0107F6  ECA1  F08A         	call	_enable_notes
  5535                           
  5536                           ;mdb.c: 83: break;
  5537  0107FA  D02F               	goto	l2713
  5538  0107FC  0ED7               	movlw	low _twohundredrand
  5539  0107FE  6E29               	movwf	displ_note@notestring,c
  5540  010800  0EFF               	movlw	high _twohundredrand
  5541  010802  6E2A               	movwf	displ_note@notestring+1,c
  5542  010804  ECE1  F08D         	call	_displ_note	;wreg free
  5543  010808  6E42               	movwf	_dspposition,c
  5544                           
  5545                           ;mdb.c: 86: enable_notes(0x10);
  5546  01080A  0E10               	movlw	16
  5547  01080C  ECA1  F08A         	call	_enable_notes
  5548                           
  5549                           ;mdb.c: 87: break;
  5550  010810  D024               	goto	l2713
  5551  010812  0E88               	movlw	low _servmsg
  5552  010814  6E24               	movwf	lcd_string@lcdstring,c
  5553  010816  0EFC               	movlw	high _servmsg
  5554  010818  6E25               	movwf	lcd_string@lcdstring+1,c
  5555  01081A  0E79               	movlw	low _line1
  5556  01081C  6EF6               	movwf	tblptrl,c
  5557  01081E                     	if	1	;There is more than 1 active tblptr byte
  5558  01081E  0EFC               	movlw	high _line1
  5559  010820  6EF7               	movwf	tblptrh,c
  5560  010822                     	endif
  5561  010822                     	if	1	;There are 3 active tblptr bytes
  5562  010822  0E00               	movlw	low (_line1 shr (0+16))
  5563  010824  6EF8               	movwf	tblptru,c
  5564  010826                     	endif
  5565  010826  0008               	tblrd		*
  5566  010828  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5567  01082C  EC03  F088         	call	_lcd_string	;wreg free
  5568                           
  5569                           ;mdb.c: 90: mdbflags.noteset = 0;
  5570  010830  9A3E               	bcf	_mdbflags,5,c
  5571                           
  5572                           ;mdb.c: 92: }
  5573                           
  5574                           ;mdb.c: 91: default : break;
  5575  010832  D013               	goto	l2713
  5576  010834                     l2711:
  5577  010834  5039               	movf	_buttons,w,c	;volatile
  5578                           
  5579                           ; Switch size 1, requested type "space"
  5580                           ; Number of cases is 6, Range of values is 1 to 128
  5581                           ; switch strategies available:
  5582                           ; Name         Instructions Cycles
  5583                           ; simple_byte           19    10 (average)
  5584                           ;	Chosen strategy is simple_byte
  5585  010836  0A01               	xorlw	1	; case 1
  5586  010838  B4D8               	btfsc	status,2,c
  5587  01083A  D7B4               	goto	l2712
  5588  01083C  0A03               	xorlw	3	; case 2
  5589  01083E  B4D8               	btfsc	status,2,c
  5590  010840  D7BC               	goto	l2714
  5591  010842  0A06               	xorlw	6	; case 4
  5592  010844  B4D8               	btfsc	status,2,c
  5593  010846  D7C4               	goto	l2715
  5594  010848  0A0C               	xorlw	12	; case 8
  5595  01084A  B4D8               	btfsc	status,2,c
  5596  01084C  D7CC               	goto	l2716
  5597  01084E  0A18               	xorlw	24	; case 16
  5598  010850  B4D8               	btfsc	status,2,c
  5599  010852  D7D4               	goto	l2717
  5600  010854  0A90               	xorlw	144	; case 128
  5601  010856  B4D8               	btfsc	status,2,c
  5602  010858  D7DC               	goto	l2718
  5603  01085A                     l2713:
  5604                           
  5605                           ;mdb.c: 93: ((uint8_t*) &noteen)[0] = noteen_byte;
  5606  01085A  C03C  F03D         	movff	_noteen_byte,_noteen	;volatile
  5607  01085E  F000               	nop		;# 
  5608  010860                     l2709:
  5609  010860  AA3E               	btfss	_mdbflags,5,c
  5610  010862  0012               	return	
  5611  010864  D799               	goto	l2710
  5612  010866                     __end_of_set_notes:
  5613                           	opt stack 0
  5614                           tblptru	equ	0xFF8
  5615                           tblptrh	equ	0xFF7
  5616                           tblptrl	equ	0xFF6
  5617                           tablat	equ	0xFF5
  5618                           prodh	equ	0xFF4
  5619                           prodl	equ	0xFF3
  5620                           postinc0	equ	0xFEE
  5621                           wreg	equ	0xFE8
  5622                           indf2	equ	0xFDF
  5623                           fsr2h	equ	0xFDA
  5624                           fsr2l	equ	0xFD9
  5625                           status	equ	0xFD8
  5626                           
  5627 ;; *************** function _enable_notes *****************
  5628 ;; Defined at:
  5629 ;;		line 98 in file "mdb.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;  notenum         1    wreg     unsigned char 
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;  notenum         1   32[COMRAM] unsigned char 
  5634 ;; Return value:  Size  Location     Type
  5635 ;;                  1    wreg      void 
  5636 ;; Registers used:
  5637 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;Total ram usage:        1 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; Hardware stack levels required when called:    9
  5650 ;; This function calls:
  5651 ;;		_butindb
  5652 ;;		_displ_nendis
  5653 ;;		_lcd_string
  5654 ;;		_save_notes
  5655 ;; This function is called by:
  5656 ;;		_set_notes
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text22
  5661  011542                     __ptext22:
  5662                           	opt stack 0
  5663  011542                     _enable_notes:
  5664                           	opt stack 19
  5665                           
  5666                           ;incstack = 0
  5667                           ;enable_notes@notenum stored from wreg
  5668  011542  6E2B               	movwf	enable_notes@notenum,c
  5669                           
  5670                           ;mdb.c: 100: mdbflags.endis = 1;
  5671  011544  8C3E               	bsf	_mdbflags,6,c
  5672                           
  5673                           ;mdb.c: 101: displ_nendis(notenum);
  5674  011546  502B               	movf	enable_notes@notenum,w,c
  5675  011548  ECB7  F08E         	call	_displ_nendis
  5676                           
  5677                           ;mdb.c: 102: while(mdbflags.endis)
  5678  01154C  D034               	goto	l2728
  5679  01154E                     
  5680                           ;mdb.c: 103: {
  5681                           ;mdb.c: 104: buttons = butindb();
  5682  01154E  ECD0  F08E         	call	_butindb	;wreg free
  5683  011552  6E39               	movwf	_buttons,c	;volatile
  5684                           
  5685                           ;mdb.c: 105: switch(buttons)
  5686  011554  D026               	goto	l2726
  5687  011556  503C               	movf	_noteen_byte,w,c	;volatile
  5688  011558  102B               	iorwf	enable_notes@notenum,w,c
  5689  01155A  6E3C               	movwf	_noteen_byte,c	;volatile
  5690                           
  5691                           ;mdb.c: 108: save_notes();
  5692  01155C  EC58  F08F         	call	_save_notes	;wreg free
  5693                           
  5694                           ;mdb.c: 109: displ_nendis(notenum);
  5695  011560  502B               	movf	enable_notes@notenum,w,c
  5696  011562  ECB7  F08E         	call	_displ_nendis
  5697                           
  5698                           ;mdb.c: 110: break;
  5699  011566  D027               	goto	l2728
  5700  011568  502B               	movf	enable_notes@notenum,w,c
  5701  01156A  0AFF               	xorlw	255
  5702  01156C  143C               	andwf	_noteen_byte,w,c	;volatile
  5703  01156E  6E3C               	movwf	_noteen_byte,c	;volatile
  5704                           
  5705                           ;mdb.c: 112: save_notes();
  5706  011570  EC58  F08F         	call	_save_notes	;wreg free
  5707                           
  5708                           ;mdb.c: 113: displ_nendis(notenum);
  5709  011574  502B               	movf	enable_notes@notenum,w,c
  5710  011576  ECB7  F08E         	call	_displ_nendis
  5711                           
  5712                           ;mdb.c: 114: break;
  5713  01157A  D01D               	goto	l2728
  5714  01157C                     l2730:
  5715  01157C  9C3E               	bcf	_mdbflags,6,c
  5716                           
  5717                           ;mdb.c: 116: lcd_string(setnotes, line1);
  5718  01157E  0E28               	movlw	low _setnotes
  5719  011580  6E24               	movwf	lcd_string@lcdstring,c
  5720  011582  0EFD               	movlw	high _setnotes
  5721  011584  6E25               	movwf	lcd_string@lcdstring+1,c
  5722  011586  0E79               	movlw	low _line1
  5723  011588  6EF6               	movwf	tblptrl,c
  5724  01158A                     	if	1	;There is more than 1 active tblptr byte
  5725  01158A  0EFC               	movlw	high _line1
  5726  01158C  6EF7               	movwf	tblptrh,c
  5727  01158E                     	endif
  5728  01158E                     	if	1	;There are 3 active tblptr bytes
  5729  01158E  0E00               	movlw	low (_line1 shr (0+16))
  5730  011590  6EF8               	movwf	tblptru,c
  5731  011592                     	endif
  5732  011592  0008               	tblrd		*
  5733  011594  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5734  011598  EC03  F088         	call	_lcd_string	;wreg free
  5735                           
  5736                           ;mdb.c: 117: buttons = 0;
  5737  01159C  0E00               	movlw	0
  5738  01159E  6E39               	movwf	_buttons,c	;volatile
  5739                           
  5740                           ;mdb.c: 119: }
  5741                           
  5742                           ;mdb.c: 118: default : break;
  5743  0115A0  D00A               	goto	l2728
  5744  0115A2                     l2726:
  5745  0115A2  5039               	movf	_buttons,w,c	;volatile
  5746                           
  5747                           ; Switch size 1, requested type "space"
  5748                           ; Number of cases is 3, Range of values is 1 to 128
  5749                           ; switch strategies available:
  5750                           ; Name         Instructions Cycles
  5751                           ; simple_byte           10     6 (average)
  5752                           ;	Chosen strategy is simple_byte
  5753  0115A4  0A01               	xorlw	1	; case 1
  5754  0115A6  B4D8               	btfsc	status,2,c
  5755  0115A8  D7D6               	goto	l2727
  5756  0115AA  0A03               	xorlw	3	; case 2
  5757  0115AC  B4D8               	btfsc	status,2,c
  5758  0115AE  D7DC               	goto	l2729
  5759  0115B0  0A82               	xorlw	130	; case 128
  5760  0115B2  B4D8               	btfsc	status,2,c
  5761  0115B4  D7E3               	goto	l2730
  5762  0115B6                     l2728:
  5763  0115B6  AC3E               	btfss	_mdbflags,6,c
  5764  0115B8  0012               	return	
  5765  0115BA  D7C9               	goto	l2725
  5766  0115BC                     __end_of_enable_notes:
  5767                           	opt stack 0
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           postinc0	equ	0xFEE
  5775                           wreg	equ	0xFE8
  5776                           indf2	equ	0xFDF
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _save_notes *****************
  5782 ;; Defined at:
  5783 ;;		line 129 in file "mdb.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    3
  5804 ;; This function calls:
  5805 ;;		_DATAEE_WriteByte
  5806 ;; This function is called by:
  5807 ;;		_enable_notes
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text23
  5812  011EB0                     __ptext23:
  5813                           	opt stack 0
  5814  011EB0                     _save_notes:
  5815                           	opt stack 24
  5816                           
  5817                           ;mdb.c: 131: DATAEE_WriteByte(notebits, noteen_byte);
  5818                           
  5819                           ;incstack = 0
  5820  011EB0  0E3F               	movlw	low _notebits
  5821  011EB2  6EF6               	movwf	tblptrl,c
  5822  011EB4                     	if	1	;There is more than 1 active tblptr byte
  5823  011EB4  0EFC               	movlw	high _notebits
  5824  011EB6  6EF7               	movwf	tblptrh,c
  5825  011EB8                     	endif
  5826  011EB8                     	if	1	;There are 3 active tblptr bytes
  5827  011EB8  0E00               	movlw	low (_notebits shr (0+16))
  5828  011EBA  6EF8               	movwf	tblptru,c
  5829  011EBC                     	endif
  5830  011EBC  0009               	tblrd		*+
  5831  011EBE  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  5832  011EC2  000A               	tblrd		*-
  5833  011EC4  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  5834  011EC8  C03C  F01F         	movff	_noteen_byte,DATAEE_WriteByte@bData	;volatile
  5835  011ECC  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  5836  011ED0  0012               	return		;funcret
  5837  011ED2                     __end_of_save_notes:
  5838                           	opt stack 0
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           postinc0	equ	0xFEE
  5846                           wreg	equ	0xFE8
  5847                           indf2	equ	0xFDF
  5848                           fsr2h	equ	0xFDA
  5849                           fsr2l	equ	0xFD9
  5850                           status	equ	0xFD8
  5851                           
  5852 ;; *************** function _displ_nendis *****************
  5853 ;; Defined at:
  5854 ;;		line 114 in file "lcd.c"
  5855 ;; Parameters:    Size  Location     Type
  5856 ;;  note2disp       1    wreg     unsigned char 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  note2disp       1   30[COMRAM] unsigned char 
  5859 ;;  x               1   31[COMRAM] unsigned char 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  1    wreg      void 
  5862 ;; Registers used:
  5863 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;Total ram usage:        2 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    8
  5876 ;; This function calls:
  5877 ;;		_lcd_string
  5878 ;; This function is called by:
  5879 ;;		_enable_notes
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text24
  5884  011D6E                     __ptext24:
  5885                           	opt stack 0
  5886  011D6E                     _displ_nendis:
  5887                           	opt stack 19
  5888                           
  5889                           ;incstack = 0
  5890                           ;displ_nendis@note2disp stored from wreg
  5891  011D6E  6E29               	movwf	displ_nendis@note2disp,c
  5892                           
  5893                           ;lcd.c: 116: uint8_t x = note2disp & noteen_byte;
  5894  011D70  5029               	movf	displ_nendis@note2disp,w,c
  5895  011D72  143C               	andwf	_noteen_byte,w,c	;volatile
  5896  011D74  6E2A               	movwf	displ_nendis@x,c
  5897                           
  5898                           ;lcd.c: 117: if(x != 0x00)
  5899  011D76  502A               	movf	displ_nendis@x,w,c
  5900  011D78  B4D8               	btfsc	status,2,c
  5901  011D7A  D009               	goto	l1488
  5902                           
  5903                           ;lcd.c: 118: {
  5904                           ;lcd.c: 119: lcd_string(enabled, dspposition);
  5905  011D7C  0EC4               	movlw	low _enabled
  5906  011D7E  6E24               	movwf	lcd_string@lcdstring,c
  5907  011D80  0EFF               	movlw	high _enabled
  5908  011D82  6E25               	movwf	lcd_string@lcdstring+1,c
  5909  011D84  C042  F026         	movff	_dspposition,lcd_string@lcdline
  5910  011D88  EC03  F088         	call	_lcd_string	;wreg free
  5911                           
  5912                           ;lcd.c: 120: }
  5913  011D8C  0012               	return	
  5914  011D8E                     l1488:
  5915                           
  5916                           ;lcd.c: 121: else
  5917                           ;lcd.c: 122: {
  5918                           ;lcd.c: 123: lcd_string(disabled, dspposition);
  5919  011D8E  0EBA               	movlw	low _disabled
  5920  011D90  6E24               	movwf	lcd_string@lcdstring,c
  5921  011D92  0EFF               	movlw	high _disabled
  5922  011D94  6E25               	movwf	lcd_string@lcdstring+1,c
  5923  011D96  C042  F026         	movff	_dspposition,lcd_string@lcdline
  5924  011D9A  EC03  F088         	call	_lcd_string	;wreg free
  5925  011D9E  0012               	return	
  5926  011DA0                     __end_of_displ_nendis:
  5927                           	opt stack 0
  5928                           tblptru	equ	0xFF8
  5929                           tblptrh	equ	0xFF7
  5930                           tblptrl	equ	0xFF6
  5931                           tablat	equ	0xFF5
  5932                           prodh	equ	0xFF4
  5933                           prodl	equ	0xFF3
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           indf2	equ	0xFDF
  5937                           fsr2h	equ	0xFDA
  5938                           fsr2l	equ	0xFD9
  5939                           status	equ	0xFD8
  5940                           
  5941 ;; *************** function _displ_note *****************
  5942 ;; Defined at:
  5943 ;;		line 107 in file "lcd.c"
  5944 ;; Parameters:    Size  Location     Type
  5945 ;;  notestring      2   30[COMRAM] PTR unsigned char 
  5946 ;;		 -> twohundredrand(8), hundredrand(8), fiftyrand(8), twentyrand(8), 
  5947 ;;		 -> tenrand(9), 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;		None
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  1    wreg      unsigned char 
  5952 ;; Registers used:
  5953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;Total ram usage:        2 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:    8
  5966 ;; This function calls:
  5967 ;;		_lcd_string
  5968 ;;		_lcd_write
  5969 ;; This function is called by:
  5970 ;;		_set_notes
  5971 ;; This function uses a non-reentrant model
  5972 ;;
  5973                           
  5974                           	psect	text25
  5975  011BC2                     __ptext25:
  5976                           	opt stack 0
  5977  011BC2                     _displ_note:
  5978                           	opt stack 20
  5979                           
  5980                           ;lcd.c: 109: lcd_write(dispclr);
  5981                           
  5982                           ;incstack = 0
  5983  011BC2  0E83               	movlw	low _dispclr
  5984  011BC4  6EF6               	movwf	tblptrl,c
  5985  011BC6                     	if	1	;There is more than 1 active tblptr byte
  5986  011BC6  0EFC               	movlw	high _dispclr
  5987  011BC8  6EF7               	movwf	tblptrh,c
  5988  011BCA                     	endif
  5989  011BCA                     	if	1	;There are 3 active tblptr bytes
  5990  011BCA  0E00               	movlw	low (_dispclr shr (0+16))
  5991  011BCC  6EF8               	movwf	tblptru,c
  5992  011BCE                     	endif
  5993  011BCE  0008               	tblrd		*
  5994  011BD0  50F5               	movf	tablat,w,c
  5995  011BD2  ECE9  F08E         	call	_lcd_write
  5996                           
  5997                           ;lcd.c: 110: lcd_string(notestring, line2);
  5998  011BD6  C029  F024         	movff	displ_note@notestring,lcd_string@lcdstring
  5999  011BDA  C02A  F025         	movff	displ_note@notestring+1,lcd_string@lcdstring+1
  6000  011BDE  0E78               	movlw	low _line2
  6001  011BE0  6EF6               	movwf	tblptrl,c
  6002  011BE2                     	if	1	;There is more than 1 active tblptr byte
  6003  011BE2  0EFC               	movlw	high _line2
  6004  011BE4  6EF7               	movwf	tblptrh,c
  6005  011BE6                     	endif
  6006  011BE6                     	if	1	;There are 3 active tblptr bytes
  6007  011BE6  0E00               	movlw	low (_line2 shr (0+16))
  6008  011BE8  6EF8               	movwf	tblptru,c
  6009  011BEA                     	endif
  6010  011BEA  0008               	tblrd		*
  6011  011BEC  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6012  011BF0  EC03  F088         	call	_lcd_string	;wreg free
  6013                           
  6014                           ;lcd.c: 111: return bflag+2;
  6015  011BF4  5046               	movf	_bflag,w,c
  6016  011BF6  0F02               	addlw	2
  6017  011BF8  0012               	return	
  6018  011BFA                     __end_of_displ_note:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           postinc0	equ	0xFEE
  6027                           wreg	equ	0xFE8
  6028                           indf2	equ	0xFDF
  6029                           fsr2h	equ	0xFDA
  6030                           fsr2l	equ	0xFD9
  6031                           status	equ	0xFD8
  6032                           
  6033 ;; *************** function _price_set *****************
  6034 ;; Defined at:
  6035 ;;		line 313 in file "vend.c"
  6036 ;; Parameters:    Size  Location     Type
  6037 ;;		None
  6038 ;; Auto vars:     Size  Location     Type
  6039 ;;		None
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      void 
  6042 ;; Registers used:
  6043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;Total ram usage:        0 bytes
  6054 ;; Hardware stack levels used:    1
  6055 ;; Hardware stack levels required when called:   10
  6056 ;; This function calls:
  6057 ;;		_Read_Service
  6058 ;;		_butindb
  6059 ;;		_lcd_string
  6060 ;;		_set_price
  6061 ;; This function is called by:
  6062 ;;		_enter_service
  6063 ;; This function uses a non-reentrant model
  6064 ;;
  6065                           
  6066                           	psect	text26
  6067  0114C2                     __ptext26:
  6068                           	opt stack 0
  6069  0114C2                     _price_set:
  6070                           	opt stack 19
  6071                           
  6072                           ;vend.c: 315: venflags.priceset = 1;
  6073                           
  6074                           ;incstack = 0
  6075  0114C2  802F               	bsf	_venflags+1,0,c
  6076                           
  6077                           ;vend.c: 316: lcd_string(pricesetmsg, line1);
  6078  0114C4  0E51               	movlw	low _pricesetmsg
  6079  0114C6  6E24               	movwf	lcd_string@lcdstring,c
  6080  0114C8  0EFF               	movlw	high _pricesetmsg
  6081  0114CA  6E25               	movwf	lcd_string@lcdstring+1,c
  6082  0114CC  0E79               	movlw	low _line1
  6083  0114CE  6EF6               	movwf	tblptrl,c
  6084  0114D0                     	if	1	;There is more than 1 active tblptr byte
  6085  0114D0  0EFC               	movlw	high _line1
  6086  0114D2  6EF7               	movwf	tblptrh,c
  6087  0114D4                     	endif
  6088  0114D4                     	if	1	;There are 3 active tblptr bytes
  6089  0114D4  0E00               	movlw	low (_line1 shr (0+16))
  6090  0114D6  6EF8               	movwf	tblptru,c
  6091  0114D8                     	endif
  6092  0114D8  0008               	tblrd		*
  6093  0114DA  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6094  0114DE  EC03  F088         	call	_lcd_string	;wreg free
  6095                           
  6096                           ;vend.c: 317: lcd_string(pricesetm2, line2);
  6097  0114E2  0E6D               	movlw	low _pricesetm2
  6098  0114E4  6E24               	movwf	lcd_string@lcdstring,c
  6099  0114E6  0EFD               	movlw	high _pricesetm2
  6100  0114E8  6E25               	movwf	lcd_string@lcdstring+1,c
  6101  0114EA  0E78               	movlw	low _line2
  6102  0114EC  6EF6               	movwf	tblptrl,c
  6103  0114EE                     	if	1	;There is more than 1 active tblptr byte
  6104  0114EE  0EFC               	movlw	high _line2
  6105  0114F0  6EF7               	movwf	tblptrh,c
  6106  0114F2                     	endif
  6107  0114F2                     	if	1	;There are 3 active tblptr bytes
  6108  0114F2  0E00               	movlw	low (_line2 shr (0+16))
  6109  0114F4  6EF8               	movwf	tblptru,c
  6110  0114F6                     	endif
  6111  0114F6  0008               	tblrd		*
  6112  0114F8  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6113  0114FC  EC03  F088         	call	_lcd_string	;wreg free
  6114                           
  6115                           ;vend.c: 318: while(venflags.priceset)
  6116  011500  D00E               	goto	l2107
  6117  011502                     
  6118                           ;vend.c: 319: {
  6119                           ;vend.c: 320: buttons = butindb();
  6120  011502  ECD0  F08E         	call	_butindb	;wreg free
  6121  011506  6E39               	movwf	_buttons,c	;volatile
  6122                           
  6123                           ;vend.c: 321: if(buttons != 0x00)
  6124  011508  5039               	movf	_buttons,w,c	;volatile
  6125  01150A  B4D8               	btfsc	status,2,c
  6126  01150C  D003               	goto	l2106
  6127                           
  6128                           ;vend.c: 322: {
  6129                           ;vend.c: 323: set_price(buttons);
  6130  01150E  5039               	movf	_buttons,w,c	;volatile
  6131  011510  EC2B  F081         	call	_set_price
  6132  011514                     l2106:
  6133                           
  6134                           ;vend.c: 324: }
  6135                           ;vend.c: 325: if(Read_Service() == 0x00)
  6136  011514  EC1B  F090         	call	_Read_Service	;wreg free
  6137  011518  0900               	iorlw	0
  6138  01151A  B4D8               	btfsc	status,2,c
  6139                           
  6140                           ;vend.c: 326: {
  6141                           ;vend.c: 327: venflags.priceset = 0;
  6142  01151C  902F               	bcf	_venflags+1,0,c
  6143  01151E                     l2107:
  6144  01151E  B02F               	btfsc	_venflags+1,0,c
  6145  011520  D7F0               	goto	l2105
  6146                           
  6147                           ;vend.c: 328: }
  6148                           ;vend.c: 329: }
  6149                           ;vend.c: 330: lcd_string(servmsg, line1);
  6150  011522  0E88               	movlw	low _servmsg
  6151  011524  6E24               	movwf	lcd_string@lcdstring,c
  6152  011526  0EFC               	movlw	high _servmsg
  6153  011528  6E25               	movwf	lcd_string@lcdstring+1,c
  6154  01152A  0E79               	movlw	low _line1
  6155  01152C  6EF6               	movwf	tblptrl,c
  6156  01152E                     	if	1	;There is more than 1 active tblptr byte
  6157  01152E  0EFC               	movlw	high _line1
  6158  011530  6EF7               	movwf	tblptrh,c
  6159  011532                     	endif
  6160  011532                     	if	1	;There are 3 active tblptr bytes
  6161  011532  0E00               	movlw	low (_line1 shr (0+16))
  6162  011534  6EF8               	movwf	tblptru,c
  6163  011536                     	endif
  6164  011536  0008               	tblrd		*
  6165  011538  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6166  01153C  EC03  F088         	call	_lcd_string	;wreg free
  6167  011540  0012               	return		;funcret
  6168  011542                     __end_of_price_set:
  6169                           	opt stack 0
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           prodh	equ	0xFF4
  6175                           prodl	equ	0xFF3
  6176                           postinc0	equ	0xFEE
  6177                           wreg	equ	0xFE8
  6178                           indf2	equ	0xFDF
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8
  6182                           
  6183 ;; *************** function _set_price *****************
  6184 ;; Defined at:
  6185 ;;		line 346 in file "vend.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  buttons         1    wreg     unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  buttons         1   12[BANK0 ] unsigned char 
  6190 ;;  channel         1   13[BANK0 ] unsigned char 
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  1    wreg      void 
  6193 ;; Registers used:
  6194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;      Totals:         2       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6204 ;;Total ram usage:        4 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    9
  6207 ;; This function calls:
  6208 ;;		_DATAEE_ReadByte
  6209 ;;		_DATAEE_WriteByte
  6210 ;;		_butindb
  6211 ;;		_displ_price
  6212 ;;		_get_channel
  6213 ;;		_lcd_string
  6214 ;; This function is called by:
  6215 ;;		_price_set
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text27
  6220  010256                     __ptext27:
  6221                           	opt stack 0
  6222  010256                     _set_price:
  6223                           	opt stack 19
  6224                           
  6225                           ;incstack = 0
  6226                           ;set_price@buttons stored from wreg
  6227  010256  0100               	movlb	0	; () banked
  6228  010258  6FB3               	movwf	set_price@buttons& (0+255),b
  6229                           
  6230                           ;vend.c: 348: venflags.setprice = 1;
  6231  01025A  822F               	bsf	_venflags+1,1,c
  6232                           
  6233                           ;vend.c: 349: uint8_t channel = get_channel(buttons);
  6234  01025C  0100               	movlb	0	; () banked
  6235  01025E  51B3               	movf	set_price@buttons& (0+255),w,b
  6236  010260  EC99  F08F         	call	_get_channel
  6237  010264  0100               	movlb	0	; () banked
  6238  010266  6FB4               	movwf	set_price@channel& (0+255),b
  6239                           
  6240                           ; BSR set to: 0
  6241                           ;vend.c: 351: vendprice = DATAEE_ReadByte(pricestore + channel);
  6242  010268  0E43               	movlw	low _pricestore
  6243  01026A  6EF6               	movwf	tblptrl,c
  6244  01026C                     	if	1	;There is more than 1 active tblptr byte
  6245  01026C  0EFC               	movlw	high _pricestore
  6246  01026E  6EF7               	movwf	tblptrh,c
  6247  010270                     	endif
  6248  010270                     	if	1	;There are 3 active tblptr bytes
  6249  010270  0E00               	movlw	low (_pricestore shr (0+16))
  6250  010272  6EF8               	movwf	tblptru,c
  6251  010274                     	endif
  6252  010274  0009               	tblrd		*+
  6253  010276  CFF5 F02B          	movff	tablat,??_set_price
  6254  01027A  0009               	tblrd		*+
  6255  01027C  CFF5 F02C          	movff	tablat,??_set_price+1
  6256  010280  51B4               	movf	set_price@channel& (0+255),w,b
  6257  010282  242B               	addwf	??_set_price,w,c
  6258  010284  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  6259  010286  0E00               	movlw	0
  6260  010288  202C               	addwfc	??_set_price+1,w,c
  6261  01028A  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  6262  01028C  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  6263  010290  6E38               	movwf	_vendprice,c	;volatile
  6264                           
  6265                           ;vend.c: 352: displ_price(vendprice);
  6266  010292  5038               	movf	_vendprice,w,c	;volatile
  6267  010294  EC87  F08D         	call	_displ_price
  6268                           
  6269                           ;vend.c: 353: while(venflags.setprice)
  6270  010298  D067               	goto	l2122
  6271  01029A                     
  6272                           ;vend.c: 354: {
  6273                           ;vend.c: 355: buttons = butindb();
  6274  01029A  ECD0  F08E         	call	_butindb	;wreg free
  6275  01029E  0100               	movlb	0	; () banked
  6276  0102A0  6FB3               	movwf	set_price@buttons& (0+255),b
  6277                           
  6278                           ;vend.c: 357: switch(buttons)
  6279  0102A2  D057               	goto	l2120
  6280  0102A4                     
  6281                           ; BSR set to: 0
  6282                           
  6283                           ; BSR set to: 0
  6284  0102A4  2A38               	incf	_vendprice,f,c	;volatile
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;vend.c: 360: DATAEE_WriteByte(pricestore + channel, vendprice);
  6288  0102A6  0E43               	movlw	low _pricestore
  6289  0102A8  6EF6               	movwf	tblptrl,c
  6290  0102AA                     	if	1	;There is more than 1 active tblptr byte
  6291  0102AA  0EFC               	movlw	high _pricestore
  6292  0102AC  6EF7               	movwf	tblptrh,c
  6293  0102AE                     	endif
  6294  0102AE                     	if	1	;There are 3 active tblptr bytes
  6295  0102AE  0E00               	movlw	low (_pricestore shr (0+16))
  6296  0102B0  6EF8               	movwf	tblptru,c
  6297  0102B2                     	endif
  6298  0102B2  0009               	tblrd		*+
  6299  0102B4  CFF5 F02B          	movff	tablat,??_set_price
  6300  0102B8  0009               	tblrd		*+
  6301  0102BA  CFF5 F02C          	movff	tablat,??_set_price+1
  6302  0102BE  51B4               	movf	set_price@channel& (0+255),w,b
  6303  0102C0  242B               	addwf	??_set_price,w,c
  6304  0102C2  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  6305  0102C4  0E00               	movlw	0
  6306  0102C6  202C               	addwfc	??_set_price+1,w,c
  6307  0102C8  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  6308  0102CA  C038  F01F         	movff	_vendprice,DATAEE_WriteByte@bData	;volatile
  6309  0102CE  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  6310                           
  6311                           ;vend.c: 361: displ_price(vendprice);
  6312  0102D2  5038               	movf	_vendprice,w,c	;volatile
  6313  0102D4  EC87  F08D         	call	_displ_price
  6314                           
  6315                           ;vend.c: 362: break;
  6316  0102D8  D047               	goto	l2122
  6317  0102DA  0638               	decf	_vendprice,f,c	;volatile
  6318                           
  6319                           ;vend.c: 364: DATAEE_WriteByte(pricestore + channel, vendprice);
  6320  0102DC  0E43               	movlw	low _pricestore
  6321  0102DE  6EF6               	movwf	tblptrl,c
  6322  0102E0                     	if	1	;There is more than 1 active tblptr byte
  6323  0102E0  0EFC               	movlw	high _pricestore
  6324  0102E2  6EF7               	movwf	tblptrh,c
  6325  0102E4                     	endif
  6326  0102E4                     	if	1	;There are 3 active tblptr bytes
  6327  0102E4  0E00               	movlw	low (_pricestore shr (0+16))
  6328  0102E6  6EF8               	movwf	tblptru,c
  6329  0102E8                     	endif
  6330  0102E8  0009               	tblrd		*+
  6331  0102EA  CFF5 F02B          	movff	tablat,??_set_price
  6332  0102EE  0009               	tblrd		*+
  6333  0102F0  CFF5 F02C          	movff	tablat,??_set_price+1
  6334  0102F4  0100               	movlb	0	; () banked
  6335  0102F6  51B4               	movf	set_price@channel& (0+255),w,b
  6336  0102F8  242B               	addwf	??_set_price,w,c
  6337  0102FA  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  6338  0102FC  0E00               	movlw	0
  6339  0102FE  202C               	addwfc	??_set_price+1,w,c
  6340  010300  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  6341  010302  C038  F01F         	movff	_vendprice,DATAEE_WriteByte@bData	;volatile
  6342  010306  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  6343                           
  6344                           ;vend.c: 365: displ_price(vendprice);
  6345  01030A  5038               	movf	_vendprice,w,c	;volatile
  6346  01030C  EC87  F08D         	call	_displ_price
  6347                           
  6348                           ;vend.c: 366: break;
  6349  010310  D02B               	goto	l2122
  6350  010312                     l2124:
  6351                           
  6352                           ; BSR set to: 0
  6353  010312  922F               	bcf	_venflags+1,1,c
  6354                           
  6355                           ; BSR set to: 0
  6356                           ;vend.c: 368: lcd_string(pricesetmsg, line1);
  6357  010314  0E51               	movlw	low _pricesetmsg
  6358  010316  6E24               	movwf	lcd_string@lcdstring,c
  6359  010318  0EFF               	movlw	high _pricesetmsg
  6360  01031A  6E25               	movwf	lcd_string@lcdstring+1,c
  6361  01031C  0E79               	movlw	low _line1
  6362  01031E  6EF6               	movwf	tblptrl,c
  6363  010320                     	if	1	;There is more than 1 active tblptr byte
  6364  010320  0EFC               	movlw	high _line1
  6365  010322  6EF7               	movwf	tblptrh,c
  6366  010324                     	endif
  6367  010324                     	if	1	;There are 3 active tblptr bytes
  6368  010324  0E00               	movlw	low (_line1 shr (0+16))
  6369  010326  6EF8               	movwf	tblptru,c
  6370  010328                     	endif
  6371  010328  0008               	tblrd		*
  6372  01032A  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6373  01032E  EC03  F088         	call	_lcd_string	;wreg free
  6374                           
  6375                           ;vend.c: 369: lcd_string(pricesetm2, line2);
  6376  010332  0E6D               	movlw	low _pricesetm2
  6377  010334  6E24               	movwf	lcd_string@lcdstring,c
  6378  010336  0EFD               	movlw	high _pricesetm2
  6379  010338  6E25               	movwf	lcd_string@lcdstring+1,c
  6380  01033A  0E78               	movlw	low _line2
  6381  01033C  6EF6               	movwf	tblptrl,c
  6382  01033E                     	if	1	;There is more than 1 active tblptr byte
  6383  01033E  0EFC               	movlw	high _line2
  6384  010340  6EF7               	movwf	tblptrh,c
  6385  010342                     	endif
  6386  010342                     	if	1	;There are 3 active tblptr bytes
  6387  010342  0E00               	movlw	low (_line2 shr (0+16))
  6388  010344  6EF8               	movwf	tblptru,c
  6389  010346                     	endif
  6390  010346  0008               	tblrd		*
  6391  010348  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6392  01034C  EC03  F088         	call	_lcd_string	;wreg free
  6393                           
  6394                           ;vend.c: 372: }
  6395                           
  6396                           ;vend.c: 371: break;
  6397  010350  D00B               	goto	l2122
  6398  010352                     l2120:
  6399  010352  0100               	movlb	0	; () banked
  6400  010354  51B3               	movf	set_price@buttons& (0+255),w,b
  6401                           
  6402                           ; Switch size 1, requested type "space"
  6403                           ; Number of cases is 3, Range of values is 1 to 128
  6404                           ; switch strategies available:
  6405                           ; Name         Instructions Cycles
  6406                           ; simple_byte           10     6 (average)
  6407                           ;	Chosen strategy is simple_byte
  6408  010356  0A01               	xorlw	1	; case 1
  6409  010358  B4D8               	btfsc	status,2,c
  6410  01035A  D7A4               	goto	l2121
  6411  01035C  0A03               	xorlw	3	; case 2
  6412  01035E  B4D8               	btfsc	status,2,c
  6413  010360  D7BC               	goto	l2123
  6414  010362  0A82               	xorlw	130	; case 128
  6415  010364  B4D8               	btfsc	status,2,c
  6416  010366  D7D5               	goto	l2124
  6417  010368                     l2122:
  6418                           
  6419                           ; BSR set to: 0
  6420  010368  A22F               	btfss	_venflags+1,1,c
  6421  01036A  0012               	return	
  6422  01036C  D796               	goto	l2119
  6423  01036E                     __end_of_set_price:
  6424                           	opt stack 0
  6425                           tblptru	equ	0xFF8
  6426                           tblptrh	equ	0xFF7
  6427                           tblptrl	equ	0xFF6
  6428                           tablat	equ	0xFF5
  6429                           prodh	equ	0xFF4
  6430                           prodl	equ	0xFF3
  6431                           postinc0	equ	0xFEE
  6432                           wreg	equ	0xFE8
  6433                           indf2	equ	0xFDF
  6434                           fsr2h	equ	0xFDA
  6435                           fsr2l	equ	0xFD9
  6436                           status	equ	0xFD8
  6437                           
  6438 ;; *************** function _displ_price *****************
  6439 ;; Defined at:
  6440 ;;		line 235 in file "lcd.c"
  6441 ;; Parameters:    Size  Location     Type
  6442 ;;  vendprice       1    wreg     unsigned char 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  vendprice       1   31[COMRAM] unsigned char 
  6445 ;; Return value:  Size  Location     Type
  6446 ;;                  1    wreg      void 
  6447 ;; Registers used:
  6448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6449 ;; Tracked objects:
  6450 ;;		On entry : 0/0
  6451 ;;		On exit  : 0/0
  6452 ;;		Unchanged: 0/0
  6453 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6455 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;Total ram usage:        1 bytes
  6459 ;; Hardware stack levels used:    1
  6460 ;; Hardware stack levels required when called:    8
  6461 ;; This function calls:
  6462 ;;		_displ_hex
  6463 ;;		_lcd_dispadd
  6464 ;;		_lcd_write
  6465 ;;		_lcd_writeC
  6466 ;; This function is called by:
  6467 ;;		_main
  6468 ;;		_set_price
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text28
  6473  011B0E                     __ptext28:
  6474                           	opt stack 0
  6475  011B0E                     _displ_price:
  6476                           	opt stack 19
  6477                           
  6478                           ;incstack = 0
  6479                           ;displ_price@vendprice stored from wreg
  6480  011B0E  6E2A               	movwf	displ_price@vendprice,c
  6481                           
  6482                           ;lcd.c: 237: lcd_write(dispclr);
  6483  011B10  0E83               	movlw	low _dispclr
  6484  011B12  6EF6               	movwf	tblptrl,c
  6485  011B14                     	if	1	;There is more than 1 active tblptr byte
  6486  011B14  0EFC               	movlw	high _dispclr
  6487  011B16  6EF7               	movwf	tblptrh,c
  6488  011B18                     	endif
  6489  011B18                     	if	1	;There are 3 active tblptr bytes
  6490  011B18  0E00               	movlw	low (_dispclr shr (0+16))
  6491  011B1A  6EF8               	movwf	tblptru,c
  6492  011B1C                     	endif
  6493  011B1C  0008               	tblrd		*
  6494  011B1E  50F5               	movf	tablat,w,c
  6495  011B20  ECE9  F08E         	call	_lcd_write
  6496                           
  6497                           ;lcd.c: 238: lcd_dispadd(line2 + 4);
  6498  011B24  0E78               	movlw	low _line2
  6499  011B26  6EF6               	movwf	tblptrl,c
  6500  011B28                     	if	1	;There is more than 1 active tblptr byte
  6501  011B28  0EFC               	movlw	high _line2
  6502  011B2A  6EF7               	movwf	tblptrh,c
  6503  011B2C                     	endif
  6504  011B2C                     	if	1	;There are 3 active tblptr bytes
  6505  011B2C  0E00               	movlw	low (_line2 shr (0+16))
  6506  011B2E  6EF8               	movwf	tblptru,c
  6507  011B30                     	endif
  6508  011B30  0008               	tblrd		*
  6509  011B32  50F5               	movf	tablat,w,c
  6510  011B34  0F04               	addlw	4
  6511  011B36  ECC3  F08F         	call	_lcd_dispadd
  6512                           
  6513                           ;lcd.c: 239: lcd_writeC((uint8_t)'R');
  6514  011B3A  0E52               	movlw	82
  6515  011B3C  ECBE  F08B         	call	_lcd_writeC
  6516                           
  6517                           ;lcd.c: 240: displ_hex(vendprice);
  6518  011B40  502A               	movf	displ_price@vendprice,w,c
  6519  011B42  6E27               	movwf	displ_hex@hexnum,c
  6520  011B44  6A28               	clrf	displ_hex@hexnum+1,c
  6521  011B46  6A29               	clrf	displ_hex@hexnum+2,c
  6522  011B48  EC4E  F087         	call	_displ_hex	;wreg free
  6523  011B4C  0012               	return		;funcret
  6524  011B4E                     __end_of_displ_price:
  6525                           	opt stack 0
  6526                           tblptru	equ	0xFF8
  6527                           tblptrh	equ	0xFF7
  6528                           tblptrl	equ	0xFF6
  6529                           tablat	equ	0xFF5
  6530                           prodh	equ	0xFF4
  6531                           prodl	equ	0xFF3
  6532                           postinc0	equ	0xFEE
  6533                           wreg	equ	0xFE8
  6534                           indf2	equ	0xFDF
  6535                           fsr2h	equ	0xFDA
  6536                           fsr2l	equ	0xFD9
  6537                           status	equ	0xFD8
  6538                           
  6539 ;; *************** function _mdb_unlock *****************
  6540 ;; Defined at:
  6541 ;;		line 375 in file "mdb.c"
  6542 ;; Parameters:    Size  Location     Type
  6543 ;;		None
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;		None
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  1    wreg      void 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0, cstack
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;Total ram usage:        1 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    3
  6562 ;; This function calls:
  6563 ;;		_CMP1_Initialize
  6564 ;;		_DAC1_Initialize
  6565 ;;		_TMR1_Initialize
  6566 ;;		_TMR3_Initialize
  6567 ;;		_TMR5_Initialize
  6568 ;; This function is called by:
  6569 ;;		_enter_service
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text29
  6574  010AE8                     __ptext29:
  6575                           	opt stack 0
  6576  010AE8                     _mdb_unlock:
  6577                           	opt stack 26
  6578                           
  6579                           ;mdb.c: 377: _delay((unsigned long)((50)*(12000000/4000.0)));
  6580                           
  6581                           ;incstack = 0
  6582  010AE8  0EC3               	movlw	195
  6583  010AEA  6E1F               	movwf	??_mdb_unlock& (0+255),c
  6584  010AEC  0ECD               	movlw	205
  6585  010AEE                     u4177:
  6586  010AEE  2EE8               	decfsz	wreg,f,c
  6587  010AF0  D7FE               	bra	u4177
  6588  010AF2  2E1F               	decfsz	??_mdb_unlock& (0+255),f,c
  6589  010AF4  D7FC               	bra	u4177
  6590  010AF6  F000               	nop	
  6591                           
  6592                           ;mdb.c: 378: LATE = 0x00;
  6593  010AF8  0E00               	movlw	0
  6594  010AFA  6E87               	movwf	3975,c	;volatile
  6595                           
  6596                           ;mdb.c: 379: LATD = 0x00;
  6597  010AFC  0E00               	movlw	0
  6598  010AFE  6E86               	movwf	3974,c	;volatile
  6599                           
  6600                           ;mdb.c: 380: LATA = 0xC0;
  6601  010B00  0EC0               	movlw	192
  6602  010B02  6E83               	movwf	3971,c	;volatile
  6603                           
  6604                           ;mdb.c: 381: LATB = 0x00;
  6605  010B04  0E00               	movlw	0
  6606  010B06  6E84               	movwf	3972,c	;volatile
  6607                           
  6608                           ;mdb.c: 382: LATC = 0x01;
  6609  010B08  0E01               	movlw	1
  6610  010B0A  6E85               	movwf	3973,c	;volatile
  6611                           
  6612                           ;mdb.c: 387: TRISE = 0x00;
  6613  010B0C  0E00               	movlw	0
  6614  010B0E  6E8C               	movwf	3980,c	;volatile
  6615                           
  6616                           ;mdb.c: 388: TRISA = 0x1F;
  6617  010B10  0E1F               	movlw	31
  6618  010B12  6E88               	movwf	3976,c	;volatile
  6619                           
  6620                           ;mdb.c: 389: TRISB = 0xD0;
  6621  010B14  0ED0               	movlw	208
  6622  010B16  6E89               	movwf	3977,c	;volatile
  6623                           
  6624                           ;mdb.c: 390: TRISC = 0x80;
  6625  010B18  0E80               	movlw	128
  6626  010B1A  6E8A               	movwf	3978,c	;volatile
  6627                           
  6628                           ;mdb.c: 391: TRISD = 0x00;
  6629  010B1C  0E00               	movlw	0
  6630  010B1E  6E8B               	movwf	3979,c	;volatile
  6631                           
  6632                           ;mdb.c: 396: ANSELC = 0x00;
  6633  010B20  0E00               	movlw	0
  6634  010B22  010F               	movlb	15	; () banked
  6635  010B24  6F21               	movwf	33,b	;volatile
  6636                           
  6637                           ; BSR set to: 15
  6638                           ;mdb.c: 397: ANSELB = 0xC0;
  6639  010B26  0EC0               	movlw	192
  6640  010B28  6F19               	movwf	25,b	;volatile
  6641                           
  6642                           ; BSR set to: 15
  6643                           ;mdb.c: 398: ANSELD = 0x00;
  6644  010B2A  0E00               	movlw	0
  6645  010B2C  6F26               	movwf	38,b	;volatile
  6646                           
  6647                           ; BSR set to: 15
  6648                           ;mdb.c: 399: ANSELE = 0x00;
  6649  010B2E  0E00               	movlw	0
  6650  010B30  6F2E               	movwf	46,b	;volatile
  6651                           
  6652                           ; BSR set to: 15
  6653                           ;mdb.c: 400: ANSELA = 0x01;
  6654  010B32  0E01               	movlw	1
  6655  010B34  6F11               	movwf	17,b	;volatile
  6656                           
  6657                           ; BSR set to: 15
  6658                           ;mdb.c: 405: WPUD = 0x00;
  6659  010B36  0E00               	movlw	0
  6660  010B38  6F25               	movwf	37,b	;volatile
  6661                           
  6662                           ; BSR set to: 15
  6663                           ;mdb.c: 406: WPUE = 0x00;
  6664  010B3A  0E00               	movlw	0
  6665  010B3C  6F2D               	movwf	45,b	;volatile
  6666                           
  6667                           ; BSR set to: 15
  6668                           ;mdb.c: 407: WPUB = 0x00;
  6669  010B3E  0E00               	movlw	0
  6670  010B40  6F18               	movwf	24,b	;volatile
  6671                           
  6672                           ; BSR set to: 15
  6673                           ;mdb.c: 408: WPUA = 0x00;
  6674  010B42  0E00               	movlw	0
  6675  010B44  6F10               	movwf	16,b	;volatile
  6676                           
  6677                           ; BSR set to: 15
  6678                           ;mdb.c: 409: WPUC = 0x00;
  6679  010B46  0E00               	movlw	0
  6680  010B48  6F20               	movwf	32,b	;volatile
  6681                           
  6682                           ; BSR set to: 15
  6683                           ;mdb.c: 414: ODCONE = 0x00;
  6684  010B4A  0E00               	movlw	0
  6685  010B4C  6F2C               	movwf	44,b	;volatile
  6686                           
  6687                           ; BSR set to: 15
  6688                           ;mdb.c: 415: ODCONA = 0x00;
  6689  010B4E  0E00               	movlw	0
  6690  010B50  6F0F               	movwf	15,b	;volatile
  6691                           
  6692                           ; BSR set to: 15
  6693                           ;mdb.c: 416: ODCONB = 0x00;
  6694  010B52  0E00               	movlw	0
  6695  010B54  6F17               	movwf	23,b	;volatile
  6696                           
  6697                           ; BSR set to: 15
  6698                           ;mdb.c: 417: ODCONC = 0x00;
  6699  010B56  0E00               	movlw	0
  6700  010B58  6F1F               	movwf	31,b	;volatile
  6701                           
  6702                           ; BSR set to: 15
  6703                           ;mdb.c: 418: ODCOND = 0x00;
  6704  010B5A  0E00               	movlw	0
  6705  010B5C  6F24               	movwf	36,b	;volatile
  6706                           
  6707                           ; BSR set to: 15
  6708                           ;mdb.c: 419: LATC = 0x01;
  6709  010B5E  0E01               	movlw	1
  6710  010B60  6E85               	movwf	3973,c	;volatile
  6711                           
  6712                           ; BSR set to: 15
  6713                           ;mdb.c: 420: TRISC = 0x80;
  6714  010B62  0E80               	movlw	128
  6715  010B64  6E8A               	movwf	3978,c	;volatile
  6716                           
  6717                           ; BSR set to: 15
  6718                           ;mdb.c: 421: ANSELC = 0x00;
  6719  010B66  0E00               	movlw	0
  6720  010B68  6F21               	movwf	33,b	;volatile
  6721                           
  6722                           ; BSR set to: 15
  6723                           ;mdb.c: 422: WPUC = 0x00;
  6724  010B6A  0E00               	movlw	0
  6725  010B6C  6F20               	movwf	32,b	;volatile
  6726                           
  6727                           ; BSR set to: 15
  6728                           ;mdb.c: 423: ODCONC = 0x00;
  6729  010B6E  0E00               	movlw	0
  6730  010B70  6F1F               	movwf	31,b	;volatile
  6731                           
  6732                           ; BSR set to: 15
  6733                           ;mdb.c: 424: PPSLOCK = 0x55;
  6734  010B72  0E55               	movlw	85
  6735  010B74  010E               	movlb	14	; () banked
  6736  010B76  6FA0               	movwf	160,b	;volsfr
  6737                           
  6738                           ; BSR set to: 14
  6739                           ;mdb.c: 425: PPSLOCK = 0xAA;
  6740  010B78  0EAA               	movlw	170
  6741  010B7A  6FA0               	movwf	160,b	;volsfr
  6742                           
  6743                           ; BSR set to: 14
  6744                           ;mdb.c: 426: PPSLOCKbits.PPSLOCKED = 0x00;
  6745  010B7C  91A0               	bcf	160,0,b	;volsfr
  6746                           
  6747                           ; BSR set to: 14
  6748                           ;mdb.c: 428: RX1PPSbits.RXPPS = 0x0;
  6749  010B7E  91B5               	bcf	181,0,b	;volatile
  6750  010B80  93B5               	bcf	181,1,b	;volatile
  6751  010B82  95B5               	bcf	181,2,b	;volatile
  6752  010B84  97B5               	bcf	181,3,b	;volatile
  6753  010B86  99B5               	bcf	181,4,b	;volatile
  6754                           
  6755                           ; BSR set to: 14
  6756                           ;mdb.c: 429: RC6PPS = 0x0;
  6757  010B88  0E00               	movlw	0
  6758  010B8A  6FFD               	movwf	253,b	;volatile
  6759                           
  6760                           ; BSR set to: 14
  6761                           ;mdb.c: 430: RB5PPS = 0x0;
  6762  010B8C  0E00               	movlw	0
  6763  010B8E  6FF4               	movwf	244,b	;volatile
  6764                           
  6765                           ; BSR set to: 14
  6766                           ;mdb.c: 431: RX2PPSbits.RXPPS = 0x0;
  6767  010B90  918D               	bcf	141,0,b	;volatile
  6768  010B92  938D               	bcf	141,1,b	;volatile
  6769  010B94  958D               	bcf	141,2,b	;volatile
  6770  010B96  978D               	bcf	141,3,b	;volatile
  6771  010B98  998D               	bcf	141,4,b	;volatile
  6772                           
  6773                           ; BSR set to: 14
  6774                           ;mdb.c: 432: CMP1_Initialize();
  6775  010B9A  EC08  F090         	call	_CMP1_Initialize	;wreg free
  6776                           
  6777                           ;mdb.c: 433: TMR3_Initialize();
  6778  010B9E  EC33  F08E         	call	_TMR3_Initialize	;wreg free
  6779                           
  6780                           ;mdb.c: 434: DAC1_Initialize();
  6781  010BA2  EC40  F090         	call	_DAC1_Initialize	;wreg free
  6782                           
  6783                           ;mdb.c: 435: TMR5_Initialize();
  6784  010BA6  EC18  F08E         	call	_TMR5_Initialize	;wreg free
  6785                           
  6786                           ;mdb.c: 436: TMR1_Initialize();
  6787  010BAA  EC4E  F08E         	call	_TMR1_Initialize	;wreg free
  6788  010BAE  0012               	return		;funcret
  6789  010BB0                     __end_of_mdb_unlock:
  6790                           	opt stack 0
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           postinc0	equ	0xFEE
  6798                           wreg	equ	0xFE8
  6799                           indf2	equ	0xFDF
  6800                           fsr2h	equ	0xFDA
  6801                           fsr2l	equ	0xFD9
  6802                           status	equ	0xFD8
  6803                           
  6804 ;; *************** function _Vend_setup *****************
  6805 ;; Defined at:
  6806 ;;		line 380 in file "vend.c"
  6807 ;; Parameters:    Size  Location     Type
  6808 ;;		None
  6809 ;; Auto vars:     Size  Location     Type
  6810 ;;		None
  6811 ;; Return value:  Size  Location     Type
  6812 ;;                  1    wreg      void 
  6813 ;; Registers used:
  6814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6815 ;; Tracked objects:
  6816 ;;		On entry : 0/0
  6817 ;;		On exit  : 0/0
  6818 ;;		Unchanged: 0/0
  6819 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6824 ;;Total ram usage:        0 bytes
  6825 ;; Hardware stack levels used:    1
  6826 ;; Hardware stack levels required when called:   11
  6827 ;; This function calls:
  6828 ;;		_Chan_link
  6829 ;;		_Init_vendmem
  6830 ;;		_Reset_settings
  6831 ;;		_Sens_off
  6832 ;;		_Vend_settime
  6833 ;;		_butindb
  6834 ;;		_lcd_string
  6835 ;; This function is called by:
  6836 ;;		_enter_service
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text30
  6841  01036E                     __ptext30:
  6842                           	opt stack 0
  6843  01036E                     _Vend_setup:
  6844                           	opt stack 18
  6845                           
  6846                           ;vend.c: 382: venflags.vendset = 1;
  6847                           
  6848                           ;incstack = 0
  6849  01036E  842F               	bsf	_venflags+1,2,c
  6850                           
  6851                           ;vend.c: 383: lcd_string(vendsetup, line1);
  6852  010370  0ED8               	movlw	low _vendsetup
  6853  010372  6E24               	movwf	lcd_string@lcdstring,c
  6854  010374  0EFC               	movlw	high _vendsetup
  6855  010376  6E25               	movwf	lcd_string@lcdstring+1,c
  6856  010378  0E79               	movlw	low _line1
  6857  01037A  6EF6               	movwf	tblptrl,c
  6858  01037C                     	if	1	;There is more than 1 active tblptr byte
  6859  01037C  0EFC               	movlw	high _line1
  6860  01037E  6EF7               	movwf	tblptrh,c
  6861  010380                     	endif
  6862  010380                     	if	1	;There are 3 active tblptr bytes
  6863  010380  0E00               	movlw	low (_line1 shr (0+16))
  6864  010382  6EF8               	movwf	tblptru,c
  6865  010384                     	endif
  6866  010384  0008               	tblrd		*
  6867  010386  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6868  01038A  EC03  F088         	call	_lcd_string	;wreg free
  6869                           
  6870                           ;vend.c: 384: while(venflags.vendset)
  6871  01038E  D06F               	goto	l2133
  6872  010390                     
  6873                           ;vend.c: 385: {
  6874                           ;vend.c: 386: buttons = butindb();
  6875  010390  ECD0  F08E         	call	_butindb	;wreg free
  6876  010394  6E39               	movwf	_buttons,c	;volatile
  6877                           
  6878                           ;vend.c: 387: switch(buttons)
  6879  010396  D05B               	goto	l2131
  6880  010398  ECCF  F08C         	call	_Vend_settime	;wreg free
  6881                           
  6882                           ;vend.c: 390: lcd_string(vendsetup, line1);
  6883  01039C  0ED8               	movlw	low _vendsetup
  6884  01039E  6E24               	movwf	lcd_string@lcdstring,c
  6885  0103A0  0EFC               	movlw	high _vendsetup
  6886  0103A2  6E25               	movwf	lcd_string@lcdstring+1,c
  6887  0103A4  0E79               	movlw	low _line1
  6888  0103A6  6EF6               	movwf	tblptrl,c
  6889  0103A8                     	if	1	;There is more than 1 active tblptr byte
  6890  0103A8  0EFC               	movlw	high _line1
  6891  0103AA  6EF7               	movwf	tblptrh,c
  6892  0103AC                     	endif
  6893  0103AC                     	if	1	;There are 3 active tblptr bytes
  6894  0103AC  0E00               	movlw	low (_line1 shr (0+16))
  6895  0103AE  6EF8               	movwf	tblptru,c
  6896  0103B0                     	endif
  6897  0103B0  0008               	tblrd		*
  6898  0103B2  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6899  0103B6  EC03  F088         	call	_lcd_string	;wreg free
  6900                           
  6901                           ;vend.c: 391: break;
  6902  0103BA  D059               	goto	l2133
  6903  0103BC  ECF1  F08B         	call	_Chan_link	;wreg free
  6904                           
  6905                           ;vend.c: 393: lcd_string(vendsetup, line1);
  6906  0103C0  0ED8               	movlw	low _vendsetup
  6907  0103C2  6E24               	movwf	lcd_string@lcdstring,c
  6908  0103C4  0EFC               	movlw	high _vendsetup
  6909  0103C6  6E25               	movwf	lcd_string@lcdstring+1,c
  6910  0103C8  0E79               	movlw	low _line1
  6911  0103CA  6EF6               	movwf	tblptrl,c
  6912  0103CC                     	if	1	;There is more than 1 active tblptr byte
  6913  0103CC  0EFC               	movlw	high _line1
  6914  0103CE  6EF7               	movwf	tblptrh,c
  6915  0103D0                     	endif
  6916  0103D0                     	if	1	;There are 3 active tblptr bytes
  6917  0103D0  0E00               	movlw	low (_line1 shr (0+16))
  6918  0103D2  6EF8               	movwf	tblptru,c
  6919  0103D4                     	endif
  6920  0103D4  0008               	tblrd		*
  6921  0103D6  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6922  0103DA  EC03  F088         	call	_lcd_string	;wreg free
  6923                           
  6924                           ;vend.c: 394: break;
  6925  0103DE  D047               	goto	l2133
  6926  0103E0  ECF6  F08C         	call	_Sens_off	;wreg free
  6927                           
  6928                           ;vend.c: 396: lcd_string(vendsetup, line1);
  6929  0103E4  0ED8               	movlw	low _vendsetup
  6930  0103E6  6E24               	movwf	lcd_string@lcdstring,c
  6931  0103E8  0EFC               	movlw	high _vendsetup
  6932  0103EA  6E25               	movwf	lcd_string@lcdstring+1,c
  6933  0103EC  0E79               	movlw	low _line1
  6934  0103EE  6EF6               	movwf	tblptrl,c
  6935  0103F0                     	if	1	;There is more than 1 active tblptr byte
  6936  0103F0  0EFC               	movlw	high _line1
  6937  0103F2  6EF7               	movwf	tblptrh,c
  6938  0103F4                     	endif
  6939  0103F4                     	if	1	;There are 3 active tblptr bytes
  6940  0103F4  0E00               	movlw	low (_line1 shr (0+16))
  6941  0103F6  6EF8               	movwf	tblptru,c
  6942  0103F8                     	endif
  6943  0103F8  0008               	tblrd		*
  6944  0103FA  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6945  0103FE  EC03  F088         	call	_lcd_string	;wreg free
  6946                           
  6947                           ;vend.c: 397: break;
  6948  010402  D035               	goto	l2133
  6949  010404  ECB1  F088         	call	_Reset_settings	;wreg free
  6950                           
  6951                           ;vend.c: 399: lcd_string(vendsetup, line1);
  6952  010408  0ED8               	movlw	low _vendsetup
  6953  01040A  6E24               	movwf	lcd_string@lcdstring,c
  6954  01040C  0EFC               	movlw	high _vendsetup
  6955  01040E  6E25               	movwf	lcd_string@lcdstring+1,c
  6956  010410  0E79               	movlw	low _line1
  6957  010412  6EF6               	movwf	tblptrl,c
  6958  010414                     	if	1	;There is more than 1 active tblptr byte
  6959  010414  0EFC               	movlw	high _line1
  6960  010416  6EF7               	movwf	tblptrh,c
  6961  010418                     	endif
  6962  010418                     	if	1	;There are 3 active tblptr bytes
  6963  010418  0E00               	movlw	low (_line1 shr (0+16))
  6964  01041A  6EF8               	movwf	tblptru,c
  6965  01041C                     	endif
  6966  01041C  0008               	tblrd		*
  6967  01041E  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6968  010422  EC03  F088         	call	_lcd_string	;wreg free
  6969                           
  6970                           ;vend.c: 400: break;
  6971  010426  D023               	goto	l2133
  6972  010428                     l2137:
  6973  010428  942F               	bcf	_venflags+1,2,c
  6974                           
  6975                           ;vend.c: 403: Init_vendmem();
  6976  01042A  EC97  F086         	call	_Init_vendmem	;wreg free
  6977                           
  6978                           ;vend.c: 404: lcd_string(servmsg, line1);
  6979  01042E  0E88               	movlw	low _servmsg
  6980  010430  6E24               	movwf	lcd_string@lcdstring,c
  6981  010432  0EFC               	movlw	high _servmsg
  6982  010434  6E25               	movwf	lcd_string@lcdstring+1,c
  6983  010436  0E79               	movlw	low _line1
  6984  010438  6EF6               	movwf	tblptrl,c
  6985  01043A                     	if	1	;There is more than 1 active tblptr byte
  6986  01043A  0EFC               	movlw	high _line1
  6987  01043C  6EF7               	movwf	tblptrh,c
  6988  01043E                     	endif
  6989  01043E                     	if	1	;There are 3 active tblptr bytes
  6990  01043E  0E00               	movlw	low (_line1 shr (0+16))
  6991  010440  6EF8               	movwf	tblptru,c
  6992  010442                     	endif
  6993  010442  0008               	tblrd		*
  6994  010444  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6995  010448  EC03  F088         	call	_lcd_string	;wreg free
  6996                           
  6997                           ;vend.c: 406: }
  6998                           
  6999                           ;vend.c: 405: break;
  7000  01044C  D010               	goto	l2133
  7001  01044E                     l2131:
  7002  01044E  5039               	movf	_buttons,w,c	;volatile
  7003                           
  7004                           ; Switch size 1, requested type "space"
  7005                           ; Number of cases is 5, Range of values is 1 to 128
  7006                           ; switch strategies available:
  7007                           ; Name         Instructions Cycles
  7008                           ; simple_byte           16     9 (average)
  7009                           ;	Chosen strategy is simple_byte
  7010  010450  0A01               	xorlw	1	; case 1
  7011  010452  B4D8               	btfsc	status,2,c
  7012  010454  D7A1               	goto	l2132
  7013  010456  0A03               	xorlw	3	; case 2
  7014  010458  B4D8               	btfsc	status,2,c
  7015  01045A  D7B0               	goto	l2134
  7016  01045C  0A06               	xorlw	6	; case 4
  7017  01045E  B4D8               	btfsc	status,2,c
  7018  010460  D7BF               	goto	l2135
  7019  010462  0A0C               	xorlw	12	; case 8
  7020  010464  B4D8               	btfsc	status,2,c
  7021  010466  D7CE               	goto	l2136
  7022  010468  0A88               	xorlw	136	; case 128
  7023  01046A  B4D8               	btfsc	status,2,c
  7024  01046C  D7DD               	goto	l2137
  7025  01046E                     l2133:
  7026  01046E  A42F               	btfss	_venflags+1,2,c
  7027  010470  0012               	return	
  7028  010472  D78E               	goto	l2130
  7029  010474                     __end_of_Vend_setup:
  7030                           	opt stack 0
  7031                           tblptru	equ	0xFF8
  7032                           tblptrh	equ	0xFF7
  7033                           tblptrl	equ	0xFF6
  7034                           tablat	equ	0xFF5
  7035                           prodh	equ	0xFF4
  7036                           prodl	equ	0xFF3
  7037                           postinc0	equ	0xFEE
  7038                           wreg	equ	0xFE8
  7039                           indf2	equ	0xFDF
  7040                           fsr2h	equ	0xFDA
  7041                           fsr2l	equ	0xFD9
  7042                           status	equ	0xFD8
  7043                           
  7044 ;; *************** function _Vend_settime *****************
  7045 ;; Defined at:
  7046 ;;		line 410 in file "vend.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;		None
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;		None
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      void 
  7053 ;; Registers used:
  7054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 0/0
  7057 ;;		On exit  : 0/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;Total ram usage:        0 bytes
  7065 ;; Hardware stack levels used:    1
  7066 ;; Hardware stack levels required when called:   10
  7067 ;; This function calls:
  7068 ;;		_Read_Service
  7069 ;;		_Vend_timeset
  7070 ;;		_butindb
  7071 ;;		_get_channel
  7072 ;;		_lcd_string
  7073 ;; This function is called by:
  7074 ;;		_Vend_setup
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           	psect	text31
  7079  01199E                     __ptext31:
  7080                           	opt stack 0
  7081  01199E                     _Vend_settime:
  7082                           	opt stack 18
  7083                           
  7084                           ;vend.c: 413: lcd_string(setimemsg, line1);
  7085                           
  7086                           ;incstack = 0
  7087  01199E  0E39               	movlw	low _setimemsg
  7088  0119A0  6E24               	movwf	lcd_string@lcdstring,c
  7089  0119A2  0EFE               	movlw	high _setimemsg
  7090  0119A4  6E25               	movwf	lcd_string@lcdstring+1,c
  7091  0119A6  0E79               	movlw	low _line1
  7092  0119A8  6EF6               	movwf	tblptrl,c
  7093  0119AA                     	if	1	;There is more than 1 active tblptr byte
  7094  0119AA  0EFC               	movlw	high _line1
  7095  0119AC  6EF7               	movwf	tblptrh,c
  7096  0119AE                     	endif
  7097  0119AE                     	if	1	;There are 3 active tblptr bytes
  7098  0119AE  0E00               	movlw	low (_line1 shr (0+16))
  7099  0119B0  6EF8               	movwf	tblptru,c
  7100  0119B2                     	endif
  7101  0119B2  0008               	tblrd		*
  7102  0119B4  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7103  0119B8  EC03  F088         	call	_lcd_string	;wreg free
  7104                           
  7105                           ;vend.c: 414: buttons = butindb();
  7106  0119BC  ECD0  F08E         	call	_butindb	;wreg free
  7107  0119C0  6E39               	movwf	_buttons,c	;volatile
  7108                           
  7109                           ;vend.c: 415: venflags.settime = 1;
  7110  0119C2  8C2F               	bsf	_venflags+1,6,c
  7111                           
  7112                           ;vend.c: 417: while(venflags.settime)
  7113  0119C4  D010               	goto	l2145
  7114  0119C6                     
  7115                           ;vend.c: 418: {
  7116                           ;vend.c: 419: buttons = butindb();
  7117  0119C6  ECD0  F08E         	call	_butindb	;wreg free
  7118  0119CA  6E39               	movwf	_buttons,c	;volatile
  7119                           
  7120                           ;vend.c: 420: if(buttons != 0x00)
  7121  0119CC  5039               	movf	_buttons,w,c	;volatile
  7122  0119CE  B4D8               	btfsc	status,2,c
  7123  0119D0  D005               	goto	l2144
  7124                           
  7125                           ;vend.c: 421: {
  7126                           ;vend.c: 422: Vend_timeset(get_channel(buttons));
  7127  0119D2  5039               	movf	_buttons,w,c	;volatile
  7128  0119D4  EC99  F08F         	call	_get_channel
  7129  0119D8  ECBD  F082         	call	_Vend_timeset
  7130  0119DC                     l2144:
  7131                           
  7132                           ;vend.c: 423: }
  7133                           ;vend.c: 424: if(Read_Service() == 0x00)
  7134  0119DC  EC1B  F090         	call	_Read_Service	;wreg free
  7135  0119E0  0900               	iorlw	0
  7136  0119E2  B4D8               	btfsc	status,2,c
  7137                           
  7138                           ;vend.c: 425: {
  7139                           ;vend.c: 426: venflags.settime = 0;
  7140  0119E4  9C2F               	bcf	_venflags+1,6,c
  7141  0119E6                     l2145:
  7142  0119E6  AC2F               	btfss	_venflags+1,6,c
  7143  0119E8  0012               	return	
  7144  0119EA  D7ED               	goto	l2143
  7145  0119EC                     __end_of_Vend_settime:
  7146                           	opt stack 0
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           prodh	equ	0xFF4
  7152                           prodl	equ	0xFF3
  7153                           postinc0	equ	0xFEE
  7154                           wreg	equ	0xFE8
  7155                           indf2	equ	0xFDF
  7156                           fsr2h	equ	0xFDA
  7157                           fsr2l	equ	0xFD9
  7158                           status	equ	0xFD8
  7159                           
  7160 ;; *************** function _Vend_timeset *****************
  7161 ;; Defined at:
  7162 ;;		line 433 in file "vend.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  channel         1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  channel         1   13[BANK0 ] unsigned char 
  7167 ;;  chantime        1   12[BANK0 ] unsigned char 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Totals:         2       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;Total ram usage:        4 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    9
  7184 ;; This function calls:
  7185 ;;		_DATAEE_ReadByte
  7186 ;;		_DATAEE_WriteByte
  7187 ;;		_butindb
  7188 ;;		_displ_time
  7189 ;;		_lcd_string
  7190 ;; This function is called by:
  7191 ;;		_Vend_settime
  7192 ;; This function uses a non-reentrant model
  7193 ;;
  7194                           
  7195                           	psect	text32
  7196  01057A                     __ptext32:
  7197                           	opt stack 0
  7198  01057A                     _Vend_timeset:
  7199                           	opt stack 18
  7200                           
  7201                           ;incstack = 0
  7202                           ;Vend_timeset@channel stored from wreg
  7203  01057A  0100               	movlb	0	; () banked
  7204  01057C  6FB4               	movwf	Vend_timeset@channel& (0+255),b
  7205                           
  7206                           ;vend.c: 435: venflags.mottime = 1;
  7207  01057E  882F               	bsf	_venflags+1,4,c
  7208                           
  7209                           ;vend.c: 436: lcd_string(vendtimem, line1);
  7210  010580  0E10               	movlw	low _vendtimem
  7211  010582  6E24               	movwf	lcd_string@lcdstring,c
  7212  010584  0EFE               	movlw	high _vendtimem
  7213  010586  6E25               	movwf	lcd_string@lcdstring+1,c
  7214  010588  0E79               	movlw	low _line1
  7215  01058A  6EF6               	movwf	tblptrl,c
  7216  01058C                     	if	1	;There is more than 1 active tblptr byte
  7217  01058C  0EFC               	movlw	high _line1
  7218  01058E  6EF7               	movwf	tblptrh,c
  7219  010590                     	endif
  7220  010590                     	if	1	;There are 3 active tblptr bytes
  7221  010590  0E00               	movlw	low (_line1 shr (0+16))
  7222  010592  6EF8               	movwf	tblptru,c
  7223  010594                     	endif
  7224  010594  0008               	tblrd		*
  7225  010596  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7226  01059A  EC03  F088         	call	_lcd_string	;wreg free
  7227                           
  7228                           ;vend.c: 437: uint8_t chantime = DATAEE_ReadByte(chan1time + channel);
  7229  01059E  0E25               	movlw	low _chan1time
  7230  0105A0  6EF6               	movwf	tblptrl,c
  7231  0105A2                     	if	1	;There is more than 1 active tblptr byte
  7232  0105A2  0EFC               	movlw	high _chan1time
  7233  0105A4  6EF7               	movwf	tblptrh,c
  7234  0105A6                     	endif
  7235  0105A6                     	if	1	;There are 3 active tblptr bytes
  7236  0105A6  0E00               	movlw	low (_chan1time shr (0+16))
  7237  0105A8  6EF8               	movwf	tblptru,c
  7238  0105AA                     	endif
  7239  0105AA  0009               	tblrd		*+
  7240  0105AC  CFF5 F02C          	movff	tablat,??_Vend_timeset
  7241  0105B0  0009               	tblrd		*+
  7242  0105B2  CFF5 F02D          	movff	tablat,??_Vend_timeset+1
  7243  0105B6  0100               	movlb	0	; () banked
  7244  0105B8  51B4               	movf	Vend_timeset@channel& (0+255),w,b
  7245  0105BA  242C               	addwf	??_Vend_timeset,w,c
  7246  0105BC  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  7247  0105BE  0E00               	movlw	0
  7248  0105C0  202D               	addwfc	??_Vend_timeset+1,w,c
  7249  0105C2  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  7250  0105C4  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  7251  0105C8  0100               	movlb	0	; () banked
  7252  0105CA  6FB3               	movwf	Vend_timeset@chantime& (0+255),b
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;vend.c: 438: displ_time(chantime, channel);
  7256  0105CC  C0B4  F02A         	movff	Vend_timeset@channel,displ_time@channel
  7257  0105D0  51B3               	movf	Vend_timeset@chantime& (0+255),w,b
  7258  0105D2  EC4D  F089         	call	_displ_time
  7259                           
  7260                           ;vend.c: 439: while(venflags.mottime)
  7261  0105D6  D04E               	goto	l2154
  7262  0105D8                     
  7263                           ;vend.c: 440: {
  7264                           ;vend.c: 441: buttons = butindb();
  7265  0105D8  ECD0  F08E         	call	_butindb	;wreg free
  7266  0105DC  6E39               	movwf	_buttons,c	;volatile
  7267                           
  7268                           ;vend.c: 442: switch(buttons)
  7269  0105DE  D040               	goto	l2152
  7270  0105E0  0100               	movlb	0	; () banked
  7271  0105E2  2BB3               	incf	Vend_timeset@chantime& (0+255),f,b
  7272                           
  7273                           ; BSR set to: 0
  7274                           ;vend.c: 445: DATAEE_WriteByte(chan1time + channel, chantime);
  7275  0105E4  0E25               	movlw	low _chan1time
  7276  0105E6  6EF6               	movwf	tblptrl,c
  7277  0105E8                     	if	1	;There is more than 1 active tblptr byte
  7278  0105E8  0EFC               	movlw	high _chan1time
  7279  0105EA  6EF7               	movwf	tblptrh,c
  7280  0105EC                     	endif
  7281  0105EC                     	if	1	;There are 3 active tblptr bytes
  7282  0105EC  0E00               	movlw	low (_chan1time shr (0+16))
  7283  0105EE  6EF8               	movwf	tblptru,c
  7284  0105F0                     	endif
  7285  0105F0  0009               	tblrd		*+
  7286  0105F2  CFF5 F02C          	movff	tablat,??_Vend_timeset
  7287  0105F6  0009               	tblrd		*+
  7288  0105F8  CFF5 F02D          	movff	tablat,??_Vend_timeset+1
  7289  0105FC  51B4               	movf	Vend_timeset@channel& (0+255),w,b
  7290  0105FE  242C               	addwf	??_Vend_timeset,w,c
  7291  010600  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  7292  010602  0E00               	movlw	0
  7293  010604  202D               	addwfc	??_Vend_timeset+1,w,c
  7294  010606  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  7295  010608  C0B3  F01F         	movff	Vend_timeset@chantime,DATAEE_WriteByte@bData
  7296  01060C  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  7297                           
  7298                           ;vend.c: 446: displ_time(chantime, channel);
  7299  010610  C0B4  F02A         	movff	Vend_timeset@channel,displ_time@channel
  7300  010614  0100               	movlb	0	; () banked
  7301  010616  51B3               	movf	Vend_timeset@chantime& (0+255),w,b
  7302  010618  EC4D  F089         	call	_displ_time
  7303                           
  7304                           ;vend.c: 447: break;
  7305  01061C  D02B               	goto	l2154
  7306  01061E  0100               	movlb	0	; () banked
  7307  010620  07B3               	decf	Vend_timeset@chantime& (0+255),f,b
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;vend.c: 449: DATAEE_WriteByte(chan1time + channel, chantime);
  7311  010622  0E25               	movlw	low _chan1time
  7312  010624  6EF6               	movwf	tblptrl,c
  7313  010626                     	if	1	;There is more than 1 active tblptr byte
  7314  010626  0EFC               	movlw	high _chan1time
  7315  010628  6EF7               	movwf	tblptrh,c
  7316  01062A                     	endif
  7317  01062A                     	if	1	;There are 3 active tblptr bytes
  7318  01062A  0E00               	movlw	low (_chan1time shr (0+16))
  7319  01062C  6EF8               	movwf	tblptru,c
  7320  01062E                     	endif
  7321  01062E  0009               	tblrd		*+
  7322  010630  CFF5 F02C          	movff	tablat,??_Vend_timeset
  7323  010634  0009               	tblrd		*+
  7324  010636  CFF5 F02D          	movff	tablat,??_Vend_timeset+1
  7325  01063A  51B4               	movf	Vend_timeset@channel& (0+255),w,b
  7326  01063C  242C               	addwf	??_Vend_timeset,w,c
  7327  01063E  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  7328  010640  0E00               	movlw	0
  7329  010642  202D               	addwfc	??_Vend_timeset+1,w,c
  7330  010644  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  7331  010646  C0B3  F01F         	movff	Vend_timeset@chantime,DATAEE_WriteByte@bData
  7332  01064A  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  7333                           
  7334                           ;vend.c: 450: displ_time(chantime, channel);
  7335  01064E  C0B4  F02A         	movff	Vend_timeset@channel,displ_time@channel
  7336  010652  0100               	movlb	0	; () banked
  7337  010654  51B3               	movf	Vend_timeset@chantime& (0+255),w,b
  7338  010656  EC4D  F089         	call	_displ_time
  7339                           
  7340                           ;vend.c: 451: break;
  7341  01065A  D00C               	goto	l2154
  7342  01065C                     l2156:
  7343  01065C  982F               	bcf	_venflags+1,4,c
  7344                           
  7345                           ;vend.c: 453: }
  7346  01065E  D00A               	goto	l2154
  7347  010660                     l2152:
  7348  010660  5039               	movf	_buttons,w,c	;volatile
  7349                           
  7350                           ; Switch size 1, requested type "space"
  7351                           ; Number of cases is 3, Range of values is 1 to 128
  7352                           ; switch strategies available:
  7353                           ; Name         Instructions Cycles
  7354                           ; simple_byte           10     6 (average)
  7355                           ;	Chosen strategy is simple_byte
  7356  010662  0A01               	xorlw	1	; case 1
  7357  010664  B4D8               	btfsc	status,2,c
  7358  010666  D7BC               	goto	l2153
  7359  010668  0A03               	xorlw	3	; case 2
  7360  01066A  B4D8               	btfsc	status,2,c
  7361  01066C  D7D8               	goto	l2155
  7362  01066E  0A82               	xorlw	130	; case 128
  7363  010670  B4D8               	btfsc	status,2,c
  7364  010672  D7F4               	goto	l2156
  7365  010674                     l2154:
  7366  010674  A82F               	btfss	_venflags+1,4,c
  7367  010676  0012               	return	
  7368  010678  D7AF               	goto	l2151
  7369  01067A                     __end_of_Vend_timeset:
  7370                           	opt stack 0
  7371                           tblptru	equ	0xFF8
  7372                           tblptrh	equ	0xFF7
  7373                           tblptrl	equ	0xFF6
  7374                           tablat	equ	0xFF5
  7375                           prodh	equ	0xFF4
  7376                           prodl	equ	0xFF3
  7377                           postinc0	equ	0xFEE
  7378                           wreg	equ	0xFE8
  7379                           indf2	equ	0xFDF
  7380                           fsr2h	equ	0xFDA
  7381                           fsr2l	equ	0xFD9
  7382                           status	equ	0xFD8
  7383                           
  7384 ;; *************** function _displ_time *****************
  7385 ;; Defined at:
  7386 ;;		line 97 in file "lcd.c"
  7387 ;; Parameters:    Size  Location     Type
  7388 ;;  motortime       1    wreg     unsigned char 
  7389 ;;  channel         1   31[COMRAM] unsigned char 
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;  motortime       1   32[COMRAM] unsigned char 
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7401 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;Total ram usage:        2 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    8
  7408 ;; This function calls:
  7409 ;;		_displ_hex
  7410 ;;		_lcd_string
  7411 ;;		_lcd_writeC
  7412 ;; This function is called by:
  7413 ;;		_Vend_timeset
  7414 ;; This function uses a non-reentrant model
  7415 ;;
  7416                           
  7417                           	psect	text33
  7418  01129A                     __ptext33:
  7419                           	opt stack 0
  7420  01129A                     _displ_time:
  7421                           	opt stack 18
  7422                           
  7423                           ;incstack = 0
  7424                           ;displ_time@motortime stored from wreg
  7425  01129A  6E2B               	movwf	displ_time@motortime,c
  7426                           
  7427                           ;lcd.c: 99: lcd_string(clrline, line3);
  7428  01129C  0E2A               	movlw	low _clrline
  7429  01129E  6E24               	movwf	lcd_string@lcdstring,c
  7430  0112A0  0EFF               	movlw	high _clrline
  7431  0112A2  6E25               	movwf	lcd_string@lcdstring+1,c
  7432  0112A4  0E77               	movlw	low _line3
  7433  0112A6  6EF6               	movwf	tblptrl,c
  7434  0112A8                     	if	1	;There is more than 1 active tblptr byte
  7435  0112A8  0EFC               	movlw	high _line3
  7436  0112AA  6EF7               	movwf	tblptrh,c
  7437  0112AC                     	endif
  7438  0112AC                     	if	1	;There are 3 active tblptr bytes
  7439  0112AC  0E00               	movlw	low (_line3 shr (0+16))
  7440  0112AE  6EF8               	movwf	tblptru,c
  7441  0112B0                     	endif
  7442  0112B0  0008               	tblrd		*
  7443  0112B2  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7444  0112B6  EC03  F088         	call	_lcd_string	;wreg free
  7445                           
  7446                           ;lcd.c: 100: lcd_string(clrline, line4);
  7447  0112BA  0E2A               	movlw	low _clrline
  7448  0112BC  6E24               	movwf	lcd_string@lcdstring,c
  7449  0112BE  0EFF               	movlw	high _clrline
  7450  0112C0  6E25               	movwf	lcd_string@lcdstring+1,c
  7451  0112C2  0E76               	movlw	low _line4
  7452  0112C4  6EF6               	movwf	tblptrl,c
  7453  0112C6                     	if	1	;There is more than 1 active tblptr byte
  7454  0112C6  0EFC               	movlw	high _line4
  7455  0112C8  6EF7               	movwf	tblptrh,c
  7456  0112CA                     	endif
  7457  0112CA                     	if	1	;There are 3 active tblptr bytes
  7458  0112CA  0E00               	movlw	low (_line4 shr (0+16))
  7459  0112CC  6EF8               	movwf	tblptru,c
  7460  0112CE                     	endif
  7461  0112CE  0008               	tblrd		*
  7462  0112D0  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7463  0112D4  EC03  F088         	call	_lcd_string	;wreg free
  7464                           
  7465                           ;lcd.c: 101: lcd_string(chanmsg, line3);
  7466  0112D8  0E8D               	movlw	low _chanmsg
  7467  0112DA  6E24               	movwf	lcd_string@lcdstring,c
  7468  0112DC  0EFF               	movlw	high _chanmsg
  7469  0112DE  6E25               	movwf	lcd_string@lcdstring+1,c
  7470  0112E0  0E77               	movlw	low _line3
  7471  0112E2  6EF6               	movwf	tblptrl,c
  7472  0112E4                     	if	1	;There is more than 1 active tblptr byte
  7473  0112E4  0EFC               	movlw	high _line3
  7474  0112E6  6EF7               	movwf	tblptrh,c
  7475  0112E8                     	endif
  7476  0112E8                     	if	1	;There are 3 active tblptr bytes
  7477  0112E8  0E00               	movlw	low (_line3 shr (0+16))
  7478  0112EA  6EF8               	movwf	tblptru,c
  7479  0112EC                     	endif
  7480  0112EC  0008               	tblrd		*
  7481  0112EE  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7482  0112F2  EC03  F088         	call	_lcd_string	;wreg free
  7483                           
  7484                           ;lcd.c: 102: lcd_writeC(channel++ | 0x30);
  7485  0112F6  502A               	movf	displ_time@channel,w,c
  7486  0112F8  0930               	iorlw	48
  7487  0112FA  ECBE  F08B         	call	_lcd_writeC
  7488  0112FE  2A2A               	incf	displ_time@channel,f,c
  7489                           
  7490                           ;lcd.c: 103: lcd_string(timemsg, line4);
  7491  011300  0E3F               	movlw	low _timemsg
  7492  011302  6E24               	movwf	lcd_string@lcdstring,c
  7493  011304  0EFF               	movlw	high _timemsg
  7494  011306  6E25               	movwf	lcd_string@lcdstring+1,c
  7495  011308  0E76               	movlw	low _line4
  7496  01130A  6EF6               	movwf	tblptrl,c
  7497  01130C                     	if	1	;There is more than 1 active tblptr byte
  7498  01130C  0EFC               	movlw	high _line4
  7499  01130E  6EF7               	movwf	tblptrh,c
  7500  011310                     	endif
  7501  011310                     	if	1	;There are 3 active tblptr bytes
  7502  011310  0E00               	movlw	low (_line4 shr (0+16))
  7503  011312  6EF8               	movwf	tblptru,c
  7504  011314                     	endif
  7505  011314  0008               	tblrd		*
  7506  011316  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7507  01131A  EC03  F088         	call	_lcd_string	;wreg free
  7508                           
  7509                           ;lcd.c: 104: displ_hex((uint8_t) motortime);
  7510  01131E  502B               	movf	displ_time@motortime,w,c
  7511  011320  6E27               	movwf	displ_hex@hexnum,c
  7512  011322  6A28               	clrf	displ_hex@hexnum+1,c
  7513  011324  6A29               	clrf	displ_hex@hexnum+2,c
  7514  011326  EC4E  F087         	call	_displ_hex	;wreg free
  7515  01132A  0012               	return		;funcret
  7516  01132C                     __end_of_displ_time:
  7517                           	opt stack 0
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           postinc0	equ	0xFEE
  7525                           wreg	equ	0xFE8
  7526                           indf2	equ	0xFDF
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531 ;; *************** function _Sens_off *****************
  7532 ;; Defined at:
  7533 ;;		line 512 in file "vend.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;                  1    wreg      void 
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;Total ram usage:        0 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:   10
  7554 ;; This function calls:
  7555 ;;		_Read_Service
  7556 ;;		_butindb
  7557 ;;		_get_channel
  7558 ;;		_lcd_string
  7559 ;;		_off_sens
  7560 ;; This function is called by:
  7561 ;;		_Vend_setup
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           	psect	text34
  7566  0119EC                     __ptext34:
  7567                           	opt stack 0
  7568  0119EC                     _Sens_off:
  7569                           	opt stack 18
  7570                           
  7571                           ;vend.c: 514: venflags.nosense = 1;
  7572                           
  7573                           ;incstack = 0
  7574  0119EC  8A2F               	bsf	_venflags+1,5,c
  7575                           
  7576                           ;vend.c: 515: lcd_string(setimemsg, line1);
  7577  0119EE  0E39               	movlw	low _setimemsg
  7578  0119F0  6E24               	movwf	lcd_string@lcdstring,c
  7579  0119F2  0EFE               	movlw	high _setimemsg
  7580  0119F4  6E25               	movwf	lcd_string@lcdstring+1,c
  7581  0119F6  0E79               	movlw	low _line1
  7582  0119F8  6EF6               	movwf	tblptrl,c
  7583  0119FA                     	if	1	;There is more than 1 active tblptr byte
  7584  0119FA  0EFC               	movlw	high _line1
  7585  0119FC  6EF7               	movwf	tblptrh,c
  7586  0119FE                     	endif
  7587  0119FE                     	if	1	;There are 3 active tblptr bytes
  7588  0119FE  0E00               	movlw	low (_line1 shr (0+16))
  7589  011A00  6EF8               	movwf	tblptru,c
  7590  011A02                     	endif
  7591  011A02  0008               	tblrd		*
  7592  011A04  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7593  011A08  EC03  F088         	call	_lcd_string	;wreg free
  7594                           
  7595                           ;vend.c: 516: buttons = butindb();
  7596  011A0C  ECD0  F08E         	call	_butindb	;wreg free
  7597  011A10  6E39               	movwf	_buttons,c	;volatile
  7598                           
  7599                           ;vend.c: 517: while(venflags.nosense)
  7600  011A12  D010               	goto	l2184
  7601  011A14                     
  7602                           ;vend.c: 518: {
  7603                           ;vend.c: 519: buttons = butindb();
  7604  011A14  ECD0  F08E         	call	_butindb	;wreg free
  7605  011A18  6E39               	movwf	_buttons,c	;volatile
  7606                           
  7607                           ;vend.c: 520: if(buttons != 0x00)
  7608  011A1A  5039               	movf	_buttons,w,c	;volatile
  7609  011A1C  B4D8               	btfsc	status,2,c
  7610  011A1E  D005               	goto	l2183
  7611                           
  7612                           ;vend.c: 521: {
  7613                           ;vend.c: 522: off_sens(get_channel(buttons));
  7614  011A20  5039               	movf	_buttons,w,c	;volatile
  7615  011A22  EC99  F08F         	call	_get_channel
  7616  011A26  EC33  F084         	call	_off_sens
  7617  011A2A                     l2183:
  7618                           
  7619                           ;vend.c: 523: }
  7620                           ;vend.c: 524: if(Read_Service() == 0x00)
  7621  011A2A  EC1B  F090         	call	_Read_Service	;wreg free
  7622  011A2E  0900               	iorlw	0
  7623  011A30  B4D8               	btfsc	status,2,c
  7624                           
  7625                           ;vend.c: 525: {
  7626                           ;vend.c: 526: venflags.nosense = 0;
  7627  011A32  9A2F               	bcf	_venflags+1,5,c
  7628  011A34                     l2184:
  7629  011A34  AA2F               	btfss	_venflags+1,5,c
  7630  011A36  0012               	return	
  7631  011A38  D7ED               	goto	l2182
  7632  011A3A                     __end_of_Sens_off:
  7633                           	opt stack 0
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           postinc0	equ	0xFEE
  7641                           wreg	equ	0xFE8
  7642                           indf2	equ	0xFDF
  7643                           fsr2h	equ	0xFDA
  7644                           fsr2l	equ	0xFD9
  7645                           status	equ	0xFD8
  7646                           
  7647 ;; *************** function _off_sens *****************
  7648 ;; Defined at:
  7649 ;;		line 533 in file "vend.c"
  7650 ;; Parameters:    Size  Location     Type
  7651 ;;  channel         1    wreg     unsigned char 
  7652 ;; Auto vars:     Size  Location     Type
  7653 ;;  channel         1    0[BANK0 ] unsigned char 
  7654 ;;  senseflags      1    2[BANK0 ] unsigned char 
  7655 ;;  chanbit         1    1[BANK0 ] unsigned char 
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      void 
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;Total ram usage:        3 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    9
  7672 ;; This function calls:
  7673 ;;		_DATAEE_ReadByte
  7674 ;;		_DATAEE_WriteByte
  7675 ;;		_butindb
  7676 ;;		_displ_sflags
  7677 ;; This function is called by:
  7678 ;;		_Sens_off
  7679 ;; This function uses a non-reentrant model
  7680 ;;
  7681                           
  7682                           	psect	text35
  7683  010866                     __ptext35:
  7684                           	opt stack 0
  7685  010866                     _off_sens:
  7686                           	opt stack 18
  7687                           
  7688                           ;incstack = 0
  7689                           ;off_sens@channel stored from wreg
  7690  010866  0100               	movlb	0	; () banked
  7691  010868  6FA7               	movwf	off_sens@channel& (0+255),b
  7692                           
  7693                           ;vend.c: 535: uint8_t chanbit = buttons;
  7694  01086A  C039  F0A8         	movff	_buttons,off_sens@chanbit	;volatile
  7695                           
  7696                           ;vend.c: 536: venflags.sensno = 1;
  7697  01086E  8E2F               	bsf	_venflags+1,7,c
  7698                           
  7699                           ;vend.c: 537: uint8_t senseflags = DATAEE_ReadByte(sensorflags);
  7700  010870  0E27               	movlw	low _sensorflags
  7701  010872  6EF6               	movwf	tblptrl,c
  7702  010874                     	if	1	;There is more than 1 active tblptr byte
  7703  010874  0EFC               	movlw	high _sensorflags
  7704  010876  6EF7               	movwf	tblptrh,c
  7705  010878                     	endif
  7706  010878                     	if	1	;There are 3 active tblptr bytes
  7707  010878  0E00               	movlw	low (_sensorflags shr (0+16))
  7708  01087A  6EF8               	movwf	tblptru,c
  7709  01087C                     	endif
  7710  01087C  0009               	tblrd		*+
  7711  01087E  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  7712  010882  000A               	tblrd		*-
  7713  010884  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  7714  010888  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  7715  01088C  0100               	movlb	0	; () banked
  7716  01088E  6FA9               	movwf	off_sens@senseflags& (0+255),b
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;vend.c: 538: displ_sflags(senseflags, channel, chanbit);
  7720  010890  C0A7  F029         	movff	off_sens@channel,displ_sflags@chanel
  7721  010894  C0A8  F02A         	movff	off_sens@chanbit,displ_sflags@chanbit
  7722  010898  51A9               	movf	off_sens@senseflags& (0+255),w,b
  7723  01089A  ECF3  F086         	call	_displ_sflags
  7724                           
  7725                           ;vend.c: 540: while(venflags.sensno)
  7726  01089E  D04B               	goto	l2193
  7727  0108A0                     
  7728                           ;vend.c: 541: {
  7729                           ;vend.c: 542: buttons = butindb();
  7730  0108A0  ECD0  F08E         	call	_butindb	;wreg free
  7731  0108A4  6E39               	movwf	_buttons,c	;volatile
  7732                           
  7733                           ;vend.c: 543: switch(buttons)
  7734  0108A6  D03D               	goto	l2191
  7735  0108A8  0100               	movlb	0	; () banked
  7736  0108AA  51A8               	movf	off_sens@chanbit& (0+255),w,b
  7737  0108AC  0AFF               	xorlw	255
  7738  0108AE  15A9               	andwf	off_sens@senseflags& (0+255),w,b
  7739  0108B0  6FA9               	movwf	off_sens@senseflags& (0+255),b
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;vend.c: 547: DATAEE_WriteByte(sensorflags, senseflags);
  7743  0108B2  0E27               	movlw	low _sensorflags
  7744  0108B4  6EF6               	movwf	tblptrl,c
  7745  0108B6                     	if	1	;There is more than 1 active tblptr byte
  7746  0108B6  0EFC               	movlw	high _sensorflags
  7747  0108B8  6EF7               	movwf	tblptrh,c
  7748  0108BA                     	endif
  7749  0108BA                     	if	1	;There are 3 active tblptr bytes
  7750  0108BA  0E00               	movlw	low (_sensorflags shr (0+16))
  7751  0108BC  6EF8               	movwf	tblptru,c
  7752  0108BE                     	endif
  7753  0108BE  0009               	tblrd		*+
  7754  0108C0  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  7755  0108C4  000A               	tblrd		*-
  7756  0108C6  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  7757  0108CA  C0A9  F01F         	movff	off_sens@senseflags,DATAEE_WriteByte@bData
  7758  0108CE  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  7759                           
  7760                           ;vend.c: 548: displ_sflags(senseflags, channel, chanbit);
  7761  0108D2  C0A7  F029         	movff	off_sens@channel,displ_sflags@chanel
  7762  0108D6  C0A8  F02A         	movff	off_sens@chanbit,displ_sflags@chanbit
  7763  0108DA  0100               	movlb	0	; () banked
  7764  0108DC  51A9               	movf	off_sens@senseflags& (0+255),w,b
  7765  0108DE  ECF3  F086         	call	_displ_sflags
  7766                           
  7767                           ;vend.c: 549: break;
  7768  0108E2  D029               	goto	l2193
  7769  0108E4  0100               	movlb	0	; () banked
  7770  0108E6  51A9               	movf	off_sens@senseflags& (0+255),w,b
  7771  0108E8  11A8               	iorwf	off_sens@chanbit& (0+255),w,b
  7772  0108EA  6FA9               	movwf	off_sens@senseflags& (0+255),b
  7773                           
  7774                           ; BSR set to: 0
  7775                           ;vend.c: 552: DATAEE_WriteByte(sensorflags, senseflags);
  7776  0108EC  0E27               	movlw	low _sensorflags
  7777  0108EE  6EF6               	movwf	tblptrl,c
  7778  0108F0                     	if	1	;There is more than 1 active tblptr byte
  7779  0108F0  0EFC               	movlw	high _sensorflags
  7780  0108F2  6EF7               	movwf	tblptrh,c
  7781  0108F4                     	endif
  7782  0108F4                     	if	1	;There are 3 active tblptr bytes
  7783  0108F4  0E00               	movlw	low (_sensorflags shr (0+16))
  7784  0108F6  6EF8               	movwf	tblptru,c
  7785  0108F8                     	endif
  7786  0108F8  0009               	tblrd		*+
  7787  0108FA  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  7788  0108FE  000A               	tblrd		*-
  7789  010900  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  7790  010904  C0A9  F01F         	movff	off_sens@senseflags,DATAEE_WriteByte@bData
  7791  010908  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  7792                           
  7793                           ;vend.c: 553: displ_sflags(senseflags, channel, chanbit);
  7794  01090C  C0A7  F029         	movff	off_sens@channel,displ_sflags@chanel
  7795  010910  C0A8  F02A         	movff	off_sens@chanbit,displ_sflags@chanbit
  7796  010914  0100               	movlb	0	; () banked
  7797  010916  51A9               	movf	off_sens@senseflags& (0+255),w,b
  7798  010918  ECF3  F086         	call	_displ_sflags
  7799                           
  7800                           ;vend.c: 554: break;
  7801  01091C  D00C               	goto	l2193
  7802  01091E                     l2195:
  7803  01091E  9E2F               	bcf	_venflags+1,7,c
  7804                           
  7805                           ;vend.c: 557: }
  7806                           
  7807                           ;vend.c: 556: break;
  7808  010920  D00A               	goto	l2193
  7809  010922                     l2191:
  7810  010922  5039               	movf	_buttons,w,c	;volatile
  7811                           
  7812                           ; Switch size 1, requested type "space"
  7813                           ; Number of cases is 3, Range of values is 1 to 128
  7814                           ; switch strategies available:
  7815                           ; Name         Instructions Cycles
  7816                           ; simple_byte           10     6 (average)
  7817                           ;	Chosen strategy is simple_byte
  7818  010924  0A01               	xorlw	1	; case 1
  7819  010926  B4D8               	btfsc	status,2,c
  7820  010928  D7BF               	goto	l2192
  7821  01092A  0A03               	xorlw	3	; case 2
  7822  01092C  B4D8               	btfsc	status,2,c
  7823  01092E  D7DA               	goto	l2194
  7824  010930  0A82               	xorlw	130	; case 128
  7825  010932  B4D8               	btfsc	status,2,c
  7826  010934  D7F4               	goto	l2195
  7827  010936                     l2193:
  7828  010936  AE2F               	btfss	_venflags+1,7,c
  7829  010938  0012               	return	
  7830  01093A  D7B2               	goto	l2190
  7831  01093C                     __end_of_off_sens:
  7832                           	opt stack 0
  7833                           tblptru	equ	0xFF8
  7834                           tblptrh	equ	0xFF7
  7835                           tblptrl	equ	0xFF6
  7836                           tablat	equ	0xFF5
  7837                           prodh	equ	0xFF4
  7838                           prodl	equ	0xFF3
  7839                           postinc0	equ	0xFEE
  7840                           wreg	equ	0xFE8
  7841                           indf2	equ	0xFDF
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846 ;; *************** function _displ_sflags *****************
  7847 ;; Defined at:
  7848 ;;		line 78 in file "lcd.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  senseflags      1    wreg     unsigned char 
  7851 ;;  chanel          1   30[COMRAM] unsigned char 
  7852 ;;  chanbit         1   31[COMRAM] unsigned char 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  senseflags      1   32[COMRAM] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      void 
  7857 ;; Registers used:
  7858 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;Total ram usage:        3 bytes
  7869 ;; Hardware stack levels used:    1
  7870 ;; Hardware stack levels required when called:    8
  7871 ;; This function calls:
  7872 ;;		_lcd_string
  7873 ;;		_lcd_writeC
  7874 ;; This function is called by:
  7875 ;;		_off_sens
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           	psect	text36
  7880  010DE6                     __ptext36:
  7881                           	opt stack 0
  7882  010DE6                     _displ_sflags:
  7883                           	opt stack 18
  7884                           
  7885                           ;incstack = 0
  7886                           ;displ_sflags@senseflags stored from wreg
  7887  010DE6  6E2B               	movwf	displ_sflags@senseflags,c
  7888                           
  7889                           ;lcd.c: 81: lcd_string(chanmsg, line1);
  7890  010DE8  0E8D               	movlw	low _chanmsg
  7891  010DEA  6E24               	movwf	lcd_string@lcdstring,c
  7892  010DEC  0EFF               	movlw	high _chanmsg
  7893  010DEE  6E25               	movwf	lcd_string@lcdstring+1,c
  7894  010DF0  0E79               	movlw	low _line1
  7895  010DF2  6EF6               	movwf	tblptrl,c
  7896  010DF4                     	if	1	;There is more than 1 active tblptr byte
  7897  010DF4  0EFC               	movlw	high _line1
  7898  010DF6  6EF7               	movwf	tblptrh,c
  7899  010DF8                     	endif
  7900  010DF8                     	if	1	;There are 3 active tblptr bytes
  7901  010DF8  0E00               	movlw	low (_line1 shr (0+16))
  7902  010DFA  6EF8               	movwf	tblptru,c
  7903  010DFC                     	endif
  7904  010DFC  0008               	tblrd		*
  7905  010DFE  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7906  010E02  EC03  F088         	call	_lcd_string	;wreg free
  7907                           
  7908                           ;lcd.c: 82: lcd_writeC(chanel++ | 0x30);
  7909  010E06  5029               	movf	displ_sflags@chanel,w,c
  7910  010E08  0930               	iorlw	48
  7911  010E0A  ECBE  F08B         	call	_lcd_writeC
  7912  010E0E  2A29               	incf	displ_sflags@chanel,f,c
  7913                           
  7914                           ;lcd.c: 83: lcd_string(sensmsg, line2);
  7915  010E10  0EA5               	movlw	low _sensmsg
  7916  010E12  6E24               	movwf	lcd_string@lcdstring,c
  7917  010E14  0EFF               	movlw	high _sensmsg
  7918  010E16  6E25               	movwf	lcd_string@lcdstring+1,c
  7919  010E18  0E78               	movlw	low _line2
  7920  010E1A  6EF6               	movwf	tblptrl,c
  7921  010E1C                     	if	1	;There is more than 1 active tblptr byte
  7922  010E1C  0EFC               	movlw	high _line2
  7923  010E1E  6EF7               	movwf	tblptrh,c
  7924  010E20                     	endif
  7925  010E20                     	if	1	;There are 3 active tblptr bytes
  7926  010E20  0E00               	movlw	low (_line2 shr (0+16))
  7927  010E22  6EF8               	movwf	tblptru,c
  7928  010E24                     	endif
  7929  010E24  0008               	tblrd		*
  7930  010E26  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7931  010E2A  EC03  F088         	call	_lcd_string	;wreg free
  7932                           
  7933                           ;lcd.c: 84: lcd_string(sensoffmsg, line3);
  7934  010E2E  0EEF               	movlw	low _sensoffmsg
  7935  010E30  6E24               	movwf	lcd_string@lcdstring,c
  7936  010E32  0EFE               	movlw	high _sensoffmsg
  7937  010E34  6E25               	movwf	lcd_string@lcdstring+1,c
  7938  010E36  0E77               	movlw	low _line3
  7939  010E38  6EF6               	movwf	tblptrl,c
  7940  010E3A                     	if	1	;There is more than 1 active tblptr byte
  7941  010E3A  0EFC               	movlw	high _line3
  7942  010E3C  6EF7               	movwf	tblptrh,c
  7943  010E3E                     	endif
  7944  010E3E                     	if	1	;There are 3 active tblptr bytes
  7945  010E3E  0E00               	movlw	low (_line3 shr (0+16))
  7946  010E40  6EF8               	movwf	tblptru,c
  7947  010E42                     	endif
  7948  010E42  0008               	tblrd		*
  7949  010E44  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7950  010E48  EC03  F088         	call	_lcd_string	;wreg free
  7951                           
  7952                           ;lcd.c: 86: if(senseflags && chanbit)
  7953  010E4C  502B               	movf	displ_sflags@senseflags,w,c
  7954  010E4E  B4D8               	btfsc	status,2,c
  7955  010E50  D014               	goto	l1477
  7956  010E52  502A               	movf	displ_sflags@chanbit,w,c
  7957  010E54  B4D8               	btfsc	status,2,c
  7958  010E56  D011               	goto	l1477
  7959                           
  7960                           ;lcd.c: 87: {
  7961                           ;lcd.c: 88: lcd_string(disabled, line2 + 10);
  7962  010E58  0EBA               	movlw	low _disabled
  7963  010E5A  6E24               	movwf	lcd_string@lcdstring,c
  7964  010E5C  0EFF               	movlw	high _disabled
  7965  010E5E  6E25               	movwf	lcd_string@lcdstring+1,c
  7966  010E60  0E78               	movlw	low _line2
  7967  010E62  6EF6               	movwf	tblptrl,c
  7968  010E64                     	if	1	;There is more than 1 active tblptr byte
  7969  010E64  0EFC               	movlw	high _line2
  7970  010E66  6EF7               	movwf	tblptrh,c
  7971  010E68                     	endif
  7972  010E68                     	if	1	;There are 3 active tblptr bytes
  7973  010E68  0E00               	movlw	low (_line2 shr (0+16))
  7974  010E6A  6EF8               	movwf	tblptru,c
  7975  010E6C                     	endif
  7976  010E6C  0008               	tblrd		*
  7977  010E6E  50F5               	movf	tablat,w,c
  7978  010E70  0F0A               	addlw	10
  7979  010E72  6E26               	movwf	lcd_string@lcdline,c
  7980  010E74  EC03  F088         	call	_lcd_string	;wreg free
  7981                           
  7982                           ;lcd.c: 89: }
  7983  010E78  0012               	return	
  7984  010E7A                     l1477:
  7985                           
  7986                           ;lcd.c: 90: else
  7987                           ;lcd.c: 91: {
  7988                           ;lcd.c: 92: lcd_string(enabled, line2 + 10);
  7989  010E7A  0EC4               	movlw	low _enabled
  7990  010E7C  6E24               	movwf	lcd_string@lcdstring,c
  7991  010E7E  0EFF               	movlw	high _enabled
  7992  010E80  6E25               	movwf	lcd_string@lcdstring+1,c
  7993  010E82  0E78               	movlw	low _line2
  7994  010E84  6EF6               	movwf	tblptrl,c
  7995  010E86                     	if	1	;There is more than 1 active tblptr byte
  7996  010E86  0EFC               	movlw	high _line2
  7997  010E88  6EF7               	movwf	tblptrh,c
  7998  010E8A                     	endif
  7999  010E8A                     	if	1	;There are 3 active tblptr bytes
  8000  010E8A  0E00               	movlw	low (_line2 shr (0+16))
  8001  010E8C  6EF8               	movwf	tblptru,c
  8002  010E8E                     	endif
  8003  010E8E  0008               	tblrd		*
  8004  010E90  50F5               	movf	tablat,w,c
  8005  010E92  0F0A               	addlw	10
  8006  010E94  6E26               	movwf	lcd_string@lcdline,c
  8007  010E96  EC03  F088         	call	_lcd_string	;wreg free
  8008  010E9A  0012               	return	
  8009  010E9C                     __end_of_displ_sflags:
  8010                           	opt stack 0
  8011                           tblptru	equ	0xFF8
  8012                           tblptrh	equ	0xFF7
  8013                           tblptrl	equ	0xFF6
  8014                           tablat	equ	0xFF5
  8015                           prodh	equ	0xFF4
  8016                           prodl	equ	0xFF3
  8017                           postinc0	equ	0xFEE
  8018                           wreg	equ	0xFE8
  8019                           indf2	equ	0xFDF
  8020                           fsr2h	equ	0xFDA
  8021                           fsr2l	equ	0xFD9
  8022                           status	equ	0xFD8
  8023                           
  8024 ;; *************** function _Reset_settings *****************
  8025 ;; Defined at:
  8026 ;;		line 561 in file "vend.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;		None
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  chanlinkbits    2   32[COMRAM] unsigned int 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8035 ;; Tracked objects:
  8036 ;;		On entry : 0/0
  8037 ;;		On exit  : 0/0
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8042 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;Total ram usage:        4 bytes
  8045 ;; Hardware stack levels used:    1
  8046 ;; Hardware stack levels required when called:    8
  8047 ;; This function calls:
  8048 ;;		_DATAEE_WriteByte
  8049 ;;		_lcd_string
  8050 ;; This function is called by:
  8051 ;;		_Vend_setup
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text37
  8056  011162                     __ptext37:
  8057                           	opt stack 0
  8058  011162                     _Reset_settings:
  8059                           	opt stack 20
  8060                           
  8061                           ;vend.c: 563: lcd_string(chanresetmsg, line1);
  8062                           
  8063                           ;incstack = 0
  8064  011162  0ECF               	movlw	low _chanresetmsg
  8065  011164  6E24               	movwf	lcd_string@lcdstring,c
  8066  011166  0EFE               	movlw	high _chanresetmsg
  8067  011168  6E25               	movwf	lcd_string@lcdstring+1,c
  8068  01116A  0E79               	movlw	low _line1
  8069  01116C  6EF6               	movwf	tblptrl,c
  8070  01116E                     	if	1	;There is more than 1 active tblptr byte
  8071  01116E  0EFC               	movlw	high _line1
  8072  011170  6EF7               	movwf	tblptrh,c
  8073  011172                     	endif
  8074  011172                     	if	1	;There are 3 active tblptr bytes
  8075  011172  0E00               	movlw	low (_line1 shr (0+16))
  8076  011174  6EF8               	movwf	tblptru,c
  8077  011176                     	endif
  8078  011176  0008               	tblrd		*
  8079  011178  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8080  01117C  EC03  F088         	call	_lcd_string	;wreg free
  8081                           
  8082                           ;vend.c: 564: uint16_t chanlinkbits = chan1linkbits;
  8083  011180  0E37               	movlw	low _chan1linkbits
  8084  011182  6EF6               	movwf	tblptrl,c
  8085  011184                     	if	1	;There is more than 1 active tblptr byte
  8086  011184  0EFC               	movlw	high _chan1linkbits
  8087  011186  6EF7               	movwf	tblptrh,c
  8088  011188                     	endif
  8089  011188                     	if	1	;There are 3 active tblptr bytes
  8090  011188  0E00               	movlw	low (_chan1linkbits shr (0+16))
  8091  01118A  6EF8               	movwf	tblptru,c
  8092  01118C                     	endif
  8093  01118C  0009               	tblrd		*+
  8094  01118E  CFF5 F02B          	movff	tablat,Reset_settings@chanlinkbits
  8095  011192  000A               	tblrd		*-
  8096  011194  CFF5 F02C          	movff	tablat,Reset_settings@chanlinkbits+1
  8097                           
  8098                           ;vend.c: 565: while(chanlinkbits < chan1time)
  8099  011198  D00A               	goto	l2200
  8100  01119A                     
  8101                           ;vend.c: 566: {
  8102                           ;vend.c: 568: DATAEE_WriteByte(chanlinkbits, 0x00);
  8103  01119A  C02B  F01D         	movff	Reset_settings@chanlinkbits,DATAEE_WriteByte@bAdd
  8104  01119E  C02C  F01E         	movff	Reset_settings@chanlinkbits+1,DATAEE_WriteByte@bAdd+1
  8105  0111A2  0E00               	movlw	0
  8106  0111A4  6E1F               	movwf	DATAEE_WriteByte@bData,c
  8107  0111A6  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  8108                           
  8109                           ;vend.c: 569: chanlinkbits++;
  8110  0111AA  4A2B               	infsnz	Reset_settings@chanlinkbits,f,c
  8111  0111AC  2A2C               	incf	Reset_settings@chanlinkbits+1,f,c
  8112  0111AE                     l2200:
  8113  0111AE  0E25               	movlw	low _chan1time
  8114  0111B0  6EF6               	movwf	tblptrl,c
  8115  0111B2                     	if	1	;There is more than 1 active tblptr byte
  8116  0111B2  0EFC               	movlw	high _chan1time
  8117  0111B4  6EF7               	movwf	tblptrh,c
  8118  0111B6                     	endif
  8119  0111B6                     	if	1	;There are 3 active tblptr bytes
  8120  0111B6  0E00               	movlw	low (_chan1time shr (0+16))
  8121  0111B8  6EF8               	movwf	tblptru,c
  8122  0111BA                     	endif
  8123  0111BA  0009               	tblrd		*+
  8124  0111BC  50F5               	movf	tablat,w,c
  8125  0111BE  5C2B               	subwf	Reset_settings@chanlinkbits,w,c
  8126  0111C0  0009               	tblrd		*+
  8127  0111C2  50F5               	movf	tablat,w,c
  8128  0111C4  582C               	subwfb	Reset_settings@chanlinkbits+1,w,c
  8129  0111C6  A0D8               	btfss	status,0,c
  8130  0111C8  D7E8               	goto	l2201
  8131                           
  8132                           ;vend.c: 570: }
  8133                           ;vend.c: 571: DATAEE_WriteByte(sensorflags, 0x00);
  8134  0111CA  0E27               	movlw	low _sensorflags
  8135  0111CC  6EF6               	movwf	tblptrl,c
  8136  0111CE                     	if	1	;There is more than 1 active tblptr byte
  8137  0111CE  0EFC               	movlw	high _sensorflags
  8138  0111D0  6EF7               	movwf	tblptrh,c
  8139  0111D2                     	endif
  8140  0111D2                     	if	1	;There are 3 active tblptr bytes
  8141  0111D2  0E00               	movlw	low (_sensorflags shr (0+16))
  8142  0111D4  6EF8               	movwf	tblptru,c
  8143  0111D6                     	endif
  8144  0111D6  0009               	tblrd		*+
  8145  0111D8  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  8146  0111DC  000A               	tblrd		*-
  8147  0111DE  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  8148  0111E2  0E00               	movlw	0
  8149  0111E4  6E1F               	movwf	DATAEE_WriteByte@bData,c
  8150  0111E6  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  8151                           
  8152                           ;vend.c: 572: _delay((unsigned long)((2000)*(12000000/4000.0)));
  8153  0111EA  0E1F               	movlw	31
  8154  0111EC  6E2A               	movwf	(??_Reset_settings+1)& (0+255),c
  8155  0111EE  0E71               	movlw	113
  8156  0111F0  6E29               	movwf	??_Reset_settings& (0+255),c
  8157  0111F2  0E1E               	movlw	30
  8158  0111F4                     u4187:
  8159  0111F4  2EE8               	decfsz	wreg,f,c
  8160  0111F6  D7FE               	bra	u4187
  8161  0111F8  2E29               	decfsz	??_Reset_settings& (0+255),f,c
  8162  0111FA  D7FC               	bra	u4187
  8163  0111FC  2E2A               	decfsz	(??_Reset_settings+1)& (0+255),f,c
  8164  0111FE  D7FA               	bra	u4187
  8165  011200  D000               	nop2	
  8166  011202  0012               	return		;funcret
  8167  011204                     __end_of_Reset_settings:
  8168                           	opt stack 0
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           prodh	equ	0xFF4
  8174                           prodl	equ	0xFF3
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           indf2	equ	0xFDF
  8178                           fsr2h	equ	0xFDA
  8179                           fsr2l	equ	0xFD9
  8180                           status	equ	0xFD8
  8181                           
  8182 ;; *************** function _Init_vendmem *****************
  8183 ;; Defined at:
  8184 ;;		line 9 in file "vend.c"
  8185 ;; Parameters:    Size  Location     Type
  8186 ;;		None
  8187 ;; Auto vars:     Size  Location     Type
  8188 ;;  chanlink        2   24[COMRAM] PTR unsigned char 
  8189 ;;		 -> chanlink1(1), 
  8190 ;;  chanlinkbits    2   22[COMRAM] unsigned int 
  8191 ;;  i               1   26[COMRAM] unsigned char 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      void 
  8194 ;; Registers used:
  8195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8205 ;;Total ram usage:        7 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:    3
  8208 ;; This function calls:
  8209 ;;		_DATAEE_ReadByte
  8210 ;; This function is called by:
  8211 ;;		_vend_init
  8212 ;;		_Vend_setup
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text38
  8217  010D2E                     __ptext38:
  8218                           	opt stack 0
  8219  010D2E                     _Init_vendmem:
  8220                           	opt stack 26
  8221                           
  8222                           ;vend.c: 12: ((uint8_t*) &senschk)[0] = DATAEE_ReadByte(sensorflags);
  8223                           
  8224                           ;incstack = 0
  8225  010D2E  0E27               	movlw	low _sensorflags
  8226  010D30  6EF6               	movwf	tblptrl,c
  8227  010D32                     	if	1	;There is more than 1 active tblptr byte
  8228  010D32  0EFC               	movlw	high _sensorflags
  8229  010D34  6EF7               	movwf	tblptrh,c
  8230  010D36                     	endif
  8231  010D36                     	if	1	;There are 3 active tblptr bytes
  8232  010D36  0E00               	movlw	low (_sensorflags shr (0+16))
  8233  010D38  6EF8               	movwf	tblptru,c
  8234  010D3A                     	endif
  8235  010D3A  0009               	tblrd		*+
  8236  010D3C  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  8237  010D40  000A               	tblrd		*-
  8238  010D42  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  8239  010D46  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  8240  010D4A  6E35               	movwf	_senschk,c
  8241                           
  8242                           ;vend.c: 14: uint16_t chanlinkbits = chan1linkbits;
  8243  010D4C  0E37               	movlw	low _chan1linkbits
  8244  010D4E  6EF6               	movwf	tblptrl,c
  8245  010D50                     	if	1	;There is more than 1 active tblptr byte
  8246  010D50  0EFC               	movlw	high _chan1linkbits
  8247  010D52  6EF7               	movwf	tblptrh,c
  8248  010D54                     	endif
  8249  010D54                     	if	1	;There are 3 active tblptr bytes
  8250  010D54  0E00               	movlw	low (_chan1linkbits shr (0+16))
  8251  010D56  6EF8               	movwf	tblptru,c
  8252  010D58                     	endif
  8253  010D58  0009               	tblrd		*+
  8254  010D5A  CFF5 F021          	movff	tablat,Init_vendmem@chanlinkbits
  8255  010D5E  000A               	tblrd		*-
  8256  010D60  CFF5 F022          	movff	tablat,Init_vendmem@chanlinkbits+1
  8257                           
  8258                           ;vend.c: 15: uint8_t *chanlink = ((uint8_t*) &chanlink1);
  8259  010D64  0E03               	movlw	3
  8260  010D66  6E23               	movwf	Init_vendmem@chanlink,c
  8261  010D68  0E00               	movlw	0
  8262  010D6A  6E24               	movwf	Init_vendmem@chanlink+1,c
  8263                           
  8264                           ;vend.c: 16: char i = 0;
  8265  010D6C  0E00               	movlw	0
  8266  010D6E  6E25               	movwf	Init_vendmem@i,c
  8267                           
  8268                           ;vend.c: 17: while(i < 8)
  8269  010D70  D012               	goto	l2003
  8270  010D72                     
  8271                           ;vend.c: 18: {
  8272                           ;vend.c: 19: chanlink[i] = DATAEE_ReadByte(chanlinkbits + i);
  8273  010D72  5025               	movf	Init_vendmem@i,w,c
  8274  010D74  0D01               	mullw	1
  8275  010D76  50F3               	movf	prodl,w,c
  8276  010D78  2423               	addwf	Init_vendmem@chanlink,w,c
  8277  010D7A  6ED9               	movwf	fsr2l,c
  8278  010D7C  50F4               	movf	prodh,w,c
  8279  010D7E  2024               	addwfc	Init_vendmem@chanlink+1,w,c
  8280  010D80  6EDA               	movwf	fsr2h,c
  8281  010D82  5025               	movf	Init_vendmem@i,w,c
  8282  010D84  2421               	addwf	Init_vendmem@chanlinkbits,w,c
  8283  010D86  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  8284  010D88  0E00               	movlw	0
  8285  010D8A  2022               	addwfc	Init_vendmem@chanlinkbits+1,w,c
  8286  010D8C  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  8287  010D8E  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  8288  010D92  6EDF               	movwf	indf2,c
  8289                           
  8290                           ;vend.c: 20: i++;
  8291  010D94  2A25               	incf	Init_vendmem@i,f,c
  8292  010D96                     l2003:
  8293  010D96  0E07               	movlw	7
  8294  010D98  6425               	cpfsgt	Init_vendmem@i,c
  8295  010D9A  D7EB               	goto	l2004
  8296                           
  8297                           ;vend.c: 21: }
  8298                           ;vend.c: 23: i = 0;
  8299  010D9C  0E00               	movlw	0
  8300  010D9E  6E25               	movwf	Init_vendmem@i,c
  8301                           
  8302                           ;vend.c: 24: while(i < 8)
  8303  010DA0  D01E               	goto	l2006
  8304  010DA2                     
  8305                           ;vend.c: 25: {
  8306                           ;vend.c: 26: pricevend[i] = DATAEE_ReadByte(pricestore + i);
  8307  010DA2  5025               	movf	Init_vendmem@i,w,c
  8308  010DA4  0D01               	mullw	1
  8309  010DA6  0E80               	movlw	low _pricevend
  8310  010DA8  24F3               	addwf	prodl,w,c
  8311  010DAA  6ED9               	movwf	fsr2l,c
  8312  010DAC  0E00               	movlw	high _pricevend
  8313  010DAE  20F4               	addwfc	prodh,w,c
  8314  010DB0  6EDA               	movwf	fsr2h,c
  8315  010DB2  0E43               	movlw	low _pricestore
  8316  010DB4  6EF6               	movwf	tblptrl,c
  8317  010DB6                     	if	1	;There is more than 1 active tblptr byte
  8318  010DB6  0EFC               	movlw	high _pricestore
  8319  010DB8  6EF7               	movwf	tblptrh,c
  8320  010DBA                     	endif
  8321  010DBA                     	if	1	;There are 3 active tblptr bytes
  8322  010DBA  0E00               	movlw	low (_pricestore shr (0+16))
  8323  010DBC  6EF8               	movwf	tblptru,c
  8324  010DBE                     	endif
  8325  010DBE  0009               	tblrd		*+
  8326  010DC0  CFF5 F01F          	movff	tablat,??_Init_vendmem
  8327  010DC4  0009               	tblrd		*+
  8328  010DC6  CFF5 F020          	movff	tablat,??_Init_vendmem+1
  8329  010DCA  5025               	movf	Init_vendmem@i,w,c
  8330  010DCC  241F               	addwf	??_Init_vendmem,w,c
  8331  010DCE  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  8332  010DD0  0E00               	movlw	0
  8333  010DD2  2020               	addwfc	??_Init_vendmem+1,w,c
  8334  010DD4  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  8335  010DD6  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  8336  010DDA  6EDF               	movwf	indf2,c
  8337                           
  8338                           ;vend.c: 27: i++;
  8339  010DDC  2A25               	incf	Init_vendmem@i,f,c
  8340  010DDE                     l2006:
  8341  010DDE  0E07               	movlw	7
  8342  010DE0  6425               	cpfsgt	Init_vendmem@i,c
  8343  010DE2  D7DF               	goto	l2007
  8344  010DE4  0012               	return	
  8345  010DE6                     __end_of_Init_vendmem:
  8346                           	opt stack 0
  8347                           tblptru	equ	0xFF8
  8348                           tblptrh	equ	0xFF7
  8349                           tblptrl	equ	0xFF6
  8350                           tablat	equ	0xFF5
  8351                           prodh	equ	0xFF4
  8352                           prodl	equ	0xFF3
  8353                           postinc0	equ	0xFEE
  8354                           wreg	equ	0xFE8
  8355                           indf2	equ	0xFDF
  8356                           fsr2h	equ	0xFDA
  8357                           fsr2l	equ	0xFD9
  8358                           status	equ	0xFD8
  8359                           
  8360 ;; *************** function _Chan_link *****************
  8361 ;; Defined at:
  8362 ;;		line 458 in file "vend.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;		None
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;		None
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  1    wreg      void 
  8369 ;; Registers used:
  8370 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8378 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8379 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;Total ram usage:        2 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:   10
  8383 ;; This function calls:
  8384 ;;		_Link_chan
  8385 ;;		_Read_Service
  8386 ;;		_butindb
  8387 ;;		_get_channel
  8388 ;;		_lcd_string
  8389 ;; This function is called by:
  8390 ;;		_Vend_setup
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text39
  8395  0117E2                     __ptext39:
  8396                           	opt stack 0
  8397  0117E2                     _Chan_link:
  8398                           	opt stack 18
  8399                           
  8400                           ;vend.c: 460: lcd_string(chanlinkm, line1);
  8401                           
  8402                           ;incstack = 0
  8403  0117E2  0EA6               	movlw	low _chanlinkm
  8404  0117E4  6E24               	movwf	lcd_string@lcdstring,c
  8405  0117E6  0EFD               	movlw	high _chanlinkm
  8406  0117E8  6E25               	movwf	lcd_string@lcdstring+1,c
  8407  0117EA  0E79               	movlw	low _line1
  8408  0117EC  6EF6               	movwf	tblptrl,c
  8409  0117EE                     	if	1	;There is more than 1 active tblptr byte
  8410  0117EE  0EFC               	movlw	high _line1
  8411  0117F0  6EF7               	movwf	tblptrh,c
  8412  0117F2                     	endif
  8413  0117F2                     	if	1	;There are 3 active tblptr bytes
  8414  0117F2  0E00               	movlw	low (_line1 shr (0+16))
  8415  0117F4  6EF8               	movwf	tblptru,c
  8416  0117F6                     	endif
  8417  0117F6  0008               	tblrd		*
  8418  0117F8  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8419  0117FC  EC03  F088         	call	_lcd_string	;wreg free
  8420                           
  8421                           ;vend.c: 461: venflags.chanlink = 1;
  8422  011800  862F               	bsf	_venflags+1,3,c
  8423                           
  8424                           ;vend.c: 462: while(venflags.chanlink)
  8425  011802  D01D               	goto	l2164
  8426  011804                     
  8427                           ;vend.c: 463: {
  8428                           ;vend.c: 464: buttons = butindb();
  8429  011804  ECD0  F08E         	call	_butindb	;wreg free
  8430  011808  6E39               	movwf	_buttons,c	;volatile
  8431                           
  8432                           ;vend.c: 465: if(buttons != 0x00)
  8433  01180A  5039               	movf	_buttons,w,c	;volatile
  8434  01180C  B4D8               	btfsc	status,2,c
  8435  01180E  D012               	goto	l2163
  8436                           
  8437                           ;vend.c: 466: {
  8438                           ;vend.c: 467: Link_chan(get_channel(buttons));
  8439  011810  5039               	movf	_buttons,w,c	;volatile
  8440  011812  EC99  F08F         	call	_get_channel
  8441  011816  EC3A  F086         	call	_Link_chan
  8442                           
  8443                           ;vend.c: 468: _delay((unsigned long)((1000)*(12000000/4000.0)));
  8444  01181A  0E10               	movlw	16
  8445  01181C  0100               	movlb	0	; () banked
  8446  01181E  6FAB               	movwf	(??_Chan_link+1)& (0+255),b
  8447  011820  0E39               	movlw	57
  8448  011822  6FAA               	movwf	??_Chan_link& (0+255),b
  8449  011824  0E0D               	movlw	13
  8450  011826                     u4197:
  8451  011826  2EE8               	decfsz	wreg,f,c
  8452  011828  D7FE               	bra	u4197
  8453  01182A  2FAA               	decfsz	??_Chan_link& (0+255),f,b
  8454  01182C  D7FC               	bra	u4197
  8455  01182E  2FAB               	decfsz	(??_Chan_link+1)& (0+255),f,b
  8456  011830  D7FA               	bra	u4197
  8457  011832  D000               	nop2	
  8458  011834                     l2163:
  8459                           
  8460                           ;vend.c: 469: }
  8461                           ;vend.c: 470: if(Read_Service() == 0x00)
  8462  011834  EC1B  F090         	call	_Read_Service	;wreg free
  8463  011838  0900               	iorlw	0
  8464  01183A  B4D8               	btfsc	status,2,c
  8465                           
  8466                           ;vend.c: 471: {
  8467                           ;vend.c: 472: venflags.chanlink = 0;
  8468  01183C  962F               	bcf	_venflags+1,3,c
  8469  01183E                     l2164:
  8470  01183E  A62F               	btfss	_venflags+1,3,c
  8471  011840  0012               	return	
  8472  011842  D7E0               	goto	l2162
  8473  011844                     __end_of_Chan_link:
  8474                           	opt stack 0
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           postinc0	equ	0xFEE
  8482                           wreg	equ	0xFE8
  8483                           indf2	equ	0xFDF
  8484                           fsr2h	equ	0xFDA
  8485                           fsr2l	equ	0xFD9
  8486                           status	equ	0xFD8
  8487                           
  8488 ;; *************** function _get_channel *****************
  8489 ;; Defined at:
  8490 ;;		line 333 in file "vend.c"
  8491 ;; Parameters:    Size  Location     Type
  8492 ;;  butons          1    wreg     unsigned char 
  8493 ;; Auto vars:     Size  Location     Type
  8494 ;;  butons          1   19[COMRAM] unsigned char 
  8495 ;;  channel         1   18[COMRAM] unsigned char 
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      unsigned char 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;Total ram usage:        2 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    2
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		_main
  8516 ;;		_set_price
  8517 ;;		_Vend_settime
  8518 ;;		_Chan_link
  8519 ;;		_Sens_off
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text40
  8524  011F32                     __ptext40:
  8525                           	opt stack 0
  8526  011F32                     _get_channel:
  8527                           	opt stack 28
  8528                           
  8529                           ;incstack = 0
  8530                           ;get_channel@butons stored from wreg
  8531  011F32  6E1E               	movwf	get_channel@butons,c
  8532                           
  8533                           ;vend.c: 336: uint8_t channel = 0x00;
  8534  011F34  0E00               	movlw	0
  8535  011F36  6E1D               	movwf	get_channel@channel,c
  8536                           
  8537                           ;vend.c: 337: while(butons != 0)
  8538  011F38  D004               	goto	l2112
  8539  011F3A                     
  8540                           ;vend.c: 338: {
  8541                           ;vend.c: 339: channel++;
  8542  011F3A  2A1D               	incf	get_channel@channel,f,c
  8543                           
  8544                           ;vend.c: 340: butons = butons >> 1;
  8545  011F3C  90D8               	bcf	status,0,c
  8546  011F3E  301E               	rrcf	get_channel@butons,w,c
  8547  011F40  6E1E               	movwf	get_channel@butons,c
  8548  011F42                     l2112:
  8549  011F42  501E               	movf	get_channel@butons,w,c
  8550  011F44  A4D8               	btfss	status,2,c
  8551  011F46  D7F9               	goto	l2113
  8552                           
  8553                           ;vend.c: 341: }
  8554                           ;vend.c: 342: channel--;
  8555  011F48  061D               	decf	get_channel@channel,f,c
  8556                           
  8557                           ;vend.c: 343: return channel;
  8558  011F4A  501D               	movf	get_channel@channel,w,c
  8559  011F4C  0012               	return	
  8560  011F4E                     __end_of_get_channel:
  8561                           	opt stack 0
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           prodh	equ	0xFF4
  8567                           prodl	equ	0xFF3
  8568                           postinc0	equ	0xFEE
  8569                           wreg	equ	0xFE8
  8570                           indf2	equ	0xFDF
  8571                           fsr2h	equ	0xFDA
  8572                           fsr2l	equ	0xFD9
  8573                           status	equ	0xFD8
  8574                           
  8575 ;; *************** function _Link_chan *****************
  8576 ;; Defined at:
  8577 ;;		line 479 in file "vend.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;  channel         1    wreg     unsigned char 
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;  channel         1    1[BANK0 ] unsigned char 
  8582 ;;  linkflags       1    2[BANK0 ] unsigned char 
  8583 ;;  chanbit         1    0[BANK0 ] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  1    wreg      void 
  8586 ;; Registers used:
  8587 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Totals:         2       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;Total ram usage:        5 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    9
  8600 ;; This function calls:
  8601 ;;		_DATAEE_ReadByte
  8602 ;;		_DATAEE_WriteByte
  8603 ;;		_Read_Service
  8604 ;;		_butindb
  8605 ;;		_displ_lflags
  8606 ;; This function is called by:
  8607 ;;		_Chan_link
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text41
  8612  010C74                     __ptext41:
  8613                           	opt stack 0
  8614  010C74                     _Link_chan:
  8615                           	opt stack 18
  8616                           
  8617                           ;incstack = 0
  8618                           ;Link_chan@channel stored from wreg
  8619  010C74  0100               	movlb	0	; () banked
  8620  010C76  6FA8               	movwf	Link_chan@channel& (0+255),b
  8621                           
  8622                           ;vend.c: 481: venflags.linkchan = 1;
  8623  010C78  8030               	bsf	_venflags+2,0,c
  8624                           
  8625                           ;vend.c: 482: uint8_t chanbit = buttons;
  8626  010C7A  C039  F0A7         	movff	_buttons,Link_chan@chanbit	;volatile
  8627                           
  8628                           ;vend.c: 483: uint8_t linkflags = DATAEE_ReadByte(chan1linkbits + channel);
  8629  010C7E  0E37               	movlw	low _chan1linkbits
  8630  010C80  6EF6               	movwf	tblptrl,c
  8631  010C82                     	if	1	;There is more than 1 active tblptr byte
  8632  010C82  0EFC               	movlw	high _chan1linkbits
  8633  010C84  6EF7               	movwf	tblptrh,c
  8634  010C86                     	endif
  8635  010C86                     	if	1	;There are 3 active tblptr bytes
  8636  010C86  0E00               	movlw	low (_chan1linkbits shr (0+16))
  8637  010C88  6EF8               	movwf	tblptru,c
  8638  010C8A                     	endif
  8639  010C8A  0009               	tblrd		*+
  8640  010C8C  CFF5 F02C          	movff	tablat,??_Link_chan
  8641  010C90  0009               	tblrd		*+
  8642  010C92  CFF5 F02D          	movff	tablat,??_Link_chan+1
  8643  010C96  0100               	movlb	0	; () banked
  8644  010C98  51A8               	movf	Link_chan@channel& (0+255),w,b
  8645  010C9A  242C               	addwf	??_Link_chan,w,c
  8646  010C9C  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  8647  010C9E  0E00               	movlw	0
  8648  010CA0  202D               	addwfc	??_Link_chan+1,w,c
  8649  010CA2  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  8650  010CA4  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  8651  010CA8  0100               	movlb	0	; () banked
  8652  010CAA  6FA9               	movwf	Link_chan@linkflags& (0+255),b
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;vend.c: 484: displ_lflags(channel, linkflags);
  8656  010CAC  C0A9  F029         	movff	Link_chan@linkflags,displ_lflags@linkflgs
  8657  010CB0  51A8               	movf	Link_chan@channel& (0+255),w,b
  8658  010CB2  EC96  F089         	call	_displ_lflags
  8659                           
  8660                           ;vend.c: 485: while(venflags.linkchan)
  8661  010CB6  D038               	goto	u3180
  8662  010CB8                     
  8663                           ;vend.c: 486: {
  8664                           ;vend.c: 487: buttons = butindb();
  8665  010CB8  ECD0  F08E         	call	_butindb	;wreg free
  8666  010CBC  6E39               	movwf	_buttons,c	;volatile
  8667                           
  8668                           ;vend.c: 488: if(buttons != 0x00)
  8669  010CBE  5039               	movf	_buttons,w,c	;volatile
  8670  010CC0  B4D8               	btfsc	status,2,c
  8671  010CC2  D02D               	goto	l2174
  8672                           
  8673                           ;vend.c: 489: {
  8674                           ;vend.c: 490: if(buttons && linkflags)
  8675  010CC4  5039               	movf	_buttons,w,c	;volatile
  8676  010CC6  B4D8               	btfsc	status,2,c
  8677  010CC8  D008               	goto	l2172
  8678  010CCA  0100               	movlb	0	; () banked
  8679  010CCC  51A9               	movf	Link_chan@linkflags& (0+255),w,b
  8680  010CCE  B4D8               	btfsc	status,2,c
  8681  010CD0  D004               	goto	l2172
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;vend.c: 491: {
  8685                           ;vend.c: 493: linkflags = linkflags & ~buttons;
  8686  010CD2  5039               	movf	_buttons,w,c	;volatile
  8687  010CD4  0AFF               	xorlw	255
  8688  010CD6  15A9               	andwf	Link_chan@linkflags& (0+255),w,b
  8689  010CD8  D003               	goto	L13
  8690  010CDA                     l2172:
  8691                           
  8692                           ;vend.c: 495: else
  8693                           ;vend.c: 496: {
  8694                           ;vend.c: 498: linkflags = linkflags | buttons;
  8695                           
  8696                           ; BSR set to: 0
  8697  010CDA  0100               	movlb	0	; () banked
  8698  010CDC  51A9               	movf	Link_chan@linkflags& (0+255),w,b
  8699  010CDE  1039               	iorwf	_buttons,w,c	;volatile
  8700  010CE0                     L13:
  8701  010CE0  6FA9               	movwf	Link_chan@linkflags& (0+255),b
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;vend.c: 499: }
  8705                           ;vend.c: 500: DATAEE_WriteByte(chan1linkbits + channel, linkflags);
  8706                           
  8707                           ; BSR set to: 0
  8708  010CE2  0E37               	movlw	low _chan1linkbits
  8709  010CE4  6EF6               	movwf	tblptrl,c
  8710  010CE6                     	if	1	;There is more than 1 active tblptr byte
  8711  010CE6  0EFC               	movlw	high _chan1linkbits
  8712  010CE8  6EF7               	movwf	tblptrh,c
  8713  010CEA                     	endif
  8714  010CEA                     	if	1	;There are 3 active tblptr bytes
  8715  010CEA  0E00               	movlw	low (_chan1linkbits shr (0+16))
  8716  010CEC  6EF8               	movwf	tblptru,c
  8717  010CEE                     	endif
  8718  010CEE  0009               	tblrd		*+
  8719  010CF0  CFF5 F02C          	movff	tablat,??_Link_chan
  8720  010CF4  0009               	tblrd		*+
  8721  010CF6  CFF5 F02D          	movff	tablat,??_Link_chan+1
  8722  010CFA  51A8               	movf	Link_chan@channel& (0+255),w,b
  8723  010CFC  242C               	addwf	??_Link_chan,w,c
  8724  010CFE  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  8725  010D00  0E00               	movlw	0
  8726  010D02  202D               	addwfc	??_Link_chan+1,w,c
  8727  010D04  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  8728  010D06  C0A9  F01F         	movff	Link_chan@linkflags,DATAEE_WriteByte@bData
  8729  010D0A  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  8730                           
  8731                           ;vend.c: 501: displ_lflags(channel, linkflags);
  8732  010D0E  C0A9  F029         	movff	Link_chan@linkflags,displ_lflags@linkflgs
  8733  010D12  0100               	movlb	0	; () banked
  8734  010D14  51A8               	movf	Link_chan@channel& (0+255),w,b
  8735  010D16  EC96  F089         	call	_displ_lflags
  8736                           
  8737                           ;vend.c: 502: }
  8738                           ;vend.c: 503: while(Read_Service() == 0x00)
  8739  010D1A  D001               	goto	l2174
  8740  010D1C                     l2175:
  8741                           
  8742                           ;vend.c: 504: {
  8743                           ;vend.c: 505: venflags.linkchan = 0;
  8744  010D1C  9030               	bcf	_venflags+2,0,c
  8745  010D1E                     l2174:
  8746  010D1E  EC1B  F090         	call	_Read_Service	;wreg free
  8747  010D22  0900               	iorlw	0
  8748  010D24  B4D8               	btfsc	status,2,c
  8749  010D26  D7FA               	goto	l2175
  8750  010D28                     u3180:
  8751  010D28  A030               	btfss	_venflags+2,0,c
  8752  010D2A  0012               	return	
  8753  010D2C  D7C5               	goto	l2170
  8754  010D2E                     __end_of_Link_chan:
  8755                           	opt stack 0
  8756                           tblptru	equ	0xFF8
  8757                           tblptrh	equ	0xFF7
  8758                           tblptrl	equ	0xFF6
  8759                           tablat	equ	0xFF5
  8760                           prodh	equ	0xFF4
  8761                           prodl	equ	0xFF3
  8762                           postinc0	equ	0xFEE
  8763                           wreg	equ	0xFE8
  8764                           indf2	equ	0xFDF
  8765                           fsr2h	equ	0xFDA
  8766                           fsr2l	equ	0xFD9
  8767                           status	equ	0xFD8
  8768                           
  8769 ;; *************** function _displ_lflags *****************
  8770 ;; Defined at:
  8771 ;;		line 57 in file "lcd.c"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;  chanel          1    wreg     unsigned char 
  8774 ;;  linkflgs        1   30[COMRAM] unsigned char 
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  chanel          1   31[COMRAM] unsigned char 
  8777 ;;  lchan           1   32[COMRAM] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8787 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;Total ram usage:        3 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    8
  8794 ;; This function calls:
  8795 ;;		_lcd_dispadd
  8796 ;;		_lcd_string
  8797 ;;		_lcd_writeC
  8798 ;; This function is called by:
  8799 ;;		_Link_chan
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           	psect	text42
  8804  01132C                     __ptext42:
  8805                           	opt stack 0
  8806  01132C                     _displ_lflags:
  8807                           	opt stack 18
  8808                           
  8809                           ;incstack = 0
  8810                           ;displ_lflags@chanel stored from wreg
  8811  01132C  6E2A               	movwf	displ_lflags@chanel,c
  8812                           
  8813                           ;lcd.c: 59: lcd_string(chanmsg, line1);
  8814  01132E  0E8D               	movlw	low _chanmsg
  8815  011330  6E24               	movwf	lcd_string@lcdstring,c
  8816  011332  0EFF               	movlw	high _chanmsg
  8817  011334  6E25               	movwf	lcd_string@lcdstring+1,c
  8818  011336  0E79               	movlw	low _line1
  8819  011338  6EF6               	movwf	tblptrl,c
  8820  01133A                     	if	1	;There is more than 1 active tblptr byte
  8821  01133A  0EFC               	movlw	high _line1
  8822  01133C  6EF7               	movwf	tblptrh,c
  8823  01133E                     	endif
  8824  01133E                     	if	1	;There are 3 active tblptr bytes
  8825  01133E  0E00               	movlw	low (_line1 shr (0+16))
  8826  011340  6EF8               	movwf	tblptru,c
  8827  011342                     	endif
  8828  011342  0008               	tblrd		*
  8829  011344  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8830  011348  EC03  F088         	call	_lcd_string	;wreg free
  8831                           
  8832                           ;lcd.c: 60: lcd_writeC(chanel++ | 0x30);
  8833  01134C  502A               	movf	displ_lflags@chanel,w,c
  8834  01134E  0930               	iorlw	48
  8835  011350  ECBE  F08B         	call	_lcd_writeC
  8836  011354  2A2A               	incf	displ_lflags@chanel,f,c
  8837                           
  8838                           ;lcd.c: 61: uint8_t lchan = 1;
  8839  011356  0E01               	movlw	1
  8840  011358  6E2B               	movwf	displ_lflags@lchan,c
  8841                           
  8842                           ;lcd.c: 63: lcd_string(linkmsg, line2);
  8843  01135A  0E99               	movlw	low _linkmsg
  8844  01135C  6E24               	movwf	lcd_string@lcdstring,c
  8845  01135E  0EFF               	movlw	high _linkmsg
  8846  011360  6E25               	movwf	lcd_string@lcdstring+1,c
  8847  011362  0E78               	movlw	low _line2
  8848  011364  6EF6               	movwf	tblptrl,c
  8849  011366                     	if	1	;There is more than 1 active tblptr byte
  8850  011366  0EFC               	movlw	high _line2
  8851  011368  6EF7               	movwf	tblptrh,c
  8852  01136A                     	endif
  8853  01136A                     	if	1	;There are 3 active tblptr bytes
  8854  01136A  0E00               	movlw	low (_line2 shr (0+16))
  8855  01136C  6EF8               	movwf	tblptru,c
  8856  01136E                     	endif
  8857  01136E  0008               	tblrd		*
  8858  011370  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8859  011374  EC03  F088         	call	_lcd_string	;wreg free
  8860                           
  8861                           ;lcd.c: 64: lcd_dispadd(line3);
  8862  011378  0E77               	movlw	low _line3
  8863  01137A  6EF6               	movwf	tblptrl,c
  8864  01137C                     	if	1	;There is more than 1 active tblptr byte
  8865  01137C  0EFC               	movlw	high _line3
  8866  01137E  6EF7               	movwf	tblptrh,c
  8867  011380                     	endif
  8868  011380                     	if	1	;There are 3 active tblptr bytes
  8869  011380  0E00               	movlw	low (_line3 shr (0+16))
  8870  011382  6EF8               	movwf	tblptru,c
  8871  011384                     	endif
  8872  011384  0008               	tblrd		*
  8873  011386  50F5               	movf	tablat,w,c
  8874  011388  ECC3  F08F         	call	_lcd_dispadd
  8875                           
  8876                           ;lcd.c: 65: while(lchan < 0x09)
  8877  01138C  D010               	goto	l1470
  8878  01138E                     l1471:
  8879                           
  8880                           ;lcd.c: 66: {
  8881                           ;lcd.c: 67: if(linkflgs & 0x01)
  8882  01138E  A029               	btfss	displ_lflags@linkflgs,0,c
  8883  011390  D00A               	goto	l1472
  8884                           
  8885                           ;lcd.c: 68: {
  8886                           ;lcd.c: 69: lcd_writeC(lchan | 0x30);
  8887  011392  502B               	movf	displ_lflags@lchan,w,c
  8888  011394  0930               	iorlw	48
  8889  011396  ECBE  F08B         	call	_lcd_writeC
  8890                           
  8891                           ;lcd.c: 70: lcd_writeC(',');
  8892  01139A  0E2C               	movlw	44
  8893  01139C  ECBE  F08B         	call	_lcd_writeC
  8894                           
  8895                           ;lcd.c: 71: lcd_writeC(' ');
  8896  0113A0  0E20               	movlw	32
  8897  0113A2  ECBE  F08B         	call	_lcd_writeC
  8898  0113A6                     l1472:
  8899                           
  8900                           ;lcd.c: 72: }
  8901                           ;lcd.c: 73: lchan++;
  8902  0113A6  2A2B               	incf	displ_lflags@lchan,f,c
  8903                           
  8904                           ;lcd.c: 74: linkflgs = linkflgs >> 1;
  8905  0113A8  90D8               	bcf	status,0,c
  8906  0113AA  3029               	rrcf	displ_lflags@linkflgs,w,c
  8907  0113AC  6E29               	movwf	displ_lflags@linkflgs,c
  8908  0113AE                     l1470:
  8909  0113AE  0E08               	movlw	8
  8910  0113B0  642B               	cpfsgt	displ_lflags@lchan,c
  8911  0113B2  D7ED               	goto	l1471
  8912  0113B4  0012               	return	
  8913  0113B6                     __end_of_displ_lflags:
  8914                           	opt stack 0
  8915                           tblptru	equ	0xFF8
  8916                           tblptrh	equ	0xFF7
  8917                           tblptrl	equ	0xFF6
  8918                           tablat	equ	0xFF5
  8919                           prodh	equ	0xFF4
  8920                           prodl	equ	0xFF3
  8921                           postinc0	equ	0xFEE
  8922                           wreg	equ	0xFE8
  8923                           indf2	equ	0xFDF
  8924                           fsr2h	equ	0xFDA
  8925                           fsr2l	equ	0xFD9
  8926                           status	equ	0xFD8
  8927                           
  8928 ;; *************** function _Read_Service *****************
  8929 ;; Defined at:
  8930 ;;		line 263 in file "vend.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;  senval          1   18[COMRAM] unsigned char 
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      unsigned char 
  8937 ;; Registers used:
  8938 ;;		wreg, status,2
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;Total ram usage:        1 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    2
  8951 ;; This function calls:
  8952 ;;		Nothing
  8953 ;; This function is called by:
  8954 ;;		_price_set
  8955 ;;		_Vend_settime
  8956 ;;		_Chan_link
  8957 ;;		_Link_chan
  8958 ;;		_Sens_off
  8959 ;; This function uses a non-reentrant model
  8960 ;;
  8961                           
  8962                           	psect	text43
  8963  012036                     __ptext43:
  8964                           	opt stack 0
  8965  012036                     _Read_Service:
  8966                           	opt stack 26
  8967                           
  8968                           ;vend.c: 265: DAC1CON1 = 0x00;
  8969                           
  8970                           ;incstack = 0
  8971  012036  0E00               	movlw	0
  8972  012038  010F               	movlb	15	; () banked
  8973  01203A  6F34               	movwf	52,b	;volatile
  8974                           
  8975                           ; BSR set to: 15
  8976                           ;vend.c: 266: uint8_t senval = CMOUT;
  8977  01203C  CF3D F01D          	movff	3901,Read_Service@senval	;volatile
  8978                           
  8979                           ; BSR set to: 15
  8980                           ;vend.c: 267: DAC1CON1 = sensorval;
  8981  012040  C037  FF34         	movff	_sensorval,3892	;volatile
  8982                           
  8983                           ;vend.c: 268: return senval;
  8984  012044  501D               	movf	Read_Service@senval,w,c
  8985  012046  0012               	return	
  8986  012048                     __end_of_Read_Service:
  8987                           	opt stack 0
  8988                           tblptru	equ	0xFF8
  8989                           tblptrh	equ	0xFF7
  8990                           tblptrl	equ	0xFF6
  8991                           tablat	equ	0xFF5
  8992                           prodh	equ	0xFF4
  8993                           prodl	equ	0xFF3
  8994                           postinc0	equ	0xFEE
  8995                           wreg	equ	0xFE8
  8996                           indf2	equ	0xFDF
  8997                           fsr2h	equ	0xFDA
  8998                           fsr2l	equ	0xFD9
  8999                           status	equ	0xFD8
  9000                           
  9001 ;; *************** function _Sensor_set *****************
  9002 ;; Defined at:
  9003 ;;		line 271 in file "vend.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;		None
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  dacpos          1   33[COMRAM] unsigned char 
  9008 ;; Return value:  Size  Location     Type
  9009 ;;                  1    wreg      void 
  9010 ;; Registers used:
  9011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9012 ;; Tracked objects:
  9013 ;;		On entry : 0/0
  9014 ;;		On exit  : 0/0
  9015 ;;		Unchanged: 0/0
  9016 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9018 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9020 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9021 ;;Total ram usage:        1 bytes
  9022 ;; Hardware stack levels used:    1
  9023 ;; Hardware stack levels required when called:    9
  9024 ;; This function calls:
  9025 ;;		_butindb
  9026 ;;		_displ_sens
  9027 ;;		_lcd_string
  9028 ;; This function is called by:
  9029 ;;		_enter_service
  9030 ;; This function uses a non-reentrant model
  9031 ;;
  9032                           
  9033                           	psect	text44
  9034  01093C                     __ptext44:
  9035                           	opt stack 0
  9036  01093C                     _Sensor_set:
  9037                           	opt stack 20
  9038                           
  9039                           ;vend.c: 273: mdbflags.endis = 1;
  9040                           
  9041                           ; BSR set to: 15
  9042                           ;incstack = 0
  9043  01093C  8C3E               	bsf	_mdbflags,6,c
  9044                           
  9045                           ;vend.c: 275: lcd_string(sensmsg, line1);
  9046  01093E  0EA5               	movlw	low _sensmsg
  9047  010940  6E24               	movwf	lcd_string@lcdstring,c
  9048  010942  0EFF               	movlw	high _sensmsg
  9049  010944  6E25               	movwf	lcd_string@lcdstring+1,c
  9050  010946  0E79               	movlw	low _line1
  9051  010948  6EF6               	movwf	tblptrl,c
  9052  01094A                     	if	1	;There is more than 1 active tblptr byte
  9053  01094A  0EFC               	movlw	high _line1
  9054  01094C  6EF7               	movwf	tblptrh,c
  9055  01094E                     	endif
  9056  01094E                     	if	1	;There are 3 active tblptr bytes
  9057  01094E  0E00               	movlw	low (_line1 shr (0+16))
  9058  010950  6EF8               	movwf	tblptru,c
  9059  010952                     	endif
  9060  010952  0008               	tblrd		*
  9061  010954  CFF5 F026          	movff	tablat,lcd_string@lcdline
  9062  010958  EC03  F088         	call	_lcd_string	;wreg free
  9063                           
  9064                           ;vend.c: 277: senspos = bflag + 2;
  9065  01095C  5046               	movf	_bflag,w,c
  9066  01095E  0F02               	addlw	2
  9067  010960  6E36               	movwf	_senspos,c	;volatile
  9068                           
  9069                           ;vend.c: 279: lcd_string(dacmsg, line2);
  9070  010962  0E73               	movlw	low _dacmsg
  9071  010964  6E24               	movwf	lcd_string@lcdstring,c
  9072  010966  0EFF               	movlw	high _dacmsg
  9073  010968  6E25               	movwf	lcd_string@lcdstring+1,c
  9074  01096A  0E78               	movlw	low _line2
  9075  01096C  6EF6               	movwf	tblptrl,c
  9076  01096E                     	if	1	;There is more than 1 active tblptr byte
  9077  01096E  0EFC               	movlw	high _line2
  9078  010970  6EF7               	movwf	tblptrh,c
  9079  010972                     	endif
  9080  010972                     	if	1	;There are 3 active tblptr bytes
  9081  010972  0E00               	movlw	low (_line2 shr (0+16))
  9082  010974  6EF8               	movwf	tblptru,c
  9083  010976                     	endif
  9084  010976  0008               	tblrd		*
  9085  010978  CFF5 F026          	movff	tablat,lcd_string@lcdline
  9086  01097C  EC03  F088         	call	_lcd_string	;wreg free
  9087                           
  9088                           ;vend.c: 281: uint8_t dacpos = bflag + 2;
  9089  010980  5046               	movf	_bflag,w,c
  9090  010982  0F02               	addlw	2
  9091  010984  6E2C               	movwf	Sensor_set@dacpos,c
  9092                           
  9093                           ;vend.c: 282: displ_sens(senspos, dacpos);
  9094  010986  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  9095  01098A  5036               	movf	_senspos,w,c	;volatile
  9096  01098C  EC1B  F08B         	call	_displ_sens
  9097                           
  9098                           ;vend.c: 283: while(mdbflags.endis)
  9099  010990  D03D               	goto	l2096
  9100  010992                     
  9101                           ;vend.c: 284: {
  9102                           ;vend.c: 285: buttons = butindb();
  9103  010992  ECD0  F08E         	call	_butindb	;wreg free
  9104  010996  6E39               	movwf	_buttons,c	;volatile
  9105                           
  9106                           ;vend.c: 286: switch(buttons)
  9107  010998  D027               	goto	l2091
  9108  01099A  5037               	movf	_sensorval,w,c	;volatile
  9109  01099C  0B1F               	andlw	31
  9110  01099E  010F               	movlb	15	; () banked
  9111  0109A0  6F34               	movwf	52,b	;volatile
  9112                           
  9113                           ; BSR set to: 15
  9114  0109A2  2A37               	incf	_sensorval,f,c	;volatile
  9115                           
  9116                           ; BSR set to: 15
  9117                           ;vend.c: 289: displ_sens(senspos, dacpos);
  9118  0109A4  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  9119  0109A8  5036               	movf	_senspos,w,c	;volatile
  9120  0109AA  EC1B  F08B         	call	_displ_sens
  9121                           
  9122                           ;vend.c: 290: break;
  9123  0109AE  D026               	goto	l2093
  9124  0109B0  5037               	movf	_sensorval,w,c	;volatile
  9125  0109B2  0B1F               	andlw	31
  9126  0109B4  010F               	movlb	15	; () banked
  9127  0109B6  6F34               	movwf	52,b	;volatile
  9128                           
  9129                           ; BSR set to: 15
  9130  0109B8  0637               	decf	_sensorval,f,c	;volatile
  9131                           
  9132                           ; BSR set to: 15
  9133                           ;vend.c: 292: displ_sens(senspos, dacpos);
  9134  0109BA  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  9135  0109BE  5036               	movf	_senspos,w,c	;volatile
  9136  0109C0  EC1B  F08B         	call	_displ_sens
  9137                           
  9138                           ;vend.c: 293: break;
  9139  0109C4  D01B               	goto	l2093
  9140  0109C6                     l2095:
  9141  0109C6  9C3E               	bcf	_mdbflags,6,c
  9142                           
  9143                           ;vend.c: 295: lcd_string(servmsg, line1);
  9144  0109C8  0E88               	movlw	low _servmsg
  9145  0109CA  6E24               	movwf	lcd_string@lcdstring,c
  9146  0109CC  0EFC               	movlw	high _servmsg
  9147  0109CE  6E25               	movwf	lcd_string@lcdstring+1,c
  9148  0109D0  0E79               	movlw	low _line1
  9149  0109D2  6EF6               	movwf	tblptrl,c
  9150  0109D4                     	if	1	;There is more than 1 active tblptr byte
  9151  0109D4  0EFC               	movlw	high _line1
  9152  0109D6  6EF7               	movwf	tblptrh,c
  9153  0109D8                     	endif
  9154  0109D8                     	if	1	;There are 3 active tblptr bytes
  9155  0109D8  0E00               	movlw	low (_line1 shr (0+16))
  9156  0109DA  6EF8               	movwf	tblptru,c
  9157  0109DC                     	endif
  9158  0109DC  0008               	tblrd		*
  9159  0109DE  CFF5 F026          	movff	tablat,lcd_string@lcdline
  9160  0109E2  EC03  F088         	call	_lcd_string	;wreg free
  9161                           
  9162                           ;vend.c: 297: }
  9163                           
  9164                           ;vend.c: 296: break;
  9165  0109E6  D00A               	goto	l2093
  9166  0109E8                     l2091:
  9167  0109E8  5039               	movf	_buttons,w,c	;volatile
  9168                           
  9169                           ; Switch size 1, requested type "space"
  9170                           ; Number of cases is 3, Range of values is 1 to 128
  9171                           ; switch strategies available:
  9172                           ; Name         Instructions Cycles
  9173                           ; simple_byte           10     6 (average)
  9174                           ;	Chosen strategy is simple_byte
  9175  0109EA  0A01               	xorlw	1	; case 1
  9176  0109EC  B4D8               	btfsc	status,2,c
  9177  0109EE  D7D5               	goto	l2092
  9178  0109F0  0A03               	xorlw	3	; case 2
  9179  0109F2  B4D8               	btfsc	status,2,c
  9180  0109F4  D7DD               	goto	l2094
  9181  0109F6  0A82               	xorlw	130	; case 128
  9182  0109F8  B4D8               	btfsc	status,2,c
  9183  0109FA  D7E5               	goto	l2095
  9184  0109FC                     l2093:
  9185                           
  9186                           ;vend.c: 298: if(PIR4bits.TMR3IF)
  9187  0109FC  010E               	movlb	14	; () banked
  9188  0109FE  A5CE               	btfss	206,2,b	;volatile
  9189  010A00  D005               	goto	l2096
  9190                           
  9191                           ; BSR set to: 14
  9192                           ;vend.c: 299: {
  9193                           ;vend.c: 300: displ_sens(senspos, dacpos);
  9194  010A02  C02C  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  9195  010A06  5036               	movf	_senspos,w,c	;volatile
  9196  010A08  EC1B  F08B         	call	_displ_sens
  9197  010A0C                     l2096:
  9198  010A0C  AC3E               	btfss	_mdbflags,6,c
  9199  010A0E  0012               	return	
  9200  010A10  D7C0               	goto	l2090
  9201  010A12                     __end_of_Sensor_set:
  9202                           	opt stack 0
  9203                           tblptru	equ	0xFF8
  9204                           tblptrh	equ	0xFF7
  9205                           tblptrl	equ	0xFF6
  9206                           tablat	equ	0xFF5
  9207                           prodh	equ	0xFF4
  9208                           prodl	equ	0xFF3
  9209                           postinc0	equ	0xFEE
  9210                           wreg	equ	0xFE8
  9211                           indf2	equ	0xFDF
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _displ_sens *****************
  9217 ;; Defined at:
  9218 ;;		line 40 in file "lcd.c"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;  smsgpos         1    wreg     unsigned char 
  9221 ;;  dmsgpos         1   31[COMRAM] unsigned char 
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;  smsgpos         1   32[COMRAM] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      void 
  9226 ;; Registers used:
  9227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9233 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;Total ram usage:        2 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    8
  9240 ;; This function calls:
  9241 ;;		_CMP1_GetOutputStatus
  9242 ;;		_DATAEE_WriteByte
  9243 ;;		_displ_hex
  9244 ;;		_lcd_dispadd
  9245 ;;		_lcd_string
  9246 ;; This function is called by:
  9247 ;;		_Sensor_set
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text45
  9252  011636                     __ptext45:
  9253                           	opt stack 0
  9254  011636                     _displ_sens:
  9255                           	opt stack 20
  9256                           
  9257                           ;incstack = 0
  9258                           ;displ_sens@smsgpos stored from wreg
  9259  011636  6E2B               	movwf	displ_sens@smsgpos,c
  9260                           
  9261                           ;lcd.c: 42: if(CMP1_GetOutputStatus())
  9262  011638  EC32  F090         	call	_CMP1_GetOutputStatus	;wreg free
  9263  01163C  0900               	iorlw	0
  9264  01163E  B4D8               	btfsc	status,2,c
  9265  011640  D009               	goto	l1465
  9266                           
  9267                           ;lcd.c: 43: {
  9268                           ;lcd.c: 44: lcd_string(offmsg, smsgpos);
  9269  011642  0EF7               	movlw	low _offmsg
  9270  011644  6E24               	movwf	lcd_string@lcdstring,c
  9271  011646  0EFF               	movlw	high _offmsg
  9272  011648  6E25               	movwf	lcd_string@lcdstring+1,c
  9273  01164A  C02B  F026         	movff	displ_sens@smsgpos,lcd_string@lcdline
  9274  01164E  EC03  F088         	call	_lcd_string	;wreg free
  9275                           
  9276                           ;lcd.c: 45: }
  9277  011652  D008               	goto	l1466
  9278  011654                     l1465:
  9279                           
  9280                           ;lcd.c: 46: else
  9281                           ;lcd.c: 47: {
  9282                           ;lcd.c: 48: lcd_string(onmsg, smsgpos);
  9283  011654  0EFB               	movlw	low _onmsg
  9284  011656  6E24               	movwf	lcd_string@lcdstring,c
  9285  011658  0EFF               	movlw	high _onmsg
  9286  01165A  6E25               	movwf	lcd_string@lcdstring+1,c
  9287  01165C  C02B  F026         	movff	displ_sens@smsgpos,lcd_string@lcdline
  9288  011660  EC03  F088         	call	_lcd_string	;wreg free
  9289  011664                     l1466:
  9290                           
  9291                           ;lcd.c: 49: }
  9292                           ;lcd.c: 50: DATAEE_WriteByte(sensval, sensorval);
  9293  011664  0E3D               	movlw	low _sensval
  9294  011666  6EF6               	movwf	tblptrl,c
  9295  011668                     	if	1	;There is more than 1 active tblptr byte
  9296  011668  0EFC               	movlw	high _sensval
  9297  01166A  6EF7               	movwf	tblptrh,c
  9298  01166C                     	endif
  9299  01166C                     	if	1	;There are 3 active tblptr bytes
  9300  01166C  0E00               	movlw	low (_sensval shr (0+16))
  9301  01166E  6EF8               	movwf	tblptru,c
  9302  011670                     	endif
  9303  011670  0009               	tblrd		*+
  9304  011672  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  9305  011676  000A               	tblrd		*-
  9306  011678  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  9307  01167C  C037  F01F         	movff	_sensorval,DATAEE_WriteByte@bData	;volatile
  9308  011680  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  9309                           
  9310                           ;lcd.c: 51: lcd_string(clrmsg, dmsgpos);
  9311  011684  0EB0               	movlw	low _clrmsg
  9312  011686  6E24               	movwf	lcd_string@lcdstring,c
  9313  011688  0EFF               	movlw	high _clrmsg
  9314  01168A  6E25               	movwf	lcd_string@lcdstring+1,c
  9315  01168C  C02A  F026         	movff	displ_sens@dmsgpos,lcd_string@lcdline
  9316  011690  EC03  F088         	call	_lcd_string	;wreg free
  9317                           
  9318                           ;lcd.c: 52: lcd_dispadd(dmsgpos);
  9319  011694  502A               	movf	displ_sens@dmsgpos,w,c
  9320  011696  ECC3  F08F         	call	_lcd_dispadd
  9321                           
  9322                           ;lcd.c: 53: displ_hex((uint8_t) DAC1CON1);
  9323  01169A  010F               	movlb	15	; () banked
  9324  01169C  5134               	movf	52,w,b	;volatile
  9325  01169E  6E27               	movwf	displ_hex@hexnum,c
  9326  0116A0  6A28               	clrf	displ_hex@hexnum+1,c
  9327  0116A2  6A29               	clrf	displ_hex@hexnum+2,c
  9328  0116A4  EC4E  F087         	call	_displ_hex	;wreg free
  9329  0116A8  0012               	return		;funcret
  9330  0116AA                     __end_of_displ_sens:
  9331                           	opt stack 0
  9332                           tblptru	equ	0xFF8
  9333                           tblptrh	equ	0xFF7
  9334                           tblptrl	equ	0xFF6
  9335                           tablat	equ	0xFF5
  9336                           prodh	equ	0xFF4
  9337                           prodl	equ	0xFF3
  9338                           postinc0	equ	0xFEE
  9339                           wreg	equ	0xFE8
  9340                           indf2	equ	0xFDF
  9341                           fsr2h	equ	0xFDA
  9342                           fsr2l	equ	0xFD9
  9343                           status	equ	0xFD8
  9344                           
  9345 ;; *************** function _CMP1_GetOutputStatus *****************
  9346 ;; Defined at:
  9347 ;;		line 74 in file "mcc_generated_files/cmp1.c"
  9348 ;; Parameters:    Size  Location     Type
  9349 ;;		None
  9350 ;; Auto vars:     Size  Location     Type
  9351 ;;		None
  9352 ;; Return value:  Size  Location     Type
  9353 ;;                  1    wreg      unsigned char 
  9354 ;; Registers used:
  9355 ;;		wreg
  9356 ;; Tracked objects:
  9357 ;;		On entry : 0/0
  9358 ;;		On exit  : 0/0
  9359 ;;		Unchanged: 0/0
  9360 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;Total ram usage:        0 bytes
  9366 ;; Hardware stack levels used:    1
  9367 ;; Hardware stack levels required when called:    2
  9368 ;; This function calls:
  9369 ;;		Nothing
  9370 ;; This function is called by:
  9371 ;;		_main
  9372 ;;		_displ_sens
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376                           	psect	text46
  9377  012064                     __ptext46:
  9378                           	opt stack 0
  9379  012064                     _CMP1_GetOutputStatus:
  9380                           	opt stack 25
  9381                           
  9382                           ;cmp1.c: 76: return (CMOUTbits.MC1OUT);
  9383                           
  9384                           ;incstack = 0
  9385  012064  010F               	movlb	15	; () banked
  9386  012066  A13D               	btfss	61,0,b	;volatile
  9387  012068  D002               	goto	u3110
  9388  01206A  0E01               	movlw	1
  9389  01206C  0012               	return	
  9390  01206E                     u3110:
  9391  01206E  0E00               	movlw	0
  9392  012070  0012               	return	
  9393  012072                     __end_of_CMP1_GetOutputStatus:
  9394                           	opt stack 0
  9395                           tblptru	equ	0xFF8
  9396                           tblptrh	equ	0xFF7
  9397                           tblptrl	equ	0xFF6
  9398                           tablat	equ	0xFF5
  9399                           prodh	equ	0xFF4
  9400                           prodl	equ	0xFF3
  9401                           postinc0	equ	0xFEE
  9402                           wreg	equ	0xFE8
  9403                           indf2	equ	0xFDF
  9404                           fsr2h	equ	0xFDA
  9405                           fsr2l	equ	0xFD9
  9406                           status	equ	0xFD8
  9407                           
  9408 ;; *************** function _Hopper_coin *****************
  9409 ;; Defined at:
  9410 ;;		line 196 in file "vend.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;		None
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  coinval         1   33[COMRAM] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;                  1    wreg      void 
  9417 ;; Registers used:
  9418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9428 ;;Total ram usage:        1 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    9
  9431 ;; This function calls:
  9432 ;;		_DATAEE_ReadByte
  9433 ;;		_Update_Hopcoin
  9434 ;;		_butindb
  9435 ;;		_displ_hex
  9436 ;;		_lcd_dispadd
  9437 ;;		_lcd_string
  9438 ;; This function is called by:
  9439 ;;		_enter_service
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           	psect	text47
  9444  010A12                     __ptext47:
  9445                           	opt stack 0
  9446  010A12                     _Hopper_coin:
  9447                           	opt stack 20
  9448                           
  9449                           ;vend.c: 198: lcd_string(hoppcoin, line1);
  9450                           
  9451                           ; BSR set to: 15
  9452                           ;incstack = 0
  9453  010A12  0EDD               	movlw	low _hoppcoin
  9454  010A14  6E24               	movwf	lcd_string@lcdstring,c
  9455  010A16  0EFD               	movlw	high _hoppcoin
  9456  010A18  6E25               	movwf	lcd_string@lcdstring+1,c
  9457  010A1A  0E79               	movlw	low _line1
  9458  010A1C  6EF6               	movwf	tblptrl,c
  9459  010A1E                     	if	1	;There is more than 1 active tblptr byte
  9460  010A1E  0EFC               	movlw	high _line1
  9461  010A20  6EF7               	movwf	tblptrh,c
  9462  010A22                     	endif
  9463  010A22                     	if	1	;There are 3 active tblptr bytes
  9464  010A22  0E00               	movlw	low (_line1 shr (0+16))
  9465  010A24  6EF8               	movwf	tblptru,c
  9466  010A26                     	endif
  9467  010A26  0008               	tblrd		*
  9468  010A28  CFF5 F026          	movff	tablat,lcd_string@lcdline
  9469  010A2C  EC03  F088         	call	_lcd_string	;wreg free
  9470                           
  9471                           ;vend.c: 199: mdbflags.endis = 1;
  9472  010A30  8C3E               	bsf	_mdbflags,6,c
  9473                           
  9474                           ;vend.c: 200: senspos = bflag + 2;
  9475  010A32  5046               	movf	_bflag,w,c
  9476  010A34  0F02               	addlw	2
  9477  010A36  6E36               	movwf	_senspos,c	;volatile
  9478                           
  9479                           ;vend.c: 201: uint8_t coinval = DATAEE_ReadByte(hopcoin);
  9480  010A38  0E39               	movlw	low _hopcoin
  9481  010A3A  6EF6               	movwf	tblptrl,c
  9482  010A3C                     	if	1	;There is more than 1 active tblptr byte
  9483  010A3C  0EFC               	movlw	high _hopcoin
  9484  010A3E  6EF7               	movwf	tblptrh,c
  9485  010A40                     	endif
  9486  010A40                     	if	1	;There are 3 active tblptr bytes
  9487  010A40  0E00               	movlw	low (_hopcoin shr (0+16))
  9488  010A42  6EF8               	movwf	tblptru,c
  9489  010A44                     	endif
  9490  010A44  0009               	tblrd		*+
  9491  010A46  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  9492  010A4A  000A               	tblrd		*-
  9493  010A4C  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  9494  010A50  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  9495  010A54  6E2C               	movwf	Hopper_coin@coinval,c
  9496                           
  9497                           ;vend.c: 202: lcd_dispadd(senspos);
  9498  010A56  5036               	movf	_senspos,w,c	;volatile
  9499  010A58  ECC3  F08F         	call	_lcd_dispadd
  9500                           
  9501                           ;vend.c: 203: displ_hex((uint24_t)coinval);
  9502  010A5C  502C               	movf	Hopper_coin@coinval,w,c
  9503  010A5E  6E27               	movwf	displ_hex@hexnum,c
  9504  010A60  6A28               	clrf	displ_hex@hexnum+1,c
  9505  010A62  6A29               	clrf	displ_hex@hexnum+2,c
  9506  010A64  EC4E  F087         	call	_displ_hex	;wreg free
  9507                           
  9508                           ;vend.c: 204: while(mdbflags.endis)
  9509  010A68  D03C               	goto	l2060
  9510  010A6A                     
  9511                           ;vend.c: 205: {
  9512                           ;vend.c: 206: buttons = butindb();
  9513  010A6A  ECD0  F08E         	call	_butindb	;wreg free
  9514  010A6E  6E39               	movwf	_buttons,c	;volatile
  9515                           
  9516                           ;vend.c: 207: switch(buttons)
  9517  010A70  D01F               	goto	l2062
  9518  010A72  0E01               	movlw	1
  9519  010A74  6E2A               	movwf	Update_Hopcoin@direction,c
  9520  010A76  502C               	movf	Hopper_coin@coinval,w,c
  9521  010A78  EC1E  F08A         	call	_Update_Hopcoin
  9522                           
  9523                           ;vend.c: 210: break;
  9524  010A7C  D023               	goto	l2064
  9525  010A7E  0E02               	movlw	2
  9526  010A80  6E2A               	movwf	Update_Hopcoin@direction,c
  9527  010A82  502C               	movf	Hopper_coin@coinval,w,c
  9528  010A84  EC1E  F08A         	call	_Update_Hopcoin
  9529                           
  9530                           ;vend.c: 212: break;
  9531  010A88  D01D               	goto	l2064
  9532  010A8A                     l2066:
  9533  010A8A  9C3E               	bcf	_mdbflags,6,c
  9534                           
  9535                           ;vend.c: 214: lcd_string(servmsg, line1);
  9536  010A8C  0E88               	movlw	low _servmsg
  9537  010A8E  6E24               	movwf	lcd_string@lcdstring,c
  9538  010A90  0EFC               	movlw	high _servmsg
  9539  010A92  6E25               	movwf	lcd_string@lcdstring+1,c
  9540  010A94  0E79               	movlw	low _line1
  9541  010A96  6EF6               	movwf	tblptrl,c
  9542  010A98                     	if	1	;There is more than 1 active tblptr byte
  9543  010A98  0EFC               	movlw	high _line1
  9544  010A9A  6EF7               	movwf	tblptrh,c
  9545  010A9C                     	endif
  9546  010A9C                     	if	1	;There are 3 active tblptr bytes
  9547  010A9C  0E00               	movlw	low (_line1 shr (0+16))
  9548  010A9E  6EF8               	movwf	tblptru,c
  9549  010AA0                     	endif
  9550  010AA0  0008               	tblrd		*
  9551  010AA2  CFF5 F026          	movff	tablat,lcd_string@lcdline
  9552  010AA6  EC03  F088         	call	_lcd_string	;wreg free
  9553                           
  9554                           ;vend.c: 215: buttons = 0x00;
  9555  010AAA  0E00               	movlw	0
  9556  010AAC  6E39               	movwf	_buttons,c	;volatile
  9557                           
  9558                           ;vend.c: 217: }
  9559                           
  9560                           ;vend.c: 216: break;
  9561  010AAE  D00A               	goto	l2064
  9562  010AB0                     l2062:
  9563  010AB0  5039               	movf	_buttons,w,c	;volatile
  9564                           
  9565                           ; Switch size 1, requested type "space"
  9566                           ; Number of cases is 3, Range of values is 1 to 128
  9567                           ; switch strategies available:
  9568                           ; Name         Instructions Cycles
  9569                           ; simple_byte           10     6 (average)
  9570                           ;	Chosen strategy is simple_byte
  9571  010AB2  0A01               	xorlw	1	; case 1
  9572  010AB4  B4D8               	btfsc	status,2,c
  9573  010AB6  D7DD               	goto	l2063
  9574  010AB8  0A03               	xorlw	3	; case 2
  9575  010ABA  B4D8               	btfsc	status,2,c
  9576  010ABC  D7E0               	goto	l2065
  9577  010ABE  0A82               	xorlw	130	; case 128
  9578  010AC0  B4D8               	btfsc	status,2,c
  9579  010AC2  D7E3               	goto	l2066
  9580  010AC4                     l2064:
  9581                           
  9582                           ;vend.c: 218: coinval = DATAEE_ReadByte(hopcoin);
  9583  010AC4  0E39               	movlw	low _hopcoin
  9584  010AC6  6EF6               	movwf	tblptrl,c
  9585  010AC8                     	if	1	;There is more than 1 active tblptr byte
  9586  010AC8  0EFC               	movlw	high _hopcoin
  9587  010ACA  6EF7               	movwf	tblptrh,c
  9588  010ACC                     	endif
  9589  010ACC                     	if	1	;There are 3 active tblptr bytes
  9590  010ACC  0E00               	movlw	low (_hopcoin shr (0+16))
  9591  010ACE  6EF8               	movwf	tblptru,c
  9592  010AD0                     	endif
  9593  010AD0  0009               	tblrd		*+
  9594  010AD2  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  9595  010AD6  000A               	tblrd		*-
  9596  010AD8  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  9597  010ADC  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
  9598  010AE0  6E2C               	movwf	Hopper_coin@coinval,c
  9599  010AE2                     l2060:
  9600  010AE2  AC3E               	btfss	_mdbflags,6,c
  9601  010AE4  0012               	return	
  9602  010AE6  D7C1               	goto	l2061
  9603  010AE8                     __end_of_Hopper_coin:
  9604                           	opt stack 0
  9605                           tblptru	equ	0xFF8
  9606                           tblptrh	equ	0xFF7
  9607                           tblptrl	equ	0xFF6
  9608                           tablat	equ	0xFF5
  9609                           prodh	equ	0xFF4
  9610                           prodl	equ	0xFF3
  9611                           postinc0	equ	0xFEE
  9612                           wreg	equ	0xFE8
  9613                           indf2	equ	0xFDF
  9614                           fsr2h	equ	0xFDA
  9615                           fsr2l	equ	0xFD9
  9616                           status	equ	0xFD8
  9617                           
  9618 ;; *************** function _butindb *****************
  9619 ;; Defined at:
  9620 ;;		line 147 in file "vend.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;		None
  9623 ;; Auto vars:     Size  Location     Type
  9624 ;;  butt            1   23[COMRAM] unsigned char 
  9625 ;;  butval          1   22[COMRAM] unsigned char 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  1    wreg      unsigned char 
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0, cstack
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9637 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9638 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;Total ram usage:        4 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    3
  9642 ;; This function calls:
  9643 ;;		_butin
  9644 ;; This function is called by:
  9645 ;;		_enter_service
  9646 ;;		_Hopper_coin
  9647 ;;		_Sensor_set
  9648 ;;		_price_set
  9649 ;;		_set_price
  9650 ;;		_Vend_setup
  9651 ;;		_Vend_settime
  9652 ;;		_Vend_timeset
  9653 ;;		_Chan_link
  9654 ;;		_Link_chan
  9655 ;;		_Sens_off
  9656 ;;		_off_sens
  9657 ;;		_set_notes
  9658 ;;		_enable_notes
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text48
  9663  011DA0                     __ptext48:
  9664                           	opt stack 0
  9665  011DA0                     _butindb:
  9666                           	opt stack 24
  9667                           
  9668                           ;vend.c: 149: uint8_t butt = butin();
  9669                           
  9670                           ;incstack = 0
  9671  011DA0  EC1D  F08D         	call	_butin	;wreg free
  9672  011DA4  6E22               	movwf	butindb@butt,c
  9673                           
  9674                           ;vend.c: 150: uint8_t butval = butt;
  9675  011DA6  C022  F021         	movff	butindb@butt,butindb@butval
  9676                           
  9677                           ;vend.c: 151: while(butval != 0x00)
  9678  011DAA  D003               	goto	l2045
  9679  011DAC                     
  9680                           ;vend.c: 152: {
  9681                           ;vend.c: 153: butval = butin();
  9682  011DAC  EC1D  F08D         	call	_butin	;wreg free
  9683  011DB0  6E21               	movwf	butindb@butval,c
  9684  011DB2                     l2045:
  9685  011DB2  5021               	movf	butindb@butval,w,c
  9686  011DB4  A4D8               	btfss	status,2,c
  9687  011DB6  D7FA               	goto	l2046
  9688                           
  9689                           ;vend.c: 154: }
  9690                           ;vend.c: 155: _delay((unsigned long)((500)*(12000000/4000.0)));
  9691  011DB8  0E08               	movlw	8
  9692  011DBA  6E20               	movwf	(??_butindb+1)& (0+255),c
  9693  011DBC  0E9D               	movlw	157
  9694  011DBE  6E1F               	movwf	??_butindb& (0+255),c
  9695  011DC0  0E06               	movlw	6
  9696  011DC2                     u4207:
  9697  011DC2  2EE8               	decfsz	wreg,f,c
  9698  011DC4  D7FE               	bra	u4207
  9699  011DC6  2E1F               	decfsz	??_butindb& (0+255),f,c
  9700  011DC8  D7FC               	bra	u4207
  9701  011DCA  2E20               	decfsz	(??_butindb+1)& (0+255),f,c
  9702  011DCC  D7FA               	bra	u4207
  9703                           
  9704                           ;vend.c: 157: return butt;
  9705  011DCE  5022               	movf	butindb@butt,w,c
  9706  011DD0  0012               	return	
  9707  011DD2                     __end_of_butindb:
  9708                           	opt stack 0
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           postinc0	equ	0xFEE
  9716                           wreg	equ	0xFE8
  9717                           indf2	equ	0xFDF
  9718                           fsr2h	equ	0xFDA
  9719                           fsr2l	equ	0xFD9
  9720                           status	equ	0xFD8
  9721                           
  9722 ;; *************** function _butin *****************
  9723 ;; Defined at:
  9724 ;;		line 160 in file "vend.c"
  9725 ;; Parameters:    Size  Location     Type
  9726 ;;		None
  9727 ;; Auto vars:     Size  Location     Type
  9728 ;;  butons          1   19[COMRAM] unsigned char 
  9729 ;; Return value:  Size  Location     Type
  9730 ;;                  1    wreg      unsigned char 
  9731 ;; Registers used:
  9732 ;;		wreg, status,2, status,0
  9733 ;; Tracked objects:
  9734 ;;		On entry : 0/0
  9735 ;;		On exit  : 0/0
  9736 ;;		Unchanged: 0/0
  9737 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9739 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;Total ram usage:        2 bytes
  9743 ;; Hardware stack levels used:    1
  9744 ;; Hardware stack levels required when called:    2
  9745 ;; This function calls:
  9746 ;;		Nothing
  9747 ;; This function is called by:
  9748 ;;		_main
  9749 ;;		_butindb
  9750 ;; This function uses a non-reentrant model
  9751 ;;
  9752                           
  9753                           	psect	text49
  9754  011A3A                     __ptext49:
  9755                           	opt stack 0
  9756  011A3A                     _butin:
  9757                           	opt stack 24
  9758                           
  9759                           ;vend.c: 162: LATA7 = 0;
  9760                           
  9761                           ;incstack = 0
  9762  011A3A  9E83               	bcf	3971,7,c	;volatile
  9763                           
  9764                           ;vend.c: 163: LATA6 = 1;
  9765  011A3C  8C83               	bsf	3971,6,c	;volatile
  9766                           
  9767                           ;vend.c: 164: _delay((unsigned long)((15)*(12000000/4000.0)));
  9768  011A3E  0E3B               	movlw	59
  9769  011A40  6E1D               	movwf	??_butin& (0+255),c
  9770  011A42  0E70               	movlw	112
  9771  011A44                     u4217:
  9772  011A44  2EE8               	decfsz	wreg,f,c
  9773  011A46  D7FE               	bra	u4217
  9774  011A48  2E1D               	decfsz	??_butin& (0+255),f,c
  9775  011A4A  D7FC               	bra	u4217
  9776                           
  9777                           ;vend.c: 166: uint8_t butons = ((PORTA >> 1) & 0x0F) << 4;
  9778  011A4C  CF8D F01D          	movff	3981,??_butin	;volatile
  9779  011A50  90D8               	bcf	status,0,c
  9780  011A52  321D               	rrcf	??_butin,f,c
  9781  011A54  0E0F               	movlw	15
  9782  011A56  161D               	andwf	??_butin,f,c
  9783  011A58  381D               	swapf	??_butin,w,c
  9784  011A5A  0BF0               	andlw	240
  9785  011A5C  6E1E               	movwf	butin@butons,c
  9786                           
  9787                           ;vend.c: 167: LATA7 = 1;
  9788  011A5E  8E83               	bsf	3971,7,c	;volatile
  9789                           
  9790                           ;vend.c: 168: LATA6 = 0;
  9791  011A60  9C83               	bcf	3971,6,c	;volatile
  9792                           
  9793                           ;vend.c: 169: _delay((unsigned long)((15)*(12000000/4000.0)));
  9794  011A62  0E3B               	movlw	59
  9795  011A64  6E1D               	movwf	??_butin& (0+255),c
  9796  011A66  0E70               	movlw	112
  9797  011A68                     u4227:
  9798  011A68  2EE8               	decfsz	wreg,f,c
  9799  011A6A  D7FE               	bra	u4227
  9800  011A6C  2E1D               	decfsz	??_butin& (0+255),f,c
  9801  011A6E  D7FC               	bra	u4227
  9802                           
  9803                           ;vend.c: 171: butons = ((PORTA >> 1) & 0x0F) | butons;
  9804  011A70  90D8               	bcf	status,0,c
  9805  011A72  308D               	rrcf	3981,w,c	;volatile
  9806  011A74  0B0F               	andlw	15
  9807  011A76  101E               	iorwf	butin@butons,w,c
  9808  011A78  6E1E               	movwf	butin@butons,c
  9809                           
  9810                           ;vend.c: 172: LATA7 = 1;
  9811  011A7A  8E83               	bsf	3971,7,c	;volatile
  9812                           
  9813                           ;vend.c: 173: LATA6 = 1;
  9814  011A7C  8C83               	bsf	3971,6,c	;volatile
  9815                           
  9816                           ;vend.c: 174: return ~butons;
  9817  011A7E  501E               	movf	butin@butons,w,c
  9818  011A80  0AFF               	xorlw	255
  9819  011A82  0012               	return	
  9820  011A84                     __end_of_butin:
  9821                           	opt stack 0
  9822                           tblptru	equ	0xFF8
  9823                           tblptrh	equ	0xFF7
  9824                           tblptrl	equ	0xFF6
  9825                           tablat	equ	0xFF5
  9826                           prodh	equ	0xFF4
  9827                           prodl	equ	0xFF3
  9828                           postinc0	equ	0xFEE
  9829                           wreg	equ	0xFE8
  9830                           indf2	equ	0xFDF
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _Update_Hopcoin *****************
  9836 ;; Defined at:
  9837 ;;		line 222 in file "vend.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;  newval          1    wreg     unsigned char 
  9840 ;;  direction       1   31[COMRAM] unsigned char 
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  newval          1   32[COMRAM] unsigned char 
  9843 ;; Return value:  Size  Location     Type
  9844 ;;                  1    wreg      void 
  9845 ;; Registers used:
  9846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9852 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9853 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9856 ;;Total ram usage:        2 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    8
  9859 ;; This function calls:
  9860 ;;		_DATAEE_WriteByte
  9861 ;;		_displ_hex
  9862 ;;		_lcd_dispadd
  9863 ;;		_lcd_string
  9864 ;; This function is called by:
  9865 ;;		_Hopper_coin
  9866 ;; This function uses a non-reentrant model
  9867 ;;
  9868                           
  9869                           	psect	text50
  9870  01143C                     __ptext50:
  9871                           	opt stack 0
  9872  01143C                     _Update_Hopcoin:
  9873                           	opt stack 20
  9874                           
  9875                           ;incstack = 0
  9876                           ;Update_Hopcoin@newval stored from wreg
  9877  01143C  6E2B               	movwf	Update_Hopcoin@newval,c
  9878                           
  9879                           ;vend.c: 225: switch(newval)
  9880  01143E  D014               	goto	l2071
  9881  011440  042A               	decf	Update_Hopcoin@direction,w,c
  9882  011442  A4D8               	btfss	status,2,c
  9883  011444  D005               	goto	u3370
  9884                           
  9885                           ;vend.c: 228: {
  9886                           ;vend.c: 229: newval++;
  9887  011446  2A2B               	incf	Update_Hopcoin@newval,f,c
  9888                           
  9889                           ;vend.c: 230: }
  9890  011448  D01A               	goto	l2075
  9891  01144A  042A               	decf	Update_Hopcoin@direction,w,c
  9892  01144C  A4D8               	btfss	status,2,c
  9893  01144E  D002               	goto	l2077
  9894  011450                     u3370:
  9895                           
  9896                           ;vend.c: 237: {
  9897                           ;vend.c: 238: newval = 0x05;
  9898  011450  0E05               	movlw	5
  9899  011452  D006               	goto	L15
  9900  011454                     l2077:
  9901                           
  9902                           ;vend.c: 240: else
  9903                           ;vend.c: 241: {
  9904                           ;vend.c: 242: newval--;
  9905  011454  062B               	decf	Update_Hopcoin@newval,f,c
  9906                           
  9907                           ;vend.c: 243: }
  9908                           ;vend.c: 244: break;
  9909  011456  D013               	goto	l2075
  9910  011458  042A               	decf	Update_Hopcoin@direction,w,c
  9911  01145A  A4D8               	btfss	status,2,c
  9912  01145C  D003               	goto	l2082
  9913                           
  9914                           ;vend.c: 246: {
  9915                           ;vend.c: 248: newval = 0x01;
  9916  01145E  0E01               	movlw	1
  9917  011460                     L15:
  9918  011460  6E2B               	movwf	Update_Hopcoin@newval,c
  9919                           
  9920                           ;vend.c: 253: }
  9921                           ;vend.c: 254: break;
  9922  011462  D00D               	goto	l2075
  9923  011464                     l2082:
  9924  011464  0E02               	movlw	2
  9925  011466  D7FC               	goto	L15
  9926  011468                     l2071:
  9927  011468  502B               	movf	Update_Hopcoin@newval,w,c
  9928                           
  9929                           ; Switch size 1, requested type "space"
  9930                           ; Number of cases is 3, Range of values is 1 to 5
  9931                           ; switch strategies available:
  9932                           ; Name         Instructions Cycles
  9933                           ; simple_byte           10     6 (average)
  9934                           ;	Chosen strategy is simple_byte
  9935  01146A  0A01               	xorlw	1	; case 1
  9936  01146C  B4D8               	btfsc	status,2,c
  9937  01146E  D7E8               	goto	l2072
  9938  011470  0A03               	xorlw	3	; case 2
  9939  011472  B4D8               	btfsc	status,2,c
  9940  011474  D7EA               	goto	l2076
  9941  011476  0A07               	xorlw	7	; case 5
  9942  011478  B4D8               	btfsc	status,2,c
  9943  01147A  D7EE               	goto	l2079
  9944  01147C  D7F3               	goto	l2082
  9945  01147E                     l2075:
  9946                           
  9947                           ;vend.c: 257: lcd_string(clrmsg, senspos);
  9948  01147E  0EB0               	movlw	low _clrmsg
  9949  011480  6E24               	movwf	lcd_string@lcdstring,c
  9950  011482  0EFF               	movlw	high _clrmsg
  9951  011484  6E25               	movwf	lcd_string@lcdstring+1,c
  9952  011486  C036  F026         	movff	_senspos,lcd_string@lcdline	;volatile
  9953  01148A  EC03  F088         	call	_lcd_string	;wreg free
  9954                           
  9955                           ;vend.c: 258: DATAEE_WriteByte(hopcoin, newval);
  9956  01148E  0E39               	movlw	low _hopcoin
  9957  011490  6EF6               	movwf	tblptrl,c
  9958  011492                     	if	1	;There is more than 1 active tblptr byte
  9959  011492  0EFC               	movlw	high _hopcoin
  9960  011494  6EF7               	movwf	tblptrh,c
  9961  011496                     	endif
  9962  011496                     	if	1	;There are 3 active tblptr bytes
  9963  011496  0E00               	movlw	low (_hopcoin shr (0+16))
  9964  011498  6EF8               	movwf	tblptru,c
  9965  01149A                     	endif
  9966  01149A  0009               	tblrd		*+
  9967  01149C  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  9968  0114A0  000A               	tblrd		*-
  9969  0114A2  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  9970  0114A6  C02B  F01F         	movff	Update_Hopcoin@newval,DATAEE_WriteByte@bData
  9971  0114AA  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
  9972                           
  9973                           ;vend.c: 259: lcd_dispadd(senspos);
  9974  0114AE  5036               	movf	_senspos,w,c	;volatile
  9975  0114B0  ECC3  F08F         	call	_lcd_dispadd
  9976                           
  9977                           ;vend.c: 260: displ_hex((uint24_t)newval);
  9978  0114B4  502B               	movf	Update_Hopcoin@newval,w,c
  9979  0114B6  6E27               	movwf	displ_hex@hexnum,c
  9980  0114B8  6A28               	clrf	displ_hex@hexnum+1,c
  9981  0114BA  6A29               	clrf	displ_hex@hexnum+2,c
  9982  0114BC  EC4E  F087         	call	_displ_hex	;wreg free
  9983  0114C0  0012               	return		;funcret
  9984  0114C2                     __end_of_Update_Hopcoin:
  9985                           	opt stack 0
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           postinc0	equ	0xFEE
  9993                           wreg	equ	0xFE8
  9994                           indf2	equ	0xFDF
  9995                           fsr2h	equ	0xFDA
  9996                           fsr2l	equ	0xFD9
  9997                           status	equ	0xFD8
  9998                           
  9999 ;; *************** function _Clear_cred *****************
 10000 ;; Defined at:
 10001 ;;		line 305 in file "vend.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;		None
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;		None
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  1    wreg      void 
 10008 ;; Registers used:
 10009 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;Total ram usage:        2 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:    8
 10022 ;; This function calls:
 10023 ;;		_DATAEE_WriteByte
 10024 ;;		_lcd_string
 10025 ;; This function is called by:
 10026 ;;		_enter_service
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text51
 10031  01189E                     __ptext51:
 10032                           	opt stack 0
 10033  01189E                     _Clear_cred:
 10034                           	opt stack 21
 10035                           
 10036                           ;vend.c: 307: DATAEE_WriteByte(credmem, 0x00);
 10037                           
 10038                           ;incstack = 0
 10039  01189E  0E4B               	movlw	low _credmem
 10040  0118A0  6EF6               	movwf	tblptrl,c
 10041  0118A2                     	if	1	;There is more than 1 active tblptr byte
 10042  0118A2  0EFC               	movlw	high _credmem
 10043  0118A4  6EF7               	movwf	tblptrh,c
 10044  0118A6                     	endif
 10045  0118A6                     	if	1	;There are 3 active tblptr bytes
 10046  0118A6  0E00               	movlw	low (_credmem shr (0+16))
 10047  0118A8  6EF8               	movwf	tblptru,c
 10048  0118AA                     	endif
 10049  0118AA  0009               	tblrd		*+
 10050  0118AC  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 10051  0118B0  000A               	tblrd		*-
 10052  0118B2  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 10053  0118B6  0E00               	movlw	0
 10054  0118B8  6E1F               	movwf	DATAEE_WriteByte@bData,c
 10055  0118BA  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
 10056                           
 10057                           ;vend.c: 308: lcd_string(creditclr, line1);
 10058  0118BE  0E63               	movlw	low _creditclr
 10059  0118C0  6E24               	movwf	lcd_string@lcdstring,c
 10060  0118C2  0EFF               	movlw	high _creditclr
 10061  0118C4  6E25               	movwf	lcd_string@lcdstring+1,c
 10062  0118C6  0E79               	movlw	low _line1
 10063  0118C8  6EF6               	movwf	tblptrl,c
 10064  0118CA                     	if	1	;There is more than 1 active tblptr byte
 10065  0118CA  0EFC               	movlw	high _line1
 10066  0118CC  6EF7               	movwf	tblptrh,c
 10067  0118CE                     	endif
 10068  0118CE                     	if	1	;There are 3 active tblptr bytes
 10069  0118CE  0E00               	movlw	low (_line1 shr (0+16))
 10070  0118D0  6EF8               	movwf	tblptru,c
 10071  0118D2                     	endif
 10072  0118D2  0008               	tblrd		*
 10073  0118D4  CFF5 F026          	movff	tablat,lcd_string@lcdline
 10074  0118D8  EC03  F088         	call	_lcd_string	;wreg free
 10075                           
 10076                           ;vend.c: 309: _delay((unsigned long)((1000)*(12000000/4000.0)));
 10077  0118DC  0E10               	movlw	16
 10078  0118DE  6E2A               	movwf	(??_Clear_cred+1)& (0+255),c
 10079  0118E0  0E39               	movlw	57
 10080  0118E2  6E29               	movwf	??_Clear_cred& (0+255),c
 10081  0118E4  0E0E               	movlw	14
 10082  0118E6                     u4237:
 10083  0118E6  2EE8               	decfsz	wreg,f,c
 10084  0118E8  D7FE               	bra	u4237
 10085  0118EA  2E29               	decfsz	??_Clear_cred& (0+255),f,c
 10086  0118EC  D7FC               	bra	u4237
 10087  0118EE  2E2A               	decfsz	(??_Clear_cred+1)& (0+255),f,c
 10088  0118F0  D7FA               	bra	u4237
 10089  0118F2  0012               	return		;funcret
 10090  0118F4                     __end_of_Clear_cred:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           postinc0	equ	0xFEE
 10099                           wreg	equ	0xFE8
 10100                           indf2	equ	0xFDF
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _Audit *****************
 10106 ;; Defined at:
 10107 ;;		line 182 in file "vend.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		None
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;Total ram usage:        0 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; Hardware stack levels required when called:    2
 10128 ;; This function calls:
 10129 ;;		Nothing
 10130 ;; This function is called by:
 10131 ;;		_enter_service
 10132 ;; This function uses a non-reentrant model
 10133 ;;
 10134                           
 10135                           	psect	text52
 10136  0120C4                     __ptext52:
 10137                           	opt stack 0
 10138  0120C4                     _Audit:
 10139                           	opt stack 27
 10140                           
 10141                           ;incstack = 0
 10142  0120C4  0012               	return		;funcret
 10143  0120C6                     __end_of_Audit:
 10144                           	opt stack 0
 10145                           tblptru	equ	0xFF8
 10146                           tblptrh	equ	0xFF7
 10147                           tblptrl	equ	0xFF6
 10148                           tablat	equ	0xFF5
 10149                           prodh	equ	0xFF4
 10150                           prodl	equ	0xFF3
 10151                           postinc0	equ	0xFEE
 10152                           wreg	equ	0xFE8
 10153                           indf2	equ	0xFDF
 10154                           fsr2h	equ	0xFDA
 10155                           fsr2l	equ	0xFD9
 10156                           status	equ	0xFD8
 10157                           
 10158 ;; *************** function _displ_noteer *****************
 10159 ;; Defined at:
 10160 ;;		line 182 in file "lcd.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;		None
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;		None
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  1    wreg      void 
 10167 ;; Registers used:
 10168 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10178 ;;Total ram usage:        0 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    8
 10181 ;; This function calls:
 10182 ;;		_displ_code
 10183 ;;		_lcd_string
 10184 ;; This function is called by:
 10185 ;;		_main
 10186 ;; This function uses a non-reentrant model
 10187 ;;
 10188                           
 10189                           	psect	text53
 10190  011E04                     __ptext53:
 10191                           	opt stack 0
 10192  011E04                     _displ_noteer:
 10193                           	opt stack 22
 10194                           
 10195                           ;lcd.c: 184: lcd_string(noteerr, line1);
 10196                           
 10197                           ;incstack = 0
 10198  011E04  0E0E               	movlw	low _noteerr
 10199  011E06  6E24               	movwf	lcd_string@lcdstring,c
 10200  011E08  0EFF               	movlw	high _noteerr
 10201  011E0A  6E25               	movwf	lcd_string@lcdstring+1,c
 10202  011E0C  0E79               	movlw	low _line1
 10203  011E0E  6EF6               	movwf	tblptrl,c
 10204  011E10                     	if	1	;There is more than 1 active tblptr byte
 10205  011E10  0EFC               	movlw	high _line1
 10206  011E12  6EF7               	movwf	tblptrh,c
 10207  011E14                     	endif
 10208  011E14                     	if	1	;There are 3 active tblptr bytes
 10209  011E14  0E00               	movlw	low (_line1 shr (0+16))
 10210  011E16  6EF8               	movwf	tblptru,c
 10211  011E18                     	endif
 10212  011E18  0008               	tblrd		*
 10213  011E1A  CFF5 F026          	movff	tablat,lcd_string@lcdline
 10214  011E1E  EC03  F088         	call	_lcd_string	;wreg free
 10215                           
 10216                           ;lcd.c: 185: ercode = mdbdata[0];
 10217  011E22  C060  F043         	movff	_mdbdata,_ercode
 10218                           
 10219                           ;lcd.c: 186: displ_code(ercode);
 10220  011E26  5043               	movf	_ercode,w,c
 10221  011E28  EC3A  F082         	call	_displ_code
 10222                           
 10223                           ;lcd.c: 187: mdbflags.noteerr = 0;
 10224  011E2C  923E               	bcf	_mdbflags,1,c
 10225                           
 10226                           ;lcd.c: 188: venflags.noterr = 0;
 10227  011E2E  9C2E               	bcf	_venflags,6,c
 10228                           
 10229                           ;lcd.c: 189: venflags.credisplay = 0;
 10230  011E30  982E               	bcf	_venflags,4,c
 10231  011E32  0012               	return		;funcret
 10232  011E34                     __end_of_displ_noteer:
 10233                           	opt stack 0
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           postinc0	equ	0xFEE
 10241                           wreg	equ	0xFE8
 10242                           indf2	equ	0xFDF
 10243                           fsr2h	equ	0xFDA
 10244                           fsr2l	equ	0xFD9
 10245                           status	equ	0xFD8
 10246                           
 10247 ;; *************** function _displ_code *****************
 10248 ;; Defined at:
 10249 ;;		line 135 in file "lcd.c"
 10250 ;; Parameters:    Size  Location     Type
 10251 ;;  ercode          1    wreg     unsigned char 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  ercode          1   27[COMRAM] unsigned char 
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  1    wreg      void 
 10256 ;; Registers used:
 10257 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;Total ram usage:        3 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; Hardware stack levels required when called:    7
 10270 ;; This function calls:
 10271 ;;		_lcd_writeC
 10272 ;; This function is called by:
 10273 ;;		_displ_noteer
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           	psect	text54
 10278  010474                     __ptext54:
 10279                           	opt stack 0
 10280  010474                     _displ_code:
 10281                           	opt stack 22
 10282                           
 10283                           ;incstack = 0
 10284                           ;displ_code@ercode stored from wreg
 10285  010474  6E26               	movwf	displ_code@ercode,c
 10286                           
 10287                           ;lcd.c: 137: if((ercode >> 4) < 0x0A)
 10288  010476  C026  F024         	movff	displ_code@ercode,??_displ_code
 10289  01047A  3A24               	swapf	??_displ_code,f,c
 10290  01047C  0E0F               	movlw	15
 10291  01047E  1624               	andwf	??_displ_code,f,c
 10292  010480  0E0A               	movlw	10
 10293  010482  6024               	cpfslt	??_displ_code,c
 10294  010484  D01E               	goto	l1498
 10295                           
 10296                           ;lcd.c: 138: {
 10297                           ;lcd.c: 139: lcd_writeC((ercode >> 4) | 0x30);
 10298  010486  3826               	swapf	displ_code@ercode,w,c
 10299  010488  0B0F               	andlw	15
 10300  01048A  0930               	iorlw	48
 10301  01048C  ECBE  F08B         	call	_lcd_writeC
 10302                           
 10303                           ;lcd.c: 140: }
 10304  010490  D033               	goto	l1500
 10305  010492  0E41               	movlw	65
 10306  010494  ECBE  F08B         	call	_lcd_writeC
 10307                           
 10308                           ;lcd.c: 146: break;
 10309  010498  D02F               	goto	l1500
 10310  01049A  0E42               	movlw	66
 10311  01049C  ECBE  F08B         	call	_lcd_writeC
 10312                           
 10313                           ;lcd.c: 148: break;
 10314  0104A0  D02B               	goto	l1500
 10315  0104A2  0E43               	movlw	67
 10316  0104A4  ECBE  F08B         	call	_lcd_writeC
 10317                           
 10318                           ;lcd.c: 150: break;
 10319  0104A8  D027               	goto	l1500
 10320  0104AA  0E44               	movlw	68
 10321  0104AC  ECBE  F08B         	call	_lcd_writeC
 10322                           
 10323                           ;lcd.c: 152: break;
 10324  0104B0  D023               	goto	l1500
 10325  0104B2  0E45               	movlw	69
 10326  0104B4  ECBE  F08B         	call	_lcd_writeC
 10327                           
 10328                           ;lcd.c: 154: break;
 10329  0104B8  D01F               	goto	l1500
 10330  0104BA  0E46               	movlw	70
 10331  0104BC  ECBE  F08B         	call	_lcd_writeC
 10332                           
 10333                           ;lcd.c: 156: }
 10334  0104C0  D01B               	goto	l1500
 10335  0104C2                     l1498:
 10336  0104C2  3826               	swapf	displ_code@ercode,w,c
 10337  0104C4  0B0F               	andlw	15
 10338  0104C6  6E24               	movwf	??_displ_code& (0+255),c
 10339  0104C8  6A25               	clrf	(??_displ_code+1)& (0+255),c
 10340                           
 10341                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10342                           ; Switch size 1, requested type "space"
 10343                           ; Number of cases is 1, Range of values is 0 to 0
 10344                           ; switch strategies available:
 10345                           ; Name         Instructions Cycles
 10346                           ; simple_byte            4     3 (average)
 10347                           ;	Chosen strategy is simple_byte
 10348  0104CA  5025               	movf	??_displ_code+1,w,c
 10349  0104CC  0A00               	xorlw	0	; case 0
 10350  0104CE  A4D8               	btfss	status,2,c
 10351  0104D0  D013               	goto	l1500
 10352                           
 10353                           ; Switch size 1, requested type "space"
 10354                           ; Number of cases is 6, Range of values is 10 to 15
 10355                           ; switch strategies available:
 10356                           ; Name         Instructions Cycles
 10357                           ; simple_byte           19    10 (average)
 10358                           ;	Chosen strategy is simple_byte
 10359  0104D2  5024               	movf	??_displ_code,w,c
 10360  0104D4  0A0A               	xorlw	10	; case 10
 10361  0104D6  B4D8               	btfsc	status,2,c
 10362  0104D8  D7DC               	goto	l1499
 10363  0104DA  0A01               	xorlw	1	; case 11
 10364  0104DC  B4D8               	btfsc	status,2,c
 10365  0104DE  D7DD               	goto	l1501
 10366  0104E0  0A07               	xorlw	7	; case 12
 10367  0104E2  B4D8               	btfsc	status,2,c
 10368  0104E4  D7DE               	goto	l1502
 10369  0104E6  0A01               	xorlw	1	; case 13
 10370  0104E8  B4D8               	btfsc	status,2,c
 10371  0104EA  D7DF               	goto	l1503
 10372  0104EC  0A03               	xorlw	3	; case 14
 10373  0104EE  B4D8               	btfsc	status,2,c
 10374  0104F0  D7E0               	goto	l1504
 10375  0104F2  0A01               	xorlw	1	; case 15
 10376  0104F4  B4D8               	btfsc	status,2,c
 10377  0104F6  D7E1               	goto	l1505
 10378  0104F8                     l1500:
 10379                           
 10380                           ;lcd.c: 157: }
 10381                           ;lcd.c: 158: if((ercode & 0x0F) < 0x0A)
 10382  0104F8  C026  F024         	movff	displ_code@ercode,??_displ_code
 10383  0104FC  0E0F               	movlw	15
 10384  0104FE  1624               	andwf	??_displ_code,f,c
 10385  010500  0E0A               	movlw	10
 10386  010502  6024               	cpfslt	??_displ_code,c
 10387  010504  D01E               	goto	l1508
 10388                           
 10389                           ;lcd.c: 159: {
 10390                           ;lcd.c: 160: lcd_writeC((ercode & 0x0F) | 0x30);
 10391  010506  5026               	movf	displ_code@ercode,w,c
 10392  010508  0B0F               	andlw	15
 10393  01050A  0930               	iorlw	48
 10394  01050C  ECBE  F08B         	call	_lcd_writeC
 10395                           
 10396                           ;lcd.c: 161: }
 10397  010510  0012               	return	
 10398  010512  0E41               	movlw	65
 10399  010514  ECBE  F08B         	call	_lcd_writeC
 10400                           
 10401                           ;lcd.c: 167: break;
 10402  010518  0012               	return	
 10403  01051A  0E42               	movlw	66
 10404  01051C  ECBE  F08B         	call	_lcd_writeC
 10405                           
 10406                           ;lcd.c: 169: break;
 10407  010520  0012               	return	
 10408  010522  0E43               	movlw	67
 10409  010524  ECBE  F08B         	call	_lcd_writeC
 10410                           
 10411                           ;lcd.c: 171: break;
 10412  010528  0012               	return	
 10413  01052A  0E44               	movlw	68
 10414  01052C  ECBE  F08B         	call	_lcd_writeC
 10415                           
 10416                           ;lcd.c: 173: break;
 10417  010530  0012               	return	
 10418  010532  0E45               	movlw	69
 10419  010534  ECBE  F08B         	call	_lcd_writeC
 10420                           
 10421                           ;lcd.c: 175: break;
 10422  010538  0012               	return	
 10423  01053A  0E46               	movlw	70
 10424  01053C  ECBE  F08B         	call	_lcd_writeC
 10425                           
 10426                           ;lcd.c: 177: }
 10427  010540  0012               	return	
 10428  010542                     l1508:
 10429  010542  5026               	movf	displ_code@ercode,w,c
 10430  010544  0B0F               	andlw	15
 10431  010546  6E24               	movwf	??_displ_code& (0+255),c
 10432  010548  6A25               	clrf	(??_displ_code+1)& (0+255),c
 10433                           
 10434                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10435                           ; Switch size 1, requested type "space"
 10436                           ; Number of cases is 1, Range of values is 0 to 0
 10437                           ; switch strategies available:
 10438                           ; Name         Instructions Cycles
 10439                           ; simple_byte            4     3 (average)
 10440                           ;	Chosen strategy is simple_byte
 10441  01054A  5025               	movf	??_displ_code+1,w,c
 10442  01054C  0A00               	xorlw	0	; case 0
 10443  01054E  A4D8               	btfss	status,2,c
 10444  010550  0012               	return	
 10445                           
 10446                           ; Switch size 1, requested type "space"
 10447                           ; Number of cases is 6, Range of values is 10 to 15
 10448                           ; switch strategies available:
 10449                           ; Name         Instructions Cycles
 10450                           ; simple_byte           19    10 (average)
 10451                           ;	Chosen strategy is simple_byte
 10452  010552  5024               	movf	??_displ_code,w,c
 10453  010554  0A0A               	xorlw	10	; case 10
 10454  010556  B4D8               	btfsc	status,2,c
 10455  010558  D7DC               	goto	l1509
 10456  01055A  0A01               	xorlw	1	; case 11
 10457  01055C  B4D8               	btfsc	status,2,c
 10458  01055E  D7DD               	goto	l1511
 10459  010560  0A07               	xorlw	7	; case 12
 10460  010562  B4D8               	btfsc	status,2,c
 10461  010564  D7DE               	goto	l1512
 10462  010566  0A01               	xorlw	1	; case 13
 10463  010568  B4D8               	btfsc	status,2,c
 10464  01056A  D7DF               	goto	l1513
 10465  01056C  0A03               	xorlw	3	; case 14
 10466  01056E  B4D8               	btfsc	status,2,c
 10467  010570  D7E0               	goto	l1514
 10468  010572  0A01               	xorlw	1	; case 15
 10469  010574  A4D8               	btfss	status,2,c
 10470  010576  0012               	return	
 10471  010578  D7E0               	goto	l1515
 10472  01057A                     __end_of_displ_code:
 10473                           	opt stack 0
 10474                           tblptru	equ	0xFF8
 10475                           tblptrh	equ	0xFF7
 10476                           tblptrl	equ	0xFF6
 10477                           tablat	equ	0xFF5
 10478                           prodh	equ	0xFF4
 10479                           prodl	equ	0xFF3
 10480                           postinc0	equ	0xFEE
 10481                           wreg	equ	0xFE8
 10482                           indf2	equ	0xFDF
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _displ_nochange *****************
 10488 ;; Defined at:
 10489 ;;		line 243 in file "lcd.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;		None
 10492 ;; Auto vars:     Size  Location     Type
 10493 ;;		None
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  1    wreg      void 
 10496 ;; Registers used:
 10497 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10507 ;;Total ram usage:        0 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    8
 10510 ;; This function calls:
 10511 ;;		_lcd_dispadd
 10512 ;;		_lcd_string
 10513 ;; This function is called by:
 10514 ;;		_main
 10515 ;; This function uses a non-reentrant model
 10516 ;;
 10517                           
 10518                           	psect	text55
 10519  011CD2                     __ptext55:
 10520                           	opt stack 0
 10521  011CD2                     _displ_nochange:
 10522                           	opt stack 22
 10523                           
 10524                           ;lcd.c: 245: lcd_dispadd(line3);
 10525                           
 10526                           ;incstack = 0
 10527  011CD2  0E77               	movlw	low _line3
 10528  011CD4  6EF6               	movwf	tblptrl,c
 10529  011CD6                     	if	1	;There is more than 1 active tblptr byte
 10530  011CD6  0EFC               	movlw	high _line3
 10531  011CD8  6EF7               	movwf	tblptrh,c
 10532  011CDA                     	endif
 10533  011CDA                     	if	1	;There are 3 active tblptr bytes
 10534  011CDA  0E00               	movlw	low (_line3 shr (0+16))
 10535  011CDC  6EF8               	movwf	tblptru,c
 10536  011CDE                     	endif
 10537  011CDE  0008               	tblrd		*
 10538  011CE0  50F5               	movf	tablat,w,c
 10539  011CE2  ECC3  F08F         	call	_lcd_dispadd
 10540                           
 10541                           ;lcd.c: 246: lcd_string(nochange, line3);
 10542  011CE6  0EAE               	movlw	low _nochange
 10543  011CE8  6E24               	movwf	lcd_string@lcdstring,c
 10544  011CEA  0EFE               	movlw	high _nochange
 10545  011CEC  6E25               	movwf	lcd_string@lcdstring+1,c
 10546  011CEE  0E77               	movlw	low _line3
 10547  011CF0  6EF6               	movwf	tblptrl,c
 10548  011CF2                     	if	1	;There is more than 1 active tblptr byte
 10549  011CF2  0EFC               	movlw	high _line3
 10550  011CF4  6EF7               	movwf	tblptrh,c
 10551  011CF6                     	endif
 10552  011CF6                     	if	1	;There are 3 active tblptr bytes
 10553  011CF6  0E00               	movlw	low (_line3 shr (0+16))
 10554  011CF8  6EF8               	movwf	tblptru,c
 10555  011CFA                     	endif
 10556  011CFA  0008               	tblrd		*
 10557  011CFC  CFF5 F026          	movff	tablat,lcd_string@lcdline
 10558  011D00  EC03  F088         	call	_lcd_string	;wreg free
 10559  011D04  0012               	return		;funcret
 10560  011D06                     __end_of_displ_nochange:
 10561                           	opt stack 0
 10562                           tblptru	equ	0xFF8
 10563                           tblptrh	equ	0xFF7
 10564                           tblptrl	equ	0xFF6
 10565                           tablat	equ	0xFF5
 10566                           prodh	equ	0xFF4
 10567                           prodl	equ	0xFF3
 10568                           postinc0	equ	0xFEE
 10569                           wreg	equ	0xFE8
 10570                           indf2	equ	0xFDF
 10571                           fsr2h	equ	0xFDA
 10572                           fsr2l	equ	0xFD9
 10573                           status	equ	0xFD8
 10574                           
 10575 ;; *************** function _displ_credit *****************
 10576 ;; Defined at:
 10577 ;;		line 127 in file "lcd.c"
 10578 ;; Parameters:    Size  Location     Type
 10579 ;;		None
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  cash            1   31[COMRAM] unsigned char 
 10582 ;; Return value:  Size  Location     Type
 10583 ;;                  1    wreg      void 
 10584 ;; Registers used:
 10585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10586 ;; Tracked objects:
 10587 ;;		On entry : 0/0
 10588 ;;		On exit  : 0/0
 10589 ;;		Unchanged: 0/0
 10590 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;Total ram usage:        1 bytes
 10596 ;; Hardware stack levels used:    1
 10597 ;; Hardware stack levels required when called:    8
 10598 ;; This function calls:
 10599 ;;		_credit_check
 10600 ;;		_displ_hex
 10601 ;;		_lcd_string
 10602 ;; This function is called by:
 10603 ;;		_main
 10604 ;; This function uses a non-reentrant model
 10605 ;;
 10606                           
 10607                           	psect	text56
 10608  011D06                     __ptext56:
 10609                           	opt stack 0
 10610  011D06                     _displ_credit:
 10611                           	opt stack 22
 10612                           
 10613                           ;lcd.c: 129: lcd_string(credits, line1);
 10614                           
 10615                           ;incstack = 0
 10616  011D06  0E80               	movlw	low _credits
 10617  011D08  6E24               	movwf	lcd_string@lcdstring,c
 10618  011D0A  0EFF               	movlw	high _credits
 10619  011D0C  6E25               	movwf	lcd_string@lcdstring+1,c
 10620  011D0E  0E79               	movlw	low _line1
 10621  011D10  6EF6               	movwf	tblptrl,c
 10622  011D12                     	if	1	;There is more than 1 active tblptr byte
 10623  011D12  0EFC               	movlw	high _line1
 10624  011D14  6EF7               	movwf	tblptrh,c
 10625  011D16                     	endif
 10626  011D16                     	if	1	;There are 3 active tblptr bytes
 10627  011D16  0E00               	movlw	low (_line1 shr (0+16))
 10628  011D18  6EF8               	movwf	tblptru,c
 10629  011D1A                     	endif
 10630  011D1A  0008               	tblrd		*
 10631  011D1C  CFF5 F026          	movff	tablat,lcd_string@lcdline
 10632  011D20  EC03  F088         	call	_lcd_string	;wreg free
 10633                           
 10634                           ;lcd.c: 130: uint8_t cash = credit_check();
 10635  011D24  EC69  F08F         	call	_credit_check	;wreg free
 10636  011D28  6E2A               	movwf	displ_credit@cash,c
 10637                           
 10638                           ;lcd.c: 131: displ_hex((uint8_t) cash);
 10639  011D2A  502A               	movf	displ_credit@cash,w,c
 10640  011D2C  6E27               	movwf	displ_hex@hexnum,c
 10641  011D2E  6A28               	clrf	displ_hex@hexnum+1,c
 10642  011D30  6A29               	clrf	displ_hex@hexnum+2,c
 10643  011D32  EC4E  F087         	call	_displ_hex	;wreg free
 10644                           
 10645                           ;lcd.c: 132: venflags.credisplay = 0;
 10646  011D36  982E               	bcf	_venflags,4,c
 10647  011D38  0012               	return		;funcret
 10648  011D3A                     __end_of_displ_credit:
 10649                           	opt stack 0
 10650                           tblptru	equ	0xFF8
 10651                           tblptrh	equ	0xFF7
 10652                           tblptrl	equ	0xFF6
 10653                           tablat	equ	0xFF5
 10654                           prodh	equ	0xFF4
 10655                           prodl	equ	0xFF3
 10656                           postinc0	equ	0xFEE
 10657                           wreg	equ	0xFE8
 10658                           indf2	equ	0xFDF
 10659                           fsr2h	equ	0xFDA
 10660                           fsr2l	equ	0xFD9
 10661                           status	equ	0xFD8
 10662                           
 10663 ;; *************** function _lcd_string *****************
 10664 ;; Defined at:
 10665 ;;		line 217 in file "lcd.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  lcdstring       2   25[COMRAM] PTR unsigned char 
 10668 ;;		 -> twohundredrand(8), hundredrand(8), fiftyrand(8), twentyrand(8), 
 10669 ;;		 -> tenrand(9), setnotes(69), chanresetmsg(32), chanlinkm(55), 
 10670 ;;		 -> vendtimem(41), setimemsg(41), vendsetup(80), pricesetm2(57), 
 10671 ;;		 -> pricesetmsg(18), creditclr(16), dacmsg(13), hoppcoin(51), 
 10672 ;;		 -> initnote(37), nochange(33), noteerr(28), credits(13), 
 10673 ;;		 -> timemsg(18), clrline(21), enabled(10), disabled(10), 
 10674 ;;		 -> sensoffmsg(31), sensmsg(11), linkmsg(12), chanmsg(12), 
 10675 ;;		 -> clrmsg(10), onmsg(4), offmsg(4), servmsg(80), 
 10676 ;;		 -> inscoin(39), 
 10677 ;;  lcdline         1   27[COMRAM] unsigned char 
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;		None
 10680 ;; Return value:  Size  Location     Type
 10681 ;;                  1    wreg      void 
 10682 ;; Registers used:
 10683 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10689 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10691 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10692 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10693 ;;Total ram usage:        5 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; Hardware stack levels required when called:    7
 10696 ;; This function calls:
 10697 ;;		_lcd_dispadd
 10698 ;;		_lcd_write
 10699 ;;		_lcd_writeC
 10700 ;; This function is called by:
 10701 ;;		_main
 10702 ;;		_enter_service
 10703 ;;		_displ_sens
 10704 ;;		_displ_lflags
 10705 ;;		_displ_sflags
 10706 ;;		_displ_time
 10707 ;;		_displ_note
 10708 ;;		_displ_nendis
 10709 ;;		_displ_credit
 10710 ;;		_displ_noteer
 10711 ;;		_displ_nochange
 10712 ;;		_vend_init
 10713 ;;		_Hopper_coin
 10714 ;;		_Update_Hopcoin
 10715 ;;		_Sensor_set
 10716 ;;		_Clear_cred
 10717 ;;		_price_set
 10718 ;;		_set_price
 10719 ;;		_Vend_setup
 10720 ;;		_Vend_settime
 10721 ;;		_Vend_timeset
 10722 ;;		_Chan_link
 10723 ;;		_Sens_off
 10724 ;;		_Reset_settings
 10725 ;;		_set_notes
 10726 ;;		_enable_notes
 10727 ;; This function uses a non-reentrant model
 10728 ;;
 10729                           
 10730                           	psect	text57
 10731  011006                     __ptext57:
 10732                           	opt stack 0
 10733  011006                     _lcd_string:
 10734                           	opt stack 22
 10735                           
 10736                           ;lcd.c: 219: if(lcdline == line1)
 10737                           
 10738                           ;incstack = 0
 10739  011006  0E79               	movlw	low _line1
 10740  011008  6EF6               	movwf	tblptrl,c
 10741  01100A                     	if	1	;There is more than 1 active tblptr byte
 10742  01100A  0EFC               	movlw	high _line1
 10743  01100C  6EF7               	movwf	tblptrh,c
 10744  01100E                     	endif
 10745  01100E                     	if	1	;There are 3 active tblptr bytes
 10746  01100E  0E00               	movlw	low (_line1 shr (0+16))
 10747  011010  6EF8               	movwf	tblptru,c
 10748  011012                     	endif
 10749  011012  0008               	tblrd		*
 10750  011014  50F5               	movf	tablat,w,c
 10751  011016  6226               	cpfseq	lcd_string@lcdline,c
 10752  011018  D00B               	goto	l1532
 10753                           
 10754                           ;lcd.c: 220: {
 10755                           ;lcd.c: 221: lcd_write(dispclr);
 10756  01101A  0E83               	movlw	low _dispclr
 10757  01101C  6EF6               	movwf	tblptrl,c
 10758  01101E                     	if	1	;There is more than 1 active tblptr byte
 10759  01101E  0EFC               	movlw	high _dispclr
 10760  011020  6EF7               	movwf	tblptrh,c
 10761  011022                     	endif
 10762  011022                     	if	1	;There are 3 active tblptr bytes
 10763  011022  0E00               	movlw	low (_dispclr shr (0+16))
 10764  011024  6EF8               	movwf	tblptru,c
 10765  011026                     	endif
 10766  011026  0008               	tblrd		*
 10767  011028  50F5               	movf	tablat,w,c
 10768  01102A  ECE9  F08E         	call	_lcd_write
 10769                           
 10770                           ;lcd.c: 222: }
 10771  01102E  D004               	goto	l1533
 10772  011030                     l1532:
 10773                           
 10774                           ;lcd.c: 223: else
 10775                           ;lcd.c: 224: {
 10776                           ;lcd.c: 226: lcd_dispadd(lcdline | 0x80);
 10777  011030  5026               	movf	lcd_string@lcdline,w,c
 10778  011032  0980               	iorlw	128
 10779  011034  ECC3  F08F         	call	_lcd_dispadd
 10780  011038                     l1533:
 10781                           
 10782                           ;lcd.c: 227: }
 10783                           ;lcd.c: 228: for(stradd = 0; lcdstring[stradd] != 0; stradd++)
 10784  011038  0E00               	movlw	0
 10785  01103A  6E44               	movwf	_stradd,c
 10786  01103C  D028               	goto	l1534
 10787  01103E                     
 10788                           ;lcd.c: 229: {
 10789                           ;lcd.c: 230: lcdata = lcdstring[stradd];
 10790  01103E  5044               	movf	_stradd,w,c
 10791  011040  0D01               	mullw	1
 10792  011042  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
 10793  011046  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
 10794  01104A  50F3               	movf	prodl,w,c
 10795  01104C  2627               	addwf	??_lcd_string,f,c
 10796  01104E  50F4               	movf	prodh,w,c
 10797  011050  2228               	addwfc	??_lcd_string+1,f,c
 10798  011052  C027  FFF6         	movff	??_lcd_string,tblptrl
 10799  011056  C028  FFF7         	movff	??_lcd_string+1,tblptrh
 10800  01105A                     	if	0	;tblptru may be non-zero
 10801  01105A                     	endif
 10802  01105A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10803  01105A  0E00               	movlw	low (__mediumconst shr (0+16))
 10804  01105C  6EF8               	movwf	tblptru,c
 10805  01105E                     	endif
 10806  01105E  0008               	tblrd		*
 10807  011060  CFF5 F045          	movff	tablat,_lcdata
 10808                           
 10809                           ;lcd.c: 231: lcd_writeC(lcdstring[stradd]);
 10810  011064  5044               	movf	_stradd,w,c
 10811  011066  0D01               	mullw	1
 10812  011068  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
 10813  01106C  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
 10814  011070  50F3               	movf	prodl,w,c
 10815  011072  2627               	addwf	??_lcd_string,f,c
 10816  011074  50F4               	movf	prodh,w,c
 10817  011076  2228               	addwfc	??_lcd_string+1,f,c
 10818  011078  C027  FFF6         	movff	??_lcd_string,tblptrl
 10819  01107C  C028  FFF7         	movff	??_lcd_string+1,tblptrh
 10820  011080                     	if	0	;tblptru may be non-zero
 10821  011080                     	endif
 10822  011080                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10823  011080  0E00               	movlw	low (__mediumconst shr (0+16))
 10824  011082  6EF8               	movwf	tblptru,c
 10825  011084                     	endif
 10826  011084  0008               	tblrd		*
 10827  011086  50F5               	movf	tablat,w,c
 10828  011088  ECBE  F08B         	call	_lcd_writeC
 10829  01108C  2A44               	incf	_stradd,f,c
 10830  01108E                     l1534:
 10831  01108E  5044               	movf	_stradd,w,c
 10832  011090  0D01               	mullw	1
 10833  011092  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
 10834  011096  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
 10835  01109A  50F3               	movf	prodl,w,c
 10836  01109C  2627               	addwf	??_lcd_string,f,c
 10837  01109E  50F4               	movf	prodh,w,c
 10838  0110A0  2228               	addwfc	??_lcd_string+1,f,c
 10839  0110A2  C027  FFF6         	movff	??_lcd_string,tblptrl
 10840  0110A6  C028  FFF7         	movff	??_lcd_string+1,tblptrh
 10841  0110AA                     	if	0	;tblptru may be non-zero
 10842  0110AA                     	endif
 10843  0110AA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10844  0110AA  0E00               	movlw	low (__mediumconst shr (0+16))
 10845  0110AC  6EF8               	movwf	tblptru,c
 10846  0110AE                     	endif
 10847  0110AE  0008               	tblrd		*
 10848  0110B0  50F5               	movf	tablat,w,c
 10849  0110B2  0900               	iorlw	0
 10850  0110B4  B4D8               	btfsc	status,2,c
 10851  0110B6  0012               	return	
 10852  0110B8  D7C2               	goto	l1535
 10853  0110BA                     __end_of_lcd_string:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           postinc0	equ	0xFEE
 10862                           wreg	equ	0xFE8
 10863                           indf2	equ	0xFDF
 10864                           fsr2h	equ	0xFDA
 10865                           fsr2l	equ	0xFD9
 10866                           status	equ	0xFD8
 10867                           
 10868 ;; *************** function _displ_hex *****************
 10869 ;; Defined at:
 10870 ;;		line 192 in file "lcd.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  hexnum          3   28[COMRAM] unsigned um
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;  value           8    0[BANK0 ] unsigned char [8]
 10875 ;;  hexnumsave      3    8[BANK0 ] unsigned um
 10876 ;;  i               1   11[BANK0 ] char 
 10877 ;; Return value:  Size  Location     Type
 10878 ;;                  1    wreg      void 
 10879 ;; Registers used:
 10880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10881 ;; Tracked objects:
 10882 ;;		On entry : 0/0
 10883 ;;		On exit  : 0/0
 10884 ;;		Unchanged: 0/0
 10885 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10886 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10887 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10889 ;;      Totals:         3       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10890 ;;Total ram usage:       15 bytes
 10891 ;; Hardware stack levels used:    1
 10892 ;; Hardware stack levels required when called:    7
 10893 ;; This function calls:
 10894 ;;		___ltdiv
 10895 ;;		___ltmod
 10896 ;;		_lcd_writeC
 10897 ;; This function is called by:
 10898 ;;		_displ_sens
 10899 ;;		_displ_time
 10900 ;;		_displ_credit
 10901 ;;		_displ_price
 10902 ;;		_Hopper_coin
 10903 ;;		_Update_Hopcoin
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           	psect	text58
 10908  010E9C                     __ptext58:
 10909                           	opt stack 0
 10910  010E9C                     _displ_hex:
 10911                           	opt stack 19
 10912                           
 10913                           ;lcd.c: 194: signed char i = 0;
 10914                           
 10915                           ;incstack = 0
 10916  010E9C  0E00               	movlw	0
 10917  010E9E  0100               	movlb	0	; () banked
 10918  010EA0  6FB2               	movwf	displ_hex@i& (0+255),b
 10919                           
 10920                           ; BSR set to: 0
 10921                           ;lcd.c: 195: uint8_t value[8];
 10922                           ;lcd.c: 196: uint24_t hexnumsave = hexnum;
 10923  010EA2  C027  F0AF         	movff	displ_hex@hexnum,displ_hex@hexnumsave
 10924  010EA6  C028  F0B0         	movff	displ_hex@hexnum+1,displ_hex@hexnumsave+1
 10925  010EAA  C029  F0B1         	movff	displ_hex@hexnum+2,displ_hex@hexnumsave+2
 10926                           
 10927                           ;lcd.c: 197: while(hexnum > 0)
 10928  010EAE  D02F               	goto	l1522
 10929  010EB0                     
 10930                           ; BSR set to: 0
 10931                           ;lcd.c: 198: {
 10932                           ;lcd.c: 199: value[i] = hexnum % 10;
 10933                           
 10934                           ; BSR set to: 0
 10935  010EB0  51B2               	movf	displ_hex@i& (0+255),w,b
 10936  010EB2  0D01               	mullw	1
 10937  010EB4  0EA7               	movlw	low displ_hex@value
 10938  010EB6  24F3               	addwf	prodl,w,c
 10939  010EB8  6ED9               	movwf	fsr2l,c
 10940  010EBA  0E00               	movlw	high displ_hex@value
 10941  010EBC  20F4               	addwfc	prodh,w,c
 10942  010EBE  6EDA               	movwf	fsr2h,c
 10943  010EC0  C027  F01D         	movff	displ_hex@hexnum,___ltmod@dividend
 10944  010EC4  C028  F01E         	movff	displ_hex@hexnum+1,___ltmod@dividend+1
 10945  010EC8  C029  F01F         	movff	displ_hex@hexnum+2,___ltmod@dividend+2
 10946  010ECC  0E0A               	movlw	10
 10947  010ECE  6E20               	movwf	___ltmod@divisor,c
 10948  010ED0  0E00               	movlw	0
 10949  010ED2  6E21               	movwf	___ltmod@divisor+1,c
 10950  010ED4  0E00               	movlw	0
 10951  010ED6  6E22               	movwf	___ltmod@divisor+2,c
 10952  010ED8  ECA5  F08C         	call	___ltmod	;wreg free
 10953  010EDC  501D               	movf	?___ltmod,w,c
 10954  010EDE  6EDF               	movwf	indf2,c
 10955                           
 10956                           ;lcd.c: 200: hexnum /= 10;
 10957  010EE0  C027  F01D         	movff	displ_hex@hexnum,___ltdiv@dividend
 10958  010EE4  C028  F01E         	movff	displ_hex@hexnum+1,___ltdiv@dividend+1
 10959  010EE8  C029  F01F         	movff	displ_hex@hexnum+2,___ltdiv@dividend+2
 10960  010EEC  0E0A               	movlw	10
 10961  010EEE  6E20               	movwf	___ltdiv@divisor,c
 10962  010EF0  0E00               	movlw	0
 10963  010EF2  6E21               	movwf	___ltdiv@divisor+1,c
 10964  010EF4  0E00               	movlw	0
 10965  010EF6  6E22               	movwf	___ltdiv@divisor+2,c
 10966  010EF8  EC55  F08B         	call	___ltdiv	;wreg free
 10967  010EFC  C01D  F027         	movff	?___ltdiv,displ_hex@hexnum
 10968  010F00  C01E  F028         	movff	?___ltdiv+1,displ_hex@hexnum+1
 10969  010F04  C01F  F029         	movff	?___ltdiv+2,displ_hex@hexnum+2
 10970                           
 10971                           ;lcd.c: 201: i = i + 1;
 10972  010F08  0100               	movlb	0	; () banked
 10973  010F0A  29B2               	incf	displ_hex@i& (0+255),w,b
 10974  010F0C  6FB2               	movwf	displ_hex@i& (0+255),b
 10975  010F0E                     l1522:
 10976                           
 10977                           ; BSR set to: 0
 10978                           
 10979                           ; BSR set to: 0
 10980  010F0E  5027               	movf	displ_hex@hexnum,w,c
 10981  010F10  1028               	iorwf	displ_hex@hexnum+1,w,c
 10982  010F12  1029               	iorwf	displ_hex@hexnum+2,w,c
 10983  010F14  B4D8               	btfsc	status,2,c
 10984  010F16  D00E               	goto	l1525
 10985  010F18  D7CB               	goto	l1523
 10986  010F1A                     
 10987                           ; BSR set to: 0
 10988                           ;lcd.c: 205: {
 10989                           ;lcd.c: 206: i--;
 10990                           
 10991                           ; BSR set to: 0
 10992  010F1A  07B2               	decf	displ_hex@i& (0+255),f,b
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;lcd.c: 207: lcd_writeC(value[i] | 0x30);
 10996  010F1C  51B2               	movf	displ_hex@i& (0+255),w,b
 10997  010F1E  0D01               	mullw	1
 10998  010F20  0EA7               	movlw	low displ_hex@value
 10999  010F22  24F3               	addwf	prodl,w,c
 11000  010F24  6ED9               	movwf	fsr2l,c
 11001  010F26  0E00               	movlw	high displ_hex@value
 11002  010F28  20F4               	addwfc	prodh,w,c
 11003  010F2A  6EDA               	movwf	fsr2h,c
 11004  010F2C  50DF               	movf	indf2,w,c
 11005  010F2E  0930               	iorlw	48
 11006  010F30  ECBE  F08B         	call	_lcd_writeC
 11007  010F34                     l1525:
 11008  010F34  0100               	movlb	0	; () banked
 11009  010F36  51B2               	movf	displ_hex@i& (0+255),w,b
 11010  010F38  0A80               	xorlw	128
 11011  010F3A  0F7F               	addlw	-129
 11012  010F3C  B0D8               	btfsc	status,0,c
 11013  010F3E  D7ED               	goto	l1526
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;lcd.c: 208: }
 11017                           ;lcd.c: 210: if(hexnumsave == 0)
 11018                           
 11019                           ; BSR set to: 0
 11020  010F40  51AF               	movf	displ_hex@hexnumsave& (0+255),w,b
 11021  010F42  11B0               	iorwf	(displ_hex@hexnumsave+1)& (0+255),w,b
 11022  010F44  11B1               	iorwf	(displ_hex@hexnumsave+2)& (0+255),w,b
 11023  010F46  A4D8               	btfss	status,2,c
 11024  010F48  0012               	return	
 11025                           
 11026                           ; BSR set to: 0
 11027                           ;lcd.c: 211: {
 11028                           ;lcd.c: 212: lcd_writeC(0x30);
 11029  010F4A  0E30               	movlw	48
 11030  010F4C  ECBE  F08B         	call	_lcd_writeC
 11031  010F50  0012               	return	
 11032  010F52                     __end_of_displ_hex:
 11033                           	opt stack 0
 11034                           tblptru	equ	0xFF8
 11035                           tblptrh	equ	0xFF7
 11036                           tblptrl	equ	0xFF6
 11037                           tablat	equ	0xFF5
 11038                           prodh	equ	0xFF4
 11039                           prodl	equ	0xFF3
 11040                           postinc0	equ	0xFEE
 11041                           wreg	equ	0xFE8
 11042                           indf2	equ	0xFDF
 11043                           fsr2h	equ	0xFDA
 11044                           fsr2l	equ	0xFD9
 11045                           status	equ	0xFD8
 11046                           
 11047 ;; *************** function _lcd_writeC *****************
 11048 ;; Defined at:
 11049 ;;		line 250 in file "lcd.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;  lcdata          1    wreg     unsigned char 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  lcdata          1   24[COMRAM] unsigned char 
 11054 ;; Return value:  Size  Location     Type
 11055 ;;                  1    wreg      void 
 11056 ;; Registers used:
 11057 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11058 ;; Tracked objects:
 11059 ;;		On entry : 0/0
 11060 ;;		On exit  : 0/0
 11061 ;;		Unchanged: 0/0
 11062 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;Total ram usage:        1 bytes
 11068 ;; Hardware stack levels used:    1
 11069 ;; Hardware stack levels required when called:    6
 11070 ;; This function calls:
 11071 ;;		_lcd_dispadd
 11072 ;;		_lcd_write
 11073 ;; This function is called by:
 11074 ;;		_displ_lflags
 11075 ;;		_displ_sflags
 11076 ;;		_displ_time
 11077 ;;		_displ_code
 11078 ;;		_displ_hex
 11079 ;;		_lcd_string
 11080 ;;		_displ_price
 11081 ;;		_lcd_test
 11082 ;; This function uses a non-reentrant model
 11083 ;;
 11084                           
 11085                           	psect	text59
 11086  01177C                     __ptext59:
 11087                           	opt stack 0
 11088  01177C                     _lcd_writeC:
 11089                           	opt stack 22
 11090                           
 11091                           ;incstack = 0
 11092                           ;lcd_writeC@lcdata stored from wreg
 11093  01177C  6E23               	movwf	lcd_writeC@lcdata,c
 11094  01177E  8487               	bsf	3975,2,c	;# 
 11095                           
 11096                           ;lcd.c: 255: lcd_write(lcdata);
 11097  011780  5023               	movf	lcd_writeC@lcdata,w,c
 11098  011782  ECE9  F08E         	call	_lcd_write
 11099                           
 11100                           ;lcd.c: 259: switch(bflag)
 11101  011786  D021               	goto	l1546
 11102  011788  0E78               	movlw	low _line2
 11103  01178A  6EF6               	movwf	tblptrl,c
 11104  01178C                     	if	1	;There is more than 1 active tblptr byte
 11105  01178C  0EFC               	movlw	high _line2
 11106  01178E  6EF7               	movwf	tblptrh,c
 11107  011790                     	endif
 11108  011790                     	if	1	;There are 3 active tblptr bytes
 11109  011790  0E00               	movlw	low (_line2 shr (0+16))
 11110  011792  6EF8               	movwf	tblptru,c
 11111  011794                     	endif
 11112  011794  0008               	tblrd		*
 11113  011796  50F5               	movf	tablat,w,c
 11114  011798  ECC3  F08F         	call	_lcd_dispadd
 11115                           
 11116                           ;lcd.c: 262: break;
 11117  01179C  D020               	goto	l1548
 11118  01179E  0E77               	movlw	low _line3
 11119  0117A0  6EF6               	movwf	tblptrl,c
 11120  0117A2                     	if	1	;There is more than 1 active tblptr byte
 11121  0117A2  0EFC               	movlw	high _line3
 11122  0117A4  6EF7               	movwf	tblptrh,c
 11123  0117A6                     	endif
 11124  0117A6                     	if	1	;There are 3 active tblptr bytes
 11125  0117A6  0E00               	movlw	low (_line3 shr (0+16))
 11126  0117A8  6EF8               	movwf	tblptru,c
 11127  0117AA                     	endif
 11128  0117AA  0008               	tblrd		*
 11129  0117AC  50F5               	movf	tablat,w,c
 11130  0117AE  ECC3  F08F         	call	_lcd_dispadd
 11131                           
 11132                           ;lcd.c: 264: break;
 11133  0117B2  D015               	goto	l1548
 11134  0117B4  0E76               	movlw	low _line4
 11135  0117B6  6EF6               	movwf	tblptrl,c
 11136  0117B8                     	if	1	;There is more than 1 active tblptr byte
 11137  0117B8  0EFC               	movlw	high _line4
 11138  0117BA  6EF7               	movwf	tblptrh,c
 11139  0117BC                     	endif
 11140  0117BC                     	if	1	;There are 3 active tblptr bytes
 11141  0117BC  0E00               	movlw	low (_line4 shr (0+16))
 11142  0117BE  6EF8               	movwf	tblptru,c
 11143  0117C0                     	endif
 11144  0117C0  0008               	tblrd		*
 11145  0117C2  50F5               	movf	tablat,w,c
 11146  0117C4  ECC3  F08F         	call	_lcd_dispadd
 11147                           
 11148                           ;lcd.c: 266: }
 11149  0117C8  D00A               	goto	l1548
 11150  0117CA                     l1546:
 11151  0117CA  5046               	movf	_bflag,w,c
 11152                           
 11153                           ; Switch size 1, requested type "space"
 11154                           ; Number of cases is 3, Range of values is 19 to 83
 11155                           ; switch strategies available:
 11156                           ; Name         Instructions Cycles
 11157                           ; simple_byte           10     6 (average)
 11158                           ;	Chosen strategy is simple_byte
 11159  0117CC  0A13               	xorlw	19	; case 19
 11160  0117CE  B4D8               	btfsc	status,2,c
 11161  0117D0  D7DB               	goto	l1547
 11162  0117D2  0A34               	xorlw	52	; case 39
 11163  0117D4  B4D8               	btfsc	status,2,c
 11164  0117D6  D7EE               	goto	l1550
 11165  0117D8  0A74               	xorlw	116	; case 83
 11166  0117DA  B4D8               	btfsc	status,2,c
 11167  0117DC  D7E0               	goto	l1549
 11168  0117DE                     l1548:
 11169  0117DE  9487               	bcf	3975,2,c	;# 
 11170  0117E0  0012               	return		;funcret
 11171  0117E2                     __end_of_lcd_writeC:
 11172                           	opt stack 0
 11173                           tblptru	equ	0xFF8
 11174                           tblptrh	equ	0xFF7
 11175                           tblptrl	equ	0xFF6
 11176                           tablat	equ	0xFF5
 11177                           prodh	equ	0xFF4
 11178                           prodl	equ	0xFF3
 11179                           postinc0	equ	0xFEE
 11180                           wreg	equ	0xFE8
 11181                           indf2	equ	0xFDF
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function _lcd_dispadd *****************
 11187 ;; Defined at:
 11188 ;;		line 270 in file "lcd.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  lcdaddress      1    wreg     unsigned char 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;  lcdaddress      1   22[COMRAM] unsigned char 
 11193 ;;  lcdatasave      1   23[COMRAM] unsigned char 
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      void 
 11196 ;; Registers used:
 11197 ;;		wreg, status,2, status,0, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11207 ;;Total ram usage:        2 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    5
 11210 ;; This function calls:
 11211 ;;		_lcd_write
 11212 ;; This function is called by:
 11213 ;;		_displ_sens
 11214 ;;		_displ_lflags
 11215 ;;		_lcd_string
 11216 ;;		_displ_price
 11217 ;;		_displ_nochange
 11218 ;;		_lcd_writeC
 11219 ;;		_Hopper_coin
 11220 ;;		_Update_Hopcoin
 11221 ;; This function uses a non-reentrant model
 11222 ;;
 11223                           
 11224                           	psect	text60
 11225  011F86                     __ptext60:
 11226                           	opt stack 0
 11227  011F86                     _lcd_dispadd:
 11228                           	opt stack 22
 11229                           
 11230                           ;incstack = 0
 11231                           ;lcd_dispadd@lcdaddress stored from wreg
 11232  011F86  6E21               	movwf	lcd_dispadd@lcdaddress,c
 11233                           
 11234                           ;lcd.c: 272: uint8_t lcdatasave = lcdata;
 11235  011F88  C045  F022         	movff	_lcdata,lcd_dispadd@lcdatasave
 11236  011F8C  9487               	bcf	3975,2,c	;# 
 11237                           
 11238                           ;lcd.c: 275: lcd_write(lcdaddress | 0x80);
 11239  011F8E  5021               	movf	lcd_dispadd@lcdaddress,w,c
 11240  011F90  0980               	iorlw	128
 11241  011F92  ECE9  F08E         	call	_lcd_write
 11242  011F96  8487               	bsf	3975,2,c	;# 
 11243                           
 11244                           ;lcd.c: 277: lcdata = lcdatasave;
 11245  011F98  C022  F045         	movff	lcd_dispadd@lcdatasave,_lcdata
 11246  011F9C  0012               	return		;funcret
 11247  011F9E                     __end_of_lcd_dispadd:
 11248                           	opt stack 0
 11249                           tblptru	equ	0xFF8
 11250                           tblptrh	equ	0xFF7
 11251                           tblptrl	equ	0xFF6
 11252                           tablat	equ	0xFF5
 11253                           prodh	equ	0xFF4
 11254                           prodl	equ	0xFF3
 11255                           postinc0	equ	0xFEE
 11256                           wreg	equ	0xFE8
 11257                           indf2	equ	0xFDF
 11258                           fsr2h	equ	0xFDA
 11259                           fsr2l	equ	0xFD9
 11260                           status	equ	0xFD8
 11261                           
 11262 ;; *************** function _lcd_write *****************
 11263 ;; Defined at:
 11264 ;;		line 282 in file "lcd.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;  lcdata          1    wreg     unsigned char 
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  lcdata          1   21[COMRAM] unsigned char 
 11269 ;;  savelatd        1   20[COMRAM] unsigned char 
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  1    wreg      void 
 11272 ;; Registers used:
 11273 ;;		wreg, status,2, status,0, cstack
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11283 ;;Total ram usage:        2 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    4
 11286 ;; This function calls:
 11287 ;;		_lcd_clockE
 11288 ;;		_read_busy
 11289 ;; This function is called by:
 11290 ;;		_lcd_init
 11291 ;;		_displ_note
 11292 ;;		_lcd_string
 11293 ;;		_displ_price
 11294 ;;		_lcd_writeC
 11295 ;;		_lcd_dispadd
 11296 ;; This function uses a non-reentrant model
 11297 ;;
 11298                           
 11299                           	psect	text61
 11300  011DD2                     __ptext61:
 11301                           	opt stack 0
 11302  011DD2                     _lcd_write:
 11303                           	opt stack 23
 11304                           
 11305                           ;incstack = 0
 11306                           ;lcd_write@lcdata stored from wreg
 11307  011DD2  6E20               	movwf	lcd_write@lcdata,c
 11308                           
 11309                           ;lcd.c: 284: uint8_t savelatd = LATD;
 11310  011DD4  CF86 F01F          	movff	3974,lcd_write@savelatd	;volatile
 11311                           
 11312                           ;lcd.c: 287: bflag = read_busy();
 11313  011DD8  EC66  F08D         	call	_read_busy	;wreg free
 11314  011DDC  D002               	goto	L16
 11315  011DDE                     
 11316                           ;lcd.c: 289: {
 11317                           ;lcd.c: 290: bflag = read_busy();
 11318  011DDE  EC66  F08D         	call	_read_busy	;wreg free
 11319  011DE2                     L16:
 11320  011DE2  6E46               	movwf	_bflag,c
 11321  011DE4  BE46               	btfsc	_bflag,7,c
 11322  011DE6  D7FB               	goto	l1558
 11323                           
 11324                           ;lcd.c: 291: }
 11325                           ;lcd.c: 292: LATD = (lcdata >> 4) & 0x0F;
 11326  011DE8  3820               	swapf	lcd_write@lcdata,w,c
 11327  011DEA  0B0F               	andlw	15
 11328  011DEC  0B0F               	andlw	15
 11329  011DEE  6E86               	movwf	3974,c	;volatile
 11330                           
 11331                           ;lcd.c: 294: lcd_clockE();
 11332  011DF0  EC39  F090         	call	_lcd_clockE	;wreg free
 11333                           
 11334                           ;lcd.c: 296: LATD = lcdata & 0x0F;
 11335  011DF4  5020               	movf	lcd_write@lcdata,w,c
 11336  011DF6  0B0F               	andlw	15
 11337  011DF8  6E86               	movwf	3974,c	;volatile
 11338                           
 11339                           ;lcd.c: 297: lcd_clockE();
 11340  011DFA  EC39  F090         	call	_lcd_clockE	;wreg free
 11341                           
 11342                           ;lcd.c: 298: LATD = savelatd;
 11343  011DFE  C01F  FF86         	movff	lcd_write@savelatd,3974	;volatile
 11344  011E02  0012               	return		;funcret
 11345  011E04                     __end_of_lcd_write:
 11346                           	opt stack 0
 11347                           tblptru	equ	0xFF8
 11348                           tblptrh	equ	0xFF7
 11349                           tblptrl	equ	0xFF6
 11350                           tablat	equ	0xFF5
 11351                           prodh	equ	0xFF4
 11352                           prodl	equ	0xFF3
 11353                           postinc0	equ	0xFEE
 11354                           wreg	equ	0xFE8
 11355                           indf2	equ	0xFDF
 11356                           fsr2h	equ	0xFDA
 11357                           fsr2l	equ	0xFD9
 11358                           status	equ	0xFD8
 11359                           
 11360 ;; *************** function _read_busy *****************
 11361 ;; Defined at:
 11362 ;;		line 313 in file "lcd.c"
 11363 ;; Parameters:    Size  Location     Type
 11364 ;;		None
 11365 ;; Auto vars:     Size  Location     Type
 11366 ;;  savelatd        1   19[COMRAM] unsigned char 
 11367 ;;  savelate        1   18[COMRAM] unsigned char 
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      char 
 11370 ;; Registers used:
 11371 ;;		wreg, status,2, status,0, cstack
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11378 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;Total ram usage:        2 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    3
 11384 ;; This function calls:
 11385 ;;		_lcd_clockH
 11386 ;;		_lcd_clockL
 11387 ;; This function is called by:
 11388 ;;		_lcd_write
 11389 ;; This function uses a non-reentrant model
 11390 ;;
 11391                           
 11392                           	psect	text62
 11393  011ACC                     __ptext62:
 11394                           	opt stack 0
 11395  011ACC                     _read_busy:
 11396                           	opt stack 23
 11397                           
 11398                           ;lcd.c: 315: uint8_t savelate = LATE;
 11399                           
 11400                           ;incstack = 0
 11401  011ACC  CF87 F01D          	movff	3975,read_busy@savelate	;volatile
 11402                           
 11403                           ;lcd.c: 316: uint8_t savelatd = LATD;
 11404  011AD0  CF86 F01E          	movff	3974,read_busy@savelatd	;volatile
 11405  011AD4  9487               	bcf	3975,2,c	;# 
 11406  011AD6  8287               	bsf	3975,1,c	;# 
 11407                           
 11408                           ;lcd.c: 319: TRISD = (TRISD | 0x0F);
 11409  011AD8  508B               	movf	3979,w,c	;volatile
 11410  011ADA  090F               	iorlw	15
 11411  011ADC  6E8B               	movwf	3979,c	;volatile
 11412                           
 11413                           ;lcd.c: 320: lcd_clockH();
 11414  011ADE  EC4E  F090         	call	_lcd_clockH	;wreg free
 11415                           
 11416                           ;lcd.c: 321: bflag = (PORTD << 4);
 11417  011AE2  3890               	swapf	3984,w,c	;volatile
 11418  011AE4  0BF0               	andlw	240
 11419  011AE6  6E46               	movwf	_bflag,c
 11420                           
 11421                           ;lcd.c: 322: lcd_clockL();
 11422  011AE8  EC4A  F090         	call	_lcd_clockL	;wreg free
 11423                           
 11424                           ;lcd.c: 323: lcd_clockH();
 11425  011AEC  EC4E  F090         	call	_lcd_clockH	;wreg free
 11426                           
 11427                           ;lcd.c: 324: bflag = bflag | (PORTD & 0x0F);
 11428  011AF0  5090               	movf	3984,w,c	;volatile
 11429  011AF2  0B0F               	andlw	15
 11430  011AF4  1046               	iorwf	_bflag,w,c
 11431  011AF6  6E46               	movwf	_bflag,c
 11432  011AF8  9087               	bcf	3975,0,c	;# 
 11433                           
 11434                           ;lcd.c: 326: TRISD = (TRISD & 0xF0);
 11435  011AFA  508B               	movf	3979,w,c	;volatile
 11436  011AFC  0BF0               	andlw	240
 11437  011AFE  6E8B               	movwf	3979,c	;volatile
 11438  011B00  9287               	bcf	3975,1,c	;# 
 11439                           
 11440                           ;lcd.c: 328: LATD = savelatd;
 11441  011B02  C01E  FF86         	movff	read_busy@savelatd,3974	;volatile
 11442                           
 11443                           ;lcd.c: 329: LATE = savelate;
 11444  011B06  C01D  FF87         	movff	read_busy@savelate,3975	;volatile
 11445                           
 11446                           ;lcd.c: 330: return(bflag);
 11447  011B0A  5046               	movf	_bflag,w,c
 11448  011B0C  0012               	return	
 11449  011B0E                     __end_of_read_busy:
 11450                           	opt stack 0
 11451                           tblptru	equ	0xFF8
 11452                           tblptrh	equ	0xFF7
 11453                           tblptrl	equ	0xFF6
 11454                           tablat	equ	0xFF5
 11455                           prodh	equ	0xFF4
 11456                           prodl	equ	0xFF3
 11457                           postinc0	equ	0xFEE
 11458                           wreg	equ	0xFE8
 11459                           indf2	equ	0xFDF
 11460                           fsr2h	equ	0xFDA
 11461                           fsr2l	equ	0xFD9
 11462                           status	equ	0xFD8
 11463                           
 11464 ;; *************** function _lcd_clockL *****************
 11465 ;; Defined at:
 11466 ;;		line 345 in file "lcd.c"
 11467 ;; Parameters:    Size  Location     Type
 11468 ;;		None
 11469 ;; Auto vars:     Size  Location     Type
 11470 ;;		None
 11471 ;; Return value:  Size  Location     Type
 11472 ;;                  1    wreg      void 
 11473 ;; Registers used:
 11474 ;;		None
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;Total ram usage:        0 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; Hardware stack levels required when called:    2
 11487 ;; This function calls:
 11488 ;;		Nothing
 11489 ;; This function is called by:
 11490 ;;		_read_busy
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           	psect	text63
 11495  012094                     __ptext63:
 11496                           	opt stack 0
 11497  012094                     _lcd_clockL:
 11498                           	opt stack 23
 11499                           
 11500                           ;incstack = 0
 11501  012094  9087               	bcf	3975,0,c	;# 
 11502                           
 11503                           ;lcd.c: 348: _delay((unsigned long)((1)*(12000000/4000000.0)));
 11504  012096  D000               	nop2		;2 cycle nop
 11505  012098  F000               	nop	
 11506  01209A  0012               	return		;funcret
 11507  01209C                     __end_of_lcd_clockL:
 11508                           	opt stack 0
 11509                           tblptru	equ	0xFF8
 11510                           tblptrh	equ	0xFF7
 11511                           tblptrl	equ	0xFF6
 11512                           tablat	equ	0xFF5
 11513                           prodh	equ	0xFF4
 11514                           prodl	equ	0xFF3
 11515                           postinc0	equ	0xFEE
 11516                           wreg	equ	0xFE8
 11517                           indf2	equ	0xFDF
 11518                           fsr2h	equ	0xFDA
 11519                           fsr2l	equ	0xFD9
 11520                           status	equ	0xFD8
 11521                           
 11522 ;; *************** function _lcd_clockH *****************
 11523 ;; Defined at:
 11524 ;;		line 337 in file "lcd.c"
 11525 ;; Parameters:    Size  Location     Type
 11526 ;;		None
 11527 ;; Auto vars:     Size  Location     Type
 11528 ;;		None
 11529 ;; Return value:  Size  Location     Type
 11530 ;;                  1    wreg      void 
 11531 ;; Registers used:
 11532 ;;		None
 11533 ;; Tracked objects:
 11534 ;;		On entry : 0/0
 11535 ;;		On exit  : 0/0
 11536 ;;		Unchanged: 0/0
 11537 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11542 ;;Total ram usage:        0 bytes
 11543 ;; Hardware stack levels used:    1
 11544 ;; Hardware stack levels required when called:    2
 11545 ;; This function calls:
 11546 ;;		Nothing
 11547 ;; This function is called by:
 11548 ;;		_read_busy
 11549 ;; This function uses a non-reentrant model
 11550 ;;
 11551                           
 11552                           	psect	text64
 11553  01209C                     __ptext64:
 11554                           	opt stack 0
 11555  01209C                     _lcd_clockH:
 11556                           	opt stack 23
 11557                           
 11558                           ;incstack = 0
 11559  01209C  8087               	bsf	3975,0,c	;# 
 11560                           
 11561                           ;lcd.c: 340: _delay((unsigned long)((1)*(12000000/4000000.0)));
 11562  01209E  D000               	nop2		;2 cycle nop
 11563  0120A0  F000               	nop	
 11564  0120A2  0012               	return		;funcret
 11565  0120A4                     __end_of_lcd_clockH:
 11566                           	opt stack 0
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           indf2	equ	0xFDF
 11576                           fsr2h	equ	0xFDA
 11577                           fsr2l	equ	0xFD9
 11578                           status	equ	0xFD8
 11579                           
 11580 ;; *************** function _lcd_clockE *****************
 11581 ;; Defined at:
 11582 ;;		line 353 in file "lcd.c"
 11583 ;; Parameters:    Size  Location     Type
 11584 ;;		None
 11585 ;; Auto vars:     Size  Location     Type
 11586 ;;		None
 11587 ;; Return value:  Size  Location     Type
 11588 ;;                  1    wreg      void 
 11589 ;; Registers used:
 11590 ;;		None
 11591 ;; Tracked objects:
 11592 ;;		On entry : 0/0
 11593 ;;		On exit  : 0/0
 11594 ;;		Unchanged: 0/0
 11595 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11600 ;;Total ram usage:        0 bytes
 11601 ;; Hardware stack levels used:    1
 11602 ;; Hardware stack levels required when called:    2
 11603 ;; This function calls:
 11604 ;;		Nothing
 11605 ;; This function is called by:
 11606 ;;		_lcd_init
 11607 ;;		_lcd_write
 11608 ;; This function uses a non-reentrant model
 11609 ;;
 11610                           
 11611                           	psect	text65
 11612  012072                     __ptext65:
 11613                           	opt stack 0
 11614  012072                     _lcd_clockE:
 11615                           	opt stack 24
 11616                           
 11617                           ;incstack = 0
 11618  012072  8087               	bsf	3975,0,c	;# 
 11619                           
 11620                           ;lcd.c: 356: _delay((unsigned long)((1)*(12000000/4000000.0)));
 11621  012074  D000               	nop2		;2 cycle nop
 11622  012076  F000               	nop	
 11623  012078  9087               	bcf	3975,0,c	;# 
 11624                           
 11625                           ;lcd.c: 358: _delay((unsigned long)((1)*(12000000/4000000.0)));
 11626  01207A  D000               	nop2		;2 cycle nop
 11627  01207C  F000               	nop	
 11628  01207E  0012               	return		;funcret
 11629  012080                     __end_of_lcd_clockE:
 11630                           	opt stack 0
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           postinc0	equ	0xFEE
 11638                           wreg	equ	0xFE8
 11639                           indf2	equ	0xFDF
 11640                           fsr2h	equ	0xFDA
 11641                           fsr2l	equ	0xFD9
 11642                           status	equ	0xFD8
 11643                           
 11644 ;; *************** function ___ltmod *****************
 11645 ;; Defined at:
 11646 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/ltmod.c"
 11647 ;; Parameters:    Size  Location     Type
 11648 ;;  dividend        3   18[COMRAM] unsigned um
 11649 ;;  divisor         3   21[COMRAM] unsigned um
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;  counter         1   24[COMRAM] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  3   18[COMRAM] unsigned um
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11661 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11665 ;;Total ram usage:        7 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    2
 11668 ;; This function calls:
 11669 ;;		Nothing
 11670 ;; This function is called by:
 11671 ;;		_displ_hex
 11672 ;; This function uses a non-reentrant model
 11673 ;;
 11674                           
 11675                           	psect	text66
 11676  01194A                     __ptext66:
 11677                           	opt stack 0
 11678  01194A                     ___ltmod:
 11679                           	opt stack 23
 11680                           
 11681                           ;incstack = 0
 11682  01194A  5020               	movf	___ltmod@divisor,w,c
 11683  01194C  1021               	iorwf	___ltmod@divisor+1,w,c
 11684  01194E  1022               	iorwf	___ltmod@divisor+2,w,c
 11685  011950  B4D8               	btfsc	status,2,c
 11686  011952  D01E               	goto	l4483
 11687  011954  0E01               	movlw	1
 11688  011956  6E23               	movwf	___ltmod@counter,c
 11689  011958  D005               	goto	l4478
 11690  01195A  90D8               	bcf	status,0,c
 11691  01195C  3620               	rlcf	___ltmod@divisor,f,c
 11692  01195E  3621               	rlcf	___ltmod@divisor+1,f,c
 11693  011960  3622               	rlcf	___ltmod@divisor+2,f,c
 11694  011962  2A23               	incf	___ltmod@counter,f,c
 11695  011964                     l4478:
 11696  011964  AE22               	btfss	___ltmod@divisor+2,7,c
 11697  011966  D7F9               	goto	l4479
 11698  011968                     u2900:
 11699  011968  5020               	movf	___ltmod@divisor,w,c
 11700  01196A  5C1D               	subwf	___ltmod@dividend,w,c
 11701  01196C  5021               	movf	___ltmod@divisor+1,w,c
 11702  01196E  581E               	subwfb	___ltmod@dividend+1,w,c
 11703  011970  5022               	movf	___ltmod@divisor+2,w,c
 11704  011972  581F               	subwfb	___ltmod@dividend+2,w,c
 11705  011974  A0D8               	btfss	status,0,c
 11706  011976  D006               	goto	l4482
 11707  011978  5020               	movf	___ltmod@divisor,w,c
 11708  01197A  5E1D               	subwf	___ltmod@dividend,f,c
 11709  01197C  5021               	movf	___ltmod@divisor+1,w,c
 11710  01197E  5A1E               	subwfb	___ltmod@dividend+1,f,c
 11711  011980  5022               	movf	___ltmod@divisor+2,w,c
 11712  011982  5A1F               	subwfb	___ltmod@dividend+2,f,c
 11713  011984                     l4482:
 11714  011984  90D8               	bcf	status,0,c
 11715  011986  3222               	rrcf	___ltmod@divisor+2,f,c
 11716  011988  3221               	rrcf	___ltmod@divisor+1,f,c
 11717  01198A  3220               	rrcf	___ltmod@divisor,f,c
 11718  01198C  2E23               	decfsz	___ltmod@counter,f,c
 11719  01198E  D7EC               	goto	u2900
 11720  011990                     l4483:
 11721  011990  C01D  F01D         	movff	___ltmod@dividend,?___ltmod
 11722  011994  C01E  F01E         	movff	___ltmod@dividend+1,?___ltmod+1
 11723  011998  C01F  F01F         	movff	___ltmod@dividend+2,?___ltmod+2
 11724  01199C  0012               	return		;funcret
 11725  01199E                     __end_of___ltmod:
 11726                           	opt stack 0
 11727                           tblptru	equ	0xFF8
 11728                           tblptrh	equ	0xFF7
 11729                           tblptrl	equ	0xFF6
 11730                           tablat	equ	0xFF5
 11731                           prodh	equ	0xFF4
 11732                           prodl	equ	0xFF3
 11733                           postinc0	equ	0xFEE
 11734                           wreg	equ	0xFE8
 11735                           indf2	equ	0xFDF
 11736                           fsr2h	equ	0xFDA
 11737                           fsr2l	equ	0xFD9
 11738                           status	equ	0xFD8
 11739                           
 11740 ;; *************** function ___ltdiv *****************
 11741 ;; Defined at:
 11742 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/ltdiv.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;  dividend        3   18[COMRAM] unsigned um
 11745 ;;  divisor         3   21[COMRAM] unsigned um
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;  quotient        3   24[COMRAM] unsigned um
 11748 ;;  counter         1   27[COMRAM] unsigned char 
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  3   18[COMRAM] unsigned um
 11751 ;; Registers used:
 11752 ;;		wreg, status,2, status,0
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11758 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;Total ram usage:       10 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    2
 11765 ;; This function calls:
 11766 ;;		Nothing
 11767 ;; This function is called by:
 11768 ;;		_displ_hex
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text67
 11773  0116AA                     __ptext67:
 11774                           	opt stack 0
 11775  0116AA                     ___ltdiv:
 11776                           	opt stack 23
 11777                           
 11778                           ;incstack = 0
 11779  0116AA  0E00               	movlw	0
 11780  0116AC  6E23               	movwf	___ltdiv@quotient,c
 11781  0116AE  0E00               	movlw	0
 11782  0116B0  6E24               	movwf	___ltdiv@quotient+1,c
 11783  0116B2  0E00               	movlw	0
 11784  0116B4  6E25               	movwf	___ltdiv@quotient+2,c
 11785  0116B6  5020               	movf	___ltdiv@divisor,w,c
 11786  0116B8  1021               	iorwf	___ltdiv@divisor+1,w,c
 11787  0116BA  1022               	iorwf	___ltdiv@divisor+2,w,c
 11788  0116BC  B4D8               	btfsc	status,2,c
 11789  0116BE  D023               	goto	l4473
 11790  0116C0  0E01               	movlw	1
 11791  0116C2  6E26               	movwf	___ltdiv@counter,c
 11792  0116C4  D005               	goto	l4468
 11793  0116C6  90D8               	bcf	status,0,c
 11794  0116C8  3620               	rlcf	___ltdiv@divisor,f,c
 11795  0116CA  3621               	rlcf	___ltdiv@divisor+1,f,c
 11796  0116CC  3622               	rlcf	___ltdiv@divisor+2,f,c
 11797  0116CE  2A26               	incf	___ltdiv@counter,f,c
 11798  0116D0                     l4468:
 11799  0116D0  AE22               	btfss	___ltdiv@divisor+2,7,c
 11800  0116D2  D7F9               	goto	l4469
 11801  0116D4                     u2870:
 11802  0116D4  90D8               	bcf	status,0,c
 11803  0116D6  3623               	rlcf	___ltdiv@quotient,f,c
 11804  0116D8  3624               	rlcf	___ltdiv@quotient+1,f,c
 11805  0116DA  3625               	rlcf	___ltdiv@quotient+2,f,c
 11806  0116DC  5020               	movf	___ltdiv@divisor,w,c
 11807  0116DE  5C1D               	subwf	___ltdiv@dividend,w,c
 11808  0116E0  5021               	movf	___ltdiv@divisor+1,w,c
 11809  0116E2  581E               	subwfb	___ltdiv@dividend+1,w,c
 11810  0116E4  5022               	movf	___ltdiv@divisor+2,w,c
 11811  0116E6  581F               	subwfb	___ltdiv@dividend+2,w,c
 11812  0116E8  A0D8               	btfss	status,0,c
 11813  0116EA  D007               	goto	l4472
 11814  0116EC  5020               	movf	___ltdiv@divisor,w,c
 11815  0116EE  5E1D               	subwf	___ltdiv@dividend,f,c
 11816  0116F0  5021               	movf	___ltdiv@divisor+1,w,c
 11817  0116F2  5A1E               	subwfb	___ltdiv@dividend+1,f,c
 11818  0116F4  5022               	movf	___ltdiv@divisor+2,w,c
 11819  0116F6  5A1F               	subwfb	___ltdiv@dividend+2,f,c
 11820  0116F8  8023               	bsf	___ltdiv@quotient,0,c
 11821  0116FA                     l4472:
 11822  0116FA  90D8               	bcf	status,0,c
 11823  0116FC  3222               	rrcf	___ltdiv@divisor+2,f,c
 11824  0116FE  3221               	rrcf	___ltdiv@divisor+1,f,c
 11825  011700  3220               	rrcf	___ltdiv@divisor,f,c
 11826  011702  2E26               	decfsz	___ltdiv@counter,f,c
 11827  011704  D7E7               	goto	u2870
 11828  011706                     l4473:
 11829  011706  C023  F01D         	movff	___ltdiv@quotient,?___ltdiv
 11830  01170A  C024  F01E         	movff	___ltdiv@quotient+1,?___ltdiv+1
 11831  01170E  C025  F01F         	movff	___ltdiv@quotient+2,?___ltdiv+2
 11832  011712  0012               	return		;funcret
 11833  011714                     __end_of___ltdiv:
 11834                           	opt stack 0
 11835                           tblptru	equ	0xFF8
 11836                           tblptrh	equ	0xFF7
 11837                           tblptrl	equ	0xFF6
 11838                           tablat	equ	0xFF5
 11839                           prodh	equ	0xFF4
 11840                           prodl	equ	0xFF3
 11841                           postinc0	equ	0xFEE
 11842                           wreg	equ	0xFE8
 11843                           indf2	equ	0xFDF
 11844                           fsr2h	equ	0xFDA
 11845                           fsr2l	equ	0xFD9
 11846                           status	equ	0xFD8
 11847                           
 11848 ;; *************** function _credit_check *****************
 11849 ;; Defined at:
 11850 ;;		line 141 in file "vend.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;		None
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;		None
 11855 ;; Return value:  Size  Location     Type
 11856 ;;                  1    wreg      unsigned char 
 11857 ;; Registers used:
 11858 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11859 ;; Tracked objects:
 11860 ;;		On entry : 0/0
 11861 ;;		On exit  : 0/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11868 ;;Total ram usage:        0 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; Hardware stack levels required when called:    3
 11871 ;; This function calls:
 11872 ;;		_DATAEE_ReadByte
 11873 ;; This function is called by:
 11874 ;;		_displ_credit
 11875 ;;		_vend_init
 11876 ;; This function uses a non-reentrant model
 11877 ;;
 11878                           
 11879                           	psect	text68
 11880  011ED2                     __ptext68:
 11881                           	opt stack 0
 11882  011ED2                     _credit_check:
 11883                           	opt stack 26
 11884                           
 11885                           ;vend.c: 143: cash = DATAEE_ReadByte(credmem);
 11886                           
 11887                           ;incstack = 0
 11888  011ED2  0E4B               	movlw	low _credmem
 11889  011ED4  6EF6               	movwf	tblptrl,c
 11890  011ED6                     	if	1	;There is more than 1 active tblptr byte
 11891  011ED6  0EFC               	movlw	high _credmem
 11892  011ED8  6EF7               	movwf	tblptrh,c
 11893  011EDA                     	endif
 11894  011EDA                     	if	1	;There are 3 active tblptr bytes
 11895  011EDA  0E00               	movlw	low (_credmem shr (0+16))
 11896  011EDC  6EF8               	movwf	tblptru,c
 11897  011EDE                     	endif
 11898  011EDE  0009               	tblrd		*+
 11899  011EE0  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 11900  011EE4  000A               	tblrd		*-
 11901  011EE6  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 11902  011EEA  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
 11903  011EEE  6E3A               	movwf	_cash,c	;volatile
 11904                           
 11905                           ;vend.c: 144: return(cash);
 11906  011EF0  503A               	movf	_cash,w,c	;volatile
 11907  011EF2  0012               	return	
 11908  011EF4                     __end_of_credit_check:
 11909                           	opt stack 0
 11910                           tblptru	equ	0xFF8
 11911                           tblptrh	equ	0xFF7
 11912                           tblptrl	equ	0xFF6
 11913                           tablat	equ	0xFF5
 11914                           prodh	equ	0xFF4
 11915                           prodl	equ	0xFF3
 11916                           postinc0	equ	0xFEE
 11917                           wreg	equ	0xFE8
 11918                           indf2	equ	0xFDF
 11919                           fsr2h	equ	0xFDA
 11920                           fsr2l	equ	0xFD9
 11921                           status	equ	0xFD8
 11922                           
 11923 ;; *************** function _credit_subtract *****************
 11924 ;; Defined at:
 11925 ;;		line 128 in file "vend.c"
 11926 ;; Parameters:    Size  Location     Type
 11927 ;;  credit          1    wreg     unsigned char 
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;  credit          1   22[COMRAM] unsigned char 
 11930 ;; Return value:  Size  Location     Type
 11931 ;;                  1    wreg      void 
 11932 ;; Registers used:
 11933 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11934 ;; Tracked objects:
 11935 ;;		On entry : 0/0
 11936 ;;		On exit  : 0/0
 11937 ;;		Unchanged: 0/0
 11938 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11943 ;;Total ram usage:        1 bytes
 11944 ;; Hardware stack levels used:    1
 11945 ;; Hardware stack levels required when called:    3
 11946 ;; This function calls:
 11947 ;;		_DATAEE_ReadByte
 11948 ;;		_DATAEE_WriteByte
 11949 ;; This function is called by:
 11950 ;;		_main
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           	psect	text69
 11955  0118F4                     __ptext69:
 11956                           	opt stack 0
 11957  0118F4                     _credit_subtract:
 11958                           	opt stack 27
 11959                           
 11960                           ;incstack = 0
 11961                           ;credit_subtract@credit stored from wreg
 11962  0118F4  6E21               	movwf	credit_subtract@credit,c
 11963                           
 11964                           ;vend.c: 130: cash = DATAEE_ReadByte(credmem);
 11965  0118F6  0E4B               	movlw	low _credmem
 11966  0118F8  6EF6               	movwf	tblptrl,c
 11967  0118FA                     	if	1	;There is more than 1 active tblptr byte
 11968  0118FA  0EFC               	movlw	high _credmem
 11969  0118FC  6EF7               	movwf	tblptrh,c
 11970  0118FE                     	endif
 11971  0118FE                     	if	1	;There are 3 active tblptr bytes
 11972  0118FE  0E00               	movlw	low (_credmem shr (0+16))
 11973  011900  6EF8               	movwf	tblptru,c
 11974  011902                     	endif
 11975  011902  0009               	tblrd		*+
 11976  011904  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 11977  011908  000A               	tblrd		*-
 11978  01190A  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 11979  01190E  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
 11980  011912  6E3A               	movwf	_cash,c	;volatile
 11981                           
 11982                           ;vend.c: 131: cash = (cash - credit) & 0xFF;
 11983  011914  5021               	movf	credit_subtract@credit,w,c
 11984  011916  0800               	sublw	0
 11985  011918  243A               	addwf	_cash,w,c	;volatile
 11986  01191A  6E3A               	movwf	_cash,c	;volatile
 11987                           
 11988                           ;vend.c: 132: DATAEE_WriteByte(credmem, cash);
 11989  01191C  0E4B               	movlw	low _credmem
 11990  01191E  6EF6               	movwf	tblptrl,c
 11991  011920                     	if	1	;There is more than 1 active tblptr byte
 11992  011920  0EFC               	movlw	high _credmem
 11993  011922  6EF7               	movwf	tblptrh,c
 11994  011924                     	endif
 11995  011924                     	if	1	;There are 3 active tblptr bytes
 11996  011924  0E00               	movlw	low (_credmem shr (0+16))
 11997  011926  6EF8               	movwf	tblptru,c
 11998  011928                     	endif
 11999  011928  0009               	tblrd		*+
 12000  01192A  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 12001  01192E  000A               	tblrd		*-
 12002  011930  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 12003  011934  C03A  F01F         	movff	_cash,DATAEE_WriteByte@bData	;volatile
 12004  011938  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
 12005                           
 12006                           ;vend.c: 133: if(cash == 0)
 12007  01193C  503A               	movf	_cash,w,c	;volatile
 12008  01193E  A4D8               	btfss	status,2,c
 12009  011940  0012               	return	
 12010                           
 12011                           ;vend.c: 134: {
 12012                           ;vend.c: 135: venflags.iscredit = 0;
 12013  011942  902E               	bcf	_venflags,0,c
 12014                           
 12015                           ;vend.c: 136: venflags.inscoin = 1;
 12016  011944  842E               	bsf	_venflags,2,c
 12017                           
 12018                           ;vend.c: 137: venflags.credisplay = 0;
 12019  011946  982E               	bcf	_venflags,4,c
 12020  011948  0012               	return	
 12021  01194A                     __end_of_credit_subtract:
 12022                           	opt stack 0
 12023                           tblptru	equ	0xFF8
 12024                           tblptrh	equ	0xFF7
 12025                           tblptrl	equ	0xFF6
 12026                           tablat	equ	0xFF5
 12027                           prodh	equ	0xFF4
 12028                           prodl	equ	0xFF3
 12029                           postinc0	equ	0xFEE
 12030                           wreg	equ	0xFE8
 12031                           indf2	equ	0xFDF
 12032                           fsr2h	equ	0xFDA
 12033                           fsr2l	equ	0xFD9
 12034                           status	equ	0xFD8
 12035                           
 12036 ;; *************** function _credit_add *****************
 12037 ;; Defined at:
 12038 ;;		line 113 in file "vend.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;  credit          1    wreg     unsigned char 
 12041 ;; Auto vars:     Size  Location     Type
 12042 ;;  credit          1   29[COMRAM] unsigned char 
 12043 ;; Return value:  Size  Location     Type
 12044 ;;                  1    wreg      void 
 12045 ;; Registers used:
 12046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12047 ;; Tracked objects:
 12048 ;;		On entry : 0/0
 12049 ;;		On exit  : 0/0
 12050 ;;		Unchanged: 0/0
 12051 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12053 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12056 ;;Total ram usage:        1 bytes
 12057 ;; Hardware stack levels used:    1
 12058 ;; Hardware stack levels required when called:    5
 12059 ;; This function calls:
 12060 ;;		_DATAEE_ReadByte
 12061 ;;		_DATAEE_WriteByte
 12062 ;;		_Update_cashaudit
 12063 ;; This function is called by:
 12064 ;;		_main
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           	psect	text70
 12069  011844                     __ptext70:
 12070                           	opt stack 0
 12071  011844                     _credit_add:
 12072                           	opt stack 25
 12073                           
 12074                           ;incstack = 0
 12075                           ;credit_add@credit stored from wreg
 12076  011844  6E28               	movwf	credit_add@credit,c
 12077                           
 12078                           ;vend.c: 115: cash = DATAEE_ReadByte(credmem);
 12079  011846  0E4B               	movlw	low _credmem
 12080  011848  6EF6               	movwf	tblptrl,c
 12081  01184A                     	if	1	;There is more than 1 active tblptr byte
 12082  01184A  0EFC               	movlw	high _credmem
 12083  01184C  6EF7               	movwf	tblptrh,c
 12084  01184E                     	endif
 12085  01184E                     	if	1	;There are 3 active tblptr bytes
 12086  01184E  0E00               	movlw	low (_credmem shr (0+16))
 12087  011850  6EF8               	movwf	tblptru,c
 12088  011852                     	endif
 12089  011852  0009               	tblrd		*+
 12090  011854  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 12091  011858  000A               	tblrd		*-
 12092  01185A  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 12093  01185E  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
 12094  011862  6E3A               	movwf	_cash,c	;volatile
 12095                           
 12096                           ;vend.c: 116: cash = cash + credit;
 12097  011864  503A               	movf	_cash,w,c	;volatile
 12098  011866  2428               	addwf	credit_add@credit,w,c
 12099  011868  6E3A               	movwf	_cash,c	;volatile
 12100                           
 12101                           ;vend.c: 117: DATAEE_WriteByte(credmem, cash);
 12102  01186A  0E4B               	movlw	low _credmem
 12103  01186C  6EF6               	movwf	tblptrl,c
 12104  01186E                     	if	1	;There is more than 1 active tblptr byte
 12105  01186E  0EFC               	movlw	high _credmem
 12106  011870  6EF7               	movwf	tblptrh,c
 12107  011872                     	endif
 12108  011872                     	if	1	;There are 3 active tblptr bytes
 12109  011872  0E00               	movlw	low (_credmem shr (0+16))
 12110  011874  6EF8               	movwf	tblptru,c
 12111  011876                     	endif
 12112  011876  0009               	tblrd		*+
 12113  011878  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 12114  01187C  000A               	tblrd		*-
 12115  01187E  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 12116  011882  C03A  F01F         	movff	_cash,DATAEE_WriteByte@bData	;volatile
 12117  011886  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
 12118                           
 12119                           ;vend.c: 118: if(cash != 0)
 12120  01188A  503A               	movf	_cash,w,c	;volatile
 12121  01188C  B4D8               	btfsc	status,2,c
 12122  01188E  D003               	goto	l2034
 12123                           
 12124                           ;vend.c: 119: {
 12125                           ;vend.c: 120: venflags.iscredit = 1;
 12126  011890  802E               	bsf	_venflags,0,c
 12127                           
 12128                           ;vend.c: 121: venflags.inscoin = 0;
 12129  011892  942E               	bcf	_venflags,2,c
 12130                           
 12131                           ;vend.c: 122: venflags.credisplay = 1;
 12132  011894  882E               	bsf	_venflags,4,c
 12133  011896                     l2034:
 12134                           
 12135                           ;vend.c: 124: }
 12136                           ;vend.c: 125: Update_cashaudit(credit);
 12137  011896  5028               	movf	credit_add@credit,w,c
 12138  011898  ECD8  F085         	call	_Update_cashaudit
 12139  01189C  0012               	return		;funcret
 12140  01189E                     __end_of_credit_add:
 12141                           	opt stack 0
 12142                           tblptru	equ	0xFF8
 12143                           tblptrh	equ	0xFF7
 12144                           tblptrl	equ	0xFF6
 12145                           tablat	equ	0xFF5
 12146                           prodh	equ	0xFF4
 12147                           prodl	equ	0xFF3
 12148                           postinc0	equ	0xFEE
 12149                           wreg	equ	0xFE8
 12150                           indf2	equ	0xFDF
 12151                           fsr2h	equ	0xFDA
 12152                           fsr2l	equ	0xFD9
 12153                           status	equ	0xFD8
 12154                           
 12155 ;; *************** function _Update_cashaudit *****************
 12156 ;; Defined at:
 12157 ;;		line 98 in file "vend.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;  addcash         1    wreg     unsigned char 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;  addcash         1   28[COMRAM] unsigned char 
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      void 
 12164 ;; Registers used:
 12165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;Total ram usage:        1 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    4
 12178 ;; This function calls:
 12179 ;;		_Read_NVstore
 12180 ;;		_Write_NVstore
 12181 ;; This function is called by:
 12182 ;;		_credit_add
 12183 ;; This function uses a non-reentrant model
 12184 ;;
 12185                           
 12186                           	psect	text71
 12187  010BB0                     __ptext71:
 12188                           	opt stack 0
 12189  010BB0                     _Update_cashaudit:
 12190                           	opt stack 25
 12191                           
 12192                           ;incstack = 0
 12193                           ;Update_cashaudit@addcash stored from wreg
 12194  010BB0  6E27               	movwf	Update_cashaudit@addcash,c
 12195                           
 12196                           ;vend.c: 100: Read_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
 12197  010BB2  0E49               	movlw	low _cashinv
 12198  010BB4  6EF6               	movwf	tblptrl,c
 12199  010BB6                     	if	1	;There is more than 1 active tblptr byte
 12200  010BB6  0EFC               	movlw	high _cashinv
 12201  010BB8  6EF7               	movwf	tblptrh,c
 12202  010BBA                     	endif
 12203  010BBA                     	if	1	;There are 3 active tblptr bytes
 12204  010BBA  0E00               	movlw	low (_cashinv shr (0+16))
 12205  010BBC  6EF8               	movwf	tblptru,c
 12206  010BBE                     	endif
 12207  010BBE  0009               	tblrd		*+
 12208  010BC0  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 12209  010BC4  000A               	tblrd		*-
 12210  010BC6  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 12211  010BCA  0E4A               	movlw	low _pvcash
 12212  010BCC  6E21               	movwf	Read_NVstore@storemem,c
 12213  010BCE  0E00               	movlw	high _pvcash
 12214  010BD0  6E22               	movwf	Read_NVstore@storemem+1,c
 12215  010BD2  0E02               	movlw	2
 12216  010BD4  6E23               	movwf	Read_NVstore@storesize,c
 12217  010BD6  EC9D  F08E         	call	_Read_NVstore	;wreg free
 12218                           
 12219                           ;vend.c: 101: Read_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
 12220  010BDA  0E47               	movlw	low _cashint
 12221  010BDC  6EF6               	movwf	tblptrl,c
 12222  010BDE                     	if	1	;There is more than 1 active tblptr byte
 12223  010BDE  0EFC               	movlw	high _cashint
 12224  010BE0  6EF7               	movwf	tblptrh,c
 12225  010BE2                     	endif
 12226  010BE2                     	if	1	;There are 3 active tblptr bytes
 12227  010BE2  0E00               	movlw	low (_cashint shr (0+16))
 12228  010BE4  6EF8               	movwf	tblptru,c
 12229  010BE6                     	endif
 12230  010BE6  0009               	tblrd		*+
 12231  010BE8  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 12232  010BEC  000A               	tblrd		*-
 12233  010BEE  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 12234  010BF2  0E47               	movlw	low _pnvcash
 12235  010BF4  6E21               	movwf	Read_NVstore@storemem,c
 12236  010BF6  0E00               	movlw	high _pnvcash
 12237  010BF8  6E22               	movwf	Read_NVstore@storemem+1,c
 12238  010BFA  0E03               	movlw	3
 12239  010BFC  6E23               	movwf	Read_NVstore@storesize,c
 12240  010BFE  EC9D  F08E         	call	_Read_NVstore	;wreg free
 12241                           
 12242                           ;vend.c: 103: pvcash = pvcash + (uint16_t)addcash;
 12243  010C02  5027               	movf	Update_cashaudit@addcash,w,c
 12244  010C04  244A               	addwf	_pvcash,w,c	;volatile
 12245  010C06  6E4A               	movwf	_pvcash,c	;volatile
 12246  010C08  0E00               	movlw	0
 12247  010C0A  204B               	addwfc	_pvcash+1,w,c	;volatile
 12248  010C0C  6E4B               	movwf	_pvcash+1,c	;volatile
 12249                           
 12250                           ;vend.c: 105: pnvcash = pnvcash + (uint24_t)addcash;
 12251  010C0E  5027               	movf	Update_cashaudit@addcash,w,c
 12252  010C10  2447               	addwf	_pnvcash,w,c	;volatile
 12253  010C12  6E47               	movwf	_pnvcash,c	;volatile
 12254  010C14  0E00               	movlw	0
 12255  010C16  2048               	addwfc	_pnvcash+1,w,c	;volatile
 12256  010C18  6E48               	movwf	_pnvcash+1,c	;volatile
 12257  010C1A  0E00               	movlw	0
 12258  010C1C  2049               	addwfc	_pnvcash+2,w,c	;volatile
 12259  010C1E  6E49               	movwf	_pnvcash+2,c	;volatile
 12260                           
 12261                           ;vend.c: 107: Write_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
 12262  010C20  0E49               	movlw	low _cashinv
 12263  010C22  6EF6               	movwf	tblptrl,c
 12264  010C24                     	if	1	;There is more than 1 active tblptr byte
 12265  010C24  0EFC               	movlw	high _cashinv
 12266  010C26  6EF7               	movwf	tblptrh,c
 12267  010C28                     	endif
 12268  010C28                     	if	1	;There are 3 active tblptr bytes
 12269  010C28  0E00               	movlw	low (_cashinv shr (0+16))
 12270  010C2A  6EF8               	movwf	tblptru,c
 12271  010C2C                     	endif
 12272  010C2C  0009               	tblrd		*+
 12273  010C2E  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
 12274  010C32  000A               	tblrd		*-
 12275  010C34  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
 12276  010C38  0E4A               	movlw	low _pvcash
 12277  010C3A  6E23               	movwf	Write_NVstore@storemem,c
 12278  010C3C  0E00               	movlw	high _pvcash
 12279  010C3E  6E24               	movwf	Write_NVstore@storemem+1,c
 12280  010C40  0E02               	movlw	2
 12281  010C42  6E25               	movwf	Write_NVstore@storesize,c
 12282  010C44  EC31  F08F         	call	_Write_NVstore	;wreg free
 12283                           
 12284                           ;vend.c: 108: Write_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
 12285  010C48  0E47               	movlw	low _cashint
 12286  010C4A  6EF6               	movwf	tblptrl,c
 12287  010C4C                     	if	1	;There is more than 1 active tblptr byte
 12288  010C4C  0EFC               	movlw	high _cashint
 12289  010C4E  6EF7               	movwf	tblptrh,c
 12290  010C50                     	endif
 12291  010C50                     	if	1	;There are 3 active tblptr bytes
 12292  010C50  0E00               	movlw	low (_cashint shr (0+16))
 12293  010C52  6EF8               	movwf	tblptru,c
 12294  010C54                     	endif
 12295  010C54  0009               	tblrd		*+
 12296  010C56  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
 12297  010C5A  000A               	tblrd		*-
 12298  010C5C  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
 12299  010C60  0E47               	movlw	low _pnvcash
 12300  010C62  6E23               	movwf	Write_NVstore@storemem,c
 12301  010C64  0E00               	movlw	high _pnvcash
 12302  010C66  6E24               	movwf	Write_NVstore@storemem+1,c
 12303  010C68  0E03               	movlw	3
 12304  010C6A  6E25               	movwf	Write_NVstore@storesize,c
 12305  010C6C  EC31  F08F         	call	_Write_NVstore	;wreg free
 12306  010C70  F000               	nop		;# 
 12307  010C72  0012               	return		;funcret
 12308  010C74                     __end_of_Update_cashaudit:
 12309                           	opt stack 0
 12310                           tblptru	equ	0xFF8
 12311                           tblptrh	equ	0xFF7
 12312                           tblptrl	equ	0xFF6
 12313                           tablat	equ	0xFF5
 12314                           prodh	equ	0xFF4
 12315                           prodl	equ	0xFF3
 12316                           postinc0	equ	0xFEE
 12317                           wreg	equ	0xFE8
 12318                           indf2	equ	0xFDF
 12319                           fsr2h	equ	0xFDA
 12320                           fsr2l	equ	0xFD9
 12321                           status	equ	0xFD8
 12322                           
 12323 ;; *************** function _Write_NVstore *****************
 12324 ;; Defined at:
 12325 ;;		line 78 in file "vend.c"
 12326 ;; Parameters:    Size  Location     Type
 12327 ;;  storeadd        2   22[COMRAM] unsigned int 
 12328 ;;  storemem        2   24[COMRAM] PTR unsigned char 
 12329 ;;		 -> pnvcash(3), pvcash(2), 
 12330 ;;  storesize       1   26[COMRAM] unsigned char 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  i               1   27[COMRAM] unsigned char 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      void 
 12335 ;; Registers used:
 12336 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12342 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12345 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12346 ;;Total ram usage:        6 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    3
 12349 ;; This function calls:
 12350 ;;		_DATAEE_WriteByte
 12351 ;; This function is called by:
 12352 ;;		_Update_cashaudit
 12353 ;;		_Update_coinsout
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           	psect	text72
 12358  011E62                     __ptext72:
 12359                           	opt stack 0
 12360  011E62                     _Write_NVstore:
 12361                           	opt stack 25
 12362                           
 12363                           ;vend.c: 80: uint8_t i = 0;
 12364                           
 12365                           ;incstack = 0
 12366  011E62  0E00               	movlw	0
 12367  011E64  6E26               	movwf	Write_NVstore@i,c
 12368                           
 12369                           ;vend.c: 81: while(i < storesize)
 12370  011E66  D00C               	goto	l2019
 12371  011E68                     
 12372                           ;vend.c: 82: {
 12373                           ;vend.c: 83: DATAEE_WriteByte(storeadd, storemem + i);
 12374  011E68  C021  F01D         	movff	Write_NVstore@storeadd,DATAEE_WriteByte@bAdd
 12375  011E6C  C022  F01E         	movff	Write_NVstore@storeadd+1,DATAEE_WriteByte@bAdd+1
 12376  011E70  5026               	movf	Write_NVstore@i,w,c
 12377  011E72  0D01               	mullw	1
 12378  011E74  5023               	movf	Write_NVstore@storemem,w,c
 12379  011E76  24F3               	addwf	prodl,w,c
 12380  011E78  6E1F               	movwf	DATAEE_WriteByte@bData,c
 12381  011E7A  ECC4  F08D         	call	_DATAEE_WriteByte	;wreg free
 12382                           
 12383                           ;vend.c: 84: i++;
 12384  011E7E  2A26               	incf	Write_NVstore@i,f,c
 12385  011E80                     l2019:
 12386  011E80  5025               	movf	Write_NVstore@storesize,w,c
 12387  011E82  5C26               	subwf	Write_NVstore@i,w,c
 12388  011E84  B0D8               	btfsc	status,0,c
 12389  011E86  0012               	return	
 12390  011E88  D7EF               	goto	l2020
 12391  011E8A                     __end_of_Write_NVstore:
 12392                           	opt stack 0
 12393                           tblptru	equ	0xFF8
 12394                           tblptrh	equ	0xFF7
 12395                           tblptrl	equ	0xFF6
 12396                           tablat	equ	0xFF5
 12397                           prodh	equ	0xFF4
 12398                           prodl	equ	0xFF3
 12399                           postinc0	equ	0xFEE
 12400                           wreg	equ	0xFE8
 12401                           indf2	equ	0xFDF
 12402                           fsr2h	equ	0xFDA
 12403                           fsr2l	equ	0xFD9
 12404                           status	equ	0xFD8
 12405                           
 12406 ;; *************** function _DATAEE_WriteByte *****************
 12407 ;; Defined at:
 12408 ;;		line 169 in file "mcc_generated_files/memory.c"
 12409 ;; Parameters:    Size  Location     Type
 12410 ;;  bAdd            2   18[COMRAM] unsigned int 
 12411 ;;  bData           1   20[COMRAM] unsigned char 
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;  GIEBitValue     1   21[COMRAM] unsigned char 
 12414 ;; Return value:  Size  Location     Type
 12415 ;;                  1    wreg      void 
 12416 ;; Registers used:
 12417 ;;		wreg, status,2, status,0
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12423 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12426 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12427 ;;Total ram usage:        4 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; Hardware stack levels required when called:    2
 12430 ;; This function calls:
 12431 ;;		Nothing
 12432 ;; This function is called by:
 12433 ;;		_displ_sens
 12434 ;;		_Write_NVstore
 12435 ;;		_credit_add
 12436 ;;		_credit_subtract
 12437 ;;		_Update_Hopcoin
 12438 ;;		_Clear_cred
 12439 ;;		_set_price
 12440 ;;		_Vend_timeset
 12441 ;;		_Link_chan
 12442 ;;		_off_sens
 12443 ;;		_Reset_settings
 12444 ;;		_save_notes
 12445 ;;		_hopper_pay
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           	psect	text73
 12450  011B88                     __ptext73:
 12451                           	opt stack 0
 12452  011B88                     _DATAEE_WriteByte:
 12453                           	opt stack 24
 12454                           
 12455                           ;memory.c: 171: uint8_t GIEBitValue = INTCONbits.GIE;
 12456                           
 12457                           ;incstack = 0
 12458  011B88  0E00               	movlw	0
 12459  011B8A  BEF2               	btfsc	intcon,7,c	;volatile
 12460  011B8C  0E01               	movlw	1
 12461  011B8E  6E20               	movwf	DATAEE_WriteByte@GIEBitValue,c
 12462                           
 12463                           ;memory.c: 173: NVMADRH = ((bAdd >> 8) & 0x03);
 12464  011B90  501E               	movf	DATAEE_WriteByte@bAdd+1,w,c
 12465  011B92  0B03               	andlw	3
 12466  011B94  6E7F               	movwf	3967,c	;volatile
 12467                           
 12468                           ;memory.c: 174: NVMADRL = (bAdd & 0xFF);
 12469  011B96  C01D  FF7E         	movff	DATAEE_WriteByte@bAdd,3966	;volatile
 12470                           
 12471                           ;memory.c: 175: NVMDAT = bData;
 12472  011B9A  C01F  FF80         	movff	DATAEE_WriteByte@bData,3968	;volatile
 12473                           
 12474                           ;memory.c: 176: NVMCON1bits.NVMREG = 0;
 12475  011B9E  0E3F               	movlw	-193
 12476  011BA0  1681               	andwf	3969,f,c	;volsfr
 12477                           
 12478                           ;memory.c: 177: NVMCON1bits.WREN = 1;
 12479  011BA2  8481               	bsf	3969,2,c	;volsfr
 12480                           
 12481                           ;memory.c: 178: INTCONbits.GIE = 0;
 12482  011BA4  9EF2               	bcf	intcon,7,c	;volatile
 12483                           
 12484                           ;memory.c: 179: NVMCON2 = 0x55;
 12485  011BA6  0E55               	movlw	85
 12486  011BA8  6E82               	movwf	3970,c	;volsfr
 12487                           
 12488                           ;memory.c: 180: NVMCON2 = 0xAA;
 12489  011BAA  0EAA               	movlw	170
 12490  011BAC  6E82               	movwf	3970,c	;volsfr
 12491                           
 12492                           ;memory.c: 181: NVMCON1bits.WR = 1;
 12493  011BAE  8281               	bsf	3969,1,c	;volsfr
 12494  011BB0                     
 12495                           ;memory.c: 184: {
 12496  011BB0  B281               	btfsc	3969,1,c	;volsfr
 12497  011BB2  D7FE               	goto	l245
 12498                           
 12499                           ;memory.c: 185: }
 12500                           ;memory.c: 187: NVMCON1bits.WREN = 0;
 12501  011BB4  9481               	bcf	3969,2,c	;volsfr
 12502                           
 12503                           ;memory.c: 188: INTCONbits.GIE = GIEBitValue;
 12504  011BB6  B020               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 12505  011BB8  D002               	bra	u3025
 12506  011BBA  9EF2               	bcf	intcon,7,c	;volatile
 12507  011BBC  D001               	bra	u3026
 12508  011BBE                     u3025:
 12509  011BBE  8EF2               	bsf	intcon,7,c	;volatile
 12510  011BC0                     u3026:
 12511  011BC0  0012               	return		;funcret
 12512  011BC2                     __end_of_DATAEE_WriteByte:
 12513                           	opt stack 0
 12514                           tblptru	equ	0xFF8
 12515                           tblptrh	equ	0xFF7
 12516                           tblptrl	equ	0xFF6
 12517                           tablat	equ	0xFF5
 12518                           prodh	equ	0xFF4
 12519                           prodl	equ	0xFF3
 12520                           intcon	equ	0xFF2
 12521                           postinc0	equ	0xFEE
 12522                           wreg	equ	0xFE8
 12523                           indf2	equ	0xFDF
 12524                           fsr2h	equ	0xFDA
 12525                           fsr2l	equ	0xFD9
 12526                           status	equ	0xFD8
 12527                           
 12528 ;; *************** function _Read_NVstore *****************
 12529 ;; Defined at:
 12530 ;;		line 88 in file "vend.c"
 12531 ;; Parameters:    Size  Location     Type
 12532 ;;  storeadd        2   20[COMRAM] unsigned int 
 12533 ;;  storemem        2   22[COMRAM] PTR unsigned char 
 12534 ;;		 -> pnvcash(3), pvcash(2), 
 12535 ;;  storesize       1   24[COMRAM] unsigned char 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  i               1   25[COMRAM] unsigned char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  1    wreg      void 
 12540 ;; Registers used:
 12541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12547 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12550 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12551 ;;Total ram usage:        6 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    3
 12554 ;; This function calls:
 12555 ;;		_DATAEE_ReadByte
 12556 ;; This function is called by:
 12557 ;;		_Update_cashaudit
 12558 ;;		_Update_coinsout
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           	psect	text74
 12563  011D3A                     __ptext74:
 12564                           	opt stack 0
 12565  011D3A                     _Read_NVstore:
 12566                           	opt stack 25
 12567                           
 12568                           ;vend.c: 90: uint8_t i = 0;
 12569                           
 12570                           ;incstack = 0
 12571  011D3A  0E00               	movlw	0
 12572  011D3C  6E24               	movwf	Read_NVstore@i,c
 12573                           
 12574                           ;vend.c: 91: while(i < storesize)
 12575  011D3E  D012               	goto	l2025
 12576  011D40                     
 12577                           ;vend.c: 92: {
 12578                           ;vend.c: 93: storemem[i] = DATAEE_ReadByte(storeadd + i);
 12579  011D40  5024               	movf	Read_NVstore@i,w,c
 12580  011D42  0D01               	mullw	1
 12581  011D44  50F3               	movf	prodl,w,c
 12582  011D46  2421               	addwf	Read_NVstore@storemem,w,c
 12583  011D48  6ED9               	movwf	fsr2l,c
 12584  011D4A  50F4               	movf	prodh,w,c
 12585  011D4C  2022               	addwfc	Read_NVstore@storemem+1,w,c
 12586  011D4E  6EDA               	movwf	fsr2h,c
 12587  011D50  5024               	movf	Read_NVstore@i,w,c
 12588  011D52  241F               	addwf	Read_NVstore@storeadd,w,c
 12589  011D54  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 12590  011D56  0E00               	movlw	0
 12591  011D58  2020               	addwfc	Read_NVstore@storeadd+1,w,c
 12592  011D5A  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 12593  011D5C  ECCF  F08F         	call	_DATAEE_ReadByte	;wreg free
 12594  011D60  6EDF               	movwf	indf2,c
 12595                           
 12596                           ;vend.c: 94: i++;
 12597  011D62  2A24               	incf	Read_NVstore@i,f,c
 12598  011D64                     l2025:
 12599  011D64  5023               	movf	Read_NVstore@storesize,w,c
 12600  011D66  5C24               	subwf	Read_NVstore@i,w,c
 12601  011D68  B0D8               	btfsc	status,0,c
 12602  011D6A  0012               	return	
 12603  011D6C  D7E9               	goto	l2026
 12604  011D6E                     __end_of_Read_NVstore:
 12605                           	opt stack 0
 12606                           tblptru	equ	0xFF8
 12607                           tblptrh	equ	0xFF7
 12608                           tblptrl	equ	0xFF6
 12609                           tablat	equ	0xFF5
 12610                           prodh	equ	0xFF4
 12611                           prodl	equ	0xFF3
 12612                           intcon	equ	0xFF2
 12613                           postinc0	equ	0xFEE
 12614                           wreg	equ	0xFE8
 12615                           indf2	equ	0xFDF
 12616                           fsr2h	equ	0xFDA
 12617                           fsr2l	equ	0xFD9
 12618                           status	equ	0xFD8
 12619                           
 12620 ;; *************** function _DATAEE_ReadByte *****************
 12621 ;; Defined at:
 12622 ;;		line 191 in file "mcc_generated_files/memory.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  bAdd            2   18[COMRAM] unsigned int 
 12625 ;; Auto vars:     Size  Location     Type
 12626 ;;		None
 12627 ;; Return value:  Size  Location     Type
 12628 ;;                  1    wreg      unsigned char 
 12629 ;; Registers used:
 12630 ;;		wreg, status,2, status,0
 12631 ;; Tracked objects:
 12632 ;;		On entry : 0/0
 12633 ;;		On exit  : 0/0
 12634 ;;		Unchanged: 0/0
 12635 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12636 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12639 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12640 ;;Total ram usage:        2 bytes
 12641 ;; Hardware stack levels used:    1
 12642 ;; Hardware stack levels required when called:    2
 12643 ;; This function calls:
 12644 ;;		Nothing
 12645 ;; This function is called by:
 12646 ;;		_main
 12647 ;;		_Init_vendmem
 12648 ;;		_vend_init
 12649 ;;		_Read_NVstore
 12650 ;;		_credit_add
 12651 ;;		_credit_subtract
 12652 ;;		_credit_check
 12653 ;;		_Hopper_coin
 12654 ;;		_set_price
 12655 ;;		_Vend_timeset
 12656 ;;		_Link_chan
 12657 ;;		_off_sens
 12658 ;;		_mdb_init
 12659 ;; This function uses a non-reentrant model
 12660 ;;
 12661                           
 12662                           	psect	text75
 12663  011F9E                     __ptext75:
 12664                           	opt stack 0
 12665  011F9E                     _DATAEE_ReadByte:
 12666                           	opt stack 26
 12667                           
 12668                           ;memory.c: 193: NVMADRH = ((bAdd >> 8) & 0x03);
 12669                           
 12670                           ;incstack = 0
 12671  011F9E  501E               	movf	DATAEE_ReadByte@bAdd+1,w,c
 12672  011FA0  0B03               	andlw	3
 12673  011FA2  6E7F               	movwf	3967,c	;volatile
 12674                           
 12675                           ;memory.c: 194: NVMADRL = (bAdd & 0xFF);
 12676  011FA4  C01D  FF7E         	movff	DATAEE_ReadByte@bAdd,3966	;volatile
 12677                           
 12678                           ;memory.c: 195: NVMCON1bits.NVMREG = 0;
 12679  011FA8  0E3F               	movlw	-193
 12680  011FAA  1681               	andwf	3969,f,c	;volsfr
 12681                           
 12682                           ;memory.c: 196: NVMCON1bits.RD = 1;
 12683  011FAC  8081               	bsf	3969,0,c	;volsfr
 12684                           
 12685                           ;memory.c: 197: __nop();
 12686  011FAE  F000               	nop	
 12687                           
 12688                           ;memory.c: 198: __nop();
 12689  011FB0  F000               	nop	
 12690                           
 12691                           ;memory.c: 200: return (NVMDAT);
 12692  011FB2  5080               	movf	3968,w,c	;volatile
 12693  011FB4  0012               	return	
 12694  011FB6                     __end_of_DATAEE_ReadByte:
 12695                           	opt stack 0
 12696                           tblptru	equ	0xFF8
 12697                           tblptrh	equ	0xFF7
 12698                           tblptrl	equ	0xFF6
 12699                           tablat	equ	0xFF5
 12700                           prodh	equ	0xFF4
 12701                           prodl	equ	0xFF3
 12702                           intcon	equ	0xFF2
 12703                           postinc0	equ	0xFEE
 12704                           wreg	equ	0xFE8
 12705                           indf2	equ	0xFDF
 12706                           fsr2h	equ	0xFDA
 12707                           fsr2l	equ	0xFD9
 12708                           status	equ	0xFD8
 12709                           
 12710 ;; *************** function _SYSTEM_Initialize *****************
 12711 ;; Defined at:
 12712 ;;		line 116 in file "mcc_generated_files/mcc.c"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;		None
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;		None
 12717 ;; Return value:  Size  Location     Type
 12718 ;;                  1    wreg      void 
 12719 ;; Registers used:
 12720 ;;		wreg, status,2, status,0, cstack
 12721 ;; Tracked objects:
 12722 ;;		On entry : 0/0
 12723 ;;		On exit  : 0/0
 12724 ;;		Unchanged: 0/0
 12725 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12729 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12730 ;;Total ram usage:        0 bytes
 12731 ;; Hardware stack levels used:    1
 12732 ;; Hardware stack levels required when called:    3
 12733 ;; This function calls:
 12734 ;;		_CMP1_Initialize
 12735 ;;		_DAC1_Initialize
 12736 ;;		_EUSART1_Initialize
 12737 ;;		_INTERRUPT_Initialize
 12738 ;;		_OSCILLATOR_Initialize
 12739 ;;		_PIN_MANAGER_Initialize
 12740 ;;		_PMD_Initialize
 12741 ;;		_TMR0_Initialize
 12742 ;;		_TMR1_Initialize
 12743 ;;		_TMR2_Initialize
 12744 ;;		_TMR3_Initialize
 12745 ;;		_TMR4_Initialize
 12746 ;;		_TMR5_Initialize
 12747 ;; This function is called by:
 12748 ;;		_main
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           	psect	text76
 12753  011BFA                     __ptext76:
 12754                           	opt stack 0
 12755  011BFA                     _SYSTEM_Initialize:
 12756                           	opt stack 27
 12757                           
 12758                           ;mcc.c: 118: INTERRUPT_Initialize();
 12759                           
 12760                           ;incstack = 0
 12761  011BFA  EC52  F090         	call	_INTERRUPT_Initialize	;wreg free
 12762                           
 12763                           ;mcc.c: 119: PMD_Initialize();
 12764  011BFE  ECB5  F08F         	call	_PMD_Initialize	;wreg free
 12765                           
 12766                           ;mcc.c: 120: PIN_MANAGER_Initialize();
 12767  011C02  ECDE  F08A         	call	_PIN_MANAGER_Initialize	;wreg free
 12768                           
 12769                           ;mcc.c: 121: OSCILLATOR_Initialize();
 12770  011C06  ECDB  F08F         	call	_OSCILLATOR_Initialize	;wreg free
 12771                           
 12772                           ;mcc.c: 122: CMP1_Initialize();
 12773  011C0A  EC08  F090         	call	_CMP1_Initialize	;wreg free
 12774                           
 12775                           ;mcc.c: 123: TMR3_Initialize();
 12776  011C0E  EC33  F08E         	call	_TMR3_Initialize	;wreg free
 12777                           
 12778                           ;mcc.c: 124: TMR4_Initialize();
 12779  011C12  ECA7  F08F         	call	_TMR4_Initialize	;wreg free
 12780                           
 12781                           ;mcc.c: 125: DAC1_Initialize();
 12782  011C16  EC40  F090         	call	_DAC1_Initialize	;wreg free
 12783                           
 12784                           ;mcc.c: 126: TMR2_Initialize();
 12785  011C1A  EC8A  F08F         	call	_TMR2_Initialize	;wreg free
 12786                           
 12787                           ;mcc.c: 127: TMR5_Initialize();
 12788  011C1E  EC18  F08E         	call	_TMR5_Initialize	;wreg free
 12789                           
 12790                           ;mcc.c: 128: TMR1_Initialize();
 12791  011C22  EC4E  F08E         	call	_TMR1_Initialize	;wreg free
 12792                           
 12793                           ;mcc.c: 129: TMR0_Initialize();
 12794  011C26  EC1A  F08F         	call	_TMR0_Initialize	;wreg free
 12795                           
 12796                           ;mcc.c: 130: EUSART1_Initialize();
 12797  011C2A  ECFD  F08F         	call	_EUSART1_Initialize	;wreg free
 12798  011C2E  0012               	return		;funcret
 12799  011C30                     __end_of_SYSTEM_Initialize:
 12800                           	opt stack 0
 12801                           tblptru	equ	0xFF8
 12802                           tblptrh	equ	0xFF7
 12803                           tblptrl	equ	0xFF6
 12804                           tablat	equ	0xFF5
 12805                           prodh	equ	0xFF4
 12806                           prodl	equ	0xFF3
 12807                           intcon	equ	0xFF2
 12808                           postinc0	equ	0xFEE
 12809                           wreg	equ	0xFE8
 12810                           indf2	equ	0xFDF
 12811                           fsr2h	equ	0xFDA
 12812                           fsr2l	equ	0xFD9
 12813                           status	equ	0xFD8
 12814                           
 12815 ;; *************** function _TMR5_Initialize *****************
 12816 ;; Defined at:
 12817 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 12818 ;; Parameters:    Size  Location     Type
 12819 ;;		None
 12820 ;; Auto vars:     Size  Location     Type
 12821 ;;		None
 12822 ;; Return value:  Size  Location     Type
 12823 ;;                  1    wreg      void 
 12824 ;; Registers used:
 12825 ;;		wreg, status,2, status,0
 12826 ;; Tracked objects:
 12827 ;;		On entry : 0/0
 12828 ;;		On exit  : 0/0
 12829 ;;		Unchanged: 0/0
 12830 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12835 ;;Total ram usage:        2 bytes
 12836 ;; Hardware stack levels used:    1
 12837 ;; Hardware stack levels required when called:    2
 12838 ;; This function calls:
 12839 ;;		Nothing
 12840 ;; This function is called by:
 12841 ;;		_SYSTEM_Initialize
 12842 ;;		_mdb_unlock
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           	psect	text77
 12847  011C30                     __ptext77:
 12848                           	opt stack 0
 12849  011C30                     _TMR5_Initialize:
 12850                           	opt stack 26
 12851                           
 12852                           ;tmr5.c: 67: T5GCON = 0x00;
 12853                           
 12854                           ;incstack = 0
 12855  011C30  0E00               	movlw	0
 12856  011C32  6EC4               	movwf	4036,c	;volatile
 12857                           
 12858                           ;tmr5.c: 70: T5GATE = 0x00;
 12859  011C34  0E00               	movlw	0
 12860  011C36  6EC5               	movwf	4037,c	;volatile
 12861                           
 12862                           ;tmr5.c: 73: T5CLK = 0x04;
 12863  011C38  0E04               	movlw	4
 12864  011C3A  6EC6               	movwf	4038,c	;volatile
 12865                           
 12866                           ;tmr5.c: 76: TMR5H = 0xE1;
 12867  011C3C  0EE1               	movlw	225
 12868  011C3E  6EC2               	movwf	4034,c	;volatile
 12869                           
 12870                           ;tmr5.c: 79: TMR5L = 0xBA;
 12871  011C40  0EBA               	movlw	186
 12872  011C42  6EC1               	movwf	4033,c	;volatile
 12873                           
 12874                           ;tmr5.c: 82: timer5ReloadVal=(uint16_t)((TMR5H << 8) | TMR5L);
 12875  011C44  50C1               	movf	4033,w,c	;volatile
 12876  011C46  CFC2 F01D          	movff	4034,??_TMR5_Initialize	;volatile
 12877  011C4A  6A1E               	clrf	(??_TMR5_Initialize+1)& (0+255),c
 12878  011C4C  C01D  F01E         	movff	??_TMR5_Initialize,??_TMR5_Initialize+1
 12879  011C50  6A1D               	clrf	??_TMR5_Initialize,c
 12880  011C52  101D               	iorwf	??_TMR5_Initialize,w,c
 12881  011C54  0100               	movlb	0	; () banked
 12882  011C56  6FBA               	movwf	_timer5ReloadVal& (0+255),b	;volatile
 12883  011C58  501E               	movf	??_TMR5_Initialize+1,w,c
 12884  011C5A  6FBB               	movwf	(_timer5ReloadVal+1)& (0+255),b	;volatile
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;tmr5.c: 85: PIR4bits.TMR5IF = 0;
 12888  011C5C  010E               	movlb	14	; () banked
 12889  011C5E  99CE               	bcf	206,4,b	;volatile
 12890                           
 12891                           ; BSR set to: 14
 12892                           ;tmr5.c: 88: T5CON = 0x01;
 12893  011C60  0E01               	movlw	1
 12894  011C62  6EC3               	movwf	4035,c	;volatile
 12895                           
 12896                           ; BSR set to: 14
 12897  011C64  0012               	return		;funcret
 12898  011C66                     __end_of_TMR5_Initialize:
 12899                           	opt stack 0
 12900                           tblptru	equ	0xFF8
 12901                           tblptrh	equ	0xFF7
 12902                           tblptrl	equ	0xFF6
 12903                           tablat	equ	0xFF5
 12904                           prodh	equ	0xFF4
 12905                           prodl	equ	0xFF3
 12906                           intcon	equ	0xFF2
 12907                           postinc0	equ	0xFEE
 12908                           wreg	equ	0xFE8
 12909                           indf2	equ	0xFDF
 12910                           fsr2h	equ	0xFDA
 12911                           fsr2l	equ	0xFD9
 12912                           status	equ	0xFD8
 12913                           
 12914 ;; *************** function _TMR4_Initialize *****************
 12915 ;; Defined at:
 12916 ;;		line 61 in file "mcc_generated_files/tmr4.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;		None
 12919 ;; Auto vars:     Size  Location     Type
 12920 ;;		None
 12921 ;; Return value:  Size  Location     Type
 12922 ;;                  1    wreg      void 
 12923 ;; Registers used:
 12924 ;;		wreg, status,2
 12925 ;; Tracked objects:
 12926 ;;		On entry : 0/0
 12927 ;;		On exit  : 0/0
 12928 ;;		Unchanged: 0/0
 12929 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;Total ram usage:        0 bytes
 12935 ;; Hardware stack levels used:    1
 12936 ;; Hardware stack levels required when called:    2
 12937 ;; This function calls:
 12938 ;;		Nothing
 12939 ;; This function is called by:
 12940 ;;		_SYSTEM_Initialize
 12941 ;;		_Reset_hopper
 12942 ;;		_pay_coin
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           	psect	text78
 12947  011F4E                     __ptext78:
 12948                           	opt stack 0
 12949  011F4E                     _TMR4_Initialize:
 12950                           	opt stack 27
 12951                           
 12952                           ;tmr4.c: 66: T4CLKCON = 0x04;
 12953                           
 12954                           ; BSR set to: 14
 12955                           ;incstack = 0
 12956  011F4E  0E04               	movlw	4
 12957  011F50  6EB9               	movwf	4025,c	;volatile
 12958                           
 12959                           ;tmr4.c: 69: T4HLT = 0x00;
 12960  011F52  0E00               	movlw	0
 12961  011F54  6EB8               	movwf	4024,c	;volatile
 12962                           
 12963                           ;tmr4.c: 72: T4RST = 0x00;
 12964  011F56  0E00               	movlw	0
 12965  011F58  6EBA               	movwf	4026,c	;volatile
 12966                           
 12967                           ;tmr4.c: 75: T4PR = 0x4B;
 12968  011F5A  0E4B               	movlw	75
 12969  011F5C  6EB6               	movwf	4022,c	;volatile
 12970                           
 12971                           ;tmr4.c: 78: T4TMR = 0x00;
 12972  011F5E  0E00               	movlw	0
 12973  011F60  6EB5               	movwf	4021,c	;volatile
 12974                           
 12975                           ;tmr4.c: 81: PIR4bits.TMR4IF = 0;
 12976  011F62  010E               	movlb	14	; () banked
 12977  011F64  97CE               	bcf	206,3,b	;volatile
 12978                           
 12979                           ; BSR set to: 14
 12980                           ;tmr4.c: 84: T4CON = 0xFF;
 12981  011F66  68B7               	setf	4023,c	;volatile
 12982                           
 12983                           ; BSR set to: 14
 12984  011F68  0012               	return		;funcret
 12985  011F6A                     __end_of_TMR4_Initialize:
 12986                           	opt stack 0
 12987                           tblptru	equ	0xFF8
 12988                           tblptrh	equ	0xFF7
 12989                           tblptrl	equ	0xFF6
 12990                           tablat	equ	0xFF5
 12991                           prodh	equ	0xFF4
 12992                           prodl	equ	0xFF3
 12993                           intcon	equ	0xFF2
 12994                           postinc0	equ	0xFEE
 12995                           wreg	equ	0xFE8
 12996                           indf2	equ	0xFDF
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _TMR3_Initialize *****************
 13002 ;; Defined at:
 13003 ;;		line 62 in file "mcc_generated_files/tmr3.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;		None
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;		None
 13008 ;; Return value:  Size  Location     Type
 13009 ;;                  1    wreg      void 
 13010 ;; Registers used:
 13011 ;;		wreg, status,2, status,0
 13012 ;; Tracked objects:
 13013 ;;		On entry : 0/0
 13014 ;;		On exit  : 0/0
 13015 ;;		Unchanged: 0/0
 13016 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13019 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13020 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13021 ;;Total ram usage:        2 bytes
 13022 ;; Hardware stack levels used:    1
 13023 ;; Hardware stack levels required when called:    2
 13024 ;; This function calls:
 13025 ;;		Nothing
 13026 ;; This function is called by:
 13027 ;;		_SYSTEM_Initialize
 13028 ;;		_mdb_poll
 13029 ;;		_mdb_unlock
 13030 ;;		_cctalk_comm
 13031 ;; This function uses a non-reentrant model
 13032 ;;
 13033                           
 13034                           	psect	text79
 13035  011C66                     __ptext79:
 13036                           	opt stack 0
 13037  011C66                     _TMR3_Initialize:
 13038                           	opt stack 27
 13039                           
 13040                           ;tmr3.c: 67: T3GCON = 0x00;
 13041                           
 13042                           ; BSR set to: 14
 13043                           ;incstack = 0
 13044  011C66  0E00               	movlw	0
 13045  011C68  6ECA               	movwf	4042,c	;volatile
 13046                           
 13047                           ;tmr3.c: 70: T3GATE = 0x00;
 13048  011C6A  0E00               	movlw	0
 13049  011C6C  6ECB               	movwf	4043,c	;volatile
 13050                           
 13051                           ;tmr3.c: 73: T3CLK = 0x05;
 13052  011C6E  0E05               	movlw	5
 13053  011C70  6ECC               	movwf	4044,c	;volatile
 13054                           
 13055                           ;tmr3.c: 76: TMR3H = 0x9E;
 13056  011C72  0E9E               	movlw	158
 13057  011C74  6EC8               	movwf	4040,c	;volatile
 13058                           
 13059                           ;tmr3.c: 79: TMR3L = 0x58;
 13060  011C76  0E58               	movlw	88
 13061  011C78  6EC7               	movwf	4039,c	;volatile
 13062                           
 13063                           ;tmr3.c: 82: timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
 13064  011C7A  50C7               	movf	4039,w,c	;volatile
 13065  011C7C  CFC8 F01D          	movff	4040,??_TMR3_Initialize	;volatile
 13066  011C80  6A1E               	clrf	(??_TMR3_Initialize+1)& (0+255),c
 13067  011C82  C01D  F01E         	movff	??_TMR3_Initialize,??_TMR3_Initialize+1
 13068  011C86  6A1D               	clrf	??_TMR3_Initialize,c
 13069  011C88  101D               	iorwf	??_TMR3_Initialize,w,c
 13070  011C8A  0100               	movlb	0	; () banked
 13071  011C8C  6FBC               	movwf	_timer3ReloadVal& (0+255),b	;volatile
 13072  011C8E  501E               	movf	??_TMR3_Initialize+1,w,c
 13073  011C90  6FBD               	movwf	(_timer3ReloadVal+1)& (0+255),b	;volatile
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;tmr3.c: 85: PIR4bits.TMR3IF = 0;
 13077  011C92  010E               	movlb	14	; () banked
 13078  011C94  95CE               	bcf	206,2,b	;volatile
 13079                           
 13080                           ; BSR set to: 14
 13081                           ;tmr3.c: 88: T3CON = 0x01;
 13082  011C96  0E01               	movlw	1
 13083  011C98  6EC9               	movwf	4041,c	;volatile
 13084                           
 13085                           ; BSR set to: 14
 13086  011C9A  0012               	return		;funcret
 13087  011C9C                     __end_of_TMR3_Initialize:
 13088                           	opt stack 0
 13089                           tblptru	equ	0xFF8
 13090                           tblptrh	equ	0xFF7
 13091                           tblptrl	equ	0xFF6
 13092                           tablat	equ	0xFF5
 13093                           prodh	equ	0xFF4
 13094                           prodl	equ	0xFF3
 13095                           intcon	equ	0xFF2
 13096                           postinc0	equ	0xFEE
 13097                           wreg	equ	0xFE8
 13098                           indf2	equ	0xFDF
 13099                           fsr2h	equ	0xFDA
 13100                           fsr2l	equ	0xFD9
 13101                           status	equ	0xFD8
 13102                           
 13103 ;; *************** function _TMR2_Initialize *****************
 13104 ;; Defined at:
 13105 ;;		line 61 in file "mcc_generated_files/tmr2.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;		None
 13108 ;; Auto vars:     Size  Location     Type
 13109 ;;		None
 13110 ;; Return value:  Size  Location     Type
 13111 ;;                  1    wreg      void 
 13112 ;; Registers used:
 13113 ;;		wreg, status,2
 13114 ;; Tracked objects:
 13115 ;;		On entry : 0/0
 13116 ;;		On exit  : 0/0
 13117 ;;		Unchanged: 0/0
 13118 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13123 ;;Total ram usage:        0 bytes
 13124 ;; Hardware stack levels used:    1
 13125 ;; Hardware stack levels required when called:    2
 13126 ;; This function calls:
 13127 ;;		Nothing
 13128 ;; This function is called by:
 13129 ;;		_SYSTEM_Initialize
 13130 ;;		_pay_coin
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           	psect	text80
 13135  011F14                     __ptext80:
 13136                           	opt stack 0
 13137  011F14                     _TMR2_Initialize:
 13138                           	opt stack 27
 13139                           
 13140                           ;tmr2.c: 66: T2CLKCON = 0x05;
 13141                           
 13142                           ; BSR set to: 14
 13143                           ;incstack = 0
 13144  011F14  0E05               	movlw	5
 13145  011F16  6EBF               	movwf	4031,c	;volatile
 13146                           
 13147                           ;tmr2.c: 69: T2HLT = 0x20;
 13148  011F18  0E20               	movlw	32
 13149  011F1A  6EBE               	movwf	4030,c	;volatile
 13150                           
 13151                           ;tmr2.c: 72: T2RST = 0x00;
 13152  011F1C  0E00               	movlw	0
 13153  011F1E  6EC0               	movwf	4032,c	;volatile
 13154                           
 13155                           ;tmr2.c: 75: T2PR = 0x85;
 13156  011F20  0E85               	movlw	133
 13157  011F22  6EBC               	movwf	4028,c	;volatile
 13158                           
 13159                           ;tmr2.c: 78: T2TMR = 0x00;
 13160  011F24  0E00               	movlw	0
 13161  011F26  6EBB               	movwf	4027,c	;volatile
 13162                           
 13163                           ;tmr2.c: 81: PIR4bits.TMR2IF = 0;
 13164  011F28  010E               	movlb	14	; () banked
 13165  011F2A  93CE               	bcf	206,1,b	;volatile
 13166                           
 13167                           ;tmr2.c: 84: T2CON = 0xF1;
 13168  011F2C  0EF1               	movlw	241
 13169  011F2E  6EBD               	movwf	4029,c	;volatile
 13170                           
 13171                           ; BSR set to: 14
 13172  011F30  0012               	return		;funcret
 13173  011F32                     __end_of_TMR2_Initialize:
 13174                           	opt stack 0
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           postinc0	equ	0xFEE
 13183                           wreg	equ	0xFE8
 13184                           indf2	equ	0xFDF
 13185                           fsr2h	equ	0xFDA
 13186                           fsr2l	equ	0xFD9
 13187                           status	equ	0xFD8
 13188                           
 13189 ;; *************** function _TMR1_Initialize *****************
 13190 ;; Defined at:
 13191 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 13192 ;; Parameters:    Size  Location     Type
 13193 ;;		None
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;		None
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  1    wreg      void 
 13198 ;; Registers used:
 13199 ;;		wreg, status,2, status,0
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13207 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13208 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;Total ram usage:        2 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    2
 13212 ;; This function calls:
 13213 ;;		Nothing
 13214 ;; This function is called by:
 13215 ;;		_SYSTEM_Initialize
 13216 ;;		_mdb_comm
 13217 ;;		_mdb_unlock
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           	psect	text81
 13222  011C9C                     __ptext81:
 13223                           	opt stack 0
 13224  011C9C                     _TMR1_Initialize:
 13225                           	opt stack 24
 13226                           
 13227                           ;tmr1.c: 67: T1GCON = 0x00;
 13228                           
 13229                           ; BSR set to: 14
 13230                           ;incstack = 0
 13231  011C9C  0E00               	movlw	0
 13232  011C9E  6ED0               	movwf	4048,c	;volatile
 13233                           
 13234                           ;tmr1.c: 70: T1GATE = 0x00;
 13235  011CA0  0E00               	movlw	0
 13236  011CA2  6ED1               	movwf	4049,c	;volatile
 13237                           
 13238                           ;tmr1.c: 73: T1CLK = 0x05;
 13239  011CA4  0E05               	movlw	5
 13240  011CA6  6ED2               	movwf	4050,c	;volatile
 13241                           
 13242                           ;tmr1.c: 76: TMR1H = 0xF6;
 13243  011CA8  0EF6               	movlw	246
 13244  011CAA  6ECE               	movwf	4046,c	;volatile
 13245                           
 13246                           ;tmr1.c: 79: TMR1L = 0x3C;
 13247  011CAC  0E3C               	movlw	60
 13248  011CAE  6ECD               	movwf	4045,c	;volatile
 13249                           
 13250                           ;tmr1.c: 82: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 13251  011CB0  50CD               	movf	4045,w,c	;volatile
 13252  011CB2  CFCE F01D          	movff	4046,??_TMR1_Initialize	;volatile
 13253  011CB6  6A1E               	clrf	(??_TMR1_Initialize+1)& (0+255),c
 13254  011CB8  C01D  F01E         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
 13255  011CBC  6A1D               	clrf	??_TMR1_Initialize,c
 13256  011CBE  101D               	iorwf	??_TMR1_Initialize,w,c
 13257  011CC0  0100               	movlb	0	; () banked
 13258  011CC2  6FBE               	movwf	_timer1ReloadVal& (0+255),b	;volatile
 13259  011CC4  501E               	movf	??_TMR1_Initialize+1,w,c
 13260  011CC6  6FBF               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;tmr1.c: 85: PIR4bits.TMR1IF = 0;
 13264  011CC8  010E               	movlb	14	; () banked
 13265  011CCA  91CE               	bcf	206,0,b	;volatile
 13266                           
 13267                           ; BSR set to: 14
 13268                           ;tmr1.c: 88: T1CON = 0x01;
 13269  011CCC  0E01               	movlw	1
 13270  011CCE  6ECF               	movwf	4047,c	;volatile
 13271                           
 13272                           ; BSR set to: 14
 13273  011CD0  0012               	return		;funcret
 13274  011CD2                     __end_of_TMR1_Initialize:
 13275                           	opt stack 0
 13276                           tblptru	equ	0xFF8
 13277                           tblptrh	equ	0xFF7
 13278                           tblptrl	equ	0xFF6
 13279                           tablat	equ	0xFF5
 13280                           prodh	equ	0xFF4
 13281                           prodl	equ	0xFF3
 13282                           intcon	equ	0xFF2
 13283                           postinc0	equ	0xFEE
 13284                           wreg	equ	0xFE8
 13285                           indf2	equ	0xFDF
 13286                           fsr2h	equ	0xFDA
 13287                           fsr2l	equ	0xFD9
 13288                           status	equ	0xFD8
 13289                           
 13290 ;; *************** function _TMR0_Initialize *****************
 13291 ;; Defined at:
 13292 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 13293 ;; Parameters:    Size  Location     Type
 13294 ;;		None
 13295 ;; Auto vars:     Size  Location     Type
 13296 ;;		None
 13297 ;; Return value:  Size  Location     Type
 13298 ;;                  1    wreg      void 
 13299 ;; Registers used:
 13300 ;;		wreg, status,2, status,0
 13301 ;; Tracked objects:
 13302 ;;		On entry : 0/0
 13303 ;;		On exit  : 0/0
 13304 ;;		Unchanged: 0/0
 13305 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13308 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13310 ;;Total ram usage:        2 bytes
 13311 ;; Hardware stack levels used:    1
 13312 ;; Hardware stack levels required when called:    2
 13313 ;; This function calls:
 13314 ;;		Nothing
 13315 ;; This function is called by:
 13316 ;;		_SYSTEM_Initialize
 13317 ;; This function uses a non-reentrant model
 13318 ;;
 13319                           
 13320                           	psect	text82
 13321  011E34                     __ptext82:
 13322                           	opt stack 0
 13323  011E34                     _TMR0_Initialize:
 13324                           	opt stack 27
 13325                           
 13326                           ;tmr0.c: 69: T0CON1 = 0x82;
 13327                           
 13328                           ; BSR set to: 14
 13329                           ;incstack = 0
 13330  011E34  0E82               	movlw	130
 13331  011E36  6ED6               	movwf	4054,c	;volatile
 13332                           
 13333                           ;tmr0.c: 72: TMR0H = 0xA5;
 13334  011E38  0EA5               	movlw	165
 13335  011E3A  6ED4               	movwf	4052,c	;volatile
 13336                           
 13337                           ;tmr0.c: 75: TMR0L = 0x2E;
 13338  011E3C  0E2E               	movlw	46
 13339  011E3E  6ED3               	movwf	4051,c	;volatile
 13340                           
 13341                           ;tmr0.c: 78: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 13342  011E40  50D3               	movf	4051,w,c	;volatile
 13343  011E42  CFD4 F01D          	movff	4052,??_TMR0_Initialize	;volatile
 13344  011E46  6A1E               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 13345  011E48  C01D  F01E         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 13346  011E4C  6A1D               	clrf	??_TMR0_Initialize,c
 13347  011E4E  101D               	iorwf	??_TMR0_Initialize,w,c
 13348  011E50  0100               	movlb	0	; () banked
 13349  011E52  6FB8               	movwf	_timer0ReloadVal16bit& (0+255),b	;volatile
 13350  011E54  501E               	movf	??_TMR0_Initialize+1,w,c
 13351  011E56  6FB9               	movwf	(_timer0ReloadVal16bit+1)& (0+255),b	;volatile
 13352                           
 13353                           ; BSR set to: 0
 13354                           ;tmr0.c: 81: PIR0bits.TMR0IF = 0;
 13355  011E58  010E               	movlb	14	; () banked
 13356  011E5A  9BCA               	bcf	202,5,b	;volatile
 13357                           
 13358                           ; BSR set to: 14
 13359                           ;tmr0.c: 84: T0CON0 = 0x90;
 13360  011E5C  0E90               	movlw	144
 13361  011E5E  6ED5               	movwf	4053,c	;volatile
 13362                           
 13363                           ; BSR set to: 14
 13364  011E60  0012               	return		;funcret
 13365  011E62                     __end_of_TMR0_Initialize:
 13366                           	opt stack 0
 13367                           tblptru	equ	0xFF8
 13368                           tblptrh	equ	0xFF7
 13369                           tblptrl	equ	0xFF6
 13370                           tablat	equ	0xFF5
 13371                           prodh	equ	0xFF4
 13372                           prodl	equ	0xFF3
 13373                           intcon	equ	0xFF2
 13374                           postinc0	equ	0xFEE
 13375                           wreg	equ	0xFE8
 13376                           indf2	equ	0xFDF
 13377                           fsr2h	equ	0xFDA
 13378                           fsr2l	equ	0xFD9
 13379                           status	equ	0xFD8
 13380                           
 13381 ;; *************** function _PMD_Initialize *****************
 13382 ;; Defined at:
 13383 ;;		line 147 in file "mcc_generated_files/mcc.c"
 13384 ;; Parameters:    Size  Location     Type
 13385 ;;		None
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;		None
 13388 ;; Return value:  Size  Location     Type
 13389 ;;                  1    wreg      void 
 13390 ;; Registers used:
 13391 ;;		wreg, status,2
 13392 ;; Tracked objects:
 13393 ;;		On entry : 0/0
 13394 ;;		On exit  : 0/0
 13395 ;;		Unchanged: 0/0
 13396 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13401 ;;Total ram usage:        0 bytes
 13402 ;; Hardware stack levels used:    1
 13403 ;; Hardware stack levels required when called:    2
 13404 ;; This function calls:
 13405 ;;		Nothing
 13406 ;; This function is called by:
 13407 ;;		_SYSTEM_Initialize
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text83
 13412  011F6A                     __ptext83:
 13413                           	opt stack 0
 13414  011F6A                     _PMD_Initialize:
 13415                           	opt stack 27
 13416                           
 13417                           ;mcc.c: 150: PMD0 = 0x00;
 13418                           
 13419                           ; BSR set to: 14
 13420                           ;incstack = 0
 13421  011F6A  0E00               	movlw	0
 13422  011F6C  010E               	movlb	14	; () banked
 13423  011F6E  6FE1               	movwf	225,b	;volatile
 13424                           
 13425                           ;mcc.c: 152: PMD1 = 0x00;
 13426  011F70  0E00               	movlw	0
 13427  011F72  6FE2               	movwf	226,b	;volatile
 13428                           
 13429                           ;mcc.c: 154: PMD2 = 0x00;
 13430  011F74  0E00               	movlw	0
 13431  011F76  6FE3               	movwf	227,b	;volatile
 13432                           
 13433                           ;mcc.c: 156: PMD3 = 0x00;
 13434  011F78  0E00               	movlw	0
 13435  011F7A  6FE4               	movwf	228,b	;volatile
 13436                           
 13437                           ;mcc.c: 158: PMD4 = 0x00;
 13438  011F7C  0E00               	movlw	0
 13439  011F7E  6FE5               	movwf	229,b	;volatile
 13440                           
 13441                           ;mcc.c: 160: PMD5 = 0x00;
 13442  011F80  0E00               	movlw	0
 13443  011F82  6FE6               	movwf	230,b	;volatile
 13444                           
 13445                           ; BSR set to: 14
 13446  011F84  0012               	return		;funcret
 13447  011F86                     __end_of_PMD_Initialize:
 13448                           	opt stack 0
 13449                           tblptru	equ	0xFF8
 13450                           tblptrh	equ	0xFF7
 13451                           tblptrl	equ	0xFF6
 13452                           tablat	equ	0xFF5
 13453                           prodh	equ	0xFF4
 13454                           prodl	equ	0xFF3
 13455                           intcon	equ	0xFF2
 13456                           postinc0	equ	0xFEE
 13457                           wreg	equ	0xFE8
 13458                           indf2	equ	0xFDF
 13459                           fsr2h	equ	0xFDA
 13460                           fsr2l	equ	0xFD9
 13461                           status	equ	0xFD8
 13462                           
 13463 ;; *************** function _PIN_MANAGER_Initialize *****************
 13464 ;; Defined at:
 13465 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 13466 ;; Parameters:    Size  Location     Type
 13467 ;;		None
 13468 ;; Auto vars:     Size  Location     Type
 13469 ;;		None
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      void 
 13472 ;; Registers used:
 13473 ;;		wreg, status,2
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;Total ram usage:        0 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:    2
 13486 ;; This function calls:
 13487 ;;		Nothing
 13488 ;; This function is called by:
 13489 ;;		_SYSTEM_Initialize
 13490 ;; This function uses a non-reentrant model
 13491 ;;
 13492                           
 13493                           	psect	text84
 13494  0115BC                     __ptext84:
 13495                           	opt stack 0
 13496  0115BC                     _PIN_MANAGER_Initialize:
 13497                           	opt stack 27
 13498                           
 13499                           ;pin_manager.c: 57: LATE = 0x00;
 13500                           
 13501                           ; BSR set to: 14
 13502                           ;incstack = 0
 13503  0115BC  0E00               	movlw	0
 13504  0115BE  6E87               	movwf	3975,c	;volatile
 13505                           
 13506                           ;pin_manager.c: 58: LATD = 0x00;
 13507  0115C0  0E00               	movlw	0
 13508  0115C2  6E86               	movwf	3974,c	;volatile
 13509                           
 13510                           ;pin_manager.c: 59: LATA = 0xC0;
 13511  0115C4  0EC0               	movlw	192
 13512  0115C6  6E83               	movwf	3971,c	;volatile
 13513                           
 13514                           ;pin_manager.c: 60: LATB = 0x00;
 13515  0115C8  0E00               	movlw	0
 13516  0115CA  6E84               	movwf	3972,c	;volatile
 13517                           
 13518                           ;pin_manager.c: 61: LATC = 0x40;
 13519  0115CC  0E40               	movlw	64
 13520  0115CE  6E85               	movwf	3973,c	;volatile
 13521                           
 13522                           ;pin_manager.c: 66: TRISE = 0x00;
 13523  0115D0  0E00               	movlw	0
 13524  0115D2  6E8C               	movwf	3980,c	;volatile
 13525                           
 13526                           ;pin_manager.c: 67: TRISA = 0x1F;
 13527  0115D4  0E1F               	movlw	31
 13528  0115D6  6E88               	movwf	3976,c	;volatile
 13529                           
 13530                           ;pin_manager.c: 68: TRISB = 0xF0;
 13531  0115D8  0EF0               	movlw	240
 13532  0115DA  6E89               	movwf	3977,c	;volatile
 13533                           
 13534                           ;pin_manager.c: 69: TRISC = 0x80;
 13535  0115DC  0E80               	movlw	128
 13536  0115DE  6E8A               	movwf	3978,c	;volatile
 13537                           
 13538                           ;pin_manager.c: 70: TRISD = 0x00;
 13539  0115E0  0E00               	movlw	0
 13540  0115E2  6E8B               	movwf	3979,c	;volatile
 13541                           
 13542                           ;pin_manager.c: 75: ANSELC = 0x00;
 13543  0115E4  0E00               	movlw	0
 13544  0115E6  010F               	movlb	15	; () banked
 13545  0115E8  6F21               	movwf	33,b	;volatile
 13546                           
 13547                           ;pin_manager.c: 76: ANSELB = 0xC0;
 13548  0115EA  0EC0               	movlw	192
 13549  0115EC  6F19               	movwf	25,b	;volatile
 13550                           
 13551                           ;pin_manager.c: 77: ANSELD = 0x00;
 13552  0115EE  0E00               	movlw	0
 13553  0115F0  6F26               	movwf	38,b	;volatile
 13554                           
 13555                           ;pin_manager.c: 78: ANSELE = 0x00;
 13556  0115F2  0E00               	movlw	0
 13557  0115F4  6F2E               	movwf	46,b	;volatile
 13558                           
 13559                           ;pin_manager.c: 79: ANSELA = 0x01;
 13560  0115F6  0E01               	movlw	1
 13561  0115F8  6F11               	movwf	17,b	;volatile
 13562                           
 13563                           ;pin_manager.c: 84: WPUD = 0x00;
 13564  0115FA  0E00               	movlw	0
 13565  0115FC  6F25               	movwf	37,b	;volatile
 13566                           
 13567                           ;pin_manager.c: 85: WPUE = 0x00;
 13568  0115FE  0E00               	movlw	0
 13569  011600  6F2D               	movwf	45,b	;volatile
 13570                           
 13571                           ;pin_manager.c: 86: WPUB = 0x00;
 13572  011602  0E00               	movlw	0
 13573  011604  6F18               	movwf	24,b	;volatile
 13574                           
 13575                           ;pin_manager.c: 87: WPUA = 0x00;
 13576  011606  0E00               	movlw	0
 13577  011608  6F10               	movwf	16,b	;volatile
 13578                           
 13579                           ;pin_manager.c: 88: WPUC = 0x00;
 13580  01160A  0E00               	movlw	0
 13581  01160C  6F20               	movwf	32,b	;volatile
 13582                           
 13583                           ;pin_manager.c: 93: ODCONE = 0x00;
 13584  01160E  0E00               	movlw	0
 13585  011610  6F2C               	movwf	44,b	;volatile
 13586                           
 13587                           ;pin_manager.c: 94: ODCONA = 0x00;
 13588  011612  0E00               	movlw	0
 13589  011614  6F0F               	movwf	15,b	;volatile
 13590                           
 13591                           ;pin_manager.c: 95: ODCONB = 0x00;
 13592  011616  0E00               	movlw	0
 13593  011618  6F17               	movwf	23,b	;volatile
 13594                           
 13595                           ;pin_manager.c: 96: ODCONC = 0x00;
 13596  01161A  0E00               	movlw	0
 13597  01161C  6F1F               	movwf	31,b	;volatile
 13598                           
 13599                           ;pin_manager.c: 97: ODCOND = 0x00;
 13600  01161E  0E00               	movlw	0
 13601  011620  6F24               	movwf	36,b	;volatile
 13602                           
 13603                           ; BSR set to: 15
 13604                           ;pin_manager.c: 103: PIE0bits.IOCIE = 1;
 13605  011622  010E               	movlb	14	; () banked
 13606  011624  89C2               	bsf	194,4,b	;volatile
 13607                           
 13608                           ; BSR set to: 14
 13609                           ;pin_manager.c: 106: RX1PPSbits.RXPPS = 0x17;
 13610  011626  81B5               	bsf	181,0,b	;volatile
 13611  011628  83B5               	bsf	181,1,b	;volatile
 13612  01162A  85B5               	bsf	181,2,b	;volatile
 13613  01162C  97B5               	bcf	181,3,b	;volatile
 13614  01162E  89B5               	bsf	181,4,b	;volatile
 13615                           
 13616                           ;pin_manager.c: 107: RC6PPS = 0x09;
 13617  011630  0E09               	movlw	9
 13618  011632  6FFD               	movwf	253,b	;volatile
 13619                           
 13620                           ; BSR set to: 14
 13621  011634  0012               	return		;funcret
 13622  011636                     __end_of_PIN_MANAGER_Initialize:
 13623                           	opt stack 0
 13624                           tblptru	equ	0xFF8
 13625                           tblptrh	equ	0xFF7
 13626                           tblptrl	equ	0xFF6
 13627                           tablat	equ	0xFF5
 13628                           prodh	equ	0xFF4
 13629                           prodl	equ	0xFF3
 13630                           intcon	equ	0xFF2
 13631                           postinc0	equ	0xFEE
 13632                           wreg	equ	0xFE8
 13633                           indf2	equ	0xFDF
 13634                           fsr2h	equ	0xFDA
 13635                           fsr2l	equ	0xFD9
 13636                           status	equ	0xFD8
 13637                           
 13638 ;; *************** function _OSCILLATOR_Initialize *****************
 13639 ;; Defined at:
 13640 ;;		line 133 in file "mcc_generated_files/mcc.c"
 13641 ;; Parameters:    Size  Location     Type
 13642 ;;		None
 13643 ;; Auto vars:     Size  Location     Type
 13644 ;;		None
 13645 ;; Return value:  Size  Location     Type
 13646 ;;                  1    wreg      void 
 13647 ;; Registers used:
 13648 ;;		wreg, status,2
 13649 ;; Tracked objects:
 13650 ;;		On entry : 0/0
 13651 ;;		On exit  : 0/0
 13652 ;;		Unchanged: 0/0
 13653 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13658 ;;Total ram usage:        0 bytes
 13659 ;; Hardware stack levels used:    1
 13660 ;; Hardware stack levels required when called:    2
 13661 ;; This function calls:
 13662 ;;		Nothing
 13663 ;; This function is called by:
 13664 ;;		_SYSTEM_Initialize
 13665 ;; This function uses a non-reentrant model
 13666 ;;
 13667                           
 13668                           	psect	text85
 13669  011FB6                     __ptext85:
 13670                           	opt stack 0
 13671  011FB6                     _OSCILLATOR_Initialize:
 13672                           	opt stack 27
 13673                           
 13674                           ;mcc.c: 136: OSCCON1 = 0x60;
 13675                           
 13676                           ; BSR set to: 14
 13677                           ;incstack = 0
 13678  011FB6  0E60               	movlw	96
 13679  011FB8  010E               	movlb	14	; () banked
 13680  011FBA  6FD8               	movwf	216,b	;volatile
 13681                           
 13682                           ;mcc.c: 138: OSCCON3 = 0x00;
 13683  011FBC  0E00               	movlw	0
 13684  011FBE  6FDA               	movwf	218,b	;volatile
 13685                           
 13686                           ;mcc.c: 140: OSCEN = 0x00;
 13687  011FC0  0E00               	movlw	0
 13688  011FC2  6FDC               	movwf	220,b	;volatile
 13689                           
 13690                           ;mcc.c: 142: OSCFRQ = 0x04;
 13691  011FC4  0E04               	movlw	4
 13692  011FC6  6FDE               	movwf	222,b	;volatile
 13693                           
 13694                           ;mcc.c: 144: OSCTUNE = 0x00;
 13695  011FC8  0E00               	movlw	0
 13696  011FCA  6FDD               	movwf	221,b	;volatile
 13697                           
 13698                           ; BSR set to: 14
 13699  011FCC  0012               	return		;funcret
 13700  011FCE                     __end_of_OSCILLATOR_Initialize:
 13701                           	opt stack 0
 13702                           tblptru	equ	0xFF8
 13703                           tblptrh	equ	0xFF7
 13704                           tblptrl	equ	0xFF6
 13705                           tablat	equ	0xFF5
 13706                           prodh	equ	0xFF4
 13707                           prodl	equ	0xFF3
 13708                           intcon	equ	0xFF2
 13709                           postinc0	equ	0xFEE
 13710                           wreg	equ	0xFE8
 13711                           indf2	equ	0xFDF
 13712                           fsr2h	equ	0xFDA
 13713                           fsr2l	equ	0xFD9
 13714                           status	equ	0xFD8
 13715                           
 13716 ;; *************** function _INTERRUPT_Initialize *****************
 13717 ;; Defined at:
 13718 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 13719 ;; Parameters:    Size  Location     Type
 13720 ;;		None
 13721 ;; Auto vars:     Size  Location     Type
 13722 ;;		None
 13723 ;; Return value:  Size  Location     Type
 13724 ;;                  1    wreg      void 
 13725 ;; Registers used:
 13726 ;;		None
 13727 ;; Tracked objects:
 13728 ;;		On entry : 0/0
 13729 ;;		On exit  : 0/0
 13730 ;;		Unchanged: 0/0
 13731 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13736 ;;Total ram usage:        0 bytes
 13737 ;; Hardware stack levels used:    1
 13738 ;; Hardware stack levels required when called:    2
 13739 ;; This function calls:
 13740 ;;		Nothing
 13741 ;; This function is called by:
 13742 ;;		_SYSTEM_Initialize
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           	psect	text86
 13747  0120A4                     __ptext86:
 13748                           	opt stack 0
 13749  0120A4                     _INTERRUPT_Initialize:
 13750                           	opt stack 27
 13751                           
 13752                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 1;
 13753                           
 13754                           ; BSR set to: 14
 13755                           ;incstack = 0
 13756  0120A4  8AF2               	bsf	intcon,5,c	;volatile
 13757                           
 13758                           ;interrupt_manager.c: 59: IPR0bits.IOCIP = 1;
 13759  0120A6  010E               	movlb	14	; () banked
 13760  0120A8  89BA               	bsf	186,4,b	;volatile
 13761                           
 13762                           ; BSR set to: 14
 13763  0120AA  0012               	return		;funcret
 13764  0120AC                     __end_of_INTERRUPT_Initialize:
 13765                           	opt stack 0
 13766                           tblptru	equ	0xFF8
 13767                           tblptrh	equ	0xFF7
 13768                           tblptrl	equ	0xFF6
 13769                           tablat	equ	0xFF5
 13770                           prodh	equ	0xFF4
 13771                           prodl	equ	0xFF3
 13772                           intcon	equ	0xFF2
 13773                           postinc0	equ	0xFEE
 13774                           wreg	equ	0xFE8
 13775                           indf2	equ	0xFDF
 13776                           fsr2h	equ	0xFDA
 13777                           fsr2l	equ	0xFD9
 13778                           status	equ	0xFD8
 13779                           
 13780 ;; *************** function _EUSART1_Initialize *****************
 13781 ;; Defined at:
 13782 ;;		line 53 in file "mcc_generated_files/eusart1.c"
 13783 ;; Parameters:    Size  Location     Type
 13784 ;;		None
 13785 ;; Auto vars:     Size  Location     Type
 13786 ;;		None
 13787 ;; Return value:  Size  Location     Type
 13788 ;;                  1    wreg      void 
 13789 ;; Registers used:
 13790 ;;		wreg, status,2
 13791 ;; Tracked objects:
 13792 ;;		On entry : 0/0
 13793 ;;		On exit  : 0/0
 13794 ;;		Unchanged: 0/0
 13795 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13800 ;;Total ram usage:        0 bytes
 13801 ;; Hardware stack levels used:    1
 13802 ;; Hardware stack levels required when called:    2
 13803 ;; This function calls:
 13804 ;;		Nothing
 13805 ;; This function is called by:
 13806 ;;		_SYSTEM_Initialize
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           	psect	text87
 13811  011FFA                     __ptext87:
 13812                           	opt stack 0
 13813  011FFA                     _EUSART1_Initialize:
 13814                           	opt stack 27
 13815                           
 13816                           ;eusart1.c: 58: BAUD1CON = 0x08;
 13817                           
 13818                           ; BSR set to: 14
 13819                           ;incstack = 0
 13820  011FFA  0E08               	movlw	8
 13821  011FFC  6E9F               	movwf	3999,c	;volatile
 13822                           
 13823                           ;eusart1.c: 61: RC1STA = 0xD0;
 13824  011FFE  0ED0               	movlw	208
 13825  012000  6E9D               	movwf	3997,c	;volatile
 13826                           
 13827                           ;eusart1.c: 64: TX1STA = 0xEC;
 13828  012002  0EEC               	movlw	236
 13829  012004  6E9E               	movwf	3998,c	;volatile
 13830                           
 13831                           ;eusart1.c: 67: SP1BRGL = 0x38;
 13832  012006  0E38               	movlw	56
 13833  012008  6E9B               	movwf	3995,c	;volatile
 13834                           
 13835                           ;eusart1.c: 70: SP1BRGH = 0x01;
 13836  01200A  0E01               	movlw	1
 13837  01200C  6E9C               	movwf	3996,c	;volatile
 13838  01200E  0012               	return		;funcret
 13839  012010                     __end_of_EUSART1_Initialize:
 13840                           	opt stack 0
 13841                           tblptru	equ	0xFF8
 13842                           tblptrh	equ	0xFF7
 13843                           tblptrl	equ	0xFF6
 13844                           tablat	equ	0xFF5
 13845                           prodh	equ	0xFF4
 13846                           prodl	equ	0xFF3
 13847                           intcon	equ	0xFF2
 13848                           postinc0	equ	0xFEE
 13849                           wreg	equ	0xFE8
 13850                           indf2	equ	0xFDF
 13851                           fsr2h	equ	0xFDA
 13852                           fsr2l	equ	0xFD9
 13853                           status	equ	0xFD8
 13854                           
 13855 ;; *************** function _DAC1_Initialize *****************
 13856 ;; Defined at:
 13857 ;;		line 57 in file "mcc_generated_files/dac1.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;		None
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;		None
 13862 ;; Return value:  Size  Location     Type
 13863 ;;                  1    wreg      void 
 13864 ;; Registers used:
 13865 ;;		wreg, status,2
 13866 ;; Tracked objects:
 13867 ;;		On entry : 0/0
 13868 ;;		On exit  : 0/0
 13869 ;;		Unchanged: 0/0
 13870 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13875 ;;Total ram usage:        0 bytes
 13876 ;; Hardware stack levels used:    1
 13877 ;; Hardware stack levels required when called:    2
 13878 ;; This function calls:
 13879 ;;		Nothing
 13880 ;; This function is called by:
 13881 ;;		_SYSTEM_Initialize
 13882 ;;		_mdb_unlock
 13883 ;; This function uses a non-reentrant model
 13884 ;;
 13885                           
 13886                           	psect	text88
 13887  012080                     __ptext88:
 13888                           	opt stack 0
 13889  012080                     _DAC1_Initialize:
 13890                           	opt stack 26
 13891                           
 13892                           ;dac1.c: 60: DAC1CON0 = 0x80;
 13893                           
 13894                           ;incstack = 0
 13895  012080  0E80               	movlw	128
 13896  012082  010F               	movlb	15	; () banked
 13897  012084  6F33               	movwf	51,b	;volatile
 13898                           
 13899                           ;dac1.c: 62: DAC1CON1 = 0x1C;
 13900  012086  0E1C               	movlw	28
 13901  012088  6F34               	movwf	52,b	;volatile
 13902                           
 13903                           ; BSR set to: 15
 13904  01208A  0012               	return		;funcret
 13905  01208C                     __end_of_DAC1_Initialize:
 13906                           	opt stack 0
 13907                           tblptru	equ	0xFF8
 13908                           tblptrh	equ	0xFF7
 13909                           tblptrl	equ	0xFF6
 13910                           tablat	equ	0xFF5
 13911                           prodh	equ	0xFF4
 13912                           prodl	equ	0xFF3
 13913                           intcon	equ	0xFF2
 13914                           postinc0	equ	0xFEE
 13915                           wreg	equ	0xFE8
 13916                           indf2	equ	0xFDF
 13917                           fsr2h	equ	0xFDA
 13918                           fsr2l	equ	0xFD9
 13919                           status	equ	0xFD8
 13920                           
 13921 ;; *************** function _CMP1_Initialize *****************
 13922 ;; Defined at:
 13923 ;;		line 57 in file "mcc_generated_files/cmp1.c"
 13924 ;; Parameters:    Size  Location     Type
 13925 ;;		None
 13926 ;; Auto vars:     Size  Location     Type
 13927 ;;		None
 13928 ;; Return value:  Size  Location     Type
 13929 ;;                  1    wreg      void 
 13930 ;; Registers used:
 13931 ;;		wreg, status,2
 13932 ;; Tracked objects:
 13933 ;;		On entry : 0/0
 13934 ;;		On exit  : 0/0
 13935 ;;		Unchanged: 0/0
 13936 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 13937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13941 ;;Total ram usage:        0 bytes
 13942 ;; Hardware stack levels used:    1
 13943 ;; Hardware stack levels required when called:    2
 13944 ;; This function calls:
 13945 ;;		Nothing
 13946 ;; This function is called by:
 13947 ;;		_SYSTEM_Initialize
 13948 ;;		_mdb_unlock
 13949 ;; This function uses a non-reentrant model
 13950 ;;
 13951                           
 13952                           	psect	text89
 13953  012010                     __ptext89:
 13954                           	opt stack 0
 13955  012010                     _CMP1_Initialize:
 13956                           	opt stack 26
 13957                           
 13958                           ;cmp1.c: 61: CM1CON0 = 0x90;
 13959                           
 13960                           ; BSR set to: 15
 13961                           ;incstack = 0
 13962  012010  0E90               	movlw	144
 13963  012012  010F               	movlb	15	; () banked
 13964  012014  6F39               	movwf	57,b	;volatile
 13965                           
 13966                           ;cmp1.c: 64: CM1CON1 = 0x00;
 13967  012016  0E00               	movlw	0
 13968  012018  6F3A               	movwf	58,b	;volatile
 13969                           
 13970                           ;cmp1.c: 67: CM1NCH = 0x00;
 13971  01201A  0E00               	movlw	0
 13972  01201C  6F3B               	movwf	59,b	;volatile
 13973                           
 13974                           ;cmp1.c: 70: CM1PCH = 0x05;
 13975  01201E  0E05               	movlw	5
 13976  012020  6F3C               	movwf	60,b	;volatile
 13977                           
 13978                           ; BSR set to: 15
 13979  012022  0012               	return		;funcret
 13980  012024                     __end_of_CMP1_Initialize:
 13981                           	opt stack 0
 13982                           tblptru	equ	0xFF8
 13983                           tblptrh	equ	0xFF7
 13984                           tblptrl	equ	0xFF6
 13985                           tablat	equ	0xFF5
 13986                           prodh	equ	0xFF4
 13987                           prodl	equ	0xFF3
 13988                           intcon	equ	0xFF2
 13989                           postinc0	equ	0xFEE
 13990                           wreg	equ	0xFE8
 13991                           indf2	equ	0xFDF
 13992                           fsr2h	equ	0xFDA
 13993                           fsr2l	equ	0xFD9
 13994                           status	equ	0xFD8
 13995                           
 13996 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 13997 ;; Defined at:
 13998 ;;		line 64 in file "mcc_generated_files/interrupt_manager.c"
 13999 ;; Parameters:    Size  Location     Type
 14000 ;;		None
 14001 ;; Auto vars:     Size  Location     Type
 14002 ;;		None
 14003 ;; Return value:  Size  Location     Type
 14004 ;;                  1    wreg      void 
 14005 ;; Registers used:
 14006 ;;		cstack
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14014 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14015 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14016 ;;Total ram usage:       18 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    1
 14019 ;; This function calls:
 14020 ;;		_PIN_MANAGER_IOC
 14021 ;; This function is called by:
 14022 ;;		Interrupt level 2
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           	psect	intcode
 14027  000008                     __pintcode:
 14028                           	opt stack 0
 14029  000008                     _INTERRUPT_InterruptManagerHigh:
 14030                           	opt stack 18
 14031                           
 14032                           ; BSR set to: 15
 14033                           ;incstack = 0
 14034  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14035  00000A  CFFA F00B          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 14036  00000E  CFFB F00C          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 14037  000012  CFE9 F00D          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 14038  000016  CFEA F00E          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 14039  00001A  CFE1 F00F          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 14040  00001E  CFE2 F010          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 14041  000022  CFD9 F011          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 14042  000026  CFDA F012          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 14043  00002A  CFF3 F013          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 14044  00002E  CFF4 F014          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 14045  000032  CFF6 F015          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 14046  000036  CFF7 F016          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 14047  00003A  CFF8 F017          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 14048  00003E  CFF5 F018          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 14049  000042  C04F  F019         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 14050  000046  C050  F01A         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 14051  00004A  C051  F01B         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 14052  00004E  C052  F01C         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 14053                           
 14054                           ;interrupt_manager.c: 67: if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 14055  000052  010E               	movlb	14	; () banked
 14056  000054  B9C2               	btfsc	194,4,b	;volatile
 14057                           
 14058                           ; BSR set to: 14
 14059  000056  A9CA               	btfss	202,4,b	;volatile
 14060  000058  D002               	goto	i2l189
 14061                           
 14062                           ; BSR set to: 14
 14063                           ;interrupt_manager.c: 68: {
 14064                           ;interrupt_manager.c: 69: PIN_MANAGER_IOC();
 14065  00005A  EC5C  F090         	call	_PIN_MANAGER_IOC	;wreg free
 14066  00005E                     i2l189:
 14067                           
 14068                           ;interrupt_manager.c: 71: else
 14069                           ;interrupt_manager.c: 72: {
 14070  00005E  C01C  F052         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 14071  000062  C01B  F051         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 14072  000066  C01A  F050         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 14073  00006A  C019  F04F         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 14074  00006E  C018  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 14075  000072  C017  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 14076  000076  C016  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 14077  00007A  C015  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 14078  00007E  C014  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 14079  000082  C013  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 14080  000086  C012  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 14081  00008A  C011  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 14082  00008E  C010  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 14083  000092  C00F  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 14084  000096  C00E  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 14085  00009A  C00D  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 14086  00009E  C00C  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 14087  0000A2  C00B  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 14088  0000A6  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14089  0000A8  0011               	retfie		f
 14090  0000AA                     __end_of_INTERRUPT_InterruptManagerHigh:
 14091                           	opt stack 0
 14092                           pclatu	equ	0xFFB
 14093                           pclath	equ	0xFFA
 14094                           tblptru	equ	0xFF8
 14095                           tblptrh	equ	0xFF7
 14096                           tblptrl	equ	0xFF6
 14097                           tablat	equ	0xFF5
 14098                           prodh	equ	0xFF4
 14099                           prodl	equ	0xFF3
 14100                           intcon	equ	0xFF2
 14101                           postinc0	equ	0xFEE
 14102                           fsr0h	equ	0xFEA
 14103                           fsr0l	equ	0xFE9
 14104                           wreg	equ	0xFE8
 14105                           fsr1h	equ	0xFE2
 14106                           fsr1l	equ	0xFE1
 14107                           indf2	equ	0xFDF
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function _PIN_MANAGER_IOC *****************
 14113 ;; Defined at:
 14114 ;;		line 111 in file "mcc_generated_files/pin_manager.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;		None
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;		None
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  1    wreg      void 
 14121 ;; Registers used:
 14122 ;;		None
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 14128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;Total ram usage:        0 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; This function calls:
 14135 ;;		Nothing
 14136 ;; This function is called by:
 14137 ;;		_INTERRUPT_InterruptManagerHigh
 14138 ;; This function uses a non-reentrant model
 14139 ;;
 14140                           
 14141                           	psect	text91
 14142  0120B8                     __ptext91:
 14143                           	opt stack 0
 14144  0120B8                     _PIN_MANAGER_IOC:
 14145                           	opt stack 18
 14146                           
 14147                           ;pin_manager.c: 115: PIR0bits.IOCIF = 0;
 14148                           
 14149                           ;incstack = 0
 14150  0120B8  010E               	movlb	14	; () banked
 14151  0120BA  99CA               	bcf	202,4,b	;volatile
 14152                           
 14153                           ; BSR set to: 14
 14154  0120BC  0012               	return		;funcret
 14155  0120BE                     __end_of_PIN_MANAGER_IOC:
 14156                           	opt stack 0
 14157                           pclatu	equ	0xFFB
 14158                           pclath	equ	0xFFA
 14159                           tblptru	equ	0xFF8
 14160                           tblptrh	equ	0xFF7
 14161                           tblptrl	equ	0xFF6
 14162                           tablat	equ	0xFF5
 14163                           prodh	equ	0xFF4
 14164                           prodl	equ	0xFF3
 14165                           intcon	equ	0xFF2
 14166                           postinc0	equ	0xFEE
 14167                           fsr0h	equ	0xFEA
 14168                           fsr0l	equ	0xFE9
 14169                           wreg	equ	0xFE8
 14170                           fsr1h	equ	0xFE2
 14171                           fsr1l	equ	0xFE1
 14172                           indf2	equ	0xFDF
 14173                           fsr2h	equ	0xFDA
 14174                           fsr2l	equ	0xFD9
 14175                           status	equ	0xFD8
 14176                           pclatu	equ	0xFFB
 14177                           pclath	equ	0xFFA
 14178                           tblptru	equ	0xFF8
 14179                           tblptrh	equ	0xFF7
 14180                           tblptrl	equ	0xFF6
 14181                           tablat	equ	0xFF5
 14182                           prodh	equ	0xFF4
 14183                           prodl	equ	0xFF3
 14184                           intcon	equ	0xFF2
 14185                           postinc0	equ	0xFEE
 14186                           fsr0h	equ	0xFEA
 14187                           fsr0l	equ	0xFE9
 14188                           wreg	equ	0xFE8
 14189                           fsr1h	equ	0xFE2
 14190                           fsr1l	equ	0xFE1
 14191                           indf2	equ	0xFDF
 14192                           fsr2h	equ	0xFDA
 14193                           fsr2l	equ	0xFD9
 14194                           status	equ	0xFD8
 14195                           
 14196                           	psect	rparam
 14197  0000                     pclatu	equ	0xFFB
 14198                           pclath	equ	0xFFA
 14199                           tblptru	equ	0xFF8
 14200                           tblptrh	equ	0xFF7
 14201                           tblptrl	equ	0xFF6
 14202                           tablat	equ	0xFF5
 14203                           prodh	equ	0xFF4
 14204                           prodl	equ	0xFF3
 14205                           intcon	equ	0xFF2
 14206                           postinc0	equ	0xFEE
 14207                           fsr0h	equ	0xFEA
 14208                           fsr0l	equ	0xFE9
 14209                           wreg	equ	0xFE8
 14210                           fsr1h	equ	0xFE2
 14211                           fsr1l	equ	0xFE1
 14212                           indf2	equ	0xFDF
 14213                           fsr2h	equ	0xFDA
 14214                           fsr2l	equ	0xFD9
 14215                           status	equ	0xFD8
 14216                           
 14217                           	psect	temp
 14218  00004F                     btemp:
 14219                           	opt stack 0
 14220  00004F                     	ds	1
 14221  0000                     int$flags	set	btemp
 14222  0000                     wtemp6	set	btemp+1
 14223                           pclatu	equ	0xFFB
 14224                           pclath	equ	0xFFA
 14225                           tblptru	equ	0xFF8
 14226                           tblptrh	equ	0xFF7
 14227                           tblptrl	equ	0xFF6
 14228                           tablat	equ	0xFF5
 14229                           prodh	equ	0xFF4
 14230                           prodl	equ	0xFF3
 14231                           intcon	equ	0xFF2
 14232                           postinc0	equ	0xFEE
 14233                           fsr0h	equ	0xFEA
 14234                           fsr0l	equ	0xFE9
 14235                           wreg	equ	0xFE8
 14236                           fsr1h	equ	0xFE2
 14237                           fsr1l	equ	0xFE1
 14238                           indf2	equ	0xFDF
 14239                           fsr2h	equ	0xFDA
 14240                           fsr2l	equ	0xFD9
 14241                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    1368
    Data        2
    BSS         102
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAMh          85     35      67
    COMRAMl           1      0       1
    BANK0           160     17      97
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    Read_NVstore@storemem	PTR unsigned char  size(2) Largest target is 3
		 -> pnvcash(COMRAMh[3]), pvcash(COMRAMh[2]), 

    Write_NVstore@storemem	PTR unsigned char  size(2) Largest target is 3
		 -> pnvcash(COMRAMh[3]), pvcash(COMRAMh[2]), 

    Init_vendmem@chanlink	PTR unsigned char  size(2) Largest target is 1
		 -> chanlink1(BIGRAMl[1]), 

    lcd_string@lcdstring	PTR unsigned char  size(2) Largest target is 80
		 -> twohundredrand(CODE[8]), hundredrand(CODE[8]), fiftyrand(CODE[8]), twentyrand(CODE[8]), 
		 -> tenrand(CODE[9]), setnotes(CODE[69]), chanresetmsg(CODE[32]), chanlinkm(CODE[55]), 
		 -> vendtimem(CODE[41]), setimemsg(CODE[41]), vendsetup(CODE[80]), pricesetm2(CODE[57]), 
		 -> pricesetmsg(CODE[18]), creditclr(CODE[16]), dacmsg(CODE[13]), hoppcoin(CODE[51]), 
		 -> initnote(CODE[37]), nochange(CODE[33]), noteerr(CODE[28]), credits(CODE[13]), 
		 -> timemsg(CODE[18]), clrline(CODE[21]), enabled(CODE[10]), disabled(CODE[10]), 
		 -> sensoffmsg(CODE[31]), sensmsg(CODE[11]), linkmsg(CODE[12]), chanmsg(CODE[12]), 
		 -> clrmsg(CODE[10]), onmsg(CODE[4]), offmsg(CODE[4]), servmsg(CODE[80]), 
		 -> inscoin(CODE[39]), 

    displ_note@notestring	PTR unsigned char  size(2) Largest target is 9
		 -> twohundredrand(CODE[8]), hundredrand(CODE[8]), fiftyrand(CODE[8]), twentyrand(CODE[8]), 
		 -> tenrand(CODE[9]), 


Critical Paths under _main in COMRAMh

    _vend_init->_lcd_string
    _mdb_init->_mdb_reset
    _mdb_security->_mdb_comm
    _mdb_reset->_mdb_comm
    _mdb_noten->_mdb_comm
    _mdb_poll->_mdb_comm
    _mdb_comm->_TMR1_Initialize
    _mdb_comm->_init_mdbdata
    _mdb_comm->_mdb_transmit
    _mdb_transmit->_EUSART1_Write
    _lcd_init->_lcd_test
    _lcd_test->_lcd_writeC
    _set_notes->_enable_notes
    _enable_notes->_displ_nendis
    _save_notes->_DATAEE_WriteByte
    _displ_nendis->_lcd_string
    _displ_note->_lcd_string
    _price_set->_set_price
    _set_price->_displ_price
    _displ_price->_displ_hex
    _mdb_unlock->_TMR1_Initialize
    _mdb_unlock->_TMR3_Initialize
    _mdb_unlock->_TMR5_Initialize
    _Vend_settime->_Vend_timeset
    _Vend_timeset->_displ_time
    _displ_time->_displ_hex
    _off_sens->_displ_sflags
    _displ_sflags->_lcd_string
    _Reset_settings->_lcd_string
    _Init_vendmem->_DATAEE_ReadByte
    _Chan_link->_Link_chan
    _Link_chan->_displ_lflags
    _displ_lflags->_lcd_string
    _Sensor_set->_displ_sens
    _displ_sens->_displ_hex
    _Hopper_coin->_Update_Hopcoin
    _butindb->_butin
    _Update_Hopcoin->_displ_hex
    _Clear_cred->_lcd_string
    _displ_noteer->_lcd_string
    _displ_code->_lcd_writeC
    _displ_nochange->_lcd_string
    _displ_credit->_displ_hex
    _lcd_string->_lcd_writeC
    _displ_hex->___ltdiv
    _lcd_writeC->_lcd_dispadd
    _lcd_dispadd->_lcd_write
    _lcd_write->_read_busy
    _credit_check->_DATAEE_ReadByte
    _credit_subtract->_DATAEE_WriteByte
    _credit_add->_Update_cashaudit
    _Update_cashaudit->_Write_NVstore
    _Write_NVstore->_DATAEE_WriteByte
    _Read_NVstore->_DATAEE_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _SYSTEM_Initialize->_TMR1_Initialize
    _SYSTEM_Initialize->_TMR3_Initialize
    _SYSTEM_Initialize->_TMR5_Initialize

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAMh

    None.

Critical Paths under _main in COMRAMl

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAMl

    None.

Critical Paths under _main in BANK0

    _price_set->_set_price
    _displ_price->_displ_hex
    _Vend_settime->_Vend_timeset
    _displ_time->_displ_hex
    _Sens_off->_off_sens
    _Chan_link->_Link_chan
    _displ_sens->_displ_hex
    _Hopper_coin->_displ_hex
    _Update_Hopcoin->_displ_hex
    _displ_credit->_displ_hex

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  361852
                                             14 BANK0      3     3      0
               _CMP1_GetOutputStatus
                    _DATAEE_ReadByte
                  _SYSTEM_Initialize
                              _butin
                         _credit_add
                    _credit_subtract
                       _displ_credit
                     _displ_nochange
                       _displ_noteer
                        _displ_price
                      _enter_service
                        _get_channel
                           _lcd_init
                         _lcd_string
                           _mdb_init
                           _mdb_poll
                        _price_check
                          _vend_init
 ---------------------------------------------------------------------------------
 (1) _vend_init                                            0     0      0   21739
                     _DAC1_SetOutput
                    _DATAEE_ReadByte
                       _Init_vendmem
                       _credit_check
                         _lcd_string
                           _mdb_init
 ---------------------------------------------------------------------------------
 (2) _mdb_init                                             3     3      0    6604
                                             26 COMRAMh    3     3      0
                    _DATAEE_ReadByte
               _eusartmdb_Initialize
                           _mdb_comm
                          _mdb_noten
                          _mdb_reset
                       _mdb_security
 ---------------------------------------------------------------------------------
 (3) _mdb_security                                         0     0      0    1283
                       _init_mdbdata
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _mdb_reset                                            3     3      0    1200
                                             23 COMRAMh    3     3      0
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _mdb_noten                                            0     0      0    1283
                       _init_mdbdata
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _eusartmdb_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DAC1_SetOutput                                       1     1      0      31
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (1) _price_check                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mdb_poll                                             1     1      0    1156
                                             23 COMRAMh    1     1      0
                    _TMR3_Initialize
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (4) _mdb_comm                                             3     2      1    1153
                                             20 COMRAMh    3     2      1
                       _EUSART1_Read
                    _TMR1_Initialize
                       _init_mdbdata
                             _mdb_on
                       _mdb_transmit
                          _mdb_waitr
 ---------------------------------------------------------------------------------
 (5) _mdb_waitr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _mdb_transmit                                         1     1      0      62
                                             19 COMRAMh    1     1      0
                      _EUSART1_Write
                          _mdb_waitx
 ---------------------------------------------------------------------------------
 (6) _mdb_waitx                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      31
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (5) _mdb_on                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _init_mdbdata                                         2     2      0     130
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     687
                                             26 COMRAMh    2     2      0
                         _lcd_clockE
                           _lcd_test
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_test                                             1     1      0     523
                                             25 COMRAMh    1     1      0
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (1) _enter_service                                        0     0      0  266147
                              _Audit
                         _Clear_cred
                        _Hopper_coin
                         _Sensor_set
                         _Vend_setup
                            _butindb
                         _lcd_string
                         _mdb_unlock
                          _price_set
                          _set_notes
 ---------------------------------------------------------------------------------
 (2) _set_notes                                            0     0      0   43560
                            _butindb
                         _displ_note
                       _enable_notes
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _enable_notes                                         1     1      0   23161
                                             32 COMRAMh    1     1      0
                            _butindb
                       _displ_nendis
                         _lcd_string
                         _save_notes
 ---------------------------------------------------------------------------------
 (4) _save_notes                                           0     0      0    3187
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (4) _displ_nendis                                         2     2      0    9857
                                             30 COMRAMh    2     2      0
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _displ_note                                           2     0      2   10437
                                             30 COMRAMh    2     0      2
                         _lcd_string
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _price_set                                            0     0      0   28103
                       _Read_Service
                            _butindb
                         _lcd_string
                          _set_price
 ---------------------------------------------------------------------------------
 (3) _set_price                                            4     4      0   18107
                                             32 COMRAMh    2     2      0
                                             12 BANK0      2     2      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                        _displ_price
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _displ_price                                          1     1      0    3010
                                             31 COMRAMh    1     1      0
                          _displ_hex
                        _lcd_dispadd
                          _lcd_write
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (2) _mdb_unlock                                           1     1      0       0
                                             20 COMRAMh    1     1      0
                    _CMP1_Initialize
                    _DAC1_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _Vend_setup                                           0     0      0  115709
                          _Chan_link
                       _Init_vendmem
                     _Reset_settings
                           _Sens_off
                       _Vend_settime
                            _butindb
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _Vend_settime                                         0     0      0   37995
                       _Read_Service
                       _Vend_timeset
                            _butindb
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _Vend_timeset                                         4     4      0   27894
                                             33 COMRAMh    2     2      0
                                             12 BANK0      2     2      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                         _displ_time
                         _lcd_string
 ---------------------------------------------------------------------------------
 (5) _displ_time                                           2     1      1   12713
                                             31 COMRAMh    2     1      1
                          _displ_hex
                         _lcd_string
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Sens_off                                             0     0      0   26469
                       _Read_Service
                            _butindb
                        _get_channel
                         _lcd_string
                           _off_sens
 ---------------------------------------------------------------------------------
 (4) _off_sens                                             3     3      0   16368
                                              0 BANK0      3     3      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                       _displ_sflags
 ---------------------------------------------------------------------------------
 (5) _displ_sflags                                         3     1      2   10852
                                             30 COMRAMh    3     1      2
                         _lcd_string
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Reset_settings                                       4     4      0   13047
                                             30 COMRAMh    4     4      0
                   _DATAEE_WriteByte
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Init_vendmem                                         7     7      0    1948
                                             20 COMRAMh    7     7      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _Chan_link                                            2     2      0   26288
                                              3 BANK0      2     2      0
                          _Link_chan
                       _Read_Service
                            _butindb
                        _get_channel
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _get_channel                                          2     2      0     105
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (4) _Link_chan                                            5     5      0   16187
                                             33 COMRAMh    2     2      0
                                              0 BANK0      3     3      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                       _Read_Service
                            _butindb
                       _displ_lflags
 ---------------------------------------------------------------------------------
 (5) _displ_lflags                                         3     2      1   10792
                                             30 COMRAMh    3     2      1
                        _lcd_dispadd
                         _lcd_string
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Read_Service                                         1     1      0      34
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (2) _Sensor_set                                           1     1      0   25943
                                             33 COMRAMh    1     1      0
                            _butindb
                         _displ_sens
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _displ_sens                                           2     1      1   15854
                                             31 COMRAMh    2     1      1
               _CMP1_GetOutputStatus
                   _DATAEE_WriteByte
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _CMP1_GetOutputStatus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Hopper_coin                                          1     1      0   29891
                                             33 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                     _Update_Hopcoin
                            _butindb
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _butindb                                              4     4      0     170
                                             20 COMRAMh    4     4      0
                              _butin
 ---------------------------------------------------------------------------------
 (5) _butin                                                2     2      0      68
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (3) _Update_Hopcoin                                       2     1      1   15757
                                             31 COMRAMh    2     1      1
                   _DATAEE_WriteByte
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Clear_cred                                           2     2      0   12979
                                             30 COMRAMh    2     2      0
                   _DATAEE_WriteByte
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Audit                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displ_noteer                                         0     0      0   10402
                         _displ_code
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _displ_code                                           3     3      0     610
                                             25 COMRAMh    3     3      0
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (1) _displ_nochange                                       0     0      0   10021
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _displ_credit                                         1     1      0   13670
                                             31 COMRAMh    1     1      0
                       _credit_check
                          _displ_hex
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           5     2      3    9792
                                             25 COMRAMh    5     2      3
                        _lcd_dispadd
                          _lcd_write
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (5) _displ_hex                                           15    12      3    2162
                                             28 COMRAMh    3     0      3
                                              0 BANK0     12    12      0
                            ___ltdiv
                            ___ltmod
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _lcd_writeC                                           1     1      0     424
                                             24 COMRAMh    1     1      0
                        _lcd_dispadd
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_dispadd                                          2     2      0     229
                                             22 COMRAMh    2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            2     2      0     164
                                             20 COMRAMh    2     2      0
                         _lcd_clockE
                          _read_busy
 ---------------------------------------------------------------------------------
 (5) _read_busy                                            2     2      0      68
                                             18 COMRAMh    2     2      0
                         _lcd_clockH
                         _lcd_clockL
 ---------------------------------------------------------------------------------
 (6) _lcd_clockL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _lcd_clockH                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _lcd_clockE                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___ltmod                                              7     1      6     412
                                             18 COMRAMh    7     1      6
 ---------------------------------------------------------------------------------
 (6) ___ltdiv                                             10     4      6     421
                                             18 COMRAMh   10     4      6
 ---------------------------------------------------------------------------------
 (2) _credit_check                                         0     0      0    1682
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (1) _credit_subtract                                      1     1      0    4900
                                             22 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (1) _credit_add                                           1     1      0   11835
                                             29 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                   _Update_cashaudit
 ---------------------------------------------------------------------------------
 (2) _Update_cashaudit                                     1     1      0    6904
                                             28 COMRAMh    1     1      0
                       _Read_NVstore
                      _Write_NVstore
 ---------------------------------------------------------------------------------
 (3) _Write_NVstore                                        6     1      5    4158
                                             22 COMRAMh    6     1      5
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     4     1      3    3187
                                             18 COMRAMh    4     1      3
 ---------------------------------------------------------------------------------
 (3) _Read_NVstore                                         6     1      5    2684
                                             20 COMRAMh    6     1      5
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2    1682
                                             18 COMRAMh    2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                    _CMP1_Initialize
                    _DAC1_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR5_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _TMR1_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DAC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManagerHigh                     18    18      0       0
                                              0 COMRAMh   18    18      0
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (13) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CMP1_GetOutputStatus
   _DATAEE_ReadByte
   _SYSTEM_Initialize
     _CMP1_Initialize
     _DAC1_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
   _butin
   _credit_add
     _DATAEE_ReadByte
     _DATAEE_WriteByte
     _Update_cashaudit
       _Read_NVstore
         _DATAEE_ReadByte
       _Write_NVstore
         _DATAEE_WriteByte
   _credit_subtract
     _DATAEE_ReadByte
     _DATAEE_WriteByte
   _displ_credit
     _credit_check
       _DATAEE_ReadByte
     _displ_hex
       ___ltdiv
       ___ltmod
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_nochange
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_noteer
     _displ_code
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_price
     _displ_hex
       ___ltdiv
       ___ltmod
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
     _lcd_writeC
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
   _enter_service
     _Audit
     _Clear_cred
       _DATAEE_WriteByte
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Hopper_coin
       _DATAEE_ReadByte
       _Update_Hopcoin
         _DATAEE_WriteByte
         _displ_hex
           ___ltdiv
           ___ltmod
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _butindb
         _butin
       _displ_hex
         ___ltdiv
         ___ltmod
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Sensor_set
       _butindb
         _butin
       _displ_sens
         _CMP1_GetOutputStatus
         _DATAEE_WriteByte
         _displ_hex
           ___ltdiv
           ___ltmod
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Vend_setup
       _Chan_link
         _Link_chan
           _DATAEE_ReadByte
           _DATAEE_WriteByte
           _Read_Service
           _butindb
             _butin
           _displ_lflags
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_string
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _Read_Service
         _butindb
           _butin
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _Init_vendmem
         _DATAEE_ReadByte
       _Reset_settings
         _DATAEE_WriteByte
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _Sens_off
         _Read_Service
         _butindb
           _butin
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _off_sens
           _DATAEE_ReadByte
           _DATAEE_WriteByte
           _butindb
             _butin
           _displ_sflags
             _lcd_string
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
       _Vend_settime
         _Read_Service
         _Vend_timeset
           _DATAEE_ReadByte
           _DATAEE_WriteByte
           _butindb
             _butin
           _displ_time
             _displ_hex
               ___ltdiv
               ___ltmod
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_string
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
               _lcd_writeC
                 _lcd_dispadd
                   _lcd_write
                     _lcd_clockE
                     _read_busy
                       _lcd_clockH
                       _lcd_clockL
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _butindb
           _butin
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _butindb
         _butin
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _butindb
       _butin
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _mdb_unlock
       _CMP1_Initialize
       _DAC1_Initialize
       _TMR1_Initialize
       _TMR3_Initialize
       _TMR5_Initialize
     _price_set
       _Read_Service
       _butindb
         _butin
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _set_price
         _DATAEE_ReadByte
         _DATAEE_WriteByte
         _butindb
           _butin
         _displ_price
           _displ_hex
             ___ltdiv
             ___ltmod
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _get_channel
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
     _set_notes
       _butindb
         _butin
       _displ_note
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _enable_notes
         _butindb
           _butin
         _displ_nendis
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _save_notes
           _DATAEE_WriteByte
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
   _get_channel
   _lcd_init
     _lcd_clockE
     _lcd_test
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
   _lcd_string
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
     _lcd_writeC
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
   _mdb_init
     _DATAEE_ReadByte
     _eusartmdb_Initialize
     _mdb_comm
       _EUSART1_Read
       _TMR1_Initialize
       _init_mdbdata
       _mdb_on
       _mdb_transmit
         _EUSART1_Write
         _mdb_waitx
       _mdb_waitr
     _mdb_noten
       _init_mdbdata
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
     _mdb_reset
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
     _mdb_security
       _init_mdbdata
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
   _mdb_poll
     _TMR3_Initialize
     _mdb_comm
       _EUSART1_Read
       _TMR1_Initialize
       _init_mdbdata
       _mdb_on
       _mdb_transmit
         _EUSART1_Write
         _mdb_waitx
       _mdb_waitr
   _price_check
   _vend_init
     _DAC1_SetOutput
     _DATAEE_ReadByte
     _Init_vendmem
       _DATAEE_ReadByte
     _credit_check
       _DATAEE_ReadByte
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _mdb_init
       _DATAEE_ReadByte
       _eusartmdb_Initialize
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
       _mdb_noten
         _init_mdbdata
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
       _mdb_reset
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
       _mdb_security
         _init_mdbdata
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _PIN_MANAGER_IOC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMh            E7D      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      33        0.0%
BANK13             100      0       0      34        0.0%
BITBANK12          100      0       0      31        0.0%
BANK12             100      0       0      32        0.0%
BITBANK11          100      0       0      29        0.0%
BANK11             100      0       0      30        0.0%
BITBANK10          100      0       0      27        0.0%
BANK10             100      0       0      28        0.0%
BITBANK9           100      0       0      24        0.0%
BANK9              100      0       0      25        0.0%
BITBANK8           100      0       0      22        0.0%
BANK8              100      0       0      23        0.0%
BITBANK7           100      0       0      20        0.0%
BANK7              100      0       0      21        0.0%
BITBANK6           100      0       0      18        0.0%
BANK6              100      0       0      19        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      17        0.0%
BITBANK4           100      0       0      14        0.0%
BANK4              100      0       0      15        0.0%
BITBANK3           100      0       0      12        0.0%
BANK3              100      0       0      13        0.0%
BITBANK2           100      0       0      10        0.0%
BANK2              100      0       0      11        0.0%
BITBANK1           100      0       0       8        0.0%
BANK1              100      0       0       9        0.0%
BITBANK0            A0      0       0       6        0.0%
BANK0               A0     11      61       7       60.6%
BITBANK14           88      0       0      35        0.0%
BANK14              88      0       0      36        0.0%
COMRAMh             55     23      43       2       78.8%
BITCOMRAMh          55      0       0       0        0.0%
BIGRAMl              2      0       0      38        0.0%
BITCOMRAMl           1      0       0       1        0.0%
COMRAMl              1      0       1       3      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       4        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5      26        0.0%
DATA                 0      0      A5       5        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sat Mar 24 14:34:22 2018

                       lcd_writeC@lcdata 0023                   __end_of_displ_nochange 1D06  
                           ?_displ_price 0000                              __CFG_CP$OFF 000000  
                      ??_CMP1_Initialize 001D                                       l91 2032  
                          ?_displ_credit 0000                            ?_displ_lflags 0029  
                          ?_displ_nendis 000B                            ?_displ_sflags 0029  
                        lcd_write@lcdata 0020                            ?_displ_noteer 0000  
                            __CFG_LVP$ON 000000                                      LATE 000F87  
                        _DAC1_Initialize 2080                                      l245 1BB0  
                                    _PR2 000FBC                                      _PR4 000FB6  
                           __CFG_CPD$OFF 000000                          _timer1ReloadVal 00BE  
                __size_of_PMD_Initialize 001C                       get_channel@channel 001D  
                        _TMR2_Initialize 1F14                                      prod 000FF3  
                                    wreg 000FE8                         ??_Update_Hopcoin 002B  
                         _DAC1_SetOutput 208C                           ??_credit_check 001F  
                            main@channel 00B7                             _BAUD1CONbits 000F9F  
                           __CFG_ZCD$OFF 000000                            ?_mdb_security 0000  
                                   l1010 0064                                     l1012 0072  
                                   l1005 000C                                     l1030 012A  
                                   l1022 0096                                     l1014 00C8  
                                   l1015 00BE                                     l1040 1262  
                                   l1016 00A2                                     l1024 009C  
                                   l1041 1230                                     l1017 008A  
                                   l1009 0052                                     l1042 1294  
                                   l2003 0D96                                     l1043 1236  
                                   l1027 00CE                                     l1019 0090  
                                   l2020 1E68                                     l2004 0D72  
                                   l1044 123C                                     l2012 0F96  
                                   l1028 00D8                                     l1045 1242  
                                   l2013 0F98                                     l2006 0DDE  
                                   l1046 1248                                     l2014 0FFC  
                                   l2007 0DA2                                     l1047 1250  
                                   l1039 1228                                     l2112 1F42  
                                   l2200 11AE                                     l2120 0352  
                                   l1048 1256                                     l2025 1D64  
                                   l2113 1F3A                                     l2201 119A  
                                   l2121 02A4                                     l2105 1502  
                                   l1049 125C                                     l2026 1D40  
                                   l2034 1896                                     l2130 0390  
                                   l2122 0368                                     l2106 1514  
                                   l2019 1E80                                     l2131 044E  
                                   l2123 02DA                                     l2107 151E  
                                   l1500 04F8                                     l2060 0AE2  
                                   l2132 0398                                     l2124 0312  
                                   l1501 049A                                     l2045 1DB2  
                                   l2061 0A6A                                     l2133 046E  
                                   l1502 04A2                                     l2046 1DAC  
                                   l2062 0AB0                                     l2134 03BC  
                                   l1511 051A                                     l1503 04AA  
                                   l2071 1468                                     l2063 0A72  
                                   l2151 05D8                                     l2143 19C6  
                                   l2135 03E0                                     l2119 029A  
                                   l1512 0522                                     l1504 04B2  
                                   l2072 1440                                     l2064 0AC4  
                                   l2152 0660                                     l2144 19DC  
                                   l2136 0404                                     l1513 052A  
                                   l1505 04BA                                     l2065 0A7E  
                                   l2153 05E0                                     l2145 19E6  
                                   l2137 0428                                     l1522 0F0E  
                                   l1514 0532                                     l2082 1464  
                                   l2066 0A8A                                     l2090 0992  
                                   l2170 0CB8                                     l2162 1804  
                                   l2154 0674                                     l1523 0EB0  
                                   l1515 053A                                     l2075 147E  
                                   l2091 09E8                                     l2163 1834  
                                   l2155 061E                          _timer3ReloadVal 00BC  
                                   l1532 1030                                     l1508 0542  
                                   l2076 144A                                     l2092 099A  
                                   l2172 0CDA                                     l2164 183E  
                                   l2156 065C                                     l1525 0F34  
                                   l1533 1038                                     l1509 0512  
                                   l2077 1454                                     l2093 09FC  
                                   l1550 17B4                                     l1526 0F1A  
                                   l1534 108E                                     l2094 09B0  
                                   l1470 13AE                                     l2174 0D1E  
                                   l2190 08A0                                     l2182 1A14  
                                   l1535 103E                                     l2079 1458  
                                   l2095 09C6                                     l1471 138E  
                                   l2175 0D1C                                     l2191 0922  
                                   l2183 1A2A                                     l2096 0A0C  
                                   l1472 13A6                                     l2192 08A8  
                                   l2184 1A34                                     l1465 1654  
                                   l2193 0936                                     l1546 17CA  
                                   l1466 1664                                     l2194 08E4  
                                   l1547 1788                                     l2195 091E  
                                   l1548 17DE                                     l1564 1FE8  
                                   l1549 179E                                     l1477 0E7A  
                                   l1558 1DDE                                     l2710 0798  
                                   l2702 13D4                                     l2711 0834  
                                   l2703 13BA                                     l1488 1D8E  
                                   l2712 07A4                                     l2713 085A  
                                   l1498 04C2                                     l2730 157C  
                                   l2714 07BA                                     l1499 0492  
                                   l2715 07D0                                     l2716 07E6  
                                   l2725 154E                                     l2717 07FC  
                                   l2709 0860                                     l2726 15A2  
                                   l2718 0812                                     l2750 0164  
                                   l2727 1556                                     l2728 15B6  
                                   l2760 01B8                                     l2752 016C  
                                   l2729 1568                                     l2761 01C0  
                                   l2753 0174                                     l2770 01E6  
                                   l2762 0250                                     l2754 017C  
                                   l2771 01EA                                     l2763 01C4  
                                   l2755 0184                                     l2772 01EE  
                                   l2764 01C8                                     l2756 018C  
                                   l2773 01F2                                     l2765 01D2  
                                   l2749 0196                                     l2694 1E98  
                                   l2782 06F4                                     l2774 01F6  
                                   l2766 01D6                                     l2791 076C  
                                   l2783 0726                                     l2759 01FC  
                                   l2767 01DA                                     l4472 16FA  
                                   l2784 06FC                                     l2768 01DE  
                                   l4473 1706                                     l2769 01E2  
                                   l4482 1984                                     l2778 06CE  
                                   l4483 1990                                     l2779 069E  
                                   l4468 16D0                                     l4469 16C6  
                                   l4478 1964                                     l4479 195A  
                                   l8665 2058                                     l8851 1E90  
                                   l9689 10C6                                     _LATA 000F83  
                                   u3110 206E                                     _LATB 000F84  
                                   _LATC 000F85                                     _LATD 000F86  
                                   u3025 1BBE                                     _LATE 000F87  
                                   u3026 1BC0                                     u3220 06D4  
                                   u3250 0730                                     _T2PR 000FBC  
                                   u3235 071E                                     u3180 0D28  
                                   u3237 0720                                     u3270 073A  
                                   u4207 1DC2                                     u4217 1A44  
                                   u4137 171E                                     u3370 1450  
                                   _T4PR 000FB6                                     u4227 1A68  
                                   u4147 10DA                                     u2900 1968  
                                   u4237 18E6                                     u4157 10E8  
                                   u3285 0744                                     u4167 1152  
                                   u3287 0746                                     u4177 0AEE  
                                   u3650 10E6                                     u4187 11F4  
                                   _PMD0 000EE1                                     u4197 1826  
                                   _PMD1 000EE2                                     u2870 16D4  
                                   _PMD2 000EE3                                     _PMD3 000EE4  
                                   _PMD4 000EE5                                     _PMD5 000EE6  
                                   _TMR2 000FBB                                     _TMR4 000FB5  
          __size_of_eusartmdb_Initialize 0016                                     _WPUA 000F10  
                                   _WPUB 000F18                                     _WPUC 000F20  
                                   _WPUD 000F25                                     _WPUE 000F2D  
                          _EUSART1_Write 2056                            __CFG_FCMEN$ON 000000  
                                   _cash 003A                                     _dest 00A0  
                                   _main 0000                                     _exit FC10  
                          ?_EUSART1_Read 000B                            ?_mdb_transmit 0000  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004F  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00AA                          _timer5ReloadVal 00BA  
                   __end_of_chanresetmsg FEEF                               _Clear_cred 189E  
                        _TMR3_Initialize 1C66                   __size_of_enter_service 0096  
                          __CFG_CSWEN$ON 000000                             ___param_bank 000000  
                        ?_displ_nochange 0000                            __CFG_SCANE$ON 000000  
                         ??_displ_credit 002A                __size_of_DATAEE_WriteByte 003A  
                         ??_displ_lflags 002A                  __end_of_TMR0_Initialize 1E62  
                         ??_displ_nendis 0029                           ??_displ_sflags 002B  
         __size_of_OSCILLATOR_Initialize 0018                           ??_displ_noteer 0029  
                          ?_Read_NVstore 001F            __end_of_OSCILLATOR_Initialize 1FCE  
                                  ?_main 000B                            __CFG_WDTE$OFF 000000  
                                  _T1CLK 000FD2                                    _T1CON 000FCF  
                                  _T3CLK 000FCC                                    _T2CON 000FBD  
                                  _LATA6 007C1E                                    _T3CON 000FC9  
                                  _LATA7 007C1F                                    _CMOUT 000F3D  
                                  _T5CLK 000FC6                                    _T4CON 000FB7  
                                  _T2HLT 000FBE                                    _T5CON 000FC3  
                        __end_of___ltdiv 1714                                    _T4HLT 000FB8  
                         __CFG_DEBUG$OFF 000000                          __end_of___ltmod 199E  
                                  _T2TMR 000FBB                                    _T2RST 000FC0  
                                  _T4TMR 000FB5                                    _T4RST 000FBA  
                 __end_of_DAC1_SetOutput 2094                                    i2l189 005E  
                                  _OSCEN 000EDC                   __size_of_Write_NVstore 0028  
                                  _TMR0H 000FD4                                    _TMR1H 000FCE  
                        __end_of_cc_poll FC54                                    _TMR0L 000FD3  
                                  _TMR1L 000FCD                                    _TMR3H 000FC8  
                                  _TMR3L 000FC7                                    _TMR5H 000FC2  
                                  _TMR5L 000FC1                                    _PORTA 000F8D  
                        __end_of_cc_test FC5F                                    _PORTD 000F90  
                        __end_of_cc_stop FC5A                                    _TRISA 000F88  
                                  _TRISB 000F89                                    _TRISC 000F8A  
                                  _TRISD 000F8B                                    _TRISE 000F8C  
                        __end_of_chanmsg FF99                            ?_Read_Service 000B  
                        __end_of_cashint FC49                          __end_of_cashinv FC4B  
                     off_sens@senseflags 00A9                                    _Audit 20C4  
                          __CFG_WRT0$OFF 000000                          _TMR4_Initialize 1F4E  
                          __CFG_WRT1$OFF 000000                           __pidataCOMRAMh 20C7  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                          __CFG_WRT4$OFF 000000                            __CFG_WRT5$OFF 000000  
                          __CFG_WRT6$OFF 000000                            __CFG_WRT7$OFF 000000  
                        __end_of_enabled FFCE                           __CFG_EBTR0$OFF 000000  
                      lcd_write@savelatd 001F                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                        __end_of_credclr FB75                           __CFG_EBTR4$OFF 000000  
                        __end_of_credmem FC4D                           __CFG_EBTR5$OFF 000000  
                        __end_of_credits FF8D                           __CFG_EBTR6$OFF 000000  
                         __CFG_EBTR7$OFF 000000                          __end_of_clrline FF3F  
                        __end_of_dispclr FC84                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                          __end_of_dispoff FC7D  
                          __CFG_WRTD$OFF 000000                            ??_Hopper_coin 002C  
                                  _bflag 0046                          _DATAEE_ReadByte 1F9E  
                         __CFG_EBTRB$OFF 000000                           ??_mdb_security 0022  
                __end_of_PIN_MANAGER_IOC 20BE                          __end_of_butindb 1DD2  
                        __end_of_dsphome FC82                                    _line1 FC79  
                                  _line2 FC78                                    _line3 FC77  
                                  _line4 FC76                                    _count 004C  
                                  _butin 1A3A                          __end_of_mastadd FC61  
                        __end_of_hopcoin FC3B                          __end_of_inithop FBDE  
                                  _vcash 009B                          __end_of_inscoin FE89  
                                  _onmsg FFFB                       __CFG_MCLRE$EXTMCLR 000000  
                        __end_of_linkmsg FFA5                          __end_of_second1 FC53  
                         ?_EUSART1_Write 000B                  __end_of_TMR1_Initialize 1CD2  
                          ?_Init_vendmem 000B                                    pclath 000FFA  
                                  tablat 000FF5                          __end_of_noteerr FF2A  
                        __end_of_tenrand FFD7                          __end_of_sensmsg FFB0  
                        __end_of_sensval FC3F                          __end_of_timemsg FF51  
                        __end_of_servmsg FCD8                           ??_EUSART1_Read 001D  
                         ??_mdb_transmit 001E                                    status 000FD8  
                                  wtemp6 0050                           _Reset_settings 1162  
                        _TMR5_Initialize 1C30             __end_of_CMP1_GetOutputStatus 2072  
                        __initialization 1A84                              butin@butons 001E  
             __end_of_EUSART1_Initialize 2010                             __end_of_main 0134  
                __end_of_DAC1_Initialize 208C                             __end_of_exit FC15  
                     __size_of_Chan_link 0062                      displ_time@motortime 002B  
                __end_of_TMR2_Initialize 1F32                           ??_Read_NVstore 0024  
                                 ??_main 00B5                            __activetblptr 000003  
                        ?_DAC1_SetOutput 000B                     __end_of_enable_notes 15BC  
                         ??_Read_Service 001D                              butindb@butt 0022  
                       __end_of_Sens_off 1A3A                                   ?_Audit 0000  
                          _enter_service 1204                                   ?_butin 0000  
                                 _CM1NCH 000F3B                                   _CM1PCH 000F3C  
                         ??_Init_vendmem 001F                                   _ANSELA 000F11  
                                 _ANSELB 000F19                                   _ANSELC 000F21  
                                 _ANSELD 000F26                                   _ANSELE 000F2E  
                                 _T0CON0 000FD5                                   _T0CON1 000FD6  
                                 _T1GATE 000FD1                                   _T1GCON 000FD0  
                                 _T3GATE 000FCB                                   _T3GCON 000FCA  
                                 _T5GATE 000FC5                                   _T5GCON 000FC4  
                                 _RC1REG 000F99                                   _RC1STA 000F9D  
                                 _RB5PPS 000EF4                                   _ODCONA 000F0F  
                                 _ODCONB 000F17                                   _ODCONC 000F1F  
                                 _RC6PPS 000EFD                                   _ODCOND 000F24  
                                 _ODCONE 000F2C                 __size_of_credit_subtract 0056  
                       credit_add@credit 0028                  __end_of_TMR3_Initialize 1C9C  
                         __CFG_WDTCCS$SC 000000                                   _TABLAT 000FF5  
                          ?_init_mdbdata 000B                         __end_of_cc_level FC59  
                                 _OSCFRQ 000EDE                                   _NVMDAT 000F80  
                       __end_of_cc_reset FC60                                   _TX1REG 000F9A  
                                 _TX1STA 000F9E                      __end_of_Hopper_coin 0AE8  
                 __end_of_Reset_settings 1204                            _Write_NVstore 1E62  
                     __size_of_Link_chan 00BA                         __end_of_cashoutv FC3D  
                            ?_Clear_cred 0000                           __CFG_PWRTE$OFF 000000  
                DAC1_SetOutput@inputData 001D                     __size_of_get_channel 001C  
                         __CFG_XINST$OFF 000000                         __end_of_disabled FFC4  
                   __size_of_lcd_dispadd 0018                         __end_of_auditmsg FC08  
                       __end_of_dispaddr FC83                         __end_of_lcd_init 1162  
                       __end_of_lcd_test 1FFA                         __end_of_mdb_comm 0774  
                       __end_of_mdb_init 177C                         __end_of_mdb_poll 0256  
                   __end_of_credit_check 1EF4                                   _cc_pay FC5B  
                                 _cc_pin FC57                                   _dacmsg FF73  
                           ?_price_check 0000                           __CFG_STVREN$ON 000000  
                                 _change 009D                        ?_Update_cashaudit 000B  
                             _Sensor_set 093C                            displ_nendis@x 002A  
                              ??___ltdiv 0023                          mdb_reset@i_3738 0024  
                              ??___ltmod 0023                                   _credit 003B  
                                 _lcdata 0045                                   _clrmsg FFB0  
                                 _dispon FC84                                   _mdb_on 20BE  
                                 _dispsl FC7A                               _Vend_setup 036E  
                                 _dispsr FC7B                                   _ercode 0043  
                                 _hexnum 0096                                   _hopadd FC61  
                       __end_of_off_sens 093C                         ?_TMR0_Initialize 0000  
                __end_of_TMR4_Initialize 1F6A                                   _mcount 0041  
                                 _offmsg FFF7                                   clear_0 1AAE  
                                 clear_1 1ABA                       ??_Update_cashaudit 0027  
                       __end_of_hoperror FC17                         __end_of_hoppcoin FE10  
                       __end_of_initnote FEAE                                   _nvcash 0090  
                                 _noteen 003D                                   _senset FBDE  
                                 _pvcash 004A                                   _slvadd 00A3  
                       __end_of_nochange FECF                     __size_of_displ_price 0040  
                                 _stradd 0044                                   _tvends 0088  
                      read_busy@savelatd 001E                        read_busy@savelate 001D  
                __end_of_DATAEE_ReadByte 1FB6                         __end_of_second_5 FC51  
                              ??_butindb 001F                           _PMD_Initialize 1F6A  
                         ?_enter_service 0000                         __end_of_notebits FC41  
                       __end_of_pricemsg FC10                         __end_of_notetest FBFB  
                           __mediumconst FAA6                         __end_of_setnotes FD6D  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                       __end_of_vendtest FBB4                                   tblptru 000FF8  
                   Update_Hopcoin@newval 002B                          ??_EUSART1_Write 001D  
                       ?_PIN_MANAGER_IOC 000B                        __end_of_Chan_link 1844  
          __size_of_INTERRUPT_Initialize 0008                           ??_init_mdbdata 001D  
                   __end_of_displ_credit 1D3A                         ?_TMR1_Initialize 0000  
                __end_of_TMR5_Initialize 1C66                     __end_of_displ_lflags 13B6  
                      displ_lflags@lchan 002B         ??_INTERRUPT_InterruptManagerHigh 000B  
        ?_INTERRUPT_InterruptManagerHigh 000B                        _SYSTEM_Initialize 1BFA  
                   __end_of_displ_nendis 1DA0                      Vend_timeset@channel 00B4  
                             __accesstop 0060                  __end_of__initialization 1AC2  
                   __end_of_displ_sflags 0E9C                     __end_of_displ_noteer 1E34  
             Reset_settings@chanlinkbits 002B                           ?_Write_NVstore 0021  
                  __end_of_note_features FC6F                          _CMP1_Initialize 2010  
                        ?_Reset_settings 0000                       ?_SYSTEM_Initialize 000B  
                  __end_of_theft_attempt FC63                             __pbssCOMRAMh 002E  
                          ___rparam_used 000001                             __pbssCOMRAMl 004E  
                          __end_of_Audit 20C6                             __pidataBANK0 20C6  
                    ??_SYSTEM_Initialize 001F                         ?_DAC1_Initialize 0000  
                   __end_of_mdb_security 1F14                         _DATAEE_WriteByte 1B88  
                          __end_of_line1 FC7A                            __end_of_line2 FC79  
                          __end_of_line3 FC78                            __end_of_line4 FC77  
                          __end_of_butin 1A84                            __end_of_onmsg FFFF  
                  __end_of_note_rejected FC64                         ?_TMR2_Initialize 0000  
                  __end_of_note_security FC74                   __end_of_PMD_Initialize 1F86  
                   __end_of_EUSART1_Read 2036                     __end_of_mdb_transmit 2056  
                             _cc_countrq FC5A                        __end_of_Link_chan 0D2E  
                           _chanresetmsg FECF                                  ??_Audit 001D  
                    __size_of_Clear_cred 0056                     _CMP1_GetOutputStatus 2064  
                         Write_NVstore@i 0026                       __size_of_displ_hex 00B6  
                            _Hopper_coin 0A12                       __size_of_lcd_write 0032  
                                ??_butin 001D                __end_of_SYSTEM_Initialize 1C30  
                     __size_of_mdb_reset 0086                       __size_of_mdb_noten 003A  
                     __size_of_mdb_waitr 0006                       __size_of_mdb_waitx 0006  
                             __pbssBANK0 0060                      displ_hex@hexnumsave 00AF  
                       ?_TMR3_Initialize 0000                     __end_of_Read_NVstore 1D6E  
                   displ_price@vendprice 002A                         ??_displ_nochange 0029  
                          _chan1linkbits FC37                            _chan2linkbits FC35  
                     __size_of_read_busy 0042                     __end_of_Read_Service 2048  
                      ??_credit_subtract 0021                            _chan3linkbits FC33  
                              ?_Sens_off 0000                            _chan4linkbits FC31  
                          _chan5linkbits FC2F                              ?_Sensor_set 0000  
           __end_of_eusartmdb_Initialize 1FE4                              ?_Vend_setup 0000  
                          _chan6linkbits FC2D                    __size_of_enable_notes 007A  
                                ?_mdb_on 0000                                  _CM1CON0 000F39  
                                _CM1CON1 000F3A                     __end_of_Init_vendmem 0DE6  
                          _chan7linkbits FC2B                         ?_TMR4_Initialize 0000  
                        ?_PMD_Initialize 0000                            _chan8linkbits FC29  
                        ??_enter_service 002E                       __size_of_set_price 0118  
                     __size_of_set_notes 00F2                       __size_of_price_set 0080  
                       ?_DATAEE_ReadByte 001D                       __size_of_vend_init 00B4  
                  displ_nendis@note2disp 0029                               _credit_add 1844  
                      __end_of_cc_adpoll FC55                               _lcd_clockE 2072  
                             _lcd_clockH 209C                               _lcd_clockL 2094  
                      __end_of_cc_enable FC5E                                  _SP1BRGH 000F9C  
                                _SP1BRGL 000F9B                               _lcdaddress 00A4  
                                _OSCCON1 000ED8                                  _OSCCON3 000EDA  
                                _TBLPTRH 000FF7                        __end_of_chan1time FC27  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                      __end_of_chan2time FC25                    ?_CMP1_GetOutputStatus 000B  
                      __end_of_chan3time FC23                        __end_of_chan4time FC21  
                        off_sens@chanbit 00A8                        __end_of_chan5time FC1F  
                      __end_of_chan6time FC1D                                  _NVMADRH 000F7F  
                        off_sens@channel 00A7                                  _NVMADRL 000F7E  
                             _jammed_err FC69                        __end_of_chan7time FC1B  
                                _OSCTUNE 000EDD                        __end_of_chan8time FC19  
                                _NVMCON2 000F82                        __end_of_cc_newpin FC57  
                      __end_of_cc_serial FC56                               _displ_code 0474  
                                _PPSLOCK 000EA0                               _displ_note 1BC2  
                             _displ_sens 1636                               _displ_time 129A  
                __end_of_CMP1_Initialize 2024                        __end_of_cc_status FC5D  
                             _lcd_string 1006                               _dispcursor FC7F  
                             _lcd_writeC 177C                                ?_lcd_init 0000  
                          ?_Vend_timeset 0000                            ?_Vend_settime 0000  
                              ?_lcd_test 0000                                ?_mdb_comm 001F  
                              ?_mdb_init 0000                               _dispshleft FC7D  
                             _dispnormal FC80                                ?_mdb_poll 0000  
                        ??_Write_NVstore 0026                               _mdb_unlock 0AE8  
                      __end_of_chanlinkm FDDD                         ?_TMR5_Initialize 0000  
                   DATAEE_WriteByte@bAdd 001D                                ?_off_sens 0000  
                         displ_hex@value 00A7                    __size_of_credit_check 0022  
                           _enable_notes 1542                                  __Hparam 0000  
                                __Lparam 0000                               ??_Sens_off 002C  
             __CFG_RSTOSC$HFINTOSC_64MHZ 000000                        __end_of_creditclr FF73  
                         mdb_comm@mcount 001F                        __end_of_displ_hex 0F52  
                      __end_of_dispfunc1 FC88                        __end_of_dispfunc2 FC87  
                      __end_of_dispfunc3 FC86                        __end_of_lcd_write 1E04  
                      __end_of_fiftyrand FFEF                           mdb_comm@slvadd 0020  
                                ___ltdiv 16AA                        __end_of_mdb_reset 143C  
                      __end_of_mdb_noten 1B88                                  ___ltmod 194A  
                      __end_of_mdb_waitr 20B2                         ??_DAC1_SetOutput 001D  
                      __end_of_mdb_waitx 20B8                                  _cc_poll FC53  
                                _cc_test FC5E                                  _cc_stop FC59  
                        __size_of_mdb_on 0004                                  _dbcount 0031  
                       set_price@channel 00B4                                  __pcinit 1A84  
                                _chanmsg FF8D                                  _cashint FC47  
                   __end_of_init_mdbdata 1EB0                                  _cashinv FC49  
                   __size_of_price_check 0002                                  __ramtop 0F00  
                                _chkbyte 003F                               _hopercount 00C0  
                                _enabled FFC4                               _errorflags 00A2  
                                __ptext0 0000                                  __ptext1 0F52  
                                __ptext2 1714                                  __ptext3 1EF4  
                                __ptext4 13B6                                  __ptext5 1B4E  
                                __ptext6 1FCE                                  __ptext7 208C  
                                __ptext8 20C2                                  __ptext9 0134  
                                _credclr FB4B                                  _credmem FC4B  
                                _credits FF80                                  _command 009E  
                                _clrline FF2A                                  _dispclr FC83  
                                _dispoff FC7C                                  _mdbdata 0060  
                                _lcdfunc 00A6                                  _lcdline 00A5  
                              _T1CONbits 000FCF                                  _butindb 1DA0  
                                _dsphome FC81                    _OSCILLATOR_Initialize 1FB6  
                              _T2CONbits 000FBD                                  _mastadd FC60  
                                _hopcoin FC39                         set_price@buttons 00B3  
                                _buttons 0039                                  _inithop FBCA  
                              _T3CONbits 000FC9                                  _inscoin FE62  
                                _linkmsg FF99                                _CMOUTbits 000F3D  
                      __end_of_read_busy 1B0E                                  _second1 FC51  
                              _T4CONbits 000FB7                       _EUSART1_Initialize 1FFA  
               ??_PIN_MANAGER_Initialize 001D                                _T2HLTbits 000FBE  
                  __size_of_displ_credit 0034                                _T5CONbits 000FC3  
                                _nobytes 009F                                  _senschk 0035  
                                _noteerr FF0E                    __size_of_displ_lflags 008A  
                                _tenrand FFCE                                  _notenum 004D  
                                _sensmsg FFA5                                  _sensval FC3D  
                                _senspos 0036                                _T4HLTbits 000FB8  
                  __size_of_displ_nendis 0032                                  _pnvcash 0047  
                                _venderr 0034                                  _timemsg FF3F  
                                _servmsg FC88                    __size_of_displ_sflags 00B6  
                         ??_Vend_timeset 002C                           ??_Vend_settime 002E  
                  __size_of_displ_noteer 0030               __size_of_SYSTEM_Initialize 0036  
                           _credit_check 1ED2                               ??_lcd_init 0025  
                             ??_lcd_test 0024                               ??_mdb_comm 0020  
                             ??_mdb_init 0025                     end_of_initialization 1AC2  
                      __end_of_secondadd FC4F                               ??_mdb_poll 0022  
                              _T2RSTbits 000FC0                      __size_of_Sensor_set 00D6  
                    ?_EUSART1_Initialize 000B                      __size_of_Vend_setup 0106  
                              _T4RSTbits 000FBA                               ??_off_sens 002C  
                          __pdataCOMRAMh 004D                        __end_of_note_poll FC73  
                      __end_of_motimemsg FB1E                        __end_of_set_price 036E  
                      __end_of_set_notes 0866                  __size_of_Update_Hopcoin 0086  
                      __end_of_note_type FC72                        __end_of_price_set 1542  
                             _save_notes 1EB0                        __end_of_just_busy FC6C  
                      __end_of_priceexit FBCA                        __end_of_sensoffms FB4B  
                      __end_of_setimemsg FE62                             ??_Clear_cred 0029  
                      __end_of_vend_init 1006                    __size_of_mdb_security 0020  
                       ___ltdiv@dividend 001D                        __end_of_rom_error FC6B  
                      __end_of_vendtimem FE39                        __end_of_vendsetup FD28  
                      __end_of_vendstore FC47                               _note_reset FC75  
                             _sens_error FC6C                               _note_setup FC74  
                                postinc0 000FEE                    __size_of_EUSART1_Read 0012  
                             _motr_error FC6D                    __size_of_mdb_transmit 000E  
                             _just_reset FC68                            Read_NVstore@i 0024  
                             _pricesetm2 FD6D                               _sensoffmsg FEEF  
                   ??_EUSART1_Initialize 001D                               _pricestore FC43  
                  __CFG_WDTCPS$WDTCPS_31 000000                 Init_vendmem@chanlinkbits 0021  
                           _displ_credit 1D06                             _displ_lflags 132C  
                           _displ_nendis 1D6E                                _PORTBbits 000F8E  
                             _venderrors FC41                         displ_code@ercode 0026  
                           _displ_sflags 0DE6                             _displ_noteer 1E04  
                             _settimemsg FB75                        displ_sens@dmsgpos 002A  
                            ?_credit_add 0000                       displ_lflags@chanel 002A  
                            ?_lcd_clockE 0000                              ?_lcd_clockH 0000  
                            ?_lcd_clockL 0000                   ??_CMP1_GetOutputStatus 001D  
                   Vend_timeset@chantime 00B3                         ___ltdiv@quotient 0023  
                  __size_of_Read_NVstore 0034                       __end_of_Clear_cred 18F4  
                            ?_displ_code 000B                __size_of_Update_cashaudit 00C4  
                            ?_displ_note 0029                              ?_displ_sens 002A  
                            ?_displ_time 002A                        displ_sens@smsgpos 002B  
                            ?_lcd_string 0024                              ?_lcd_writeC 0000  
                    EUSART1_Write@txData 001D                         ?_CMP1_Initialize 000B  
                       ??_Reset_settings 0029                         __CFG_FEXTOSC$OFF 000000  
               __end_of_DATAEE_WriteByte 1BC2                             _mdb_security 1EF4  
                            ?_mdb_unlock 0000                     _eusartmdb_Initialize 1FCE  
                  __size_of_Read_Service 0012                        displ_time@channel 002A  
                          ??_get_channel 001D                        get_channel@butons 001E  
                              _Chan_link 17E2                             _EUSART1_Read 2024  
                    __end_of_cashbox_err FC67                             _mdb_transmit 2048  
                          ??_lcd_dispadd 0021                               displ_hex@i 00B2  
                    __end_of_chanlinkmsg FAE4                    __size_of_Init_vendmem 00B8  
                   _timer0ReloadVal16bit 00B8                          __pcstackCOMRAMh 000B  
                        __pcstackCOMRAMl 0000                               mdb_reset@i 0023  
           __end_of_INTERRUPT_Initialize 20AC                            ??_displ_price 002A  
                     mdb_transmit@txbyte 001E                               _twentyrand FFEF  
                         __end_of_cc_pay FC5C                           __end_of_cc_pin FC58  
                         __end_of_dacmsg FF80                           __end_of_clrmsg FFBA  
                         __end_of_dispon FC85                           __end_of_mdb_on 20C2  
                         __end_of_dispsl FC7B                           __end_of_dispsr FC7C  
                           _Read_NVstore 1D3A                         displ_credit@cash 002A  
                         __end_of_hopadd FC62                   ?_OSCILLATOR_Initialize 0000  
                         __end_of_offmsg FFFB                           __end_of_senset FBED  
                    start_initialization 1A84                             _Read_Service 2036  
               __size_of_TMR0_Initialize 002E          __size_of_PIN_MANAGER_Initialize 007A  
                           ?_Hopper_coin 0000                                _Link_chan 0C74  
                        _credit_subtract 18F4                  Update_cashaudit@addcash 0027  
                  ?_eusartmdb_Initialize 0000                    __end_of_EUSART1_Write 2064  
                           _Init_vendmem 0D2E                               ?_Chan_link 0000  
                            ?_save_notes 0000                      DATAEE_ReadByte@bAdd 001D  
               __size_of_PIN_MANAGER_IOC 0006                            Init_vendmem@i 0025  
                    __size_of_credit_add 005A                         __CFG_LPBOREN$OFF 000000  
                    __size_of_lcd_clockE 000E                      __size_of_lcd_clockH 0008  
                    __size_of_lcd_clockL 0008                 __size_of_TMR1_Initialize 0036  
                  __size_of_init_mdbdata 0026                      __end_of_get_channel 1F4E  
                       ??_PMD_Initialize 001D                             ??_Sensor_set 002C  
                    __size_of_displ_code 0106                      __end_of_lcd_dispadd 1F9E  
                   __end_of_Vend_timeset 067A                     __end_of_Vend_settime 19EC  
                      __size_of_Sens_off 004E                      __size_of_displ_note 0038  
                    __size_of_displ_sens 0074                             ??_Vend_setup 002E  
                    __size_of_displ_time 0092                                 ??_mdb_on 001D  
                            __pdataBANK0 00C0                      __size_of_lcd_string 00B4  
                    __size_of_lcd_writeC 0066                      __size_of_mdb_unlock 00C8  
                 displ_sflags@senseflags 002B                 __size_of_DAC1_Initialize 000C  
                    __end_of_displ_price 1B4E                            __pcstackBANK0 00A7  
               __size_of_TMR2_Initialize 001E                      __end_of_dispshright FC7F  
                             ?_Link_chan 0000                            butindb@butval 0021  
                              _cc_adpoll FC54                              _cashbox_err FC66  
                            __pnvCOMRAMh 004C                                _cc_enable FC5D  
                   __end_of_note_removed FC68                              _chanlinkmsg FAA7  
                              _chan1time FC25                    credit_subtract@credit 0021  
                   __end_of_note_stacker FC70                                _chan2time FC23  
                              _chan3time FC21                                _chan4time FC1F  
                              _chan5time FC1D                                _chan6time FC1B  
                              _chan7time FC19                                _chan8time FC17  
                              _cc_newpin FC56                     init_mdbdata@initdata 001D  
                              _cc_serial FC55                       __end_of_Sensor_set 0A12  
                           _init_mdbdata 1E8A                        __size_of_lcd_init 00A8  
                      __size_of_lcd_test 0016                       __end_of_Vend_setup 0474  
                      __size_of_mdb_comm 00FA                                _cc_status FC5C  
                      __size_of_mdb_init 0068                           _Update_Hopcoin 143C  
                      __size_of_mdb_poll 0122                                __pnvBANK0 00B8  
                              _chanlink1 000003                                _chanlink2 000004  
                              _chanlink3 000005                                _chanlink4 000006  
                              _chanlink5 000007                                _chanlink6 000008  
                              _chanlink7 000009                                _chanlink8 00000A  
                              _chanlinkm FDA6                        __size_of_off_sens 00D6  
                 _PIN_MANAGER_Initialize 15BC                 __size_of_TMR3_Initialize 0036  
                              __pintcode 0008                            __pmediumconst FAA6  
                       Link_chan@chanbit 00A7                         Link_chan@channel 00A8  
                               ?___ltdiv 001D                                 ?___ltmod 001D  
                       __CFG_PPS1WAY$OFF 000000                                _creditclr FF63  
                               _DAC1CON0 000F33                                 _DAC1CON1 000F34  
                              _displ_hex 0E9C                                _dispfunc1 FC87  
                              _dispfunc2 FC86                                _dispfunc3 FC85  
                              _lcd_write 1DD2                       Hopper_coin@coinval 002C  
                              _fiftyrand FFE7                                _mdb_reset 13B6  
                              _mdb_noten 1B4E                                _mdb_waitr 20AC  
                              _mdb_waitx 20B2                                 _BAUD1CON 000F9F  
                __end_of_credit_subtract 194A                                 ?_butindb 0000  
                  __end_of_enter_service 129A                      __size_of_save_notes 0022  
                         __size_of_Audit 0002                                _mdbtxbyte 00A1  
               __size_of_TMR4_Initialize 001C                         _Update_cashaudit 0BB0  
                         _acept_disabled FC65                   ??_eusartmdb_Initialize 001D  
                         __size_of_butin 004A                                 _T2CLKCON 000FBF  
               __size_of_DATAEE_ReadByte 0018                                _read_busy 1ACC  
                               _T4CLKCON 000FB9                     _INTERRUPT_Initialize 20A4  
                 __end_of_Update_Hopcoin 14C2                         ___ltmod@dividend 001D  
                  lcd_dispadd@lcdaddress 0021                        ??_TMR0_Initialize 001D  
                  __end_of_Write_NVstore 1E8A                              _get_channel 1F32  
                               _LATCbits 000F85                              ??_Chan_link 00AA  
                              _secondadd FC4D                    lcd_dispadd@lcdatasave 0022  
                               _IPR0bits 000EBA                                 _PIE0bits 000EC2  
                          _note_features FC6E                              _lcd_dispadd 1F86  
                    __CFG_BORV$VBOR_2P45 000000                            _theft_attempt FC62  
                     __end_of_cc_countrq FC5B                                 _PIR0bits 000ECA  
                        ___ltdiv@divisor 0020                                 _PIR3bits 000ECD  
                               _PIR4bits 000ECE                                 _PIR7bits 000ED1  
                        ___ltdiv@counter 0026                                _note_poll FC72  
                              _motimemsg FAE4                                _set_price 0256  
                              _set_notes 0774                 __size_of_TMR5_Initialize 0036  
                              _note_type FC71                                _price_set 14C2  
                              _just_busy FC6B                                _priceexit FBB4  
                              _sensoffms FB1E                            ??_price_check 001D  
                              _pricevend 0080                                _setimemsg FE39  
                              _vend_init 0F52                                _sensorval 0037  
                              _rom_error FC6A                        ??_PIN_MANAGER_IOC 000B  
                            _displ_price 1B0E                                _vendprice 0038  
                              _vendtimem FE10                                _vendsetup FCD8  
                __size_of_displ_nochange 0034                                _vendstore FC45  
                          _note_rejected FC63                        ??_TMR1_Initialize 001D  
                             ?_displ_hex 0027                       Link_chan@linkflags 00A9  
                             ?_lcd_write 0000                            _note_security FC73  
                    __end_of_hundredrand FFE7                               ?_mdb_reset 0000  
                             ?_mdb_noten 0000                              _dispshright FC7E  
                             ?_mdb_waitr 0000                               ?_mdb_waitx 000B  
                           ??_credit_add 0028                             ??_lcd_clockE 001D  
                           ??_lcd_clockH 001D                             ??_lcd_clockL 001D  
                 Write_NVstore@storesize 0025                                mdb_comm@i 0021  
                 __end_of_acept_disabled FC66                                mdb_init@i 0027  
                  DATAEE_WriteByte@bData 001F                             ??_displ_code 0024  
                              mdb_poll@i 0022                          displ_hex@hexnum 0027  
                           ??_displ_note 002B                             ??_displ_sens 002B  
                           ??_displ_time 002B                              ??_Link_chan 002C  
                           ??_lcd_string 0027                             ??_lcd_writeC 0023  
                             ?_read_busy 0000                    ?_INTERRUPT_Initialize 0000  
                      ??_DAC1_Initialize 001D                             ??_mdb_unlock 001F  
                      ?_DATAEE_WriteByte 001D                          ?_Update_Hopcoin 002A  
                   __size_of_Hopper_coin 00D6                        ??_TMR2_Initialize 001D  
                     ??_DATAEE_WriteByte 0020                      lcd_string@lcdstring 0024  
                  __size_of_Vend_timeset 0100                    __size_of_Vend_settime 004E  
                               __Hrparam 0000                         Sensor_set@dacpos 002C  
                               _Sens_off 19EC                                 __Lrparam 0000  
                     __end_of_credit_add 189E                               ?_set_price 0000  
                     __CFG_BOREN$SBORDIS 000000                               ?_set_notes 0000  
                     __end_of_lcd_clockE 2080                               ?_price_set 0000  
                     __end_of_lcd_clockH 20A4                       __end_of_lcd_clockL 209C  
                             ?_vend_init 0000                  ??_OSCILLATOR_Initialize 001D  
                     Read_Service@senval 001D                       __end_of_jammed_err FC6A  
                     __end_of_displ_code 057A                       __end_of_displ_note 1BFA  
                     __end_of_displ_sens 16AA                       __end_of_displ_time 132C  
            __size_of_EUSART1_Initialize 0016                         __size_of___ltdiv 006A  
                       __size_of___ltmod 0054                       __end_of_lcd_string 10BA  
                     __end_of_dispcursor FC80                       __end_of_lcd_writeC 17E2  
                         _invalid_escrow FC64                      __end_of_note_escrow FC71  
                     __end_of_dispshleft FC7E                       __end_of_dispnormal FC81  
                      ??_TMR3_Initialize 001D                       __end_of_mdb_unlock 0BB0  
                               _cc_level FC58                  Update_Hopcoin@direction 002A  
                    __end_of_price_check 20C4                                 _cc_reset FC5F  
                       ?_credit_subtract 0000                              _dspposition 0042  
                             _T0CON0bits 000FD5                         __size_of_butindb 0032  
                               _cctflags 004E                                 _cashoutv FC3B  
                __size_of_DAC1_SetOutput 0008            __size_of_CMP1_GetOutputStatus 000E  
                               __ptext10 067A                                 __ptext11 20AC  
                               __ptext20 1204                                 __ptext12 2048  
                    __end_of_pricesetmsg FF63                                 __ptext21 0774  
                               __ptext13 20B2                               _T1GCONbits 000FD0  
                               __ptext30 036E                                 __ptext22 1542  
                               __ptext14 2056                                 __ptext31 199E  
                               __ptext23 1EB0                                 __ptext15 20BE  
                               __ptext40 1F32                                 __ptext32 057A  
                               __ptext24 1D6E                                 __ptext16 1E8A  
                               __ptext41 0C74                                 __ptext33 129A  
                               __ptext25 1BC2                                 __ptext17 2024  
                               __ptext50 143C                                 __ptext42 132C  
                               __ptext34 19EC                                 __ptext26 14C2  
                               __ptext18 10BA                                 __ptext51 189E  
                               __ptext43 2036                                 __ptext35 0866  
                               __ptext27 0256                                 __ptext19 1FE4  
                               __ptext60 1F86                                 __ptext52 20C4  
                               __ptext44 093C                                 __ptext36 0DE6  
                               __ptext28 1B0E                                 __ptext61 1DD2  
                               __ptext53 1E04                                 __ptext45 1636  
                               __ptext37 1162                                 __ptext29 0AE8  
                               __ptext70 1844                                 __ptext62 1ACC  
                               __ptext54 0474                                 __ptext46 2064  
                               __ptext38 0D2E                                 __ptext71 0BB0  
                               __ptext63 2094                                 __ptext55 1CD2  
                               __ptext47 0A12                                 __ptext39 17E2  
                               __ptext80 1F14                                 __ptext72 1E62  
                               __ptext64 209C                                 __ptext56 1D06  
                               __ptext48 1DA0                                 __ptext81 1C9C  
                               __ptext73 1B88                                 __ptext65 2072  
                               __ptext57 1006                                 __ptext49 1A3A  
                               __ptext82 1E34                                 __ptext74 1D3A  
                               __ptext66 194A                                 __ptext58 0E9C  
                               __ptext91 20B8                                 __ptext83 1F6A  
                               __ptext75 1F9E                                 __ptext67 16AA  
                               __ptext59 177C                                 __ptext84 15BC  
                               __ptext76 1BFA                                 __ptext68 1ED2  
                               __ptext85 1FB6                                 __ptext77 1C30  
                               __ptext69 18F4                                 __ptext86 20A4  
                               __ptext78 1F4E                                 __ptext87 1FFA  
                               __ptext79 1C66                                 __ptext88 2080  
                               __ptext89 2010                                 _disabled FFBA  
                    __end_of_sensorflags FC29                                 _auditmsg FBFB  
                               _dispaddr FC82                                 _lcd_init 10BA  
                               _lcd_test 1FE4                                 _mdb_comm 067A  
                               _mdb_init 1714                             _Vend_timeset 057A  
                           _Vend_settime 199E                                 _mdb_poll 0134  
                               _mdbflags 003E                               _T3GCONbits 000FCA  
            DATAEE_WriteByte@GIEBitValue 0020                    __end_of_chan1linkbits FC39  
                      ??_TMR4_Initialize 001D                                 _off_sens 0866  
                          __size_of_main 0134                               _T5GCONbits 000FC4  
                               _hoperror FC15                             ??_save_notes 0021  
                               _hoppcoin FDDD                                 _initnote FE89  
                  __end_of_chan2linkbits FC37                                 _hpserial 0093  
                               _nochange FEAE                          ___ltmod@divisor 0020  
                      ??_DATAEE_ReadByte 001F                     __CFG_WDTCWS$WDTCWS_7 000000  
                  __end_of_chan3linkbits FC35                 __size_of_CMP1_Initialize 0014  
                               _second_5 FC4F                          ___ltmod@counter 0023  
                  __end_of_chan4linkbits FC33                               _RC1STAbits 000F9D  
                               _vcashout 0099                                 _notebits FC3F  
                               _notebyte 0040                                 _pricemsg FC08  
                  __end_of_chan5linkbits FC31                                 _notetest FBED  
                               _venflags 002E                                 _setnotes FD28  
                          init_mdbdata@i 001E                                 _vendtest FB9B  
                            _hundredrand FFDF                    __end_of_chan6linkbits FC2F  
                               int$flags 004F                   __end_of_invalid_escrow FC65  
                               _outcoins 0033                    __end_of_chan7linkbits FC2D  
                           _note_removed FC67                    Write_NVstore@storeadd 0021  
                  Read_NVstore@storesize 0023                    Write_NVstore@storemem 0023  
                           _note_stacker FC6F                    __end_of_chan8linkbits FC2B  
                            ??_displ_hex 002A                              ??_lcd_write 001F  
                      ??_TMR5_Initialize 001D                              ??_mdb_reset 0022  
                            ??_mdb_noten 0022                              ??_mdb_waitr 001D  
                            ??_mdb_waitx 001D                               _INTCONbits 000FF2  
                            _NVMCON1bits 000F81                       __end_of_save_notes 1ED2  
                 ??_INTERRUPT_Initialize 001D                              ??_read_busy 001D  
                     __end_of_note_reset FC76                           _twohundredrand FFD7  
                     __end_of_sens_error FC6D                       __end_of_note_setup FC75  
                               intlevel2 0000                       __end_of_motr_error FC6E  
                     __end_of_just_reset FC69                       __end_of_pricesetm2 FDA6  
                     __end_of_sensoffmsg FF0E                  ?_PIN_MANAGER_Initialize 000B  
                     __end_of_pricestore FC45                        __CFG_CLKOUTEN$OFF 000000  
                          ?_enable_notes 0000                              _PPSLOCKbits 000EA0  
                     __end_of_venderrors FC43                       __end_of_settimemsg FB9B  
                __size_of_Reset_settings 00A2                      displ_sflags@chanbit 002A  
                            _note_escrow FC70                              ??_set_price 002B  
                            ??_set_notes 002C                              ??_price_set 002D  
               __end_of_Update_cashaudit 0C74                     Read_NVstore@storeadd 001F  
                            ??_vend_init 0029                     Read_NVstore@storemem 0021  
                            _noteen_byte 003C                              _price_check 20C2  
                         _displ_nochange 1CD2                        lcd_string@lcdline 0026  
                 __size_of_EUSART1_Write 000E                     displ_note@notestring 0029  
 __end_of_INTERRUPT_InterruptManagerHigh 00AA  __size_of_INTERRUPT_InterruptManagerHigh 00A2  
         _INTERRUPT_InterruptManagerHigh 0008                               _RX1PPSbits 000EB5  
                            _pricesetmsg FF51                               _RX2PPSbits 000E8D  
                            _sensorflags FC27                        lcd_test@character 0024  
                        _TMR0_Initialize 1E34                       displ_sflags@chanel 0029  
                   Init_vendmem@chanlink 0023                   __end_of_twohundredrand FFDF  
                          ?_credit_check 0000                               _TX1STAbits 000F9E  
         __end_of_PIN_MANAGER_Initialize 1636                      enable_notes@notenum 002B  
                           ?_get_channel 0000                       __end_of_twentyrand FFF7  
                        _PIN_MANAGER_IOC 20B8                           ??_enable_notes 002B  
                           ?_lcd_dispadd 0000                          _TMR1_Initialize 1C9C  
                   displ_lflags@linkflgs 0029  
