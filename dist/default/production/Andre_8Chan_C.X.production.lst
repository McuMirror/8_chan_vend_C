

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Tue Jan 16 15:08:51 2018

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F47K40
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAMh,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	nvCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAMh,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAMl,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   105                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   106                           	dabs	1,0x3,1,_chanlink1
   107                           	dabs	1,0xA,1,_chanlink8
   108                           	dabs	1,0x9,1,_chanlink7
   109                           	dabs	1,0x8,1,_chanlink6
   110                           	dabs	1,0x7,1,_chanlink5
   111                           	dabs	1,0x6,1,_chanlink4
   112                           	dabs	1,0x5,1,_chanlink3
   113                           	dabs	1,0x4,1,_chanlink2
   114  0000                     
   115                           ; Version 1.44
   116                           ; Generated 14/09/2017 GMT
   117                           ; 
   118                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   119                           ; All rights reserved.
   120                           ; 
   121                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   122                           ; 
   123                           ; Redistribution and use in source and binary forms, with or without modification, are
   124                           ; permitted provided that the following conditions are met:
   125                           ; 
   126                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   127                           ;        conditions and the following disclaimer.
   128                           ; 
   129                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   130                           ;        of conditions and the following disclaimer in the documentation and/or other
   131                           ;        materials provided with the distribution.
   132                           ; 
   133                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   134                           ;        software without specific prior written permission.
   135                           ; 
   136                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   137                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   138                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   139                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   140                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   141                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   142                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   143                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   144                           ; 
   145                           ; 
   146                           ; Code-generator required, PIC18F47K40 Definitions
   147                           ; 
   148                           ; SFR Addresses
   149  0000                     
   150                           	psect	idataCOMRAMh
   151  011AE8                     __pidataCOMRAMh:
   152                           	opt stack 0
   153                           
   154                           ;initializer for _notenum
   155  011AE8  FF                 	db	255
   156                           
   157                           	psect	mediumconst
   158  00FC94                     __pmediumconst:
   159                           	opt stack 0
   160  00FC94  00                 	db	0
   161  00FC95                     _credclr:
   162                           	opt stack 0
   163  00FC95  50                 	db	80
   164  00FC96  75                 	db	117
   165  00FC97  73                 	db	115
   166  00FC98  68                 	db	104
   167  00FC99  20                 	db	32
   168  00FC9A  62                 	db	98
   169  00FC9B  75                 	db	117
   170  00FC9C  74                 	db	116
   171  00FC9D  74                 	db	116
   172  00FC9E  6F                 	db	111
   173  00FC9F  6E                 	db	110
   174  00FCA0  20                 	db	32
   175  00FCA1  31                 	db	49
   176  00FCA2  20                 	db	32
   177  00FCA3  74                 	db	116
   178  00FCA4  6F                 	db	111
   179  00FCA5  20                 	db	32
   180  00FCA6  63                 	db	99
   181  00FCA7  6C                 	db	108
   182  00FCA8  65                 	db	101
   183  00FCA9  61                 	db	97
   184  00FCAA  72                 	db	114
   185  00FCAB  20                 	db	32
   186  00FCAC  63                 	db	99
   187  00FCAD  72                 	db	114
   188  00FCAE  65                 	db	101
   189  00FCAF  64                 	db	100
   190  00FCB0  69                 	db	105
   191  00FCB1  74                 	db	116
   192  00FCB2  73                 	db	115
   193  00FCB3  20                 	db	32
   194  00FCB4  20                 	db	32
   195  00FCB5  20                 	db	32
   196  00FCB6  61                 	db	97
   197  00FCB7  6E                 	db	110
   198  00FCB8  64                 	db	100
   199  00FCB9  20                 	db	32
   200  00FCBA  65                 	db	101
   201  00FCBB  78                 	db	120
   202  00FCBC  69                 	db	105
   203  00FCBD  74                 	db	116
   204  00FCBE  00                 	db	0
   205  00FCBF                     __end_of_credclr:
   206                           	opt stack 0
   207  00FCBF                     _vendtest:
   208                           	opt stack 0
   209  00FCBF  20                 	db	32
   210  00FCC0  50                 	db	80
   211  00FCC1  75                 	db	117
   212  00FCC2  73                 	db	115
   213  00FCC3  68                 	db	104
   214  00FCC4  20                 	db	32
   215  00FCC5  62                 	db	98
   216  00FCC6  75                 	db	117
   217  00FCC7  74                 	db	116
   218  00FCC8  74                 	db	116
   219  00FCC9  6F                 	db	111
   220  00FCCA  6E                 	db	110
   221  00FCCB  20                 	db	32
   222  00FCCC  74                 	db	116
   223  00FCCD  6F                 	db	111
   224  00FCCE  20                 	db	32
   225  00FCCF  20                 	db	32
   226  00FCD0  20                 	db	32
   227  00FCD1  20                 	db	32
   228  00FCD2  20                 	db	32
   229  00FCD3  76                 	db	118
   230  00FCD4  65                 	db	101
   231  00FCD5  6E                 	db	110
   232  00FCD6  64                 	db	100
   233  00FCD7  00                 	db	0
   234  00FCD8                     __end_of_vendtest:
   235                           	opt stack 0
   236  00FCD8                     _priceexit:
   237                           	opt stack 0
   238  00FCD8  50                 	db	80
   239  00FCD9  72                 	db	114
   240  00FCDA  65                 	db	101
   241  00FCDB  73                 	db	115
   242  00FCDC  73                 	db	115
   243  00FCDD  20                 	db	32
   244  00FCDE  73                 	db	115
   245  00FCDF  65                 	db	101
   246  00FCE0  72                 	db	114
   247  00FCE1  76                 	db	118
   248  00FCE2  69                 	db	105
   249  00FCE3  63                 	db	99
   250  00FCE4  65                 	db	101
   251  00FCE5  20                 	db	32
   252  00FCE6  74                 	db	116
   253  00FCE7  6F                 	db	111
   254  00FCE8  20                 	db	32
   255  00FCE9  65                 	db	101
   256  00FCEA  78                 	db	120
   257  00FCEB  69                 	db	105
   258  00FCEC  74                 	db	116
   259  00FCED  00                 	db	0
   260  00FCEE                     __end_of_priceexit:
   261                           	opt stack 0
   262  00FCEE                     _nochange:
   263                           	opt stack 0
   264  00FCEE  4E                 	db	78
   265  00FCEF  6F                 	db	111
   266  00FCF0  20                 	db	32
   267  00FCF1  43                 	db	67
   268  00FCF2  68                 	db	104
   269  00FCF3  61                 	db	97
   270  00FCF4  6E                 	db	110
   271  00FCF5  67                 	db	103
   272  00FCF6  65                 	db	101
   273  00FCF7  20                 	db	32
   274  00FCF8  47                 	db	71
   275  00FCF9  69                 	db	105
   276  00FCFA  76                 	db	118
   277  00FCFB  65                 	db	101
   278  00FCFC  6E                 	db	110
   279  00FCFD  00                 	db	0
   280  00FCFE                     __end_of_nochange:
   281                           	opt stack 0
   282  00FCFE                     _senset:
   283                           	opt stack 0
   284  00FCFE  20                 	db	32
   285  00FCFF  20                 	db	32
   286  00FD00  53                 	db	83
   287  00FD01  65                 	db	101
   288  00FD02  74                 	db	116
   289  00FD03  75                 	db	117
   290  00FD04  70                 	db	112
   291  00FD05  20                 	db	32
   292  00FD06  53                 	db	83
   293  00FD07  65                 	db	101
   294  00FD08  6E                 	db	110
   295  00FD09  73                 	db	115
   296  00FD0A  6F                 	db	111
   297  00FD0B  72                 	db	114
   298  00FD0C  00                 	db	0
   299  00FD0D                     __end_of_senset:
   300                           	opt stack 0
   301  00FD0D                     _notetest:
   302                           	opt stack 0
   303  00FD0D  20                 	db	32
   304  00FD0E  20                 	db	32
   305  00FD0F  49                 	db	73
   306  00FD10  6E                 	db	110
   307  00FD11  73                 	db	115
   308  00FD12  65                 	db	101
   309  00FD13  72                 	db	114
   310  00FD14  74                 	db	116
   311  00FD15  20                 	db	32
   312  00FD16  4E                 	db	78
   313  00FD17  6F                 	db	111
   314  00FD18  74                 	db	116
   315  00FD19  65                 	db	101
   316  00FD1A  00                 	db	0
   317  00FD1B                     __end_of_notetest:
   318                           	opt stack 0
   319  00FD1B                     _auditmsg:
   320                           	opt stack 0
   321  00FD1B  20                 	db	32
   322  00FD1C  20                 	db	32
   323  00FD1D  41                 	db	65
   324  00FD1E  75                 	db	117
   325  00FD1F  64                 	db	100
   326  00FD20  69                 	db	105
   327  00FD21  74                 	db	116
   328  00FD22  20                 	db	32
   329  00FD23  4D                 	db	77
   330  00FD24  6F                 	db	111
   331  00FD25  64                 	db	100
   332  00FD26  65                 	db	101
   333  00FD27  00                 	db	0
   334  00FD28                     __end_of_auditmsg:
   335                           	opt stack 0
   336  00FD28                     _pricemsg:
   337                           	opt stack 0
   338  00FD28  50                 	db	80
   339  00FD29  72                 	db	114
   340  00FD2A  69                 	db	105
   341  00FD2B  63                 	db	99
   342  00FD2C  65                 	db	101
   343  00FD2D  20                 	db	32
   344  00FD2E  52                 	db	82
   345  00FD2F  00                 	db	0
   346  00FD30                     __end_of_pricemsg:
   347                           	opt stack 0
   348  00FD30                     _exit:
   349                           	opt stack 0
   350  00FD30  45                 	db	69
   351  00FD31  78                 	db	120
   352  00FD32  69                 	db	105
   353  00FD33  74                 	db	116
   354  00FD34  00                 	db	0
   355  00FD35                     __end_of_exit:
   356                           	opt stack 0
   357  00FD35                     _sensorflags:
   358                           	opt stack 0
   359  00FD35  002E               	dw	46
   360  00FD37                     __end_of_sensorflags:
   361                           	opt stack 0
   362  00FD37                     _hoperror:
   363                           	opt stack 0
   364  00FD37  002D               	dw	45
   365  00FD39                     __end_of_hoperror:
   366                           	opt stack 0
   367  00FD39                     _chan8time:
   368                           	opt stack 0
   369  00FD39  002C               	dw	44
   370  00FD3B                     __end_of_chan8time:
   371                           	opt stack 0
   372  00FD3B                     _chan7time:
   373                           	opt stack 0
   374  00FD3B  002B               	dw	43
   375  00FD3D                     __end_of_chan7time:
   376                           	opt stack 0
   377  00FD3D                     _chan6time:
   378                           	opt stack 0
   379  00FD3D  002A               	dw	42
   380  00FD3F                     __end_of_chan6time:
   381                           	opt stack 0
   382  00FD3F                     _chan5time:
   383                           	opt stack 0
   384  00FD3F  0029               	dw	41
   385  00FD41                     __end_of_chan5time:
   386                           	opt stack 0
   387  00FD41                     _chan4time:
   388                           	opt stack 0
   389  00FD41  0028               	dw	40
   390  00FD43                     __end_of_chan4time:
   391                           	opt stack 0
   392  00FD43                     _chan3time:
   393                           	opt stack 0
   394  00FD43  0027               	dw	39
   395  00FD45                     __end_of_chan3time:
   396                           	opt stack 0
   397  00FD45                     _chan2time:
   398                           	opt stack 0
   399  00FD45  0026               	dw	38
   400  00FD47                     __end_of_chan2time:
   401                           	opt stack 0
   402  00FD47                     _chan1time:
   403                           	opt stack 0
   404  00FD47  0025               	dw	37
   405  00FD49                     __end_of_chan1time:
   406                           	opt stack 0
   407  00FD49                     _chan8linkbits:
   408                           	opt stack 0
   409  00FD49  0024               	dw	36
   410  00FD4B                     __end_of_chan8linkbits:
   411                           	opt stack 0
   412  00FD4B                     _chan7linkbits:
   413                           	opt stack 0
   414  00FD4B  0023               	dw	35
   415  00FD4D                     __end_of_chan7linkbits:
   416                           	opt stack 0
   417  00FD4D                     _chan6linkbits:
   418                           	opt stack 0
   419  00FD4D  0022               	dw	34
   420  00FD4F                     __end_of_chan6linkbits:
   421                           	opt stack 0
   422  00FD4F                     _chan5linkbits:
   423                           	opt stack 0
   424  00FD4F  0021               	dw	33
   425  00FD51                     __end_of_chan5linkbits:
   426                           	opt stack 0
   427  00FD51                     _chan4linkbits:
   428                           	opt stack 0
   429  00FD51  0020               	dw	32
   430  00FD53                     __end_of_chan4linkbits:
   431                           	opt stack 0
   432  00FD53                     _chan3linkbits:
   433                           	opt stack 0
   434  00FD53  001F               	dw	31
   435  00FD55                     __end_of_chan3linkbits:
   436                           	opt stack 0
   437  00FD55                     _chan2linkbits:
   438                           	opt stack 0
   439  00FD55  001E               	dw	30
   440  00FD57                     __end_of_chan2linkbits:
   441                           	opt stack 0
   442  00FD57                     _chan1linkbits:
   443                           	opt stack 0
   444  00FD57  001D               	dw	29
   445  00FD59                     __end_of_chan1linkbits:
   446                           	opt stack 0
   447  00FD59                     _hopcoin:
   448                           	opt stack 0
   449  00FD59  001C               	dw	28
   450  00FD5B                     __end_of_hopcoin:
   451                           	opt stack 0
   452  00FD5B                     _cashoutv:
   453                           	opt stack 0
   454  00FD5B  001A               	dw	26
   455  00FD5D                     __end_of_cashoutv:
   456                           	opt stack 0
   457  00FD5D                     _sensval:
   458                           	opt stack 0
   459  00FD5D  0019               	dw	25
   460  00FD5F                     __end_of_sensval:
   461                           	opt stack 0
   462  00FD5F                     _notebits:
   463                           	opt stack 0
   464  00FD5F  0018               	dw	24
   465  00FD61                     __end_of_notebits:
   466                           	opt stack 0
   467  00FD61                     _venderrors:
   468                           	opt stack 0
   469  00FD61  0017               	dw	23
   470  00FD63                     __end_of_venderrors:
   471                           	opt stack 0
   472  00FD63                     _pricestore:
   473                           	opt stack 0
   474  00FD63  000F               	dw	15
   475  00FD65                     __end_of_pricestore:
   476                           	opt stack 0
   477  00FD65                     _vendstore:
   478                           	opt stack 0
   479  00FD65  0007               	dw	7
   480  00FD67                     __end_of_vendstore:
   481                           	opt stack 0
   482  00FD67                     _cashint:
   483                           	opt stack 0
   484  00FD67  0004               	dw	4
   485  00FD69                     __end_of_cashint:
   486                           	opt stack 0
   487  00FD69                     _cashinv:
   488                           	opt stack 0
   489  00FD69  0002               	dw	2
   490  00FD6B                     __end_of_cashinv:
   491                           	opt stack 0
   492  00FD6B                     _credmem:
   493                           	opt stack 0
   494  00FD6B  0000               	dw	0
   495  00FD6D                     __end_of_credmem:
   496                           	opt stack 0
   497  00FD6D                     _secondadd:
   498                           	opt stack 0
   499  00FD6D  1E46               	dw	7750
   500  00FD6F                     __end_of_secondadd:
   501                           	opt stack 0
   502  00FD6F                     _second1:
   503                           	opt stack 0
   504  00FD6F  E1BA               	dw	57786
   505  00FD71                     __end_of_second1:
   506                           	opt stack 0
   507  00FD71                     _cc_poll:
   508                           	opt stack 0
   509  00FD71  FE                 	db	254
   510  00FD72                     __end_of_cc_poll:
   511                           	opt stack 0
   512  00FD72                     _cc_adpoll:
   513                           	opt stack 0
   514  00FD72  FD                 	db	253
   515  00FD73                     __end_of_cc_adpoll:
   516                           	opt stack 0
   517  00FD73                     _cc_serial:
   518                           	opt stack 0
   519  00FD73  F2                 	db	242
   520  00FD74                     __end_of_cc_serial:
   521                           	opt stack 0
   522  00FD74                     _cc_newpin:
   523                           	opt stack 0
   524  00FD74  DB                 	db	219
   525  00FD75                     __end_of_cc_newpin:
   526                           	opt stack 0
   527  00FD75                     _cc_pin:
   528                           	opt stack 0
   529  00FD75  DA                 	db	218
   530  00FD76                     __end_of_cc_pin:
   531                           	opt stack 0
   532  00FD76                     _cc_level:
   533                           	opt stack 0
   534  00FD76  EC                 	db	236
   535  00FD77                     __end_of_cc_level:
   536                           	opt stack 0
   537  00FD77                     _cc_stop:
   538                           	opt stack 0
   539  00FD77  AC                 	db	172
   540  00FD78                     __end_of_cc_stop:
   541                           	opt stack 0
   542  00FD78                     _cc_countrq:
   543                           	opt stack 0
   544  00FD78  A8                 	db	168
   545  00FD79                     __end_of_cc_countrq:
   546                           	opt stack 0
   547  00FD79                     _cc_pay:
   548                           	opt stack 0
   549  00FD79  A7                 	db	167
   550  00FD7A                     __end_of_cc_pay:
   551                           	opt stack 0
   552  00FD7A                     _cc_status:
   553                           	opt stack 0
   554  00FD7A  A6                 	db	166
   555  00FD7B                     __end_of_cc_status:
   556                           	opt stack 0
   557  00FD7B                     _cc_enable:
   558                           	opt stack 0
   559  00FD7B  A4                 	db	164
   560  00FD7C                     __end_of_cc_enable:
   561                           	opt stack 0
   562  00FD7C                     _cc_test:
   563                           	opt stack 0
   564  00FD7C  A3                 	db	163
   565  00FD7D                     __end_of_cc_test:
   566                           	opt stack 0
   567  00FD7D                     _cc_reset:
   568                           	opt stack 0
   569  00FD7D  01                 	db	1
   570  00FD7E                     __end_of_cc_reset:
   571                           	opt stack 0
   572  00FD7E                     _mastadd:
   573                           	opt stack 0
   574  00FD7E  01                 	db	1
   575  00FD7F                     __end_of_mastadd:
   576                           	opt stack 0
   577  00FD7F                     _hopadd:
   578                           	opt stack 0
   579  00FD7F  03                 	db	3
   580  00FD80                     __end_of_hopadd:
   581                           	opt stack 0
   582  00FD80                     _theft_attempt:
   583                           	opt stack 0
   584  00FD80  0C                 	db	12
   585  00FD81                     __end_of_theft_attempt:
   586                           	opt stack 0
   587  00FD81                     _note_rejected:
   588                           	opt stack 0
   589  00FD81  0B                 	db	11
   590  00FD82                     __end_of_note_rejected:
   591                           	opt stack 0
   592  00FD82                     _invalid_escrow:
   593                           	opt stack 0
   594  00FD82  0A                 	db	10
   595  00FD83                     __end_of_invalid_escrow:
   596                           	opt stack 0
   597  00FD83                     _acept_disabled:
   598                           	opt stack 0
   599  00FD83  09                 	db	9
   600  00FD84                     __end_of_acept_disabled:
   601                           	opt stack 0
   602  00FD84                     _cashbox_err:
   603                           	opt stack 0
   604  00FD84  08                 	db	8
   605  00FD85                     __end_of_cashbox_err:
   606                           	opt stack 0
   607  00FD85                     _note_removed:
   608                           	opt stack 0
   609  00FD85  07                 	db	7
   610  00FD86                     __end_of_note_removed:
   611                           	opt stack 0
   612  00FD86                     _just_reset:
   613                           	opt stack 0
   614  00FD86  06                 	db	6
   615  00FD87                     __end_of_just_reset:
   616                           	opt stack 0
   617  00FD87                     _jammed_err:
   618                           	opt stack 0
   619  00FD87  05                 	db	5
   620  00FD88                     __end_of_jammed_err:
   621                           	opt stack 0
   622  00FD88                     _rom_error:
   623                           	opt stack 0
   624  00FD88  04                 	db	4
   625  00FD89                     __end_of_rom_error:
   626                           	opt stack 0
   627  00FD89                     _just_busy:
   628                           	opt stack 0
   629  00FD89  03                 	db	3
   630  00FD8A                     __end_of_just_busy:
   631                           	opt stack 0
   632  00FD8A                     _sens_error:
   633                           	opt stack 0
   634  00FD8A  02                 	db	2
   635  00FD8B                     __end_of_sens_error:
   636                           	opt stack 0
   637  00FD8B                     _motr_error:
   638                           	opt stack 0
   639  00FD8B  01                 	db	1
   640  00FD8C                     __end_of_motr_error:
   641                           	opt stack 0
   642  00FD8C                     _note_features:
   643                           	opt stack 0
   644  00FD8C  33                 	db	51
   645  00FD8D                     __end_of_note_features:
   646                           	opt stack 0
   647  00FD8D                     _note_stacker:
   648                           	opt stack 0
   649  00FD8D  36                 	db	54
   650  00FD8E                     __end_of_note_stacker:
   651                           	opt stack 0
   652  00FD8E                     _note_escrow:
   653                           	opt stack 0
   654  00FD8E  35                 	db	53
   655  00FD8F                     __end_of_note_escrow:
   656                           	opt stack 0
   657  00FD8F                     _note_type:
   658                           	opt stack 0
   659  00FD8F  34                 	db	52
   660  00FD90                     __end_of_note_type:
   661                           	opt stack 0
   662  00FD90                     _note_poll:
   663                           	opt stack 0
   664  00FD90  33                 	db	51
   665  00FD91                     __end_of_note_poll:
   666                           	opt stack 0
   667  00FD91                     _note_security:
   668                           	opt stack 0
   669  00FD91  32                 	db	50
   670  00FD92                     __end_of_note_security:
   671                           	opt stack 0
   672  00FD92                     _note_setup:
   673                           	opt stack 0
   674  00FD92  31                 	db	49
   675  00FD93                     __end_of_note_setup:
   676                           	opt stack 0
   677  00FD93                     _note_reset:
   678                           	opt stack 0
   679  00FD93  30                 	db	48
   680  00FD94                     __end_of_note_reset:
   681                           	opt stack 0
   682  00FD94                     _line4:
   683                           	opt stack 0
   684  00FD94  54                 	db	84
   685  00FD95                     __end_of_line4:
   686                           	opt stack 0
   687  00FD95                     _line3:
   688                           	opt stack 0
   689  00FD95  14                 	db	20
   690  00FD96                     __end_of_line3:
   691                           	opt stack 0
   692  00FD96                     _line2:
   693                           	opt stack 0
   694  00FD96  40                 	db	64
   695  00FD97                     __end_of_line2:
   696                           	opt stack 0
   697  00FD97                     _line1:
   698                           	opt stack 0
   699  00FD97  00                 	db	0
   700  00FD98                     __end_of_line1:
   701                           	opt stack 0
   702  00FD98                     _dispsl:
   703                           	opt stack 0
   704  00FD98  18                 	db	24
   705  00FD99                     __end_of_dispsl:
   706                           	opt stack 0
   707  00FD99                     _dispsr:
   708                           	opt stack 0
   709  00FD99  1B                 	db	27
   710  00FD9A                     __end_of_dispsr:
   711                           	opt stack 0
   712  00FD9A                     _dispoff:
   713                           	opt stack 0
   714  00FD9A  08                 	db	8
   715  00FD9B                     __end_of_dispoff:
   716                           	opt stack 0
   717  00FD9B                     _dispshleft:
   718                           	opt stack 0
   719  00FD9B  07                 	db	7
   720  00FD9C                     __end_of_dispshleft:
   721                           	opt stack 0
   722  00FD9C                     _dispshright:
   723                           	opt stack 0
   724  00FD9C  05                 	db	5
   725  00FD9D                     __end_of_dispshright:
   726                           	opt stack 0
   727  00FD9D                     _dispcursor:
   728                           	opt stack 0
   729  00FD9D  04                 	db	4
   730  00FD9E                     __end_of_dispcursor:
   731                           	opt stack 0
   732  00FD9E                     _dispnormal:
   733                           	opt stack 0
   734  00FD9E  06                 	db	6
   735  00FD9F                     __end_of_dispnormal:
   736                           	opt stack 0
   737  00FD9F                     _dsphome:
   738                           	opt stack 0
   739  00FD9F  02                 	db	2
   740  00FDA0                     __end_of_dsphome:
   741                           	opt stack 0
   742  00FDA0                     _dispaddr:
   743                           	opt stack 0
   744  00FDA0  A8                 	db	168
   745  00FDA1                     __end_of_dispaddr:
   746                           	opt stack 0
   747  00FDA1                     _dispclr:
   748                           	opt stack 0
   749  00FDA1  01                 	db	1
   750  00FDA2                     __end_of_dispclr:
   751                           	opt stack 0
   752  00FDA2                     _dispon:
   753                           	opt stack 0
   754  00FDA2  0C                 	db	12
   755  00FDA3                     __end_of_dispon:
   756                           	opt stack 0
   757  00FDA3                     _dispfunc3:
   758                           	opt stack 0
   759  00FDA3  2C                 	db	44
   760  00FDA4                     __end_of_dispfunc3:
   761                           	opt stack 0
   762  00FDA4                     _dispfunc2:
   763                           	opt stack 0
   764  00FDA4  28                 	db	40
   765  00FDA5                     __end_of_dispfunc2:
   766                           	opt stack 0
   767  00FDA5                     _dispfunc1:
   768                           	opt stack 0
   769  00FDA5  24                 	db	36
   770  00FDA6                     __end_of_dispfunc1:
   771                           	opt stack 0
   772  00FDA6                     _vendsetup:
   773                           	opt stack 0
   774  00FDA6  50                 	db	80
   775  00FDA7  72                 	db	114
   776  00FDA8  65                 	db	101
   777  00FDA9  73                 	db	115
   778  00FDAA  73                 	db	115
   779  00FDAB  20                 	db	32
   780  00FDAC  31                 	db	49
   781  00FDAD  20                 	db	32
   782  00FDAE  3D                 	db	61
   783  00FDAF  20                 	db	32
   784  00FDB0  56                 	db	86
   785  00FDB1  65                 	db	101
   786  00FDB2  6E                 	db	110
   787  00FDB3  64                 	db	100
   788  00FDB4  20                 	db	32
   789  00FDB5  54                 	db	84
   790  00FDB6  69                 	db	105
   791  00FDB7  6D                 	db	109
   792  00FDB8  65                 	db	101
   793  00FDB9  20                 	db	32
   794  00FDBA  50                 	db	80
   795  00FDBB  72                 	db	114
   796  00FDBC  65                 	db	101
   797  00FDBD  73                 	db	115
   798  00FDBE  73                 	db	115
   799  00FDBF  20                 	db	32
   800  00FDC0  32                 	db	50
   801  00FDC1  20                 	db	32
   802  00FDC2  3D                 	db	61
   803  00FDC3  20                 	db	32
   804  00FDC4  43                 	db	67
   805  00FDC5  68                 	db	104
   806  00FDC6  61                 	db	97
   807  00FDC7  6E                 	db	110
   808  00FDC8  20                 	db	32
   809  00FDC9  4C                 	db	76
   810  00FDCA  69                 	db	105
   811  00FDCB  6E                 	db	110
   812  00FDCC  6B                 	db	107
   813  00FDCD  20                 	db	32
   814  00FDCE  50                 	db	80
   815  00FDCF  72                 	db	114
   816  00FDD0  65                 	db	101
   817  00FDD1  73                 	db	115
   818  00FDD2  73                 	db	115
   819  00FDD3  20                 	db	32
   820  00FDD4  33                 	db	51
   821  00FDD5  20                 	db	32
   822  00FDD6  3D                 	db	61
   823  00FDD7  20                 	db	32
   824  00FDD8  53                 	db	83
   825  00FDD9  65                 	db	101
   826  00FDDA  6E                 	db	110
   827  00FDDB  73                 	db	115
   828  00FDDC  6F                 	db	111
   829  00FDDD  72                 	db	114
   830  00FDDE  20                 	db	32
   831  00FDDF  4F                 	db	79
   832  00FDE0  66                 	db	102
   833  00FDE1  66                 	db	102
   834  00FDE2  20                 	db	32
   835  00FDE3  50                 	db	80
   836  00FDE4  72                 	db	114
   837  00FDE5  65                 	db	101
   838  00FDE6  73                 	db	115
   839  00FDE7  73                 	db	115
   840  00FDE8  20                 	db	32
   841  00FDE9  38                 	db	56
   842  00FDEA  20                 	db	32
   843  00FDEB  74                 	db	116
   844  00FDEC  6F                 	db	111
   845  00FDED  20                 	db	32
   846  00FDEE  65                 	db	101
   847  00FDEF  78                 	db	120
   848  00FDF0  69                 	db	105
   849  00FDF1  74                 	db	116
   850  00FDF2  00                 	db	0
   851  00FDF3                     __end_of_vendsetup:
   852                           	opt stack 0
   853  00FDF3                     _setnotes:
   854                           	opt stack 0
   855  00FDF3  45                 	db	69
   856  00FDF4  6E                 	db	110
   857  00FDF5  61                 	db	97
   858  00FDF6  62                 	db	98
   859  00FDF7  6C                 	db	108
   860  00FDF8  65                 	db	101
   861  00FDF9  20                 	db	32
   862  00FDFA  2F                 	db	47
   863  00FDFB  20                 	db	32
   864  00FDFC  44                 	db	68
   865  00FDFD  69                 	db	105
   866  00FDFE  73                 	db	115
   867  00FDFF  61                 	db	97
   868  00FE00  62                 	db	98
   869  00FE01  6C                 	db	108
   870  00FE02  65                 	db	101
   871  00FE03  20                 	db	32
   872  00FE04  20                 	db	32
   873  00FE05  20                 	db	32
   874  00FE06  20                 	db	32
   875  00FE07  31                 	db	49
   876  00FE08  20                 	db	32
   877  00FE09  3D                 	db	61
   878  00FE0A  20                 	db	32
   879  00FE0B  52                 	db	82
   880  00FE0C  31                 	db	49
   881  00FE0D  30                 	db	48
   882  00FE0E  2C                 	db	44
   883  00FE0F  20                 	db	32
   884  00FE10  32                 	db	50
   885  00FE11  20                 	db	32
   886  00FE12  3D                 	db	61
   887  00FE13  20                 	db	32
   888  00FE14  52                 	db	82
   889  00FE15  32                 	db	50
   890  00FE16  30                 	db	48
   891  00FE17  20                 	db	32
   892  00FE18  20                 	db	32
   893  00FE19  20                 	db	32
   894  00FE1A  20                 	db	32
   895  00FE1B  33                 	db	51
   896  00FE1C  20                 	db	32
   897  00FE1D  3D                 	db	61
   898  00FE1E  20                 	db	32
   899  00FE1F  52                 	db	82
   900  00FE20  35                 	db	53
   901  00FE21  30                 	db	48
   902  00FE22  2C                 	db	44
   903  00FE23  20                 	db	32
   904  00FE24  34                 	db	52
   905  00FE25  20                 	db	32
   906  00FE26  3D                 	db	61
   907  00FE27  20                 	db	32
   908  00FE28  52                 	db	82
   909  00FE29  31                 	db	49
   910  00FE2A  30                 	db	48
   911  00FE2B  30                 	db	48
   912  00FE2C  20                 	db	32
   913  00FE2D  20                 	db	32
   914  00FE2E  20                 	db	32
   915  00FE2F  35                 	db	53
   916  00FE30  20                 	db	32
   917  00FE31  3D                 	db	61
   918  00FE32  20                 	db	32
   919  00FE33  52                 	db	82
   920  00FE34  32                 	db	50
   921  00FE35  30                 	db	48
   922  00FE36  30                 	db	48
   923  00FE37  00                 	db	0
   924  00FE38                     __end_of_setnotes:
   925                           	opt stack 0
   926  00FE38                     _servmsg:
   927                           	opt stack 0
   928  00FE38  31                 	db	49
   929  00FE39  20                 	db	32
   930  00FE3A  3D                 	db	61
   931  00FE3B  20                 	db	32
   932  00FE3C  41                 	db	65
   933  00FE3D  75                 	db	117
   934  00FE3E  64                 	db	100
   935  00FE3F  69                 	db	105
   936  00FE40  74                 	db	116
   937  00FE41  20                 	db	32
   938  00FE42  32                 	db	50
   939  00FE43  20                 	db	32
   940  00FE44  3D                 	db	61
   941  00FE45  20                 	db	32
   942  00FE46  53                 	db	83
   943  00FE47  65                 	db	101
   944  00FE48  6E                 	db	110
   945  00FE49  73                 	db	115
   946  00FE4A  6F                 	db	111
   947  00FE4B  72                 	db	114
   948  00FE4C  33                 	db	51
   949  00FE4D  3D                 	db	61
   950  00FE4E  48                 	db	72
   951  00FE4F  6F                 	db	111
   952  00FE50  70                 	db	112
   953  00FE51  2D                 	db	45
   954  00FE52  43                 	db	67
   955  00FE53  6F                 	db	111
   956  00FE54  69                 	db	105
   957  00FE55  6E                 	db	110
   958  00FE56  20                 	db	32
   959  00FE57  34                 	db	52
   960  00FE58  3D                 	db	61
   961  00FE59  4E                 	db	78
   962  00FE5A  6F                 	db	111
   963  00FE5B  74                 	db	116
   964  00FE5C  65                 	db	101
   965  00FE5D  2D                 	db	45
   966  00FE5E  65                 	db	101
   967  00FE5F  6E                 	db	110
   968  00FE60  35                 	db	53
   969  00FE61  3D                 	db	61
   970  00FE62  43                 	db	67
   971  00FE63  72                 	db	114
   972  00FE64  65                 	db	101
   973  00FE65  64                 	db	100
   974  00FE66  2D                 	db	45
   975  00FE67  63                 	db	99
   976  00FE68  6C                 	db	108
   977  00FE69  72                 	db	114
   978  00FE6A  20                 	db	32
   979  00FE6B  36                 	db	54
   980  00FE6C  3D                 	db	61
   981  00FE6D  50                 	db	80
   982  00FE6E  72                 	db	114
   983  00FE6F  69                 	db	105
   984  00FE70  63                 	db	99
   985  00FE71  65                 	db	101
   986  00FE72  73                 	db	115
   987  00FE73  20                 	db	32
   988  00FE74  38                 	db	56
   989  00FE75  3D                 	db	61
   990  00FE76  45                 	db	69
   991  00FE77  78                 	db	120
   992  00FE78  69                 	db	105
   993  00FE79  74                 	db	116
   994  00FE7A  00                 	db	0
   995  00FE7B                     __end_of_servmsg:
   996                           	opt stack 0
   997  00FE7B                     _pricesetm2:
   998                           	opt stack 0
   999  00FE7B  50                 	db	80
  1000  00FE7C  72                 	db	114
  1001  00FE7D  65                 	db	101
  1002  00FE7E  73                 	db	115
  1003  00FE7F  73                 	db	115
  1004  00FE80  20                 	db	32
  1005  00FE81  63                 	db	99
  1006  00FE82  68                 	db	104
  1007  00FE83  61                 	db	97
  1008  00FE84  6E                 	db	110
  1009  00FE85  6E                 	db	110
  1010  00FE86  65                 	db	101
  1011  00FE87  6C                 	db	108
  1012  00FE88  20                 	db	32
  1013  00FE89  62                 	db	98
  1014  00FE8A  75                 	db	117
  1015  00FE8B  74                 	db	116
  1016  00FE8C  74                 	db	116
  1017  00FE8D  6F                 	db	111
  1018  00FE8E  6E                 	db	110
  1019  00FE8F  20                 	db	32
  1020  00FE90  20                 	db	32
  1021  00FE91  20                 	db	32
  1022  00FE92  20                 	db	32
  1023  00FE93  74                 	db	116
  1024  00FE94  6F                 	db	111
  1025  00FE95  20                 	db	32
  1026  00FE96  73                 	db	115
  1027  00FE97  65                 	db	101
  1028  00FE98  74                 	db	116
  1029  00FE99  20                 	db	32
  1030  00FE9A  70                 	db	112
  1031  00FE9B  72                 	db	114
  1032  00FE9C  69                 	db	105
  1033  00FE9D  63                 	db	99
  1034  00FE9E  65                 	db	101
  1035  00FE9F  20                 	db	32
  1036  00FEA0  20                 	db	32
  1037  00FEA1  20                 	db	32
  1038  00FEA2  20                 	db	32
  1039  00FEA3  20                 	db	32
  1040  00FEA4  20                 	db	32
  1041  00FEA5  53                 	db	83
  1042  00FEA6  65                 	db	101
  1043  00FEA7  72                 	db	114
  1044  00FEA8  76                 	db	118
  1045  00FEA9  69                 	db	105
  1046  00FEAA  63                 	db	99
  1047  00FEAB  65                 	db	101
  1048  00FEAC  20                 	db	32
  1049  00FEAD  3D                 	db	61
  1050  00FEAE  20                 	db	32
  1051  00FEAF  45                 	db	69
  1052  00FEB0  78                 	db	120
  1053  00FEB1  69                 	db	105
  1054  00FEB2  74                 	db	116
  1055  00FEB3  00                 	db	0
  1056  00FEB4                     __end_of_pricesetm2:
  1057                           	opt stack 0
  1058  00FEB4                     _hoppcoin:
  1059                           	opt stack 0
  1060  00FEB4  48                 	db	72
  1061  00FEB5  6F                 	db	111
  1062  00FEB6  70                 	db	112
  1063  00FEB7  70                 	db	112
  1064  00FEB8  65                 	db	101
  1065  00FEB9  72                 	db	114
  1066  00FEBA  20                 	db	32
  1067  00FEBB  43                 	db	67
  1068  00FEBC  6F                 	db	111
  1069  00FEBD  69                 	db	105
  1070  00FEBE  6E                 	db	110
  1071  00FEBF  20                 	db	32
  1072  00FEC0  20                 	db	32
  1073  00FEC1  20                 	db	32
  1074  00FEC2  20                 	db	32
  1075  00FEC3  20                 	db	32
  1076  00FEC4  20                 	db	32
  1077  00FEC5  20                 	db	32
  1078  00FEC6  20                 	db	32
  1079  00FEC7  20                 	db	32
  1080  00FEC8  42                 	db	66
  1081  00FEC9  75                 	db	117
  1082  00FECA  74                 	db	116
  1083  00FECB  74                 	db	116
  1084  00FECC  6F                 	db	111
  1085  00FECD  6E                 	db	110
  1086  00FECE  20                 	db	32
  1087  00FECF  31                 	db	49
  1088  00FED0  20                 	db	32
  1089  00FED1  3D                 	db	61
  1090  00FED2  20                 	db	32
  1091  00FED3  2B                 	db	43
  1092  00FED4  20                 	db	32
  1093  00FED5  26                 	db	38
  1094  00FED6  20                 	db	32
  1095  00FED7  32                 	db	50
  1096  00FED8  20                 	db	32
  1097  00FED9  3D                 	db	61
  1098  00FEDA  20                 	db	32
  1099  00FEDB  2D                 	db	45
  1100  00FEDC  20                 	db	32
  1101  00FEDD  56                 	db	86
  1102  00FEDE  61                 	db	97
  1103  00FEDF  6C                 	db	108
  1104  00FEE0  75                 	db	117
  1105  00FEE1  65                 	db	101
  1106  00FEE2  20                 	db	32
  1107  00FEE3  3D                 	db	61
  1108  00FEE4  20                 	db	32
  1109  00FEE5  52                 	db	82
  1110  00FEE6  00                 	db	0
  1111  00FEE7                     __end_of_hoppcoin:
  1112                           	opt stack 0
  1113  00FEE7                     _inscoin:
  1114                           	opt stack 0
  1115  00FEE7  49                 	db	73
  1116  00FEE8  6E                 	db	110
  1117  00FEE9  73                 	db	115
  1118  00FEEA  65                 	db	101
  1119  00FEEB  72                 	db	114
  1120  00FEEC  74                 	db	116
  1121  00FEED  20                 	db	32
  1122  00FEEE  4E                 	db	78
  1123  00FEEF  6F                 	db	111
  1124  00FEF0  74                 	db	116
  1125  00FEF1  65                 	db	101
  1126  00FEF2  73                 	db	115
  1127  00FEF3  20                 	db	32
  1128  00FEF4  26                 	db	38
  1129  00FEF5  20                 	db	32
  1130  00FEF6  50                 	db	80
  1131  00FEF7  72                 	db	114
  1132  00FEF8  65                 	db	101
  1133  00FEF9  73                 	db	115
  1134  00FEFA  73                 	db	115
  1135  00FEFB  20                 	db	32
  1136  00FEFC  4C                 	db	76
  1137  00FEFD  69                 	db	105
  1138  00FEFE  67                 	db	103
  1139  00FEFF  68                 	db	104
  1140  00FF00  74                 	db	116
  1141  00FF01  65                 	db	101
  1142  00FF02  64                 	db	100
  1143  00FF03  20                 	db	32
  1144  00FF04  42                 	db	66
  1145  00FF05  75                 	db	117
  1146  00FF06  74                 	db	116
  1147  00FF07  74                 	db	116
  1148  00FF08  6F                 	db	111
  1149  00FF09  6E                 	db	110
  1150  00FF0A  20                 	db	32
  1151  00FF0B  54                 	db	84
  1152  00FF0C  6F                 	db	111
  1153  00FF0D  20                 	db	32
  1154  00FF0E  20                 	db	32
  1155  00FF0F  20                 	db	32
  1156  00FF10  20                 	db	32
  1157  00FF11  20                 	db	32
  1158  00FF12  20                 	db	32
  1159  00FF13  56                 	db	86
  1160  00FF14  65                 	db	101
  1161  00FF15  6E                 	db	110
  1162  00FF16  64                 	db	100
  1163  00FF17  00                 	db	0
  1164  00FF18                     __end_of_inscoin:
  1165                           	opt stack 0
  1166  00FF18                     _initnote:
  1167                           	opt stack 0
  1168  00FF18  20                 	db	32
  1169  00FF19  20                 	db	32
  1170  00FF1A  20                 	db	32
  1171  00FF1B  20                 	db	32
  1172  00FF1C  20                 	db	32
  1173  00FF1D  49                 	db	73
  1174  00FF1E  6E                 	db	110
  1175  00FF1F  69                 	db	105
  1176  00FF20  74                 	db	116
  1177  00FF21  69                 	db	105
  1178  00FF22  61                 	db	97
  1179  00FF23  6C                 	db	108
  1180  00FF24  69                 	db	105
  1181  00FF25  7A                 	db	122
  1182  00FF26  65                 	db	101
  1183  00FF27  20                 	db	32
  1184  00FF28  20                 	db	32
  1185  00FF29  20                 	db	32
  1186  00FF2A  20                 	db	32
  1187  00FF2B  20                 	db	32
  1188  00FF2C  20                 	db	32
  1189  00FF2D  20                 	db	32
  1190  00FF2E  20                 	db	32
  1191  00FF2F  20                 	db	32
  1192  00FF30  20                 	db	32
  1193  00FF31  4E                 	db	78
  1194  00FF32  6F                 	db	111
  1195  00FF33  74                 	db	116
  1196  00FF34  65                 	db	101
  1197  00FF35  20                 	db	32
  1198  00FF36  52                 	db	82
  1199  00FF37  65                 	db	101
  1200  00FF38  61                 	db	97
  1201  00FF39  64                 	db	100
  1202  00FF3A  65                 	db	101
  1203  00FF3B  72                 	db	114
  1204  00FF3C  00                 	db	0
  1205  00FF3D                     __end_of_initnote:
  1206                           	opt stack 0
  1207  00FF3D                     _noteerr:
  1208                           	opt stack 0
  1209  00FF3D  20                 	db	32
  1210  00FF3E  20                 	db	32
  1211  00FF3F  20                 	db	32
  1212  00FF40  4E                 	db	78
  1213  00FF41  6F                 	db	111
  1214  00FF42  74                 	db	116
  1215  00FF43  65                 	db	101
  1216  00FF44  20                 	db	32
  1217  00FF45  65                 	db	101
  1218  00FF46  72                 	db	114
  1219  00FF47  72                 	db	114
  1220  00FF48  6F                 	db	111
  1221  00FF49  72                 	db	114
  1222  00FF4A  20                 	db	32
  1223  00FF4B  20                 	db	32
  1224  00FF4C  20                 	db	32
  1225  00FF4D  20                 	db	32
  1226  00FF4E  20                 	db	32
  1227  00FF4F  63                 	db	99
  1228  00FF50  6F                 	db	111
  1229  00FF51  64                 	db	100
  1230  00FF52  65                 	db	101
  1231  00FF53  20                 	db	32
  1232  00FF54  3D                 	db	61
  1233  00FF55  20                 	db	32
  1234  00FF56  30                 	db	48
  1235  00FF57  78                 	db	120
  1236  00FF58  00                 	db	0
  1237  00FF59                     __end_of_noteerr:
  1238                           	opt stack 0
  1239  00FF59                     _inithop:
  1240                           	opt stack 0
  1241  00FF59  20                 	db	32
  1242  00FF5A  20                 	db	32
  1243  00FF5B  49                 	db	73
  1244  00FF5C  6E                 	db	110
  1245  00FF5D  69                 	db	105
  1246  00FF5E  74                 	db	116
  1247  00FF5F  69                 	db	105
  1248  00FF60  61                 	db	97
  1249  00FF61  6C                 	db	108
  1250  00FF62  69                 	db	105
  1251  00FF63  7A                 	db	122
  1252  00FF64  65                 	db	101
  1253  00FF65  20                 	db	32
  1254  00FF66  48                 	db	72
  1255  00FF67  6F                 	db	111
  1256  00FF68  70                 	db	112
  1257  00FF69  70                 	db	112
  1258  00FF6A  65                 	db	101
  1259  00FF6B  72                 	db	114
  1260  00FF6C  00                 	db	0
  1261  00FF6D                     __end_of_inithop:
  1262                           	opt stack 0
  1263  00FF6D                     _pricesetmsg:
  1264                           	opt stack 0
  1265  00FF6D  20                 	db	32
  1266  00FF6E  20                 	db	32
  1267  00FF6F  20                 	db	32
  1268  00FF70  50                 	db	80
  1269  00FF71  72                 	db	114
  1270  00FF72  69                 	db	105
  1271  00FF73  63                 	db	99
  1272  00FF74  65                 	db	101
  1273  00FF75  20                 	db	32
  1274  00FF76  73                 	db	115
  1275  00FF77  65                 	db	101
  1276  00FF78  74                 	db	116
  1277  00FF79  20                 	db	32
  1278  00FF7A  6D                 	db	109
  1279  00FF7B  6F                 	db	111
  1280  00FF7C  64                 	db	100
  1281  00FF7D  65                 	db	101
  1282  00FF7E  00                 	db	0
  1283  00FF7F                     __end_of_pricesetmsg:
  1284                           	opt stack 0
  1285  00FF7F                     _creditclr:
  1286                           	opt stack 0
  1287  00FF7F  43                 	db	67
  1288  00FF80  72                 	db	114
  1289  00FF81  65                 	db	101
  1290  00FF82  64                 	db	100
  1291  00FF83  69                 	db	105
  1292  00FF84  74                 	db	116
  1293  00FF85  73                 	db	115
  1294  00FF86  20                 	db	32
  1295  00FF87  43                 	db	67
  1296  00FF88  6C                 	db	108
  1297  00FF89  65                 	db	101
  1298  00FF8A  61                 	db	97
  1299  00FF8B  72                 	db	114
  1300  00FF8C  65                 	db	101
  1301  00FF8D  64                 	db	100
  1302  00FF8E  00                 	db	0
  1303  00FF8F                     __end_of_creditclr:
  1304                           	opt stack 0
  1305  00FF8F                     _dacmsg:
  1306                           	opt stack 0
  1307  00FF8F  53                 	db	83
  1308  00FF90  65                 	db	101
  1309  00FF91  6E                 	db	110
  1310  00FF92  73                 	db	115
  1311  00FF93  69                 	db	105
  1312  00FF94  74                 	db	116
  1313  00FF95  69                 	db	105
  1314  00FF96  76                 	db	118
  1315  00FF97  69                 	db	105
  1316  00FF98  74                 	db	116
  1317  00FF99  79                 	db	121
  1318  00FF9A  20                 	db	32
  1319  00FF9B  00                 	db	0
  1320  00FF9C                     __end_of_dacmsg:
  1321                           	opt stack 0
  1322  00FF9C                     _credits:
  1323                           	opt stack 0
  1324  00FF9C  20                 	db	32
  1325  00FF9D  20                 	db	32
  1326  00FF9E  43                 	db	67
  1327  00FF9F  72                 	db	114
  1328  00FFA0  65                 	db	101
  1329  00FFA1  64                 	db	100
  1330  00FFA2  69                 	db	105
  1331  00FFA3  74                 	db	116
  1332  00FFA4  20                 	db	32
  1333  00FFA5  3D                 	db	61
  1334  00FFA6  20                 	db	32
  1335  00FFA7  52                 	db	82
  1336  00FFA8  00                 	db	0
  1337  00FFA9                     __end_of_credits:
  1338                           	opt stack 0
  1339  00FFA9                     _sensmsg:
  1340                           	opt stack 0
  1341  00FFA9  53                 	db	83
  1342  00FFAA  65                 	db	101
  1343  00FFAB  6E                 	db	110
  1344  00FFAC  73                 	db	115
  1345  00FFAD  6F                 	db	111
  1346  00FFAE  72                 	db	114
  1347  00FFAF  20                 	db	32
  1348  00FFB0  69                 	db	105
  1349  00FFB1  73                 	db	115
  1350  00FFB2  20                 	db	32
  1351  00FFB3  00                 	db	0
  1352  00FFB4                     __end_of_sensmsg:
  1353                           	opt stack 0
  1354  00FFB4                     _disabled:
  1355                           	opt stack 0
  1356  00FFB4  20                 	db	32
  1357  00FFB5  64                 	db	100
  1358  00FFB6  69                 	db	105
  1359  00FFB7  73                 	db	115
  1360  00FFB8  61                 	db	97
  1361  00FFB9  62                 	db	98
  1362  00FFBA  6C                 	db	108
  1363  00FFBB  65                 	db	101
  1364  00FFBC  64                 	db	100
  1365  00FFBD  00                 	db	0
  1366  00FFBE                     __end_of_disabled:
  1367                           	opt stack 0
  1368  00FFBE                     _enabled:
  1369                           	opt stack 0
  1370  00FFBE  20                 	db	32
  1371  00FFBF  65                 	db	101
  1372  00FFC0  6E                 	db	110
  1373  00FFC1  61                 	db	97
  1374  00FFC2  62                 	db	98
  1375  00FFC3  6C                 	db	108
  1376  00FFC4  65                 	db	101
  1377  00FFC5  64                 	db	100
  1378  00FFC6  20                 	db	32
  1379  00FFC7  00                 	db	0
  1380  00FFC8                     __end_of_enabled:
  1381                           	opt stack 0
  1382  00FFC8                     _tenrand:
  1383                           	opt stack 0
  1384  00FFC8  20                 	db	32
  1385  00FFC9  20                 	db	32
  1386  00FFCA  20                 	db	32
  1387  00FFCB  52                 	db	82
  1388  00FFCC  31                 	db	49
  1389  00FFCD  30                 	db	48
  1390  00FFCE  20                 	db	32
  1391  00FFCF  20                 	db	32
  1392  00FFD0  00                 	db	0
  1393  00FFD1                     __end_of_tenrand:
  1394                           	opt stack 0
  1395  00FFD1                     _twohundredrand:
  1396                           	opt stack 0
  1397  00FFD1  20                 	db	32
  1398  00FFD2  20                 	db	32
  1399  00FFD3  52                 	db	82
  1400  00FFD4  32                 	db	50
  1401  00FFD5  30                 	db	48
  1402  00FFD6  30                 	db	48
  1403  00FFD7  20                 	db	32
  1404  00FFD8  00                 	db	0
  1405  00FFD9                     __end_of_twohundredrand:
  1406                           	opt stack 0
  1407  00FFD9                     _hundredrand:
  1408                           	opt stack 0
  1409  00FFD9  20                 	db	32
  1410  00FFDA  20                 	db	32
  1411  00FFDB  52                 	db	82
  1412  00FFDC  31                 	db	49
  1413  00FFDD  30                 	db	48
  1414  00FFDE  30                 	db	48
  1415  00FFDF  20                 	db	32
  1416  00FFE0  00                 	db	0
  1417  00FFE1                     __end_of_hundredrand:
  1418                           	opt stack 0
  1419  00FFE1                     _fiftyrand:
  1420                           	opt stack 0
  1421  00FFE1  20                 	db	32
  1422  00FFE2  20                 	db	32
  1423  00FFE3  52                 	db	82
  1424  00FFE4  35                 	db	53
  1425  00FFE5  30                 	db	48
  1426  00FFE6  20                 	db	32
  1427  00FFE7  20                 	db	32
  1428  00FFE8  00                 	db	0
  1429  00FFE9                     __end_of_fiftyrand:
  1430                           	opt stack 0
  1431  00FFE9                     _twentyrand:
  1432                           	opt stack 0
  1433  00FFE9  20                 	db	32
  1434  00FFEA  20                 	db	32
  1435  00FFEB  52                 	db	82
  1436  00FFEC  32                 	db	50
  1437  00FFED  30                 	db	48
  1438  00FFEE  20                 	db	32
  1439  00FFEF  20                 	db	32
  1440  00FFF0  00                 	db	0
  1441  00FFF1                     __end_of_twentyrand:
  1442                           	opt stack 0
  1443  00FFF1                     _clrmsg:
  1444                           	opt stack 0
  1445  00FFF1  20                 	db	32
  1446  00FFF2  20                 	db	32
  1447  00FFF3  20                 	db	32
  1448  00FFF4  20                 	db	32
  1449  00FFF5  20                 	db	32
  1450  00FFF6  00                 	db	0
  1451  00FFF7                     __end_of_clrmsg:
  1452                           	opt stack 0
  1453  00FFF7                     _offmsg:
  1454                           	opt stack 0
  1455  00FFF7  4F                 	db	79
  1456  00FFF8  66                 	db	102
  1457  00FFF9  66                 	db	102
  1458  00FFFA  00                 	db	0
  1459  00FFFB                     __end_of_offmsg:
  1460                           	opt stack 0
  1461  00FFFB                     _onmsg:
  1462                           	opt stack 0
  1463  00FFFB  4F                 	db	79
  1464  00FFFC  6E                 	db	110
  1465  00FFFD  20                 	db	32
  1466  00FFFE  00                 	db	0
  1467  00FFFF                     __end_of_onmsg:
  1468                           	opt stack 0
  1469  00FFFF  00                 	db	0	; dummy byte at the end
  1470  0000                     
  1471                           	psect	nvBANK0
  1472  0000AA                     __pnvBANK0:
  1473                           	opt stack 0
  1474  0000AA                     _timer0ReloadVal16bit:
  1475                           	opt stack 0
  1476  0000AA                     	ds	2
  1477  0000AC                     _timer5ReloadVal:
  1478                           	opt stack 0
  1479  0000AC                     	ds	2
  1480  0000AE                     _timer3ReloadVal:
  1481                           	opt stack 0
  1482  0000AE                     	ds	2
  1483  0000B0                     _timer1ReloadVal:
  1484                           	opt stack 0
  1485  0000B0                     	ds	2
  1486  0000                     _PIR4bits	set	3790
  1487  0000                     _TX2REG	set	3738
  1488  0000                     _RC2REG	set	3737
  1489  0000                     _RC2STAbits	set	3741
  1490  0000                     _SP2BRGH	set	3740
  1491  0000                     _SP2BRGL	set	3739
  1492  0000                     _TX2STA	set	3742
  1493  0000                     _RC2STA	set	3741
  1494  0000                     _BAUD2CON	set	3743
  1495  0000                     _PIR7bits	set	3793
  1496  0000                     _IPR0bits	set	3770
  1497  0000                     _PMD5	set	3814
  1498  0000                     _PMD4	set	3813
  1499  0000                     _PMD3	set	3812
  1500  0000                     _PMD2	set	3811
  1501  0000                     _PMD1	set	3810
  1502  0000                     _PMD0	set	3809
  1503  0000                     _OSCTUNE	set	3805
  1504  0000                     _OSCFRQ	set	3806
  1505  0000                     _OSCEN	set	3804
  1506  0000                     _OSCCON3	set	3802
  1507  0000                     _OSCCON1	set	3800
  1508  0000                     _PIR3bits	set	3789
  1509  0000                     _PIR0bits	set	3786
  1510  0000                     _RX2PPSbits	set	3725
  1511  0000                     _RB5PPS	set	3828
  1512  0000                     _RC6PPS	set	3837
  1513  0000                     _RX1PPSbits	set	3765
  1514  0000                     _PPSLOCKbits	set	3744
  1515  0000                     _PPSLOCK	set	3744
  1516  0000                     _PIE0bits	set	3778
  1517  0000                     _CMOUT	set	3901
  1518  0000                     _DAC1CON1	set	3892
  1519  0000                     _DAC1CON0	set	3891
  1520  0000                     _CMOUTbits	set	3901
  1521  0000                     _CM1PCH	set	3900
  1522  0000                     _CM1NCH	set	3899
  1523  0000                     _CM1CON1	set	3898
  1524  0000                     _CM1CON0	set	3897
  1525  0000                     _ODCOND	set	3876
  1526  0000                     _ODCONC	set	3871
  1527  0000                     _ODCONB	set	3863
  1528  0000                     _ODCONA	set	3855
  1529  0000                     _ODCONE	set	3884
  1530  0000                     _WPUC	set	3872
  1531  0000                     _WPUA	set	3856
  1532  0000                     _WPUB	set	3864
  1533  0000                     _WPUE	set	3885
  1534  0000                     _WPUD	set	3877
  1535  0000                     _ANSELA	set	3857
  1536  0000                     _ANSELE	set	3886
  1537  0000                     _ANSELD	set	3878
  1538  0000                     _ANSELB	set	3865
  1539  0000                     _ANSELC	set	3873
  1540  0000                     _BAUD1CONbits	set	3999
  1541  0000                     _LATCbits	set	3973
  1542  0000                     _TX1STAbits	set	3998
  1543  0000                     _PORTA	set	3981
  1544  0000                     _PORTD	set	3984
  1545  0000                     _T0CON0bits	set	4053
  1546  0000                     _T0CON0	set	4053
  1547  0000                     _TMR0L	set	4051
  1548  0000                     _TMR0H	set	4052
  1549  0000                     _T0CON1	set	4054
  1550  0000                     _T5GCONbits	set	4036
  1551  0000                     _T5CONbits	set	4035
  1552  0000                     _T5CON	set	4035
  1553  0000                     _TMR5L	set	4033
  1554  0000                     _TMR5H	set	4034
  1555  0000                     _T5CLK	set	4038
  1556  0000                     _T5GATE	set	4037
  1557  0000                     _T5GCON	set	4036
  1558  0000                     _T3GCONbits	set	4042
  1559  0000                     _T3CONbits	set	4041
  1560  0000                     _T3CON	set	4041
  1561  0000                     _TMR3L	set	4039
  1562  0000                     _TMR3H	set	4040
  1563  0000                     _T3CLK	set	4044
  1564  0000                     _T3GATE	set	4043
  1565  0000                     _T3GCON	set	4042
  1566  0000                     _T1GCONbits	set	4048
  1567  0000                     _T1CONbits	set	4047
  1568  0000                     _T1CON	set	4047
  1569  0000                     _TMR1L	set	4045
  1570  0000                     _TMR1H	set	4046
  1571  0000                     _T1CLK	set	4050
  1572  0000                     _T1GATE	set	4049
  1573  0000                     _T1GCON	set	4048
  1574  0000                     _NVMDAT	set	3968
  1575  0000                     _NVMADRL	set	3966
  1576  0000                     _NVMADRH	set	3967
  1577  0000                     _NVMCON2	set	3970
  1578  0000                     _TABLAT	set	4085
  1579  0000                     _TBLPTRL	set	4086
  1580  0000                     _TBLPTRH	set	4087
  1581  0000                     _TBLPTRU	set	4088
  1582  0000                     _NVMCON1bits	set	3969
  1583  0000                     _INTCONbits	set	4082
  1584  0000                     _TX1REG	set	3994
  1585  0000                     _RC1REG	set	3993
  1586  0000                     _RC1STAbits	set	3997
  1587  0000                     _SP1BRGH	set	3996
  1588  0000                     _SP1BRGL	set	3995
  1589  0000                     _TX1STA	set	3998
  1590  0000                     _RC1STA	set	3997
  1591  0000                     _BAUD1CON	set	3999
  1592  0000                     _TRISD	set	3979
  1593  0000                     _TRISC	set	3978
  1594  0000                     _TRISB	set	3977
  1595  0000                     _TRISA	set	3976
  1596  0000                     _TRISE	set	3980
  1597  0000                     _LATC	set	3973
  1598  0000                     _LATB	set	3972
  1599  0000                     _LATA	set	3971
  1600  0000                     _LATD	set	3974
  1601  0000                     _LATE	set	3975
  1602  0000                     _LATA6	set	31774
  1603  0000                     _LATA7	set	31775
  1604  0000                     _GIE	set	32663
  1605                           
  1606                           	psect	nvCOMRAMh
  1607  00004C                     __pnvCOMRAMh:
  1608                           	opt stack 0
  1609  00004C                     _count:
  1610                           	opt stack 0
  1611  00004C                     	ds	1
  1612                           
  1613                           ; #config settings
  1614  0000                     
  1615                           	psect	cinit
  1616  0115B4                     __pcinit:
  1617                           	opt stack 0
  1618  0115B4                     start_initialization:
  1619                           	opt stack 0
  1620  0115B4                     __initialization:
  1621                           	opt stack 0
  1622                           
  1623                           ; Initialize objects allocated to COMRAMh (1 bytes)
  1624                           ; load TBLPTR registers with __pidataCOMRAMh
  1625  0115B4  0EE8               	movlw	low __pidataCOMRAMh
  1626  0115B6  6EF6               	movwf	tblptrl,c
  1627  0115B8  0E1A               	movlw	high __pidataCOMRAMh
  1628  0115BA  6EF7               	movwf	tblptrh,c
  1629  0115BC  0E01               	movlw	low (__pidataCOMRAMh shr (0+16))
  1630  0115BE  6EF8               	movwf	tblptru,c
  1631  0115C0  0009               	tblrd		*+	;fetch initializer
  1632  0115C2  CFF5 F04D          	movff	tablat,__pdataCOMRAMh
  1633                           
  1634                           ; Clear objects allocated to BANK0 (58 bytes)
  1635  0115C6  EE00  F060         	lfsr	0,__pbssBANK0
  1636  0115CA  0E3A               	movlw	58
  1637  0115CC                     clear_0:
  1638  0115CC  6AEE               	clrf	postinc0,c
  1639  0115CE  06E8               	decf	wreg,f,c
  1640  0115D0  E1FD               	bnz	clear_0
  1641                           
  1642                           ; Clear objects allocated to COMRAMh (32 bytes)
  1643  0115D2  EE00  F02C         	lfsr	0,__pbssCOMRAMh
  1644  0115D6  0E20               	movlw	32
  1645  0115D8                     clear_1:
  1646  0115D8  6AEE               	clrf	postinc0,c
  1647  0115DA  06E8               	decf	wreg,f,c
  1648  0115DC  E1FD               	bnz	clear_1
  1649                           
  1650                           ; Clear objects allocated to COMRAMl (1 bytes)
  1651  0115DE  6A4E               	clrf	__pbssCOMRAMl& (0+255),c
  1652  0115E0                     end_of_initialization:
  1653                           	opt stack 0
  1654  0115E0                     __end_of__initialization:
  1655                           	opt stack 0
  1656  0115E0  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1657  0115E2  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1658  0115E4  0100               	movlb	0
  1659  0115E6  EFBC  F084         	goto	_main	;jump to C main() function
  1660                           tblptru	equ	0xFF8
  1661                           tblptrh	equ	0xFF7
  1662                           tblptrl	equ	0xFF6
  1663                           tablat	equ	0xFF5
  1664                           postinc0	equ	0xFEE
  1665                           wreg	equ	0xFE8
  1666                           
  1667                           	psect	bssCOMRAMh
  1668  00002C                     __pbssCOMRAMh:
  1669                           	opt stack 0
  1670  00002C                     _hpserial:
  1671                           	opt stack 0
  1672  00002C                     	ds	3
  1673  00002F                     _venflags:
  1674                           	opt stack 0
  1675  00002F                     	ds	2
  1676  000031                     _dbcount:
  1677                           	opt stack 0
  1678  000031                     	ds	2
  1679  000033                     _venderr:
  1680                           	opt stack 0
  1681  000033                     	ds	1
  1682  000034                     _senschk:
  1683                           	opt stack 0
  1684  000034                     	ds	1
  1685  000035                     _senspos:
  1686                           	opt stack 0
  1687  000035                     	ds	1
  1688  000036                     _sensorval:
  1689                           	opt stack 0
  1690  000036                     	ds	1
  1691  000037                     _vendprice:
  1692                           	opt stack 0
  1693  000037                     	ds	1
  1694  000038                     _buttons:
  1695                           	opt stack 0
  1696  000038                     	ds	1
  1697  000039                     _cash:
  1698                           	opt stack 0
  1699  000039                     	ds	1
  1700  00003A                     _credit:
  1701                           	opt stack 0
  1702  00003A                     	ds	1
  1703  00003B                     _cctflags:
  1704                           	opt stack 0
  1705  00003B                     	ds	1
  1706  00003C                     _noteen_byte:
  1707                           	opt stack 0
  1708  00003C                     	ds	1
  1709  00003D                     _noteen:
  1710                           	opt stack 0
  1711  00003D                     	ds	1
  1712  00003E                     _mdbflags:
  1713                           	opt stack 0
  1714  00003E                     	ds	1
  1715  00003F                     _chkbyte:
  1716                           	opt stack 0
  1717  00003F                     	ds	1
  1718  000040                     _notebyte:
  1719                           	opt stack 0
  1720  000040                     	ds	1
  1721  000041                     _mcount:
  1722                           	opt stack 0
  1723  000041                     	ds	1
  1724  000042                     _dspposition:
  1725                           	opt stack 0
  1726  000042                     	ds	1
  1727  000043                     _ercode:
  1728                           	opt stack 0
  1729  000043                     	ds	1
  1730  000044                     _stradd:
  1731                           	opt stack 0
  1732  000044                     	ds	1
  1733  000045                     _lcdata:
  1734                           	opt stack 0
  1735  000045                     	ds	1
  1736  000046                     _bflag:
  1737                           	opt stack 0
  1738  000046                     	ds	1
  1739  000047                     _pnvcash:
  1740                           	opt stack 0
  1741  000047                     	ds	3
  1742  00004A                     _pvcash:
  1743                           	opt stack 0
  1744  00004A                     	ds	2
  1745                           tblptru	equ	0xFF8
  1746                           tblptrh	equ	0xFF7
  1747                           tblptrl	equ	0xFF6
  1748                           tablat	equ	0xFF5
  1749                           postinc0	equ	0xFEE
  1750                           wreg	equ	0xFE8
  1751                           
  1752                           	psect	dataCOMRAMh
  1753  00004D                     __pdataCOMRAMh:
  1754                           	opt stack 0
  1755  00004D                     _notenum:
  1756                           	opt stack 0
  1757  00004D                     	ds	1
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           postinc0	equ	0xFEE
  1763                           wreg	equ	0xFE8
  1764                           
  1765                           	psect	bssCOMRAMl
  1766  00004E                     __pbssCOMRAMl:
  1767                           	opt stack 0
  1768  00004E                     _lcdfunc:
  1769                           	opt stack 0
  1770  00004E                     	ds	1
  1771                           tblptru	equ	0xFF8
  1772                           tblptrh	equ	0xFF7
  1773                           tblptrl	equ	0xFF6
  1774                           tablat	equ	0xFF5
  1775                           postinc0	equ	0xFEE
  1776                           wreg	equ	0xFE8
  1777                           
  1778                           	psect	bssBANK0
  1779  000060                     __pbssBANK0:
  1780                           	opt stack 0
  1781  000060                     _mdbdata:
  1782                           	opt stack 0
  1783  000060                     	ds	32
  1784  000080                     _tvends:
  1785                           	opt stack 0
  1786  000080                     	ds	8
  1787  000088                     _nvcash:
  1788                           	opt stack 0
  1789  000088                     	ds	3
  1790  00008B                     _hexnum:
  1791                           	opt stack 0
  1792  00008B                     	ds	3
  1793  00008E                     _vcashout:
  1794                           	opt stack 0
  1795  00008E                     	ds	2
  1796  000090                     _vcash:
  1797                           	opt stack 0
  1798  000090                     	ds	2
  1799  000092                     _command:
  1800                           	opt stack 0
  1801  000092                     	ds	1
  1802  000093                     _nobytes:
  1803                           	opt stack 0
  1804  000093                     	ds	1
  1805  000094                     _dest:
  1806                           	opt stack 0
  1807  000094                     	ds	1
  1808  000095                     _mdbtxbyte:
  1809                           	opt stack 0
  1810  000095                     	ds	1
  1811  000096                     _errorflags:
  1812                           	opt stack 0
  1813  000096                     	ds	1
  1814  000097                     _slvadd:
  1815                           	opt stack 0
  1816  000097                     	ds	1
  1817  000098                     _lcdaddress:
  1818                           	opt stack 0
  1819  000098                     	ds	1
  1820  000099                     _lcdline:
  1821                           	opt stack 0
  1822  000099                     	ds	1
  1823                           tblptru	equ	0xFF8
  1824                           tblptrh	equ	0xFF7
  1825                           tblptrl	equ	0xFF6
  1826                           tablat	equ	0xFF5
  1827                           postinc0	equ	0xFEE
  1828                           wreg	equ	0xFE8
  1829                           
  1830                           	psect	cstackBANK0
  1831  00009A                     __pcstackBANK0:
  1832                           	opt stack 0
  1833  00009A                     displ_hex@value:
  1834                           	opt stack 0
  1835                           
  1836                           ; 8 bytes @ 0x0
  1837  00009A                     	ds	8
  1838  0000A2                     displ_hex@hexnumsave:
  1839                           	opt stack 0
  1840                           
  1841                           ; 3 bytes @ 0x8
  1842  0000A2                     	ds	3
  1843  0000A5                     displ_hex@i:
  1844                           	opt stack 0
  1845                           
  1846                           ; 1 bytes @ 0xB
  1847  0000A5                     	ds	1
  1848  0000A6                     ??_set_price:
  1849  0000A6                     Hopper_coin@coinval:
  1850                           	opt stack 0
  1851  0000A6                     Sensor_set@dacpos:
  1852                           	opt stack 0
  1853                           
  1854                           ; 1 bytes @ 0xC
  1855  0000A6                     	ds	2
  1856  0000A8                     set_price@buttons:
  1857                           	opt stack 0
  1858                           
  1859                           ; 1 bytes @ 0xE
  1860  0000A8                     	ds	1
  1861  0000A9                     set_price@channel:
  1862                           	opt stack 0
  1863                           
  1864                           ; 1 bytes @ 0xF
  1865  0000A9                     	ds	1
  1866                           tblptru	equ	0xFF8
  1867                           tblptrh	equ	0xFF7
  1868                           tblptrl	equ	0xFF6
  1869                           tablat	equ	0xFF5
  1870                           postinc0	equ	0xFEE
  1871                           wreg	equ	0xFE8
  1872                           
  1873                           	psect	cstackCOMRAMh
  1874  00000B                     __pcstackCOMRAMh:
  1875                           	opt stack 0
  1876  00000B                     ??_INTERRUPT_InterruptManagerHigh:
  1877  00000B                     
  1878                           ; 1 bytes @ 0x0
  1879  00000B                     	ds	18
  1880  00001D                     ??_TMR3_Initialize:
  1881  00001D                     ??_TMR5_Initialize:
  1882  00001D                     ??_TMR1_Initialize:
  1883  00001D                     ??_TMR0_Initialize:
  1884  00001D                     ??_butin:
  1885  00001D                     ?___ltdiv:
  1886                           	opt stack 0
  1887  00001D                     ?___ltmod:
  1888                           	opt stack 0
  1889  00001D                     PIN_MANAGER_Initialize@state:
  1890                           	opt stack 0
  1891  00001D                     EUSART1_Write@txData:
  1892                           	opt stack 0
  1893  00001D                     DAC1_SetOutput@inputData:
  1894                           	opt stack 0
  1895  00001D                     read_busy@savelate:
  1896                           	opt stack 0
  1897  00001D                     Read_Service@senval:
  1898                           	opt stack 0
  1899  00001D                     init_mdbdata@initdata:
  1900                           	opt stack 0
  1901  00001D                     cctalk_read@data:
  1902                           	opt stack 0
  1903  00001D                     DATAEE_WriteByte@bAdd:
  1904                           	opt stack 0
  1905  00001D                     DATAEE_ReadByte@bAdd:
  1906                           	opt stack 0
  1907  00001D                     ___ltdiv@dividend:
  1908                           	opt stack 0
  1909  00001D                     ___ltmod@dividend:
  1910                           	opt stack 0
  1911                           
  1912                           ; 3 bytes @ 0x12
  1913  00001D                     	ds	1
  1914  00001E                     ??_butindb:
  1915  00001E                     read_busy@savelatd:
  1916                           	opt stack 0
  1917  00001E                     init_mdbdata@i:
  1918                           	opt stack 0
  1919  00001E                     mdb_transmit@txbyte:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x13
  1923  00001E                     	ds	1
  1924  00001F                     ??_mdb_unlock:
  1925  00001F                     DATAEE_WriteByte@bData:
  1926                           	opt stack 0
  1927  00001F                     lcd_write@savelatd:
  1928                           	opt stack 0
  1929  00001F                     mdb_comm@mcount:
  1930                           	opt stack 0
  1931  00001F                     cctalk_comm@nobytes:
  1932                           	opt stack 0
  1933  00001F                     Init_vendmem@chanlinkbits:
  1934                           	opt stack 0
  1935  00001F                     Read_NVstore@storeadd:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x14
  1939  00001F                     	ds	1
  1940  000020                     DATAEE_WriteByte@GIEBitValue:
  1941                           	opt stack 0
  1942  000020                     lcd_write@lcdata:
  1943                           	opt stack 0
  1944  000020                     butindb@butval:
  1945                           	opt stack 0
  1946  000020                     mdb_comm@slvadd:
  1947                           	opt stack 0
  1948  000020                     cctalk_comm@command:
  1949                           	opt stack 0
  1950  000020                     ___ltdiv@divisor:
  1951                           	opt stack 0
  1952  000020                     ___ltmod@divisor:
  1953                           	opt stack 0
  1954                           
  1955                           ; 3 bytes @ 0x15
  1956  000020                     	ds	1
  1957  000021                     ??_cctalk_comm:
  1958  000021                     lcd_dispadd@lcdaddress:
  1959                           	opt stack 0
  1960  000021                     credit_subtract@credit:
  1961                           	opt stack 0
  1962  000021                     butindb@butt:
  1963                           	opt stack 0
  1964  000021                     mdb_comm@i:
  1965                           	opt stack 0
  1966  000021                     Init_vendmem@chanlink:
  1967                           	opt stack 0
  1968  000021                     Write_NVstore@storeadd:
  1969                           	opt stack 0
  1970  000021                     Read_NVstore@storemem:
  1971                           	opt stack 0
  1972                           
  1973                           ; 2 bytes @ 0x16
  1974  000021                     	ds	1
  1975  000022                     ??_mdb_reset:
  1976  000022                     lcd_dispadd@lcdatasave:
  1977                           	opt stack 0
  1978  000022                     mdb_poll@i:
  1979                           	opt stack 0
  1980  000022                     cctalk_comm@i:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0x17
  1984  000022                     	ds	1
  1985  000023                     lcd_writeC@lcdata:
  1986                           	opt stack 0
  1987  000023                     Init_vendmem@i:
  1988                           	opt stack 0
  1989  000023                     Read_NVstore@storesize:
  1990                           	opt stack 0
  1991  000023                     mdb_reset@i:
  1992                           	opt stack 0
  1993  000023                     cctalk_comm@dest:
  1994                           	opt stack 0
  1995  000023                     ___ltmod@counter:
  1996                           	opt stack 0
  1997  000023                     Write_NVstore@storemem:
  1998                           	opt stack 0
  1999  000023                     ___ltdiv@quotient:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x18
  2003  000023                     	ds	1
  2004  000024                     ??_displ_code:
  2005  000024                     lcd_test@character:
  2006                           	opt stack 0
  2007  000024                     Read_NVstore@i:
  2008                           	opt stack 0
  2009  000024                     mdb_reset@i_3182:
  2010                           	opt stack 0
  2011  000024                     cctalk_adpoll@i:
  2012                           	opt stack 0
  2013  000024                     cctalk_pinenter@i:
  2014                           	opt stack 0
  2015  000024                     cctalk_poll@i:
  2016                           	opt stack 0
  2017  000024                     lcd_string@lcdstring:
  2018                           	opt stack 0
  2019                           
  2020                           ; 2 bytes @ 0x19
  2021  000024                     	ds	1
  2022  000025                     ??_lcd_init:
  2023  000025                     ??_mdb_init:
  2024  000025                     ??_cctalk_init:
  2025  000025                     Write_NVstore@storesize:
  2026                           	opt stack 0
  2027                           
  2028                           ; 1 bytes @ 0x1A
  2029  000025                     	ds	1
  2030  000026                     displ_code@ercode:
  2031                           	opt stack 0
  2032  000026                     lcd_string@lcdline:
  2033                           	opt stack 0
  2034  000026                     Write_NVstore@i:
  2035                           	opt stack 0
  2036  000026                     ___ltdiv@counter:
  2037                           	opt stack 0
  2038                           
  2039                           ; 1 bytes @ 0x1B
  2040  000026                     	ds	1
  2041  000027                     ??_lcd_string:
  2042  000027                     Update_cashaudit@addcash:
  2043                           	opt stack 0
  2044  000027                     mdb_init@i:
  2045                           	opt stack 0
  2046  000027                     displ_hex@hexnum:
  2047                           	opt stack 0
  2048                           
  2049                           ; 3 bytes @ 0x1C
  2050  000027                     	ds	1
  2051  000028                     credit_add@credit:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x1D
  2055  000028                     	ds	1
  2056  000029                     ??_Clear_cred:
  2057  000029                     displ_nendis@note2disp:
  2058                           	opt stack 0
  2059  000029                     displ_note@notestring:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x1E
  2063  000029                     	ds	1
  2064  00002A                     displ_sens@dmsgpos:
  2065                           	opt stack 0
  2066  00002A                     displ_nendis@x:
  2067                           	opt stack 0
  2068  00002A                     displ_credit@cash:
  2069                           	opt stack 0
  2070  00002A                     displ_price@vendprice:
  2071                           	opt stack 0
  2072  00002A                     Update_Hopcoin@direction:
  2073                           	opt stack 0
  2074                           
  2075                           ; 1 bytes @ 0x1F
  2076  00002A                     	ds	1
  2077  00002B                     displ_sens@smsgpos:
  2078                           	opt stack 0
  2079  00002B                     Update_Hopcoin@newval:
  2080                           	opt stack 0
  2081  00002B                     enable_notes@notenum:
  2082                           	opt stack 0
  2083                           
  2084                           ; 1 bytes @ 0x20
  2085  00002B                     	ds	1
  2086  00002C                     tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           postinc0	equ	0xFEE
  2091                           wreg	equ	0xFE8
  2092                           
  2093                           ; 1 bytes @ 0x21
  2094                           
  2095                           	psect	cstackCOMRAMl
  2096  000000                     __pcstackCOMRAMl:
  2097                           	opt stack 0
  2098  000000                     tblptru	equ	0xFF8
  2099                           tblptrh	equ	0xFF7
  2100                           tblptrl	equ	0xFF6
  2101                           tablat	equ	0xFF5
  2102                           postinc0	equ	0xFEE
  2103                           wreg	equ	0xFE8
  2104                           
  2105                           ; 1 bytes @ 0x0
  2106 ;;
  2107 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2108 ;;
  2109 ;; *************** function _main *****************
  2110 ;; Defined at:
  2111 ;;		line 56 in file "main.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;		None
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;		None
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;Total ram usage:        0 bytes
  2130 ;; Hardware stack levels required when called:   12
  2131 ;; This function calls:
  2132 ;;		_CMP1_GetOutputStatus
  2133 ;;		_SYSTEM_Initialize
  2134 ;;		_credit_add
  2135 ;;		_credit_subtract
  2136 ;;		_displ_credit
  2137 ;;		_displ_noteer
  2138 ;;		_enter_service
  2139 ;;		_lcd_init
  2140 ;;		_lcd_string
  2141 ;;		_mdb_init
  2142 ;;		_mdb_poll
  2143 ;;		_vend_init
  2144 ;; This function is called by:
  2145 ;;		Startup code after reset
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148                           
  2149                           	psect	text0
  2150  010978                     __ptext0:
  2151                           	opt stack 0
  2152  010978                     _main:
  2153                           	opt stack 19
  2154                           
  2155                           ;main.c: 59: SYSTEM_Initialize();
  2156                           
  2157                           ;incstack = 0
  2158  010978  ECDF  F08B         	call	_SYSTEM_Initialize	;wreg free
  2159                           
  2160                           ;main.c: 61: lcd_init();
  2161  01097C  EC2A  F086         	call	_lcd_init	;wreg free
  2162                           
  2163                           ;main.c: 62: vend_init();
  2164  010980  ECC9  F086         	call	_vend_init	;wreg free
  2165  010984                     l871:
  2166  010984  F000               	nop		;# 
  2167                           
  2168                           ;main.c: 67: DAC1CON1 = 0x00;
  2169  010986  0E00               	movlw	0
  2170  010988  010F               	movlb	15	; () banked
  2171  01098A  6F34               	movwf	52,b	;volatile
  2172                           
  2173                           ; BSR set to: 15
  2174                           ;main.c: 68: if (!CMP1_GetOutputStatus())
  2175  01098C  EC3F  F08D         	call	_CMP1_GetOutputStatus	;wreg free
  2176  010990  0900               	iorlw	0
  2177  010992  B4D8               	btfsc	status,2,c
  2178                           
  2179                           ;main.c: 69: {
  2180                           ;main.c: 70: venflags.service = 1;
  2181  010994  8E2F               	bsf	_venflags,7,c
  2182                           
  2183                           ;main.c: 72: }
  2184                           ;main.c: 73: DAC1CON1 = sensorval;
  2185  010996  C036  FF34         	movff	_sensorval,3892	;volatile
  2186                           
  2187                           ;main.c: 75: if(venflags.service == 1)
  2188  01099A  BE2F               	btfsc	_venflags,7,c
  2189                           
  2190                           ;main.c: 76: {
  2191                           ;main.c: 77: enter_service();
  2192  01099C  EC7E  F086         	call	_enter_service	;wreg free
  2193                           
  2194                           ;main.c: 78: }
  2195                           ;main.c: 80: if(venflags.inscoin == 1)
  2196  0109A0  A42F               	btfss	_venflags,2,c
  2197  0109A2  D010               	goto	l874
  2198                           
  2199                           ;main.c: 81: {
  2200                           ;main.c: 82: lcd_string(inscoin, line1);
  2201  0109A4  0EE7               	movlw	low _inscoin
  2202  0109A6  6E24               	movwf	lcd_string@lcdstring,c
  2203  0109A8  0EFE               	movlw	high _inscoin
  2204  0109AA  6E25               	movwf	lcd_string@lcdstring+1,c
  2205  0109AC  0E97               	movlw	low _line1
  2206  0109AE  6EF6               	movwf	tblptrl,c
  2207  0109B0                     	if	1	;There is more than 1 active tblptr byte
  2208  0109B0  0EFD               	movlw	high _line1
  2209  0109B2  6EF7               	movwf	tblptrh,c
  2210  0109B4                     	endif
  2211  0109B4                     	if	1	;There are 3 active tblptr bytes
  2212  0109B4  0E00               	movlw	low (_line1 shr (0+16))
  2213  0109B6  6EF8               	movwf	tblptru,c
  2214  0109B8                     	endif
  2215  0109B8  0008               	tblrd		*
  2216  0109BA  CFF5 F026          	movff	tablat,lcd_string@lcdline
  2217  0109BE  EC78  F085         	call	_lcd_string	;wreg free
  2218                           
  2219                           ;main.c: 83: venflags.inscoin = 0;
  2220  0109C2  942F               	bcf	_venflags,2,c
  2221  0109C4                     l874:
  2222                           
  2223                           ;main.c: 84: }
  2224                           ;main.c: 85: if(venflags.initialrun == 1)
  2225  0109C4  AA2F               	btfss	_venflags,5,c
  2226  0109C6  D007               	goto	l875
  2227                           
  2228                           ;main.c: 86: {
  2229                           ;main.c: 87: credit_add(0x00);
  2230  0109C8  0E00               	movlw	0
  2231  0109CA  EC30  F089         	call	_credit_add
  2232                           
  2233                           ;main.c: 88: credit_subtract(0x00);
  2234  0109CE  0E00               	movlw	0
  2235  0109D0  EC88  F089         	call	_credit_subtract
  2236                           
  2237                           ;main.c: 89: venflags.initialrun = 0;
  2238  0109D4  9A2F               	bcf	_venflags,5,c
  2239  0109D6                     l875:
  2240                           
  2241                           ;main.c: 91: }
  2242                           ;main.c: 92: if(venflags.credisplay == 1)
  2243  0109D6  B82F               	btfsc	_venflags,4,c
  2244                           
  2245                           ;main.c: 93: {
  2246                           ;main.c: 94: displ_credit();
  2247  0109D8  EC60  F08B         	call	_displ_credit	;wreg free
  2248                           
  2249                           ;main.c: 95: }
  2250                           ;main.c: 97: if(PIR4bits.TMR3IF)
  2251  0109DC  010E               	movlb	14	; () banked
  2252  0109DE  A5CE               	btfss	206,2,b	;volatile
  2253  0109E0  D7D1               	goto	l871
  2254                           
  2255                           ; BSR set to: 14
  2256                           ;main.c: 98: {
  2257                           ;main.c: 99: credit = mdb_poll();
  2258  0109E2  EC92  F080         	call	_mdb_poll	;wreg free
  2259  0109E6  6E3A               	movwf	_credit,c	;volatile
  2260                           
  2261                           ;main.c: 100: if(credit != 0x00)
  2262  0109E8  503A               	movf	_credit,w,c	;volatile
  2263  0109EA  B4D8               	btfsc	status,2,c
  2264  0109EC  D021               	goto	l878
  2265                           
  2266                           ;main.c: 101: {
  2267                           ;main.c: 102: if(mdbflags.noteerr == 1)
  2268  0109EE  B23E               	btfsc	_mdbflags,1,c
  2269  0109F0  D00D               	goto	l880
  2270  0109F2  D01A               	goto	l879
  2271  0109F4  ECC9  F088         	call	_mdb_init	;wreg free
  2272  0109F8  D003               	goto	l886
  2273  0109FA                     l883:
  2274                           
  2275                           ;main.c: 113: if(mdbflags.vending)
  2276  0109FA  A83E               	btfss	_mdbflags,4,c
  2277                           
  2278                           ;main.c: 117: else
  2279                           ;main.c: 118: {
  2280                           ;main.c: 119: mdb_init();
  2281                           
  2282                           ;main.c: 116: }
  2283                           
  2284                           ;main.c: 114: {
  2285                           ;main.c: 115: credit = 0;
  2286  0109FC  ECC9  F088         	call	_mdb_init	;wreg free
  2287  010A00                     l886:
  2288                           
  2289                           ;main.c: 127: credit = 0;
  2290                           
  2291                           ;main.c: 126: case 0x0C : mdbflags.noteerr == 0;
  2292                           
  2293                           ;main.c: 125: break;
  2294                           
  2295                           ;main.c: 124: credit = 0;
  2296  010A00  0E00               	movlw	0
  2297  010A02  6E3A               	movwf	_credit,c	;volatile
  2298                           
  2299                           ;main.c: 128: break;
  2300  010A04  D7BF               	goto	l871
  2301  010A06  ECF8  F08B         	call	_displ_noteer	;wreg free
  2302                           
  2303                           ;main.c: 130: }
  2304  010A0A  D7BC               	goto	l871
  2305  010A0C                     l880:
  2306  010A0C  503A               	movf	_credit,w,c	;volatile
  2307                           
  2308                           ; Switch size 1, requested type "space"
  2309                           ; Number of cases is 4, Range of values is 6 to 16
  2310                           ; switch strategies available:
  2311                           ; Name         Instructions Cycles
  2312                           ; simple_byte           13     7 (average)
  2313                           ;	Chosen strategy is simple_byte
  2314  010A0E  0A06               	xorlw	6	; case 6
  2315  010A10  B4D8               	btfsc	status,2,c
  2316  010A12  D7F0               	goto	l881
  2317  010A14  0A0F               	xorlw	15	; case 9
  2318  010A16  B4D8               	btfsc	status,2,c
  2319  010A18  D7F0               	goto	l883
  2320  010A1A  0A05               	xorlw	5	; case 12
  2321  010A1C  B4D8               	btfsc	status,2,c
  2322  010A1E  D7F0               	goto	l886
  2323  010A20  0A1C               	xorlw	28	; case 16
  2324  010A22  B4D8               	btfsc	status,2,c
  2325  010A24  D7ED               	goto	l886
  2326  010A26  D7EF               	goto	l888
  2327  010A28                     l879:
  2328                           
  2329                           ;main.c: 132: else
  2330                           ;main.c: 133: {
  2331                           ;main.c: 134: credit_add(credit);
  2332  010A28  503A               	movf	_credit,w,c	;volatile
  2333  010A2A  EC30  F089         	call	_credit_add
  2334                           
  2335                           ;main.c: 135: }
  2336                           ;main.c: 136: }
  2337  010A2E  D7AA               	goto	l871
  2338  010A30                     l878:
  2339                           
  2340                           ;main.c: 137: else
  2341                           ;main.c: 138: {
  2342                           ;main.c: 139: if(mdbflags.noteerr == 1)
  2343  010A30  A23E               	btfss	_mdbflags,1,c
  2344  010A32  D7A8               	goto	l871
  2345                           
  2346                           ;main.c: 140: {
  2347                           ;main.c: 141: displ_noteer();
  2348  010A34  ECF8  F08B         	call	_displ_noteer	;wreg free
  2349  010A38  D7A5               	goto	l871
  2350  010A3A                     __end_of_main:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           tblptrh	equ	0xFF7
  2354                           tblptrl	equ	0xFF6
  2355                           tablat	equ	0xFF5
  2356                           postinc0	equ	0xFEE
  2357                           wreg	equ	0xFE8
  2358                           status	equ	0xFD8
  2359                           
  2360 ;; *************** function _vend_init *****************
  2361 ;; Defined at:
  2362 ;;		line 28 in file "vend.c"
  2363 ;; Parameters:    Size  Location     Type
  2364 ;;		None
  2365 ;; Auto vars:     Size  Location     Type
  2366 ;;		None
  2367 ;; Return value:  Size  Location     Type
  2368 ;;                  1    wreg      void 
  2369 ;; Registers used:
  2370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2371 ;; Tracked objects:
  2372 ;;		On entry : 0/0
  2373 ;;		On exit  : 0/0
  2374 ;;		Unchanged: 0/0
  2375 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;Total ram usage:        0 bytes
  2381 ;; Hardware stack levels used:    1
  2382 ;; Hardware stack levels required when called:    8
  2383 ;; This function calls:
  2384 ;;		_DAC1_SetOutput
  2385 ;;		_DATAEE_ReadByte
  2386 ;;		_Init_vendmem
  2387 ;;		_cctalk_init
  2388 ;;		_credit_check
  2389 ;;		_lcd_string
  2390 ;;		_mdb_init
  2391 ;; This function is called by:
  2392 ;;		_main
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text1
  2397  010D92                     __ptext1:
  2398                           	opt stack 0
  2399  010D92                     _vend_init:
  2400                           	opt stack 22
  2401                           
  2402                           ;vend.c: 31: Init_vendmem();
  2403                           
  2404                           ;incstack = 0
  2405  010D92  EC10  F087         	call	_Init_vendmem	;wreg free
  2406                           
  2407                           ;vend.c: 33: sensorval = DATAEE_ReadByte(sensval);
  2408  010D96  0E5D               	movlw	low _sensval
  2409  010D98  6EF6               	movwf	tblptrl,c
  2410  010D9A                     	if	1	;There is more than 1 active tblptr byte
  2411  010D9A  0EFD               	movlw	high _sensval
  2412  010D9C  6EF7               	movwf	tblptrh,c
  2413  010D9E                     	endif
  2414  010D9E                     	if	1	;There are 3 active tblptr bytes
  2415  010D9E  0E00               	movlw	low (_sensval shr (0+16))
  2416  010DA0  6EF8               	movwf	tblptru,c
  2417  010DA2                     	endif
  2418  010DA2  0009               	tblrd		*+
  2419  010DA4  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  2420  010DA8  000A               	tblrd		*-
  2421  010DAA  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  2422  010DAE  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  2423  010DB2  6E36               	movwf	_sensorval,c	;volatile
  2424                           
  2425                           ;vend.c: 34: DAC1_SetOutput(sensorval);
  2426  010DB4  5036               	movf	_sensorval,w,c	;volatile
  2427  010DB6  EC53  F08D         	call	_DAC1_SetOutput
  2428                           
  2429                           ;vend.c: 36: lcd_string(inithop, line1);
  2430  010DBA  0E59               	movlw	low _inithop
  2431  010DBC  6E24               	movwf	lcd_string@lcdstring,c
  2432  010DBE  0EFF               	movlw	high _inithop
  2433  010DC0  6E25               	movwf	lcd_string@lcdstring+1,c
  2434  010DC2  0E97               	movlw	low _line1
  2435  010DC4  6EF6               	movwf	tblptrl,c
  2436  010DC6                     	if	1	;There is more than 1 active tblptr byte
  2437  010DC6  0EFD               	movlw	high _line1
  2438  010DC8  6EF7               	movwf	tblptrh,c
  2439  010DCA                     	endif
  2440  010DCA                     	if	1	;There are 3 active tblptr bytes
  2441  010DCA  0E00               	movlw	low (_line1 shr (0+16))
  2442  010DCC  6EF8               	movwf	tblptru,c
  2443  010DCE                     	endif
  2444  010DCE  0008               	tblrd		*
  2445  010DD0  CFF5 F026          	movff	tablat,lcd_string@lcdline
  2446  010DD4  EC78  F085         	call	_lcd_string	;wreg free
  2447                           
  2448                           ;vend.c: 37: cctalk_init();
  2449  010DD8  EC02  F08A         	call	_cctalk_init	;wreg free
  2450                           
  2451                           ;vend.c: 39: lcd_string(initnote, line1);
  2452  010DDC  0E18               	movlw	low _initnote
  2453  010DDE  6E24               	movwf	lcd_string@lcdstring,c
  2454  010DE0  0EFF               	movlw	high _initnote
  2455  010DE2  6E25               	movwf	lcd_string@lcdstring+1,c
  2456  010DE4  0E97               	movlw	low _line1
  2457  010DE6  6EF6               	movwf	tblptrl,c
  2458  010DE8                     	if	1	;There is more than 1 active tblptr byte
  2459  010DE8  0EFD               	movlw	high _line1
  2460  010DEA  6EF7               	movwf	tblptrh,c
  2461  010DEC                     	endif
  2462  010DEC                     	if	1	;There are 3 active tblptr bytes
  2463  010DEC  0E00               	movlw	low (_line1 shr (0+16))
  2464  010DEE  6EF8               	movwf	tblptru,c
  2465  010DF0                     	endif
  2466  010DF0  0008               	tblrd		*
  2467  010DF2  CFF5 F026          	movff	tablat,lcd_string@lcdline
  2468  010DF6  EC78  F085         	call	_lcd_string	;wreg free
  2469                           
  2470                           ;vend.c: 40: mdb_init();
  2471  010DFA  ECC9  F088         	call	_mdb_init	;wreg free
  2472                           
  2473                           ;vend.c: 42: venflags.service = 0;
  2474  010DFE  9E2F               	bcf	_venflags,7,c
  2475                           
  2476                           ;vend.c: 43: venflags.initialrun = 1;
  2477  010E00  8A2F               	bsf	_venflags,5,c
  2478                           
  2479                           ;vend.c: 44: if(credit_check() == 0)
  2480  010E02  EC76  F08C         	call	_credit_check	;wreg free
  2481  010E06  0900               	iorlw	0
  2482  010E08  A4D8               	btfss	status,2,c
  2483  010E0A  D005               	goto	l1767
  2484                           
  2485                           ;vend.c: 45: {
  2486                           ;vend.c: 46: venflags.iscredit = 0;
  2487  010E0C  902F               	bcf	_venflags,0,c
  2488                           
  2489                           ;vend.c: 47: venflags.inscoin = 1;
  2490  010E0E  842F               	bsf	_venflags,2,c
  2491                           
  2492                           ;vend.c: 48: venflags.credisplay = 0;
  2493  010E10  982F               	bcf	_venflags,4,c
  2494                           
  2495                           ;vend.c: 49: mdbflags.noteerr = 0;
  2496  010E12  923E               	bcf	_mdbflags,1,c
  2497                           
  2498                           ;vend.c: 50: }
  2499  010E14  0012               	return	
  2500  010E16                     l1767:
  2501                           
  2502                           ;vend.c: 51: else
  2503                           ;vend.c: 52: {
  2504                           ;vend.c: 53: venflags.iscredit = 1;
  2505  010E16  802F               	bsf	_venflags,0,c
  2506                           
  2507                           ;vend.c: 54: venflags.inscoin = 0;
  2508  010E18  942F               	bcf	_venflags,2,c
  2509                           
  2510                           ;vend.c: 55: venflags.credisplay = 1;
  2511  010E1A  882F               	bsf	_venflags,4,c
  2512                           
  2513                           ;vend.c: 56: mdbflags.noteerr = 0;
  2514  010E1C  923E               	bcf	_mdbflags,1,c
  2515  010E1E  0012               	return	
  2516  010E20                     __end_of_vend_init:
  2517                           	opt stack 0
  2518                           tblptru	equ	0xFF8
  2519                           tblptrh	equ	0xFF7
  2520                           tblptrl	equ	0xFF6
  2521                           tablat	equ	0xFF5
  2522                           postinc0	equ	0xFEE
  2523                           wreg	equ	0xFE8
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function _mdb_init *****************
  2527 ;; Defined at:
  2528 ;;		line 21 in file "mdb.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;		None
  2531 ;; Auto vars:     Size  Location     Type
  2532 ;;  i               1   28[COMRAM] unsigned char 
  2533 ;; Return value:  Size  Location     Type
  2534 ;;                  1    wreg      void 
  2535 ;; Registers used:
  2536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2537 ;; Tracked objects:
  2538 ;;		On entry : 0/0
  2539 ;;		On exit  : 0/0
  2540 ;;		Unchanged: 0/0
  2541 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2543 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;Total ram usage:        3 bytes
  2547 ;; Hardware stack levels used:    1
  2548 ;; Hardware stack levels required when called:    6
  2549 ;; This function calls:
  2550 ;;		_DATAEE_ReadByte
  2551 ;;		_eusartmdb_Initialize
  2552 ;;		_mdb_comm
  2553 ;;		_mdb_noten
  2554 ;;		_mdb_reset
  2555 ;;		_mdb_security
  2556 ;; This function is called by:
  2557 ;;		_main
  2558 ;;		_vend_init
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text2
  2563  011192                     __ptext2:
  2564                           	opt stack 0
  2565  011192                     _mdb_init:
  2566                           	opt stack 23
  2567                           
  2568                           ;mdb.c: 23: _delay((unsigned long)((250)*(12000000/4000.0)));
  2569                           
  2570                           ;incstack = 0
  2571  011192  0E04               	movlw	4
  2572  011194  6E26               	movwf	(??_mdb_init+1)& (0+255),c
  2573  011196  0ECF               	movlw	207
  2574  011198  6E25               	movwf	??_mdb_init& (0+255),c
  2575  01119A  0E02               	movlw	2
  2576  01119C                     u2487:
  2577  01119C  2EE8               	decfsz	wreg,f,c
  2578  01119E  D7FE               	bra	u2487
  2579  0111A0  2E25               	decfsz	??_mdb_init& (0+255),f,c
  2580  0111A2  D7FC               	bra	u2487
  2581  0111A4  2E26               	decfsz	(??_mdb_init+1)& (0+255),f,c
  2582  0111A6  D7FA               	bra	u2487
  2583                           
  2584                           ;mdb.c: 24: noteen_byte = DATAEE_ReadByte(notebits);
  2585  0111A8  0E5F               	movlw	low _notebits
  2586  0111AA  6EF6               	movwf	tblptrl,c
  2587  0111AC                     	if	1	;There is more than 1 active tblptr byte
  2588  0111AC  0EFD               	movlw	high _notebits
  2589  0111AE  6EF7               	movwf	tblptrh,c
  2590  0111B0                     	endif
  2591  0111B0                     	if	1	;There are 3 active tblptr bytes
  2592  0111B0  0E00               	movlw	low (_notebits shr (0+16))
  2593  0111B2  6EF8               	movwf	tblptru,c
  2594  0111B4                     	endif
  2595  0111B4  0009               	tblrd		*+
  2596  0111B6  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  2597  0111BA  000A               	tblrd		*-
  2598  0111BC  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  2599  0111C0  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  2600  0111C4  6E3C               	movwf	_noteen_byte,c	;volatile
  2601                           
  2602                           ;mdb.c: 25: ((uint8_t*) &noteen)[0] = noteen_byte;
  2603  0111C6  C03C  F03D         	movff	_noteen_byte,_noteen	;volatile
  2604                           
  2605                           ;mdb.c: 26: eusartmdb_Initialize();
  2606  0111CA  ECF4  F08C         	call	_eusartmdb_Initialize	;wreg free
  2607                           
  2608                           ;mdb.c: 27: mdbflags.noteerr = 0;
  2609  0111CE  923E               	bcf	_mdbflags,1,c
  2610                           
  2611                           ;mdb.c: 28: mdbflags.isdata = 0;
  2612  0111D0  903E               	bcf	_mdbflags,0,c
  2613                           
  2614                           ;mdb.c: 29: mdb_reset();
  2615  0111D2  EC57  F087         	call	_mdb_reset	;wreg free
  2616                           
  2617                           ;mdb.c: 30: mdb_noten();
  2618  0111D6  EC84  F08A         	call	_mdb_noten	;wreg free
  2619                           
  2620                           ;mdb.c: 31: mdb_security();
  2621  0111DA  EC87  F08C         	call	_mdb_security	;wreg free
  2622                           
  2623                           ;mdb.c: 32: uint8_t i = mdb_comm(note_poll, 0x00);
  2624  0111DE  0E00               	movlw	0
  2625  0111E0  6E1F               	movwf	mdb_comm@mcount,c
  2626  0111E2  0E90               	movlw	low _note_poll
  2627  0111E4  6EF6               	movwf	tblptrl,c
  2628  0111E6                     	if	1	;There is more than 1 active tblptr byte
  2629  0111E6  0EFD               	movlw	high _note_poll
  2630  0111E8  6EF7               	movwf	tblptrh,c
  2631  0111EA                     	endif
  2632  0111EA                     	if	1	;There are 3 active tblptr bytes
  2633  0111EA  0E00               	movlw	low (_note_poll shr (0+16))
  2634  0111EC  6EF8               	movwf	tblptru,c
  2635  0111EE                     	endif
  2636  0111EE  0008               	tblrd		*
  2637  0111F0  50F5               	movf	tablat,w,c
  2638  0111F2  EC24  F082         	call	_mdb_comm
  2639  0111F6  6E27               	movwf	mdb_init@i,c
  2640  0111F8  0012               	return		;funcret
  2641  0111FA                     __end_of_mdb_init:
  2642                           	opt stack 0
  2643                           tblptru	equ	0xFF8
  2644                           tblptrh	equ	0xFF7
  2645                           tblptrl	equ	0xFF6
  2646                           tablat	equ	0xFF5
  2647                           postinc0	equ	0xFEE
  2648                           wreg	equ	0xFE8
  2649                           status	equ	0xFD8
  2650                           
  2651 ;; *************** function _mdb_security *****************
  2652 ;; Defined at:
  2653 ;;		line 151 in file "mdb.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;		None
  2656 ;; Auto vars:     Size  Location     Type
  2657 ;;		None
  2658 ;; Return value:  Size  Location     Type
  2659 ;;                  1    wreg      void 
  2660 ;; Registers used:
  2661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2662 ;; Tracked objects:
  2663 ;;		On entry : 0/0
  2664 ;;		On exit  : 0/0
  2665 ;;		Unchanged: 0/0
  2666 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;Total ram usage:        0 bytes
  2672 ;; Hardware stack levels used:    1
  2673 ;; Hardware stack levels required when called:    5
  2674 ;; This function calls:
  2675 ;;		_init_mdbdata
  2676 ;;		_mdb_comm
  2677 ;; This function is called by:
  2678 ;;		_mdb_init
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681                           
  2682                           	psect	text3
  2683  01190E                     __ptext3:
  2684                           	opt stack 0
  2685  01190E                     _mdb_security:
  2686                           	opt stack 23
  2687                           
  2688                           ;mdb.c: 153: init_mdbdata(0x00);
  2689                           
  2690                           ;incstack = 0
  2691  01190E  0E00               	movlw	0
  2692  011910  EC52  F08C         	call	_init_mdbdata
  2693                           
  2694                           ;mdb.c: 154: mdb_comm(note_security, 0x01);
  2695  011914  0E01               	movlw	1
  2696  011916  6E1F               	movwf	mdb_comm@mcount,c
  2697  011918  0E91               	movlw	low _note_security
  2698  01191A  6EF6               	movwf	tblptrl,c
  2699  01191C                     	if	1	;There is more than 1 active tblptr byte
  2700  01191C  0EFD               	movlw	high _note_security
  2701  01191E  6EF7               	movwf	tblptrh,c
  2702  011920                     	endif
  2703  011920                     	if	1	;There are 3 active tblptr bytes
  2704  011920  0E00               	movlw	low (_note_security shr (0+16))
  2705  011922  6EF8               	movwf	tblptru,c
  2706  011924                     	endif
  2707  011924  0008               	tblrd		*
  2708  011926  50F5               	movf	tablat,w,c
  2709  011928  EC24  F082         	call	_mdb_comm
  2710  01192C  0012               	return		;funcret
  2711  01192E                     __end_of_mdb_security:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           status	equ	0xFD8
  2720                           
  2721 ;; *************** function _mdb_reset *****************
  2722 ;; Defined at:
  2723 ;;		line 36 in file "mdb.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;  i               1   24[COMRAM] unsigned char 
  2728 ;;  i               1   25[COMRAM] unsigned char 
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      unsigned char 
  2731 ;; Registers used:
  2732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;Total ram usage:        3 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    5
  2745 ;; This function calls:
  2746 ;;		_mdb_comm
  2747 ;; This function is called by:
  2748 ;;		_mdb_init
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text4
  2753  010EAE                     __ptext4:
  2754                           	opt stack 0
  2755  010EAE                     _mdb_reset:
  2756                           	opt stack 23
  2757                           
  2758                           ;mdb.c: 41: mdbflags.timeout = 1;
  2759                           
  2760                           ;incstack = 0
  2761  010EAE  863E               	bsf	_mdbflags,3,c
  2762                           
  2763                           ;mdb.c: 42: while(mdbflags.timeout)
  2764  010EB0  D00D               	goto	l2363
  2765  010EB2                     
  2766                           ;mdb.c: 43: {
  2767                           ;mdb.c: 44: uint8_t i = mdb_comm(note_reset, 0x00);
  2768  010EB2  0E00               	movlw	0
  2769  010EB4  6E1F               	movwf	mdb_comm@mcount,c
  2770  010EB6  0E93               	movlw	low _note_reset
  2771  010EB8  6EF6               	movwf	tblptrl,c
  2772  010EBA                     	if	1	;There is more than 1 active tblptr byte
  2773  010EBA  0EFD               	movlw	high _note_reset
  2774  010EBC  6EF7               	movwf	tblptrh,c
  2775  010EBE                     	endif
  2776  010EBE                     	if	1	;There are 3 active tblptr bytes
  2777  010EBE  0E00               	movlw	low (_note_reset shr (0+16))
  2778  010EC0  6EF8               	movwf	tblptru,c
  2779  010EC2                     	endif
  2780  010EC2  0008               	tblrd		*
  2781  010EC4  50F5               	movf	tablat,w,c
  2782  010EC6  EC24  F082         	call	_mdb_comm
  2783  010ECA  6E23               	movwf	mdb_reset@i,c
  2784  010ECC                     l2363:
  2785  010ECC  B63E               	btfsc	_mdbflags,3,c
  2786  010ECE  D7F1               	goto	l2364
  2787  010ED0  F000               	nop		;# 
  2788                           
  2789                           ;mdb.c: 47: uint8_t i = mdb_comm(note_poll, 0x00);
  2790  010ED2  0E00               	movlw	0
  2791  010ED4  6E1F               	movwf	mdb_comm@mcount,c
  2792  010ED6  0E90               	movlw	low _note_poll
  2793  010ED8  6EF6               	movwf	tblptrl,c
  2794  010EDA                     	if	1	;There is more than 1 active tblptr byte
  2795  010EDA  0EFD               	movlw	high _note_poll
  2796  010EDC  6EF7               	movwf	tblptrh,c
  2797  010EDE                     	endif
  2798  010EDE                     	if	1	;There are 3 active tblptr bytes
  2799  010EDE  0E00               	movlw	low (_note_poll shr (0+16))
  2800  010EE0  6EF8               	movwf	tblptru,c
  2801  010EE2                     	endif
  2802  010EE2  0008               	tblrd		*
  2803  010EE4  50F5               	movf	tablat,w,c
  2804  010EE6  EC24  F082         	call	_mdb_comm
  2805  010EEA  6E24               	movwf	mdb_reset@i_3182,c
  2806                           
  2807                           ;mdb.c: 48: if(mdbdata[--i] == just_reset)
  2808  010EEC  0624               	decf	mdb_reset@i_3182,f,c
  2809  010EEE  5024               	movf	mdb_reset@i_3182,w,c
  2810  010EF0  0D01               	mullw	1
  2811  010EF2  0E60               	movlw	low _mdbdata
  2812  010EF4  24F3               	addwf	prodl,w,c
  2813  010EF6  6ED9               	movwf	fsr2l,c
  2814  010EF8  0E00               	movlw	high _mdbdata
  2815  010EFA  20F4               	addwfc	prodh,w,c
  2816  010EFC  6EDA               	movwf	fsr2h,c
  2817  010EFE  50DF               	movf	indf2,w,c
  2818  010F00  6E22               	movwf	??_mdb_reset& (0+255),c
  2819  010F02  0E86               	movlw	low _just_reset
  2820  010F04  6EF6               	movwf	tblptrl,c
  2821  010F06                     	if	1	;There is more than 1 active tblptr byte
  2822  010F06  0EFD               	movlw	high _just_reset
  2823  010F08  6EF7               	movwf	tblptrh,c
  2824  010F0A                     	endif
  2825  010F0A                     	if	1	;There are 3 active tblptr bytes
  2826  010F0A  0E00               	movlw	low (_just_reset shr (0+16))
  2827  010F0C  6EF8               	movwf	tblptru,c
  2828  010F0E                     	endif
  2829  010F0E  0008               	tblrd		*
  2830  010F10  50F5               	movf	tablat,w,c
  2831  010F12  1822               	xorwf	??_mdb_reset,w,c
  2832  010F14  A4D8               	btfss	status,2,c
  2833  010F16  0012               	return	
  2834                           
  2835                           ;mdb.c: 49: {
  2836                           ;mdb.c: 51: i = mdb_comm(note_poll, 0x00);
  2837  010F18  0E00               	movlw	0
  2838  010F1A  6E1F               	movwf	mdb_comm@mcount,c
  2839  010F1C  0E90               	movlw	low _note_poll
  2840  010F1E  6EF6               	movwf	tblptrl,c
  2841  010F20                     	if	1	;There is more than 1 active tblptr byte
  2842  010F20  0EFD               	movlw	high _note_poll
  2843  010F22  6EF7               	movwf	tblptrh,c
  2844  010F24                     	endif
  2845  010F24                     	if	1	;There are 3 active tblptr bytes
  2846  010F24  0E00               	movlw	low (_note_poll shr (0+16))
  2847  010F26  6EF8               	movwf	tblptru,c
  2848  010F28                     	endif
  2849  010F28  0008               	tblrd		*
  2850  010F2A  50F5               	movf	tablat,w,c
  2851  010F2C  EC24  F082         	call	_mdb_comm
  2852  010F30  6E24               	movwf	mdb_reset@i_3182,c
  2853  010F32  0012               	return	
  2854  010F34                     __end_of_mdb_reset:
  2855                           	opt stack 0
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           indf2	equ	0xFDF
  2865                           fsr2h	equ	0xFDA
  2866                           fsr2l	equ	0xFD9
  2867                           status	equ	0xFD8
  2868                           
  2869 ;; *************** function _mdb_noten *****************
  2870 ;; Defined at:
  2871 ;;		line 135 in file "mdb.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;		None
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  1    wreg      void 
  2878 ;; Registers used:
  2879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2889 ;;Total ram usage:        0 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    5
  2892 ;; This function calls:
  2893 ;;		_init_mdbdata
  2894 ;;		_mdb_comm
  2895 ;; This function is called by:
  2896 ;;		_mdb_init
  2897 ;;		_note_disable
  2898 ;; This function uses a non-reentrant model
  2899 ;;
  2900                           
  2901                           	psect	text5
  2902  011508                     __ptext5:
  2903                           	opt stack 0
  2904  011508                     _mdb_noten:
  2905                           	opt stack 23
  2906                           
  2907                           ;mdb.c: 138: init_mdbdata(0x00);
  2908                           
  2909                           ;incstack = 0
  2910  011508  0E00               	movlw	0
  2911  01150A  EC52  F08C         	call	_init_mdbdata
  2912                           
  2913                           ;mdb.c: 140: mcount = 3;
  2914  01150E  0E03               	movlw	3
  2915  011510  6E41               	movwf	_mcount,c
  2916                           
  2917                           ;mdb.c: 142: mdbdata[0] = 0x00;
  2918  011512  0E00               	movlw	0
  2919  011514  0100               	movlb	0	; () banked
  2920  011516  6F60               	movwf	_mdbdata& (0+255),b
  2921                           
  2922                           ; BSR set to: 0
  2923                           ;mdb.c: 143: mdbdata[1] = 0x00;
  2924  011518  0E00               	movlw	0
  2925  01151A  6F61               	movwf	(_mdbdata+1)& (0+255),b
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;mdb.c: 145: mdbdata[2] = noteen_byte;
  2929  01151C  C03C  F062         	movff	_noteen_byte,_mdbdata+2	;volatile
  2930                           
  2931                           ; BSR set to: 0
  2932                           ;mdb.c: 147: mdbdata[3] = 0x00;
  2933  011520  0E00               	movlw	0
  2934  011522  6F63               	movwf	(_mdbdata+3)& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;mdb.c: 148: mcount = mdb_comm(note_type, mcount);
  2938  011524  C041  F01F         	movff	_mcount,mdb_comm@mcount
  2939  011528  0E8F               	movlw	low _note_type
  2940  01152A  6EF6               	movwf	tblptrl,c
  2941  01152C                     	if	1	;There is more than 1 active tblptr byte
  2942  01152C  0EFD               	movlw	high _note_type
  2943  01152E  6EF7               	movwf	tblptrh,c
  2944  011530                     	endif
  2945  011530                     	if	1	;There are 3 active tblptr bytes
  2946  011530  0E00               	movlw	low (_note_type shr (0+16))
  2947  011532  6EF8               	movwf	tblptru,c
  2948  011534                     	endif
  2949  011534  0008               	tblrd		*
  2950  011536  50F5               	movf	tablat,w,c
  2951  011538  EC24  F082         	call	_mdb_comm
  2952  01153C  6E41               	movwf	_mcount,c
  2953                           
  2954                           ;mdb.c: 149: mdbflags.vending = 0;
  2955  01153E  983E               	bcf	_mdbflags,4,c
  2956  011540  0012               	return		;funcret
  2957  011542                     __end_of_mdb_noten:
  2958                           	opt stack 0
  2959                           tblptru	equ	0xFF8
  2960                           tblptrh	equ	0xFF7
  2961                           tblptrl	equ	0xFF6
  2962                           tablat	equ	0xFF5
  2963                           prodh	equ	0xFF4
  2964                           prodl	equ	0xFF3
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           indf2	equ	0xFDF
  2968                           fsr2h	equ	0xFDA
  2969                           fsr2l	equ	0xFD9
  2970                           status	equ	0xFD8
  2971                           
  2972 ;; *************** function _cctalk_init *****************
  2973 ;; Defined at:
  2974 ;;		line 9 in file "cctalk.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;		None
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  1    wreg      void 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  2988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;Total ram usage:        1 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    6
  2995 ;; This function calls:
  2996 ;;		_cctalk_adpoll
  2997 ;;		_cctalk_on
  2998 ;;		_cctalk_pinenter
  2999 ;;		_cctalk_poll
  3000 ;;		_eusartmdb_Initialize
  3001 ;;		_mdb_on
  3002 ;; This function is called by:
  3003 ;;		_vend_init
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text6
  3008  011404                     __ptext6:
  3009                           	opt stack 0
  3010  011404                     _cctalk_init:
  3011                           	opt stack 23
  3012                           
  3013                           ;cctalk.c: 11: cctalk_on();
  3014                           
  3015                           ;incstack = 0
  3016  011404  EC63  F08D         	call	_cctalk_on	;wreg free
  3017                           
  3018                           ;cctalk.c: 12: cctflags.timeout = 1;
  3019  011408  863B               	bsf	_cctflags,3,c
  3020                           
  3021                           ;cctalk.c: 13: cctalk_adpoll();
  3022  01140A  EC97  F08C         	call	_cctalk_adpoll	;wreg free
  3023                           
  3024                           ;cctalk.c: 14: cctalk_pinenter();
  3025  01140E  EC46  F08B         	call	_cctalk_pinenter	;wreg free
  3026                           
  3027                           ;cctalk.c: 15: count = 0;
  3028  011412  0E00               	movlw	0
  3029  011414  6E4C               	movwf	_count,c
  3030                           
  3031                           ;cctalk.c: 16: while(cctflags.timeout && count < 0x03)
  3032  011416  D00B               	goto	l2853
  3033  011418                     
  3034                           ;cctalk.c: 17: {
  3035                           ;cctalk.c: 18: _delay((unsigned long)((50)*(12000000/4000.0)));
  3036  011418  0EC3               	movlw	195
  3037  01141A  6E25               	movwf	??_cctalk_init& (0+255),c
  3038  01141C  0ECD               	movlw	205
  3039  01141E                     u2497:
  3040  01141E  2EE8               	decfsz	wreg,f,c
  3041  011420  D7FE               	bra	u2497
  3042  011422  2E25               	decfsz	??_cctalk_init& (0+255),f,c
  3043  011424  D7FC               	bra	u2497
  3044  011426  F000               	nop	
  3045                           
  3046                           ;cctalk.c: 19: cctalk_poll();
  3047  011428  EC10  F08C         	call	_cctalk_poll	;wreg free
  3048                           
  3049                           ;cctalk.c: 20: count++;
  3050  01142C  2A4C               	incf	_count,f,c
  3051  01142E                     l2853:
  3052  01142E  A63B               	btfss	_cctflags,3,c
  3053  011430  D005               	goto	u1710
  3054  011432  504C               	movf	_count,w,c
  3055  011434  0A80               	xorlw	128
  3056  011436  0F7D               	addlw	-131
  3057  011438  A0D8               	btfss	status,0,c
  3058  01143A  D7EE               	goto	l2854
  3059  01143C                     u1710:
  3060  01143C  F000               	nop		;# 
  3061                           
  3062                           ;cctalk.c: 23: eusartmdb_Initialize();
  3063  01143E  ECF4  F08C         	call	_eusartmdb_Initialize	;wreg free
  3064                           
  3065                           ;cctalk.c: 24: mdb_on();
  3066  011442  EC6C  F08D         	call	_mdb_on	;wreg free
  3067  011446  0012               	return		;funcret
  3068  011448                     __end_of_cctalk_init:
  3069                           	opt stack 0
  3070                           tblptru	equ	0xFF8
  3071                           tblptrh	equ	0xFF7
  3072                           tblptrl	equ	0xFF6
  3073                           tablat	equ	0xFF5
  3074                           prodh	equ	0xFF4
  3075                           prodl	equ	0xFF3
  3076                           postinc0	equ	0xFEE
  3077                           wreg	equ	0xFE8
  3078                           indf2	equ	0xFDF
  3079                           fsr2h	equ	0xFDA
  3080                           fsr2l	equ	0xFD9
  3081                           status	equ	0xFD8
  3082                           
  3083 ;; *************** function _eusartmdb_Initialize *****************
  3084 ;; Defined at:
  3085 ;;		line 55 in file "eusart_mdb.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;		None
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, status,2
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;Total ram usage:        0 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    2
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_mdb_init
  3110 ;;		_cctalk_init
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           	psect	text7
  3115  0119E8                     __ptext7:
  3116                           	opt stack 0
  3117  0119E8                     _eusartmdb_Initialize:
  3118                           	opt stack 26
  3119                           
  3120                           ;eusart_mdb.c: 60: BAUD1CON = 0x08;
  3121                           
  3122                           ;incstack = 0
  3123  0119E8  0E08               	movlw	8
  3124  0119EA  6E9F               	movwf	3999,c	;volatile
  3125                           
  3126                           ;eusart_mdb.c: 63: RC1STA = 0xD0;
  3127  0119EC  0ED0               	movlw	208
  3128  0119EE  6E9D               	movwf	3997,c	;volatile
  3129                           
  3130                           ;eusart_mdb.c: 66: TX1STA = 0xEC;
  3131  0119F0  0EEC               	movlw	236
  3132  0119F2  6E9E               	movwf	3998,c	;volatile
  3133                           
  3134                           ;eusart_mdb.c: 69: SP1BRGL = 0x38;
  3135  0119F4  0E38               	movlw	56
  3136  0119F6  6E9B               	movwf	3995,c	;volatile
  3137                           
  3138                           ;eusart_mdb.c: 72: SP1BRGH = 0x01;
  3139  0119F8  0E01               	movlw	1
  3140  0119FA  6E9C               	movwf	3996,c	;volatile
  3141  0119FC  0012               	return		;funcret
  3142  0119FE                     __end_of_eusartmdb_Initialize:
  3143                           	opt stack 0
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           indf2	equ	0xFDF
  3153                           fsr2h	equ	0xFDA
  3154                           fsr2l	equ	0xFD9
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function _cctalk_poll *****************
  3158 ;; Defined at:
  3159 ;;		line 38 in file "cctalk.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;		None
  3162 ;; Auto vars:     Size  Location     Type
  3163 ;;  i               1   25[COMRAM] unsigned char 
  3164 ;; Return value:  Size  Location     Type
  3165 ;;                  1    wreg      void 
  3166 ;; Registers used:
  3167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3168 ;; Tracked objects:
  3169 ;;		On entry : 0/0
  3170 ;;		On exit  : 0/0
  3171 ;;		Unchanged: 0/0
  3172 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3177 ;;Total ram usage:        1 bytes
  3178 ;; Hardware stack levels used:    1
  3179 ;; Hardware stack levels required when called:    5
  3180 ;; This function calls:
  3181 ;;		_cctalk_comm
  3182 ;; This function is called by:
  3183 ;;		_cctalk_init
  3184 ;; This function uses a non-reentrant model
  3185 ;;
  3186                           
  3187                           	psect	text8
  3188  011820                     __ptext8:
  3189                           	opt stack 0
  3190  011820                     _cctalk_poll:
  3191                           	opt stack 23
  3192                           
  3193                           ;cctalk.c: 40: uint8_t i = cctalk_comm(hopadd, 0x00, cc_poll);
  3194                           
  3195                           ;incstack = 0
  3196  011820  0E00               	movlw	0
  3197  011822  6E1F               	movwf	cctalk_comm@nobytes,c
  3198  011824  0E71               	movlw	low _cc_poll
  3199  011826  6EF6               	movwf	tblptrl,c
  3200  011828                     	if	1	;There is more than 1 active tblptr byte
  3201  011828  0EFD               	movlw	high _cc_poll
  3202  01182A  6EF7               	movwf	tblptrh,c
  3203  01182C                     	endif
  3204  01182C                     	if	1	;There are 3 active tblptr bytes
  3205  01182C  0E00               	movlw	low (_cc_poll shr (0+16))
  3206  01182E  6EF8               	movwf	tblptru,c
  3207  011830                     	endif
  3208  011830  0008               	tblrd		*
  3209  011832  CFF5 F020          	movff	tablat,cctalk_comm@command
  3210  011836  0E7F               	movlw	low _hopadd
  3211  011838  6EF6               	movwf	tblptrl,c
  3212  01183A                     	if	1	;There is more than 1 active tblptr byte
  3213  01183A  0EFD               	movlw	high _hopadd
  3214  01183C  6EF7               	movwf	tblptrh,c
  3215  01183E                     	endif
  3216  01183E                     	if	1	;There are 3 active tblptr bytes
  3217  01183E  0E00               	movlw	low (_hopadd shr (0+16))
  3218  011840  6EF8               	movwf	tblptru,c
  3219  011842                     	endif
  3220  011842  0008               	tblrd		*
  3221  011844  50F5               	movf	tablat,w,c
  3222  011846  ECA6  F081         	call	_cctalk_comm
  3223  01184A  6E24               	movwf	cctalk_poll@i,c
  3224  01184C  0012               	return		;funcret
  3225  01184E                     __end_of_cctalk_poll:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           tblptrh	equ	0xFF7
  3229                           tblptrl	equ	0xFF6
  3230                           tablat	equ	0xFF5
  3231                           prodh	equ	0xFF4
  3232                           prodl	equ	0xFF3
  3233                           postinc0	equ	0xFEE
  3234                           wreg	equ	0xFE8
  3235                           indf2	equ	0xFDF
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _cctalk_pinenter *****************
  3241 ;; Defined at:
  3242 ;;		line 32 in file "cctalk.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  i               1   25[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;Total ram usage:        1 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    5
  3263 ;; This function calls:
  3264 ;;		_cctalk_comm
  3265 ;;		_init_mdbdata
  3266 ;; This function is called by:
  3267 ;;		_cctalk_init
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text9
  3272  01168C                     __ptext9:
  3273                           	opt stack 0
  3274  01168C                     _cctalk_pinenter:
  3275                           	opt stack 23
  3276                           
  3277                           ;cctalk.c: 34: init_mdbdata(0x00);
  3278                           
  3279                           ;incstack = 0
  3280  01168C  0E00               	movlw	0
  3281  01168E  EC52  F08C         	call	_init_mdbdata
  3282                           
  3283                           ;cctalk.c: 35: uint8_t i = cctalk_comm(hopadd, 0x04, cc_pin);
  3284  011692  0E04               	movlw	4
  3285  011694  6E1F               	movwf	cctalk_comm@nobytes,c
  3286  011696  0E75               	movlw	low _cc_pin
  3287  011698  6EF6               	movwf	tblptrl,c
  3288  01169A                     	if	1	;There is more than 1 active tblptr byte
  3289  01169A  0EFD               	movlw	high _cc_pin
  3290  01169C  6EF7               	movwf	tblptrh,c
  3291  01169E                     	endif
  3292  01169E                     	if	1	;There are 3 active tblptr bytes
  3293  01169E  0E00               	movlw	low (_cc_pin shr (0+16))
  3294  0116A0  6EF8               	movwf	tblptru,c
  3295  0116A2                     	endif
  3296  0116A2  0008               	tblrd		*
  3297  0116A4  CFF5 F020          	movff	tablat,cctalk_comm@command
  3298  0116A8  0E7F               	movlw	low _hopadd
  3299  0116AA  6EF6               	movwf	tblptrl,c
  3300  0116AC                     	if	1	;There is more than 1 active tblptr byte
  3301  0116AC  0EFD               	movlw	high _hopadd
  3302  0116AE  6EF7               	movwf	tblptrh,c
  3303  0116B0                     	endif
  3304  0116B0                     	if	1	;There are 3 active tblptr bytes
  3305  0116B0  0E00               	movlw	low (_hopadd shr (0+16))
  3306  0116B2  6EF8               	movwf	tblptru,c
  3307  0116B4                     	endif
  3308  0116B4  0008               	tblrd		*
  3309  0116B6  50F5               	movf	tablat,w,c
  3310  0116B8  ECA6  F081         	call	_cctalk_comm
  3311  0116BC  6E24               	movwf	cctalk_pinenter@i,c
  3312  0116BE  0012               	return		;funcret
  3313  0116C0                     __end_of_cctalk_pinenter:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           postinc0	equ	0xFEE
  3322                           wreg	equ	0xFE8
  3323                           indf2	equ	0xFDF
  3324                           fsr2h	equ	0xFDA
  3325                           fsr2l	equ	0xFD9
  3326                           status	equ	0xFD8
  3327                           
  3328 ;; *************** function _cctalk_on *****************
  3329 ;; Defined at:
  3330 ;;		line 132 in file "cctalk.c"
  3331 ;; Parameters:    Size  Location     Type
  3332 ;;		None
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;		None
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		None
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;Total ram usage:        0 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    2
  3351 ;; This function calls:
  3352 ;;		Nothing
  3353 ;; This function is called by:
  3354 ;;		_cctalk_init
  3355 ;; This function uses a non-reentrant model
  3356 ;;
  3357                           
  3358                           	psect	text10
  3359  011AC6                     __ptext10:
  3360                           	opt stack 0
  3361  011AC6                     _cctalk_on:
  3362                           	opt stack 26
  3363                           
  3364                           ;cctalk.c: 138: LATCbits.LATC0 = 0;
  3365                           
  3366                           ;incstack = 0
  3367  011AC6  9085               	bcf	3973,0,c	;volatile
  3368                           
  3369                           ;cctalk.c: 139: LATCbits.LATC1 = 1;
  3370  011AC8  8285               	bsf	3973,1,c	;volatile
  3371  011ACA  0012               	return		;funcret
  3372  011ACC                     __end_of_cctalk_on:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodh	equ	0xFF4
  3379                           prodl	equ	0xFF3
  3380                           postinc0	equ	0xFEE
  3381                           wreg	equ	0xFE8
  3382                           indf2	equ	0xFDF
  3383                           fsr2h	equ	0xFDA
  3384                           fsr2l	equ	0xFD9
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _cctalk_adpoll *****************
  3388 ;; Defined at:
  3389 ;;		line 27 in file "cctalk.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  i               1   25[COMRAM] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;                  1    wreg      void 
  3396 ;; Registers used:
  3397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;Total ram usage:        1 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    5
  3410 ;; This function calls:
  3411 ;;		_cctalk_comm
  3412 ;; This function is called by:
  3413 ;;		_cctalk_init
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416                           
  3417                           	psect	text11
  3418  01192E                     __ptext11:
  3419                           	opt stack 0
  3420  01192E                     _cctalk_adpoll:
  3421                           	opt stack 23
  3422                           
  3423                           ;cctalk.c: 29: uint8_t i = cctalk_comm(0x00, 0x00, cc_adpoll);
  3424                           
  3425                           ;incstack = 0
  3426  01192E  0E00               	movlw	0
  3427  011930  6E1F               	movwf	cctalk_comm@nobytes,c
  3428  011932  0E72               	movlw	low _cc_adpoll
  3429  011934  6EF6               	movwf	tblptrl,c
  3430  011936                     	if	1	;There is more than 1 active tblptr byte
  3431  011936  0EFD               	movlw	high _cc_adpoll
  3432  011938  6EF7               	movwf	tblptrh,c
  3433  01193A                     	endif
  3434  01193A                     	if	1	;There are 3 active tblptr bytes
  3435  01193A  0E00               	movlw	low (_cc_adpoll shr (0+16))
  3436  01193C  6EF8               	movwf	tblptru,c
  3437  01193E                     	endif
  3438  01193E  0008               	tblrd		*
  3439  011940  CFF5 F020          	movff	tablat,cctalk_comm@command
  3440  011944  0E00               	movlw	0
  3441  011946  ECA6  F081         	call	_cctalk_comm
  3442  01194A  6E24               	movwf	cctalk_adpoll@i,c
  3443  01194C  0012               	return		;funcret
  3444  01194E                     __end_of_cctalk_adpoll:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           indf2	equ	0xFDF
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _cctalk_comm *****************
  3460 ;; Defined at:
  3461 ;;		line 56 in file "cctalk.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  dest            1    wreg     unsigned char 
  3464 ;;  nobytes         1   20[COMRAM] unsigned char 
  3465 ;;  command         1   21[COMRAM] unsigned char 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  dest            1   24[COMRAM] unsigned char 
  3468 ;;  i               1   23[COMRAM] unsigned char 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      unsigned char 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3478 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;Total ram usage:        5 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    4
  3485 ;; This function calls:
  3486 ;;		_TMR3_Initialize
  3487 ;;		_cctalk_read
  3488 ;;		_init_mdbdata
  3489 ;;		_mdb_transmit
  3490 ;; This function is called by:
  3491 ;;		_cctalk_adpoll
  3492 ;;		_cctalk_pinenter
  3493 ;;		_cctalk_poll
  3494 ;;		_cctalk_serial
  3495 ;; This function uses a non-reentrant model
  3496 ;;
  3497                           
  3498                           	psect	text12
  3499  01034C                     __ptext12:
  3500                           	opt stack 0
  3501  01034C                     _cctalk_comm:
  3502                           	opt stack 23
  3503                           
  3504                           ;incstack = 0
  3505                           ;cctalk_comm@dest stored from wreg
  3506  01034C  6E23               	movwf	cctalk_comm@dest,c
  3507                           
  3508                           ;cctalk.c: 59: uint8_t i = 0;
  3509  01034E  0E00               	movlw	0
  3510  010350  6E22               	movwf	cctalk_comm@i,c
  3511                           
  3512                           ;cctalk.c: 63: i = RC1REG;
  3513  010352  CF99 F022          	movff	3993,cctalk_comm@i	;volatile
  3514                           
  3515                           ;cctalk.c: 65: i = 0;
  3516  010356  0E00               	movlw	0
  3517  010358  6E22               	movwf	cctalk_comm@i,c
  3518                           
  3519                           ;cctalk.c: 68: chkbyte = dest + nobytes + command + mastadd;
  3520  01035A  0E7E               	movlw	low _mastadd
  3521  01035C  6EF6               	movwf	tblptrl,c
  3522  01035E                     	if	1	;There is more than 1 active tblptr byte
  3523  01035E  0EFD               	movlw	high _mastadd
  3524  010360  6EF7               	movwf	tblptrh,c
  3525  010362                     	endif
  3526  010362                     	if	1	;There are 3 active tblptr bytes
  3527  010362  0E00               	movlw	low (_mastadd shr (0+16))
  3528  010364  6EF8               	movwf	tblptru,c
  3529  010366                     	endif
  3530  010366  0008               	tblrd		*
  3531  010368  CFF5 F021          	movff	tablat,??_cctalk_comm
  3532  01036C  5023               	movf	cctalk_comm@dest,w,c
  3533  01036E  241F               	addwf	cctalk_comm@nobytes,w,c
  3534  010370  2420               	addwf	cctalk_comm@command,w,c
  3535  010372  2421               	addwf	??_cctalk_comm,w,c
  3536  010374  6E3F               	movwf	_chkbyte,c
  3537                           
  3538                           ;cctalk.c: 69: mdb_transmit(dest);
  3539  010376  5023               	movf	cctalk_comm@dest,w,c
  3540  010378  EC31  F08D         	call	_mdb_transmit
  3541                           
  3542                           ;cctalk.c: 71: mdb_transmit(nobytes);
  3543  01037C  501F               	movf	cctalk_comm@nobytes,w,c
  3544  01037E  EC31  F08D         	call	_mdb_transmit
  3545                           
  3546                           ;cctalk.c: 73: mdb_transmit(mastadd);
  3547  010382  0E7E               	movlw	low _mastadd
  3548  010384  6EF6               	movwf	tblptrl,c
  3549  010386                     	if	1	;There is more than 1 active tblptr byte
  3550  010386  0EFD               	movlw	high _mastadd
  3551  010388  6EF7               	movwf	tblptrh,c
  3552  01038A                     	endif
  3553  01038A                     	if	1	;There are 3 active tblptr bytes
  3554  01038A  0E00               	movlw	low (_mastadd shr (0+16))
  3555  01038C  6EF8               	movwf	tblptru,c
  3556  01038E                     	endif
  3557  01038E  0008               	tblrd		*
  3558  010390  50F5               	movf	tablat,w,c
  3559  010392  EC31  F08D         	call	_mdb_transmit
  3560                           
  3561                           ;cctalk.c: 75: mdb_transmit(command);
  3562  010396  5020               	movf	cctalk_comm@command,w,c
  3563  010398  EC31  F08D         	call	_mdb_transmit
  3564                           
  3565                           ;cctalk.c: 77: while(nobytes != 0)
  3566  01039C  D017               	goto	l2874
  3567  01039E                     
  3568                           ;cctalk.c: 78: {
  3569                           ;cctalk.c: 79: chkbyte = mdbdata[nobytes] + chkbyte;
  3570  01039E  501F               	movf	cctalk_comm@nobytes,w,c
  3571  0103A0  0D01               	mullw	1
  3572  0103A2  0E60               	movlw	low _mdbdata
  3573  0103A4  24F3               	addwf	prodl,w,c
  3574  0103A6  6ED9               	movwf	fsr2l,c
  3575  0103A8  0E00               	movlw	high _mdbdata
  3576  0103AA  20F4               	addwfc	prodh,w,c
  3577  0103AC  6EDA               	movwf	fsr2h,c
  3578  0103AE  50DF               	movf	indf2,w,c
  3579  0103B0  243F               	addwf	_chkbyte,w,c
  3580  0103B2  6E3F               	movwf	_chkbyte,c
  3581                           
  3582                           ;cctalk.c: 80: mdb_transmit(mdbdata[nobytes]);
  3583  0103B4  501F               	movf	cctalk_comm@nobytes,w,c
  3584  0103B6  0D01               	mullw	1
  3585  0103B8  0E60               	movlw	low _mdbdata
  3586  0103BA  24F3               	addwf	prodl,w,c
  3587  0103BC  6ED9               	movwf	fsr2l,c
  3588  0103BE  0E00               	movlw	high _mdbdata
  3589  0103C0  20F4               	addwfc	prodh,w,c
  3590  0103C2  6EDA               	movwf	fsr2h,c
  3591  0103C4  50DF               	movf	indf2,w,c
  3592  0103C6  EC31  F08D         	call	_mdb_transmit
  3593                           
  3594                           ;cctalk.c: 82: nobytes--;
  3595  0103CA  061F               	decf	cctalk_comm@nobytes,f,c
  3596  0103CC                     l2874:
  3597  0103CC  501F               	movf	cctalk_comm@nobytes,w,c
  3598  0103CE  A4D8               	btfss	status,2,c
  3599  0103D0  D7E6               	goto	l2875
  3600                           
  3601                           ;cctalk.c: 83: }
  3602                           ;cctalk.c: 84: chkbyte = 0 - chkbyte;
  3603  0103D2  6C3F               	negf	_chkbyte,c
  3604                           
  3605                           ;cctalk.c: 85: mdb_transmit(chkbyte);
  3606  0103D4  503F               	movf	_chkbyte,w,c
  3607  0103D6  EC31  F08D         	call	_mdb_transmit
  3608                           
  3609                           ;cctalk.c: 89: cctflags.timeout = 0;
  3610  0103DA  963B               	bcf	_cctflags,3,c
  3611                           
  3612                           ;cctalk.c: 90: cctflags.hoperr = 0;
  3613  0103DC  923B               	bcf	_cctflags,1,c
  3614                           
  3615                           ;cctalk.c: 93: init_mdbdata(0xFF);
  3616  0103DE  0EFF               	movlw	255
  3617  0103E0  EC52  F08C         	call	_init_mdbdata
  3618                           
  3619                           ;cctalk.c: 94: RC1STAbits.SPEN = 0;
  3620  0103E4  9E9D               	bcf	3997,7,c	;volatile
  3621                           
  3622                           ;cctalk.c: 95: RC1STAbits.SPEN = 1;
  3623  0103E6  8E9D               	bsf	3997,7,c	;volatile
  3624                           
  3625                           ;cctalk.c: 96: chkbyte = RC1REG;
  3626  0103E8  CF99 F03F          	movff	3993,_chkbyte	;volatile
  3627                           
  3628                           ;cctalk.c: 98: TMR3_Initialize();
  3629  0103EC  EC10  F08B         	call	_TMR3_Initialize	;wreg free
  3630                           
  3631                           ;cctalk.c: 99: while(!cctflags.timeout)
  3632  0103F0  D016               	goto	u1417
  3633  0103F2                     
  3634                           ;cctalk.c: 100: {
  3635                           ;cctalk.c: 102: dest = cctalk_read();
  3636  0103F2  ECA7  F08C         	call	_cctalk_read	;wreg free
  3637  0103F6  6E23               	movwf	cctalk_comm@dest,c
  3638                           
  3639                           ;cctalk.c: 104: if(cctflags.isdata)
  3640  0103F8  A03B               	btfss	_cctflags,0,c
  3641  0103FA  D00B               	goto	l2879
  3642                           
  3643                           ;cctalk.c: 105: {
  3644                           ;cctalk.c: 106: mdbdata[i++] = dest;
  3645  0103FC  5022               	movf	cctalk_comm@i,w,c
  3646  0103FE  0D01               	mullw	1
  3647  010400  0E60               	movlw	low _mdbdata
  3648  010402  24F3               	addwf	prodl,w,c
  3649  010404  6ED9               	movwf	fsr2l,c
  3650  010406  0E00               	movlw	high _mdbdata
  3651  010408  20F4               	addwfc	prodh,w,c
  3652  01040A  6EDA               	movwf	fsr2h,c
  3653  01040C  C023  FFDF         	movff	cctalk_comm@dest,indf2
  3654  010410  2A22               	incf	cctalk_comm@i,f,c
  3655  010412                     l2879:
  3656                           
  3657                           ;cctalk.c: 108: }
  3658                           ;cctalk.c: 109: cctflags.timeout = PIR4bits.TMR3IF;
  3659  010412  010E               	movlb	14	; () banked
  3660  010414  A5CE               	btfss	206,2,b	;volatile
  3661  010416  D002               	bra	u1415
  3662  010418  863B               	bsf	_cctflags,3,c
  3663  01041A  D001               	bra	u1417
  3664  01041C                     u1415:
  3665  01041C  963B               	bcf	_cctflags,3,c
  3666  01041E                     u1417:
  3667  01041E  A63B               	btfss	_cctflags,3,c
  3668  010420  D7E8               	goto	l2878
  3669                           
  3670                           ;cctalk.c: 110: }
  3671                           ;cctalk.c: 111: if(mdbdata[0] == mastadd && mdbdata[3] == 0x00)
  3672  010422  0E7E               	movlw	low _mastadd
  3673  010424  6EF6               	movwf	tblptrl,c
  3674  010426                     	if	1	;There is more than 1 active tblptr byte
  3675  010426  0EFD               	movlw	high _mastadd
  3676  010428  6EF7               	movwf	tblptrh,c
  3677  01042A                     	endif
  3678  01042A                     	if	1	;There are 3 active tblptr bytes
  3679  01042A  0E00               	movlw	low (_mastadd shr (0+16))
  3680  01042C  6EF8               	movwf	tblptru,c
  3681  01042E                     	endif
  3682  01042E  0008               	tblrd		*
  3683  010430  50F5               	movf	tablat,w,c
  3684  010432  0100               	movlb	0	; () banked
  3685  010434  6360               	cpfseq	_mdbdata& (0+255),b
  3686  010436  D005               	goto	l2881
  3687                           
  3688                           ; BSR set to: 0
  3689  010438  5163               	movf	(_mdbdata+3)& (0+255),w,b
  3690  01043A  A4D8               	btfss	status,2,c
  3691  01043C  D002               	goto	l2881
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;cctalk.c: 112: {
  3695                           ;cctalk.c: 113: return i;
  3696  01043E  5022               	movf	cctalk_comm@i,w,c
  3697                           
  3698                           ; BSR set to: 0
  3699  010440  0012               	return	
  3700  010442                     l2881:
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;cctalk.c: 114: }
  3704                           ;cctalk.c: 115: cctflags.timeout = 1;
  3705  010442  863B               	bsf	_cctflags,3,c
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;cctalk.c: 116: return 0x00;
  3709  010444  0E00               	movlw	0
  3710  010446  0012               	return	
  3711  010448                     __end_of_cctalk_comm:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           prodh	equ	0xFF4
  3718                           prodl	equ	0xFF3
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           indf2	equ	0xFDF
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _cctalk_read *****************
  3727 ;; Defined at:
  3728 ;;		line 119 in file "cctalk.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;		None
  3731 ;; Auto vars:     Size  Location     Type
  3732 ;;  data            1   18[COMRAM] unsigned char 
  3733 ;; Return value:  Size  Location     Type
  3734 ;;                  1    wreg      unsigned char 
  3735 ;; Registers used:
  3736 ;;		wreg, status,2, cstack
  3737 ;; Tracked objects:
  3738 ;;		On entry : 0/0
  3739 ;;		On exit  : 0/0
  3740 ;;		Unchanged: 0/0
  3741 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;Total ram usage:        1 bytes
  3747 ;; Hardware stack levels used:    1
  3748 ;; Hardware stack levels required when called:    3
  3749 ;; This function calls:
  3750 ;;		_EUSART1_Read
  3751 ;;		_mdb_waitr
  3752 ;; This function is called by:
  3753 ;;		_cctalk_comm
  3754 ;; This function uses a non-reentrant model
  3755 ;;
  3756                           
  3757                           	psect	text13
  3758  01194E                     __ptext13:
  3759                           	opt stack 0
  3760  01194E                     _cctalk_read:
  3761                           	opt stack 23
  3762                           
  3763                           ;cctalk.c: 121: uint8_t data = 0;
  3764                           
  3765                           ; BSR set to: 0
  3766                           ;incstack = 0
  3767  01194E  0E00               	movlw	0
  3768  011950  6E1D               	movwf	cctalk_read@data,c
  3769                           
  3770                           ;cctalk.c: 122: cctflags.isdata = 0;
  3771  011952  903B               	bcf	_cctflags,0,c
  3772                           
  3773                           ;cctalk.c: 123: while(PIR3bits.RC1IF)
  3774  011954  D006               	goto	l2885
  3775  011956                     
  3776                           ;cctalk.c: 124: {
  3777                           ;cctalk.c: 125: data = EUSART1_Read();
  3778  011956  EC1F  F08D         	call	_EUSART1_Read	;wreg free
  3779  01195A  6E1D               	movwf	cctalk_read@data,c
  3780                           
  3781                           ;cctalk.c: 126: mdb_waitr();
  3782  01195C  EC66  F08D         	call	_mdb_waitr	;wreg free
  3783                           
  3784                           ;cctalk.c: 127: cctflags.isdata = 1;
  3785  011960  803B               	bsf	_cctflags,0,c
  3786  011962                     l2885:
  3787  011962  010E               	movlb	14	; () banked
  3788  011964  BBCD               	btfsc	205,5,b	;volatile
  3789  011966  D7F7               	goto	l2886
  3790                           
  3791                           ; BSR set to: 14
  3792                           ;cctalk.c: 128: }
  3793                           ;cctalk.c: 129: return data;
  3794                           
  3795                           ; BSR set to: 14
  3796  011968  501D               	movf	cctalk_read@data,w,c
  3797  01196A  0012               	return	
  3798  01196C                     __end_of_cctalk_read:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           indf2	equ	0xFDF
  3809                           fsr2h	equ	0xFDA
  3810                           fsr2l	equ	0xFD9
  3811                           status	equ	0xFD8
  3812                           
  3813 ;; *************** function _Init_vendmem *****************
  3814 ;; Defined at:
  3815 ;;		line 9 in file "vend.c"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;		None
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  chanlink        2   22[COMRAM] PTR unsigned char 
  3820 ;;		 -> chanlink1(1), 
  3821 ;;  chanlinkbits    2   20[COMRAM] unsigned int 
  3822 ;;  i               1   24[COMRAM] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  1    wreg      void 
  3825 ;; Registers used:
  3826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;Total ram usage:        5 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    3
  3839 ;; This function calls:
  3840 ;;		_DATAEE_ReadByte
  3841 ;; This function is called by:
  3842 ;;		_vend_init
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           	psect	text14
  3847  010E20                     __ptext14:
  3848                           	opt stack 0
  3849  010E20                     _Init_vendmem:
  3850                           	opt stack 26
  3851                           
  3852                           ;vend.c: 12: ((uint8_t*) &venderr)[0] = DATAEE_ReadByte(venderrors);
  3853                           
  3854                           ; BSR set to: 14
  3855                           ;incstack = 0
  3856  010E20  0E61               	movlw	low _venderrors
  3857  010E22  6EF6               	movwf	tblptrl,c
  3858  010E24                     	if	1	;There is more than 1 active tblptr byte
  3859  010E24  0EFD               	movlw	high _venderrors
  3860  010E26  6EF7               	movwf	tblptrh,c
  3861  010E28                     	endif
  3862  010E28                     	if	1	;There are 3 active tblptr bytes
  3863  010E28  0E00               	movlw	low (_venderrors shr (0+16))
  3864  010E2A  6EF8               	movwf	tblptru,c
  3865  010E2C                     	endif
  3866  010E2C  0009               	tblrd		*+
  3867  010E2E  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  3868  010E32  000A               	tblrd		*-
  3869  010E34  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  3870  010E38  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  3871  010E3C  6E33               	movwf	_venderr,c
  3872                           
  3873                           ;vend.c: 14: ((uint8_t*) &senschk)[0] = DATAEE_ReadByte(sensorflags);
  3874  010E3E  0E35               	movlw	low _sensorflags
  3875  010E40  6EF6               	movwf	tblptrl,c
  3876  010E42                     	if	1	;There is more than 1 active tblptr byte
  3877  010E42  0EFD               	movlw	high _sensorflags
  3878  010E44  6EF7               	movwf	tblptrh,c
  3879  010E46                     	endif
  3880  010E46                     	if	1	;There are 3 active tblptr bytes
  3881  010E46  0E00               	movlw	low (_sensorflags shr (0+16))
  3882  010E48  6EF8               	movwf	tblptru,c
  3883  010E4A                     	endif
  3884  010E4A  0009               	tblrd		*+
  3885  010E4C  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  3886  010E50  000A               	tblrd		*-
  3887  010E52  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  3888  010E56  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  3889  010E5A  6E34               	movwf	_senschk,c
  3890                           
  3891                           ;vend.c: 16: uint16_t chanlinkbits = chan1linkbits;
  3892  010E5C  0E57               	movlw	low _chan1linkbits
  3893  010E5E  6EF6               	movwf	tblptrl,c
  3894  010E60                     	if	1	;There is more than 1 active tblptr byte
  3895  010E60  0EFD               	movlw	high _chan1linkbits
  3896  010E62  6EF7               	movwf	tblptrh,c
  3897  010E64                     	endif
  3898  010E64                     	if	1	;There are 3 active tblptr bytes
  3899  010E64  0E00               	movlw	low (_chan1linkbits shr (0+16))
  3900  010E66  6EF8               	movwf	tblptru,c
  3901  010E68                     	endif
  3902  010E68  0009               	tblrd		*+
  3903  010E6A  CFF5 F01F          	movff	tablat,Init_vendmem@chanlinkbits
  3904  010E6E  000A               	tblrd		*-
  3905  010E70  CFF5 F020          	movff	tablat,Init_vendmem@chanlinkbits+1
  3906                           
  3907                           ;vend.c: 17: uint8_t *chanlink = ((uint8_t*) &chanlink1);
  3908  010E74  0E03               	movlw	3
  3909  010E76  6E21               	movwf	Init_vendmem@chanlink,c
  3910  010E78  0E00               	movlw	0
  3911  010E7A  6E22               	movwf	Init_vendmem@chanlink+1,c
  3912                           
  3913                           ;vend.c: 18: char i = 0;
  3914  010E7C  0E00               	movlw	0
  3915  010E7E  6E23               	movwf	Init_vendmem@i,c
  3916                           
  3917                           ;vend.c: 19: while(i < 8)
  3918  010E80  D012               	goto	l1761
  3919  010E82                     
  3920                           ;vend.c: 20: {
  3921                           ;vend.c: 21: chanlink[i] = DATAEE_ReadByte(chanlinkbits + i);
  3922  010E82  5023               	movf	Init_vendmem@i,w,c
  3923  010E84  0D01               	mullw	1
  3924  010E86  50F3               	movf	prodl,w,c
  3925  010E88  2421               	addwf	Init_vendmem@chanlink,w,c
  3926  010E8A  6ED9               	movwf	fsr2l,c
  3927  010E8C  50F4               	movf	prodh,w,c
  3928  010E8E  2022               	addwfc	Init_vendmem@chanlink+1,w,c
  3929  010E90  6EDA               	movwf	fsr2h,c
  3930  010E92  5023               	movf	Init_vendmem@i,w,c
  3931  010E94  241F               	addwf	Init_vendmem@chanlinkbits,w,c
  3932  010E96  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  3933  010E98  0E00               	movlw	0
  3934  010E9A  2020               	addwfc	Init_vendmem@chanlinkbits+1,w,c
  3935  010E9C  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  3936  010E9E  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  3937  010EA2  6EDF               	movwf	indf2,c
  3938                           
  3939                           ;vend.c: 22: i++;
  3940  010EA4  2A23               	incf	Init_vendmem@i,f,c
  3941  010EA6                     l1761:
  3942  010EA6  0E07               	movlw	7
  3943  010EA8  6423               	cpfsgt	Init_vendmem@i,c
  3944  010EAA  D7EB               	goto	l1762
  3945  010EAC  0012               	return	
  3946  010EAE                     __end_of_Init_vendmem:
  3947                           	opt stack 0
  3948                           tblptru	equ	0xFF8
  3949                           tblptrh	equ	0xFF7
  3950                           tblptrl	equ	0xFF6
  3951                           tablat	equ	0xFF5
  3952                           prodh	equ	0xFF4
  3953                           prodl	equ	0xFF3
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           indf2	equ	0xFDF
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           
  3961 ;; *************** function _DAC1_SetOutput *****************
  3962 ;; Defined at:
  3963 ;;		line 65 in file "mcc_generated_files/dac1.c"
  3964 ;; Parameters:    Size  Location     Type
  3965 ;;  inputData       1    wreg     unsigned char 
  3966 ;; Auto vars:     Size  Location     Type
  3967 ;;  inputData       1   18[COMRAM] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  1    wreg      void 
  3970 ;; Registers used:
  3971 ;;		wreg
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  3977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3980 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3981 ;;Total ram usage:        1 bytes
  3982 ;; Hardware stack levels used:    1
  3983 ;; Hardware stack levels required when called:    2
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_vend_init
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991                           	psect	text15
  3992  011AA6                     __ptext15:
  3993                           	opt stack 0
  3994  011AA6                     _DAC1_SetOutput:
  3995                           	opt stack 27
  3996                           
  3997                           ;incstack = 0
  3998                           ;DAC1_SetOutput@inputData stored from wreg
  3999  011AA6  6E1D               	movwf	DAC1_SetOutput@inputData,c
  4000                           
  4001                           ;dac1.c: 67: DAC1CON1 = inputData;
  4002  011AA8  C01D  FF34         	movff	DAC1_SetOutput@inputData,3892	;volatile
  4003  011AAC  0012               	return		;funcret
  4004  011AAE                     __end_of_DAC1_SetOutput:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           indf2	equ	0xFDF
  4015                           fsr2h	equ	0xFDA
  4016                           fsr2l	equ	0xFD9
  4017                           status	equ	0xFD8
  4018                           
  4019 ;; *************** function _mdb_poll *****************
  4020 ;; Defined at:
  4021 ;;		line 157 in file "mdb.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;  i               1   23[COMRAM] unsigned char 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      unsigned char 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;Total ram usage:        1 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    5
  4042 ;; This function calls:
  4043 ;;		_TMR3_Initialize
  4044 ;;		_mdb_comm
  4045 ;; This function is called by:
  4046 ;;		_main
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text16
  4051  010124                     __ptext16:
  4052                           	opt stack 0
  4053  010124                     _mdb_poll:
  4054                           	opt stack 25
  4055                           
  4056                           ;mdb.c: 161: TMR3_Initialize();
  4057                           
  4058                           ;incstack = 0
  4059  010124  EC10  F08B         	call	_TMR3_Initialize	;wreg free
  4060                           
  4061                           ;mdb.c: 162: uint8_t i = mdb_comm(note_poll, 0x00);
  4062  010128  0E00               	movlw	0
  4063  01012A  6E1F               	movwf	mdb_comm@mcount,c
  4064  01012C  0E90               	movlw	low _note_poll
  4065  01012E  6EF6               	movwf	tblptrl,c
  4066  010130                     	if	1	;There is more than 1 active tblptr byte
  4067  010130  0EFD               	movlw	high _note_poll
  4068  010132  6EF7               	movwf	tblptrh,c
  4069  010134                     	endif
  4070  010134                     	if	1	;There are 3 active tblptr bytes
  4071  010134  0E00               	movlw	low (_note_poll shr (0+16))
  4072  010136  6EF8               	movwf	tblptru,c
  4073  010138                     	endif
  4074  010138  0008               	tblrd		*
  4075  01013A  50F5               	movf	tablat,w,c
  4076  01013C  EC24  F082         	call	_mdb_comm
  4077  010140  6E22               	movwf	mdb_poll@i,c
  4078                           
  4079                           ;mdb.c: 163: notebyte = mdbdata[0];
  4080  010142  C060  F040         	movff	_mdbdata,_notebyte
  4081                           
  4082                           ;mdb.c: 165: if((mdbdata[0] & 0x80) != 0)
  4083  010146  0100               	movlb	0	; () banked
  4084  010148  AF60               	btfss	_mdbdata& (0+255),7,b
  4085  01014A  D050               	goto	l2420
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;mdb.c: 166: {
  4089                           ;mdb.c: 167: notebyte = mdbdata[0] & 0x7F;
  4090  01014C  5160               	movf	_mdbdata& (0+255),w,b
  4091  01014E  0B7F               	andlw	127
  4092  010150  6E40               	movwf	_notebyte,c
  4093                           
  4094                           ;mdb.c: 168: switch(notebyte)
  4095  010152  D019               	goto	l2410
  4096  010154                     
  4097                           ; BSR set to: 0
  4098  010154  0E0A               	movlw	10
  4099  010156  6E3A               	movwf	_credit,c	;volatile
  4100                           
  4101                           ;mdb.c: 171: return credit;
  4102  010158  503A               	movf	_credit,w,c	;volatile
  4103  01015A  0012               	return	
  4104  01015C  0E14               	movlw	20
  4105  01015E  6E3A               	movwf	_credit,c	;volatile
  4106                           
  4107                           ;mdb.c: 173: return credit;
  4108  010160  503A               	movf	_credit,w,c	;volatile
  4109  010162  0012               	return	
  4110  010164  0E32               	movlw	50
  4111  010166  6E3A               	movwf	_credit,c	;volatile
  4112                           
  4113                           ;mdb.c: 175: return credit;
  4114  010168  503A               	movf	_credit,w,c	;volatile
  4115  01016A  0012               	return	
  4116  01016C  0E64               	movlw	100
  4117  01016E  6E3A               	movwf	_credit,c	;volatile
  4118                           
  4119                           ;mdb.c: 177: return credit;
  4120  010170  503A               	movf	_credit,w,c	;volatile
  4121  010172  0012               	return	
  4122  010174  0EC8               	movlw	200
  4123  010176  6E3A               	movwf	_credit,c	;volatile
  4124                           
  4125                           ;mdb.c: 179: return credit;
  4126  010178  503A               	movf	_credit,w,c	;volatile
  4127  01017A  0012               	return	
  4128  01017C  0E10               	movlw	16
  4129  01017E  6E3A               	movwf	_credit,c	;volatile
  4130                           
  4131                           ;mdb.c: 181: mdbflags.noteerr = 1;
  4132  010180  823E               	bsf	_mdbflags,1,c
  4133                           
  4134                           ;mdb.c: 182: return credit;
  4135  010182  503A               	movf	_credit,w,c	;volatile
  4136                           
  4137                           ;mdb.c: 183: }
  4138  010184  0012               	return	
  4139  010186                     l2410:
  4140  010186  5040               	movf	_notebyte,w,c
  4141                           
  4142                           ; Switch size 1, requested type "space"
  4143                           ; Number of cases is 5, Range of values is 0 to 4
  4144                           ; switch strategies available:
  4145                           ; Name         Instructions Cycles
  4146                           ; simple_byte           16     9 (average)
  4147                           ;	Chosen strategy is simple_byte
  4148  010188  0A00               	xorlw	0	; case 0
  4149  01018A  B4D8               	btfsc	status,2,c
  4150  01018C  D7E3               	goto	l2411
  4151  01018E  0A01               	xorlw	1	; case 1
  4152  010190  B4D8               	btfsc	status,2,c
  4153  010192  D7E4               	goto	l2413
  4154  010194  0A03               	xorlw	3	; case 2
  4155  010196  B4D8               	btfsc	status,2,c
  4156  010198  D7E5               	goto	l2414
  4157  01019A  0A01               	xorlw	1	; case 3
  4158  01019C  B4D8               	btfsc	status,2,c
  4159  01019E  D7E6               	goto	l2415
  4160  0101A0  0A07               	xorlw	7	; case 4
  4161  0101A2  B4D8               	btfsc	status,2,c
  4162  0101A4  D7E7               	goto	l2416
  4163  0101A6  D7EA               	goto	l2417
  4164  0101A8  0E00               	movlw	0
  4165  0101AA  6E3A               	movwf	_credit,c	;volatile
  4166                           
  4167                           ;mdb.c: 191: return credit;
  4168  0101AC  503A               	movf	_credit,w,c	;volatile
  4169  0101AE  0012               	return	
  4170  0101B0  0E01               	movlw	1
  4171  0101B2  D01A               	goto	L11
  4172  0101B4  0E02               	movlw	2
  4173  0101B6  D018               	goto	L11
  4174  0101B8  0E00               	movlw	0
  4175  0101BA  6E3A               	movwf	_credit,c	;volatile
  4176                           
  4177                           ;mdb.c: 200: mdbflags.noteerr = 0;
  4178  0101BC  923E               	bcf	_mdbflags,1,c
  4179                           
  4180                           ;mdb.c: 201: return credit;
  4181  0101BE  503A               	movf	_credit,w,c	;volatile
  4182  0101C0  0012               	return	
  4183  0101C2  0E04               	movlw	4
  4184  0101C4  D011               	goto	L11
  4185  0101C6  0E05               	movlw	5
  4186  0101C8  D00F               	goto	L11
  4187  0101CA  0E06               	movlw	6
  4188  0101CC  D00D               	goto	L11
  4189  0101CE  0E07               	movlw	7
  4190  0101D0  D00B               	goto	L11
  4191  0101D2  0E08               	movlw	8
  4192  0101D4  D009               	goto	L11
  4193  0101D6  0E09               	movlw	9
  4194  0101D8  D007               	goto	L11
  4195  0101DA  0E0A               	movlw	10
  4196  0101DC  D005               	goto	L11
  4197  0101DE  0E0B               	movlw	11
  4198  0101E0  D003               	goto	L11
  4199  0101E2  0E0C               	movlw	12
  4200  0101E4  D001               	goto	L11
  4201  0101E6  0E00               	movlw	0
  4202  0101E8                     L11:
  4203  0101E8  6E3A               	movwf	_credit,c	;volatile
  4204                           
  4205                           ;mdb.c: 230: }
  4206  0101EA  D02A               	goto	l2423
  4207  0101EC                     l2420:
  4208  0101EC  0100               	movlb	0	; () banked
  4209  0101EE  5160               	movf	_mdbdata& (0+255),w,b
  4210                           
  4211                           ; Switch size 1, requested type "space"
  4212                           ; Number of cases is 13, Range of values is 0 to 12
  4213                           ; switch strategies available:
  4214                           ; Name         Instructions Cycles
  4215                           ; simple_byte           40    21 (average)
  4216                           ;	Chosen strategy is simple_byte
  4217  0101F0  0A00               	xorlw	0	; case 0
  4218  0101F2  B4D8               	btfsc	status,2,c
  4219  0101F4  D7D9               	goto	l2421
  4220  0101F6  0A01               	xorlw	1	; case 1
  4221  0101F8  B4D8               	btfsc	status,2,c
  4222  0101FA  D7DA               	goto	l2422
  4223  0101FC  0A03               	xorlw	3	; case 2
  4224  0101FE  B4D8               	btfsc	status,2,c
  4225  010200  D7D9               	goto	l2424
  4226  010202  0A01               	xorlw	1	; case 3
  4227  010204  B4D8               	btfsc	status,2,c
  4228  010206  D7D8               	goto	l2425
  4229  010208  0A07               	xorlw	7	; case 4
  4230  01020A  B4D8               	btfsc	status,2,c
  4231  01020C  D7DA               	goto	l2426
  4232  01020E  0A01               	xorlw	1	; case 5
  4233  010210  B4D8               	btfsc	status,2,c
  4234  010212  D7D9               	goto	l2427
  4235  010214  0A03               	xorlw	3	; case 6
  4236  010216  B4D8               	btfsc	status,2,c
  4237  010218  D7D8               	goto	l2428
  4238  01021A  0A01               	xorlw	1	; case 7
  4239  01021C  B4D8               	btfsc	status,2,c
  4240  01021E  D7D7               	goto	l2429
  4241  010220  0A0F               	xorlw	15	; case 8
  4242  010222  B4D8               	btfsc	status,2,c
  4243  010224  D7D6               	goto	l2430
  4244  010226  0A01               	xorlw	1	; case 9
  4245  010228  B4D8               	btfsc	status,2,c
  4246  01022A  D7D5               	goto	l2431
  4247  01022C  0A03               	xorlw	3	; case 10
  4248  01022E  B4D8               	btfsc	status,2,c
  4249  010230  D7D4               	goto	l2432
  4250  010232  0A01               	xorlw	1	; case 11
  4251  010234  B4D8               	btfsc	status,2,c
  4252  010236  D7D3               	goto	l2433
  4253  010238  0A07               	xorlw	7	; case 12
  4254  01023A  B4D8               	btfsc	status,2,c
  4255  01023C  D7D2               	goto	l2434
  4256  01023E  D7D3               	goto	l2435
  4257  010240                     l2423:
  4258                           
  4259                           ;mdb.c: 231: mdbflags.noteerr = 1;
  4260  010240  823E               	bsf	_mdbflags,1,c
  4261                           
  4262                           ;mdb.c: 232: return credit;
  4263  010242  503A               	movf	_credit,w,c	;volatile
  4264  010244  0012               	return	
  4265  010246                     __end_of_mdb_poll:
  4266                           	opt stack 0
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           prodh	equ	0xFF4
  4272                           prodl	equ	0xFF3
  4273                           postinc0	equ	0xFEE
  4274                           wreg	equ	0xFE8
  4275                           indf2	equ	0xFDF
  4276                           fsr2h	equ	0xFDA
  4277                           fsr2l	equ	0xFD9
  4278                           status	equ	0xFD8
  4279                           
  4280 ;; *************** function _mdb_comm *****************
  4281 ;; Defined at:
  4282 ;;		line 237 in file "mdb.c"
  4283 ;; Parameters:    Size  Location     Type
  4284 ;;  slvadd          1    wreg     unsigned char 
  4285 ;;  mcount          1   20[COMRAM] unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  slvadd          1   21[COMRAM] unsigned char 
  4288 ;;  i               1   22[COMRAM] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      unsigned char 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4298 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;Total ram usage:        3 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    4
  4305 ;; This function calls:
  4306 ;;		_EUSART1_Read
  4307 ;;		_TMR1_Initialize
  4308 ;;		_init_mdbdata
  4309 ;;		_mdb_on
  4310 ;;		_mdb_transmit
  4311 ;;		_mdb_waitr
  4312 ;; This function is called by:
  4313 ;;		_mdb_init
  4314 ;;		_mdb_reset
  4315 ;;		_mdb_noten
  4316 ;;		_mdb_security
  4317 ;;		_mdb_poll
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text17
  4322  010448                     __ptext17:
  4323                           	opt stack 0
  4324  010448                     _mdb_comm:
  4325                           	opt stack 23
  4326                           
  4327                           ;incstack = 0
  4328                           ;mdb_comm@slvadd stored from wreg
  4329  010448  6E20               	movwf	mdb_comm@slvadd,c
  4330                           
  4331                           ;mdb.c: 240: uint8_t i = 0;
  4332  01044A  0E00               	movlw	0
  4333  01044C  6E21               	movwf	mdb_comm@i,c
  4334                           
  4335                           ;mdb.c: 242: TX1STAbits.TX9D = 1;
  4336  01044E  809E               	bsf	3998,0,c	;volatile
  4337                           
  4338                           ;mdb.c: 243: mdb_on();
  4339  010450  EC6C  F08D         	call	_mdb_on	;wreg free
  4340                           
  4341                           ;mdb.c: 247: mdb_transmit(slvadd);
  4342  010454  5020               	movf	mdb_comm@slvadd,w,c
  4343  010456  EC31  F08D         	call	_mdb_transmit
  4344                           
  4345                           ;mdb.c: 248: TX1STAbits.TX9D = 0;
  4346  01045A  909E               	bcf	3998,0,c	;volatile
  4347                           
  4348                           ;mdb.c: 252: chkbyte = slvadd;
  4349  01045C  C020  F03F         	movff	mdb_comm@slvadd,_chkbyte
  4350                           
  4351                           ;mdb.c: 253: if(mcount != 0)
  4352  010460  501F               	movf	mdb_comm@mcount,w,c
  4353  010462  B4D8               	btfsc	status,2,c
  4354  010464  D01E               	goto	u1300
  4355                           
  4356                           ;mdb.c: 254: {
  4357                           ;mdb.c: 255: i = mcount + 1;
  4358  010466  281F               	incf	mdb_comm@mcount,w,c
  4359  010468  6E21               	movwf	mdb_comm@i,c
  4360                           
  4361                           ;mdb.c: 256: while(i != 0)
  4362  01046A  D018               	goto	l2439
  4363  01046C                     
  4364                           ;mdb.c: 257: {
  4365                           ;mdb.c: 258: mdb_transmit(mdbdata[mcount]);
  4366  01046C  501F               	movf	mdb_comm@mcount,w,c
  4367  01046E  0D01               	mullw	1
  4368  010470  0E60               	movlw	low _mdbdata
  4369  010472  24F3               	addwf	prodl,w,c
  4370  010474  6ED9               	movwf	fsr2l,c
  4371  010476  0E00               	movlw	high _mdbdata
  4372  010478  20F4               	addwfc	prodh,w,c
  4373  01047A  6EDA               	movwf	fsr2h,c
  4374  01047C  50DF               	movf	indf2,w,c
  4375  01047E  EC31  F08D         	call	_mdb_transmit
  4376                           
  4377                           ;mdb.c: 261: chkbyte = chkbyte + mdbdata[mcount];
  4378  010482  501F               	movf	mdb_comm@mcount,w,c
  4379  010484  0D01               	mullw	1
  4380  010486  0E60               	movlw	low _mdbdata
  4381  010488  24F3               	addwf	prodl,w,c
  4382  01048A  6ED9               	movwf	fsr2l,c
  4383  01048C  0E00               	movlw	high _mdbdata
  4384  01048E  20F4               	addwfc	prodh,w,c
  4385  010490  6EDA               	movwf	fsr2h,c
  4386  010492  50DF               	movf	indf2,w,c
  4387  010494  243F               	addwf	_chkbyte,w,c
  4388  010496  6E3F               	movwf	_chkbyte,c
  4389                           
  4390                           ;mdb.c: 262: i--;
  4391  010498  0621               	decf	mdb_comm@i,f,c
  4392                           
  4393                           ;mdb.c: 263: mcount--;
  4394  01049A  061F               	decf	mdb_comm@mcount,f,c
  4395  01049C                     l2439:
  4396  01049C  5021               	movf	mdb_comm@i,w,c
  4397  01049E  A4D8               	btfss	status,2,c
  4398  0104A0  D7E5               	goto	l2440
  4399  0104A2                     u1300:
  4400                           
  4401                           ;mdb.c: 264: }
  4402                           ;mdb.c: 265: }
  4403                           ;mdb.c: 266: mdb_transmit(chkbyte);
  4404  0104A2  503F               	movf	_chkbyte,w,c
  4405  0104A4  EC31  F08D         	call	_mdb_transmit
  4406                           
  4407                           ;mdb.c: 273: init_mdbdata(0xFF);
  4408  0104A8  0EFF               	movlw	255
  4409  0104AA  EC52  F08C         	call	_init_mdbdata
  4410                           
  4411                           ;mdb.c: 274: TMR1_Initialize();
  4412  0104AE  EC2B  F08B         	call	_TMR1_Initialize	;wreg free
  4413                           
  4414                           ;mdb.c: 275: dbcount = 0;
  4415  0104B2  0E00               	movlw	0
  4416  0104B4  6E32               	movwf	_dbcount+1,c
  4417  0104B6  0E00               	movlw	0
  4418  0104B8  6E31               	movwf	_dbcount,c
  4419                           
  4420                           ;mdb.c: 276: mdbflags.isdata = 0;
  4421  0104BA  903E               	bcf	_mdbflags,0,c
  4422                           
  4423                           ;mdb.c: 277: i = 0;
  4424  0104BC  0E00               	movlw	0
  4425  0104BE  6E21               	movwf	mdb_comm@i,c
  4426                           
  4427                           ;mdb.c: 279: while(!PIR4bits.TMR1IF && !mdbflags.isdata)
  4428  0104C0  D01E               	goto	u1330
  4429  0104C2                     
  4430                           ;mdb.c: 280: {
  4431                           ;mdb.c: 282: dbcount++;
  4432  0104C2  4A31               	infsnz	_dbcount,f,c
  4433  0104C4  2A32               	incf	_dbcount+1,f,c
  4434                           
  4435                           ;mdb.c: 283: mdbflags.isdata = 0;
  4436  0104C6  903E               	bcf	_mdbflags,0,c
  4437                           
  4438                           ;mdb.c: 286: while(PIR3bits.RC1IF && !mdbflags.isdata)
  4439  0104C8  D015               	goto	l2444
  4440  0104CA                     
  4441                           ;mdb.c: 287: {
  4442                           ;mdb.c: 290: mdbdata[i] = EUSART1_Read();
  4443  0104CA  5021               	movf	mdb_comm@i,w,c
  4444  0104CC  0D01               	mullw	1
  4445  0104CE  0E60               	movlw	low _mdbdata
  4446  0104D0  24F3               	addwf	prodl,w,c
  4447  0104D2  6ED9               	movwf	fsr2l,c
  4448  0104D4  0E00               	movlw	high _mdbdata
  4449  0104D6  20F4               	addwfc	prodh,w,c
  4450  0104D8  6EDA               	movwf	fsr2h,c
  4451  0104DA  EC1F  F08D         	call	_EUSART1_Read	;wreg free
  4452  0104DE  6EDF               	movwf	indf2,c
  4453                           
  4454                           ;mdb.c: 291: mdb_waitr();
  4455  0104E0  EC66  F08D         	call	_mdb_waitr	;wreg free
  4456                           
  4457                           ;mdb.c: 293: mdbflags.isdata = RC1STAbits.RX9D;
  4458  0104E4  A09D               	btfss	3997,0,c	;volatile
  4459  0104E6  D002               	bra	u1315
  4460  0104E8  803E               	bsf	_mdbflags,0,c
  4461  0104EA  D001               	bra	u1317
  4462  0104EC                     u1315:
  4463  0104EC  903E               	bcf	_mdbflags,0,c
  4464  0104EE                     u1317:
  4465                           
  4466                           ;mdb.c: 294: TMR1_Initialize();
  4467  0104EE  EC2B  F08B         	call	_TMR1_Initialize	;wreg free
  4468                           
  4469                           ;mdb.c: 295: i++;
  4470  0104F2  2A21               	incf	mdb_comm@i,f,c
  4471  0104F4                     l2444:
  4472  0104F4  010E               	movlb	14	; () banked
  4473  0104F6  ABCD               	btfss	205,5,b	;volatile
  4474  0104F8  D002               	goto	u1330
  4475                           
  4476                           ; BSR set to: 14
  4477  0104FA  A03E               	btfss	_mdbflags,0,c
  4478  0104FC  D7E6               	goto	l2445
  4479  0104FE                     u1330:
  4480                           
  4481                           ; BSR set to: 14
  4482                           
  4483                           ; BSR set to: 14
  4484  0104FE  010E               	movlb	14	; () banked
  4485  010500  B1CE               	btfsc	206,0,b	;volatile
  4486  010502  D002               	goto	u1350
  4487                           
  4488                           ; BSR set to: 14
  4489  010504  A03E               	btfss	_mdbflags,0,c
  4490  010506  D7DD               	goto	l2443
  4491  010508                     u1350:
  4492                           
  4493                           ; BSR set to: 14
  4494                           ;mdb.c: 297: }
  4495                           ;mdb.c: 299: }
  4496                           ;mdb.c: 301: i--;
  4497                           
  4498                           ; BSR set to: 14
  4499                           
  4500                           ; BSR set to: 14
  4501  010508  0621               	decf	mdb_comm@i,f,c
  4502                           
  4503                           ; BSR set to: 14
  4504                           ;mdb.c: 303: mdbflags.timeout = PIR4bits.TMR1IF;
  4505  01050A  A1CE               	btfss	206,0,b	;volatile
  4506  01050C  D002               	bra	u1365
  4507  01050E  863E               	bsf	_mdbflags,3,c
  4508  010510  D001               	bra	u1367
  4509  010512                     u1365:
  4510  010512  963E               	bcf	_mdbflags,3,c
  4511  010514                     u1367:
  4512                           
  4513                           ;mdb.c: 305: if(mdbflags.isdata == 1 && mdbdata[i] != 0x00)
  4514  010514  A03E               	btfss	_mdbflags,0,c
  4515  010516  D011               	goto	l2452
  4516  010518  5021               	movf	mdb_comm@i,w,c
  4517  01051A  0D01               	mullw	1
  4518  01051C  0E60               	movlw	low _mdbdata
  4519  01051E  24F3               	addwf	prodl,w,c
  4520  010520  6ED9               	movwf	fsr2l,c
  4521  010522  0E00               	movlw	high _mdbdata
  4522  010524  20F4               	addwfc	prodh,w,c
  4523  010526  6EDA               	movwf	fsr2h,c
  4524  010528  50DF               	movf	indf2,w,c
  4525  01052A  B4D8               	btfsc	status,2,c
  4526  01052C  D006               	goto	l2452
  4527                           
  4528                           ;mdb.c: 306: {
  4529                           ;mdb.c: 307: TX1STAbits.TX9D = 1;
  4530  01052E  809E               	bsf	3998,0,c	;volatile
  4531                           
  4532                           ;mdb.c: 308: mdb_on();
  4533  010530  EC6C  F08D         	call	_mdb_on	;wreg free
  4534                           
  4535                           ;mdb.c: 309: mdb_transmit(0x00);
  4536  010534  0E00               	movlw	0
  4537  010536  EC31  F08D         	call	_mdb_transmit
  4538  01053A                     l2452:
  4539                           
  4540                           ;mdb.c: 311: }
  4541                           ;mdb.c: 313: mdb_on();
  4542  01053A  EC6C  F08D         	call	_mdb_on	;wreg free
  4543                           
  4544                           ;mdb.c: 315: return(i);
  4545  01053E  5021               	movf	mdb_comm@i,w,c
  4546  010540  0012               	return	
  4547  010542                     __end_of_mdb_comm:
  4548                           	opt stack 0
  4549                           tblptru	equ	0xFF8
  4550                           tblptrh	equ	0xFF7
  4551                           tblptrl	equ	0xFF6
  4552                           tablat	equ	0xFF5
  4553                           prodh	equ	0xFF4
  4554                           prodl	equ	0xFF3
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           indf2	equ	0xFDF
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _mdb_waitr *****************
  4563 ;; Defined at:
  4564 ;;		line 339 in file "mdb.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;		None
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;		None
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		None
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;Total ram usage:        0 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    2
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_mdb_comm
  4589 ;;		_cctalk_read
  4590 ;; This function uses a non-reentrant model
  4591 ;;
  4592                           
  4593                           	psect	text18
  4594  011ACC                     __ptext18:
  4595                           	opt stack 0
  4596  011ACC                     _mdb_waitr:
  4597                           	opt stack 24
  4598                           
  4599                           ;mdb.c: 342: {
  4600                           
  4601                           ;mdb.c: 341: while(BAUD1CONbits.RCIDL == 0)
  4602                           
  4603                           ;incstack = 0
  4604  011ACC  BC9F               	btfsc	3999,6,c	;volatile
  4605  011ACE  0012               	return	
  4606  011AD0  D7FD               	goto	_mdb_waitr
  4607  011AD2                     __end_of_mdb_waitr:
  4608                           	opt stack 0
  4609                           tblptru	equ	0xFF8
  4610                           tblptrh	equ	0xFF7
  4611                           tblptrl	equ	0xFF6
  4612                           tablat	equ	0xFF5
  4613                           prodh	equ	0xFF4
  4614                           prodl	equ	0xFF3
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           indf2	equ	0xFDF
  4618                           fsr2h	equ	0xFDA
  4619                           fsr2l	equ	0xFD9
  4620                           status	equ	0xFD8
  4621                           
  4622 ;; *************** function _mdb_transmit *****************
  4623 ;; Defined at:
  4624 ;;		line 440 in file "mdb.c"
  4625 ;; Parameters:    Size  Location     Type
  4626 ;;  txbyte          1    wreg     unsigned char 
  4627 ;; Auto vars:     Size  Location     Type
  4628 ;;  txbyte          1   19[COMRAM] unsigned char 
  4629 ;; Return value:  Size  Location     Type
  4630 ;;                  1    wreg      void 
  4631 ;; Registers used:
  4632 ;;		wreg, status,2, cstack
  4633 ;; Tracked objects:
  4634 ;;		On entry : 0/0
  4635 ;;		On exit  : 0/0
  4636 ;;		Unchanged: 0/0
  4637 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4642 ;;Total ram usage:        1 bytes
  4643 ;; Hardware stack levels used:    1
  4644 ;; Hardware stack levels required when called:    3
  4645 ;; This function calls:
  4646 ;;		_EUSART1_Write
  4647 ;;		_mdb_waitx
  4648 ;; This function is called by:
  4649 ;;		_mdb_comm
  4650 ;;		_cctalk_comm
  4651 ;;		_mdb_test
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text19
  4656  011A62                     __ptext19:
  4657                           	opt stack 0
  4658  011A62                     _mdb_transmit:
  4659                           	opt stack 23
  4660                           
  4661                           ;incstack = 0
  4662                           ;mdb_transmit@txbyte stored from wreg
  4663  011A62  6E1E               	movwf	mdb_transmit@txbyte,c
  4664                           
  4665                           ;mdb.c: 442: EUSART1_Write(txbyte);
  4666  011A64  501E               	movf	mdb_transmit@txbyte,w,c
  4667  011A66  EC38  F08D         	call	_EUSART1_Write
  4668                           
  4669                           ;mdb.c: 443: mdb_waitx();
  4670  011A6A  EC69  F08D         	call	_mdb_waitx	;wreg free
  4671  011A6E  0012               	return		;funcret
  4672  011A70                     __end_of_mdb_transmit:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           postinc0	equ	0xFEE
  4681                           wreg	equ	0xFE8
  4682                           indf2	equ	0xFDF
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _mdb_waitx *****************
  4688 ;; Defined at:
  4689 ;;		line 331 in file "mdb.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		None
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    2
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_mdb_transmit
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text20
  4718  011AD2                     __ptext20:
  4719                           	opt stack 0
  4720  011AD2                     _mdb_waitx:
  4721                           	opt stack 23
  4722                           
  4723                           ;mdb.c: 334: {
  4724                           
  4725                           ;mdb.c: 333: while(TX1STAbits.TRMT == 0)
  4726                           
  4727                           ;incstack = 0
  4728  011AD2  B29E               	btfsc	3998,1,c	;volatile
  4729  011AD4  0012               	return	
  4730  011AD6  D7FD               	goto	_mdb_waitx
  4731  011AD8                     __end_of_mdb_waitx:
  4732                           	opt stack 0
  4733                           tblptru	equ	0xFF8
  4734                           tblptrh	equ	0xFF7
  4735                           tblptrl	equ	0xFF6
  4736                           tablat	equ	0xFF5
  4737                           prodh	equ	0xFF4
  4738                           prodl	equ	0xFF3
  4739                           postinc0	equ	0xFEE
  4740                           wreg	equ	0xFE8
  4741                           indf2	equ	0xFDF
  4742                           fsr2h	equ	0xFDA
  4743                           fsr2l	equ	0xFD9
  4744                           status	equ	0xFD8
  4745                           
  4746 ;; *************** function _EUSART1_Write *****************
  4747 ;; Defined at:
  4748 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  4749 ;; Parameters:    Size  Location     Type
  4750 ;;  txData          1    wreg     unsigned char 
  4751 ;; Auto vars:     Size  Location     Type
  4752 ;;  txData          1   18[COMRAM] unsigned char 
  4753 ;; Return value:  Size  Location     Type
  4754 ;;                  1    wreg      void 
  4755 ;; Registers used:
  4756 ;;		wreg
  4757 ;; Tracked objects:
  4758 ;;		On entry : 0/0
  4759 ;;		On exit  : 0/0
  4760 ;;		Unchanged: 0/0
  4761 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;Total ram usage:        1 bytes
  4767 ;; Hardware stack levels used:    1
  4768 ;; Hardware stack levels required when called:    2
  4769 ;; This function calls:
  4770 ;;		Nothing
  4771 ;; This function is called by:
  4772 ;;		_mdb_transmit
  4773 ;; This function uses a non-reentrant model
  4774 ;;
  4775                           
  4776                           	psect	text21
  4777  011A70                     __ptext21:
  4778                           	opt stack 0
  4779  011A70                     _EUSART1_Write:
  4780                           	opt stack 23
  4781                           
  4782                           ;incstack = 0
  4783                           ;EUSART1_Write@txData stored from wreg
  4784  011A70  6E1D               	movwf	EUSART1_Write@txData,c
  4785  011A72                     
  4786                           ;eusart1.c: 96: {
  4787                           
  4788                           ;eusart1.c: 95: while(0 == PIR3bits.TX1IF)
  4789  011A72  010E               	movlb	14	; () banked
  4790  011A74  A9CD               	btfss	205,4,b	;volatile
  4791  011A76  D7FD               	goto	l5202
  4792                           
  4793                           ; BSR set to: 14
  4794                           ;eusart1.c: 97: }
  4795                           ;eusart1.c: 99: TX1REG = txData;
  4796                           
  4797                           ; BSR set to: 14
  4798  011A78  C01D  FF9A         	movff	EUSART1_Write@txData,3994	;volatile
  4799                           
  4800                           ; BSR set to: 14
  4801  011A7C  0012               	return		;funcret
  4802  011A7E                     __end_of_EUSART1_Write:
  4803                           	opt stack 0
  4804                           tblptru	equ	0xFF8
  4805                           tblptrh	equ	0xFF7
  4806                           tblptrl	equ	0xFF6
  4807                           tablat	equ	0xFF5
  4808                           prodh	equ	0xFF4
  4809                           prodl	equ	0xFF3
  4810                           postinc0	equ	0xFEE
  4811                           wreg	equ	0xFE8
  4812                           indf2	equ	0xFDF
  4813                           fsr2h	equ	0xFDA
  4814                           fsr2l	equ	0xFD9
  4815                           status	equ	0xFD8
  4816                           
  4817 ;; *************** function _mdb_on *****************
  4818 ;; Defined at:
  4819 ;;		line 318 in file "mdb.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;		None
  4822 ;; Auto vars:     Size  Location     Type
  4823 ;;		None
  4824 ;; Return value:  Size  Location     Type
  4825 ;;                  1    wreg      void 
  4826 ;; Registers used:
  4827 ;;		None
  4828 ;; Tracked objects:
  4829 ;;		On entry : 0/0
  4830 ;;		On exit  : 0/0
  4831 ;;		Unchanged: 0/0
  4832 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;Total ram usage:        0 bytes
  4838 ;; Hardware stack levels used:    1
  4839 ;; Hardware stack levels required when called:    2
  4840 ;; This function calls:
  4841 ;;		Nothing
  4842 ;; This function is called by:
  4843 ;;		_mdb_comm
  4844 ;;		_cctalk_init
  4845 ;;		_mdb_test
  4846 ;; This function uses a non-reentrant model
  4847 ;;
  4848                           
  4849                           	psect	text22
  4850  011AD8                     __ptext22:
  4851                           	opt stack 0
  4852  011AD8                     _mdb_on:
  4853                           	opt stack 24
  4854                           
  4855                           ;mdb.c: 324: LATCbits.LATC0 = 1;
  4856                           
  4857                           ; BSR set to: 14
  4858                           ;incstack = 0
  4859  011AD8  8085               	bsf	3973,0,c	;volatile
  4860                           
  4861                           ;mdb.c: 325: LATCbits.LATC1 = 0;
  4862  011ADA  9285               	bcf	3973,1,c	;volatile
  4863  011ADC  0012               	return		;funcret
  4864  011ADE                     __end_of_mdb_on:
  4865                           	opt stack 0
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           postinc0	equ	0xFEE
  4873                           wreg	equ	0xFE8
  4874                           indf2	equ	0xFDF
  4875                           fsr2h	equ	0xFDA
  4876                           fsr2l	equ	0xFD9
  4877                           status	equ	0xFD8
  4878                           
  4879 ;; *************** function _init_mdbdata *****************
  4880 ;; Defined at:
  4881 ;;		line 13 in file "mdb.c"
  4882 ;; Parameters:    Size  Location     Type
  4883 ;;  initdata        1    wreg     unsigned char 
  4884 ;; Auto vars:     Size  Location     Type
  4885 ;;  initdata        1   18[COMRAM] unsigned char 
  4886 ;;  i               1   19[COMRAM] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      void 
  4889 ;; Registers used:
  4890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4897 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;Total ram usage:        2 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    2
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_mdb_noten
  4907 ;;		_mdb_security
  4908 ;;		_mdb_comm
  4909 ;;		_cctalk_pinenter
  4910 ;;		_cctalk_comm
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text23
  4915  0118A4                     __ptext23:
  4916                           	opt stack 0
  4917  0118A4                     _init_mdbdata:
  4918                           	opt stack 24
  4919                           
  4920                           ;incstack = 0
  4921                           ;init_mdbdata@initdata stored from wreg
  4922  0118A4  6E1D               	movwf	init_mdbdata@initdata,c
  4923                           
  4924                           ;mdb.c: 15: for(uint8_t i = 0;i < 33; i++)
  4925  0118A6  0E00               	movlw	0
  4926  0118A8  6E1E               	movwf	init_mdbdata@i,c
  4927  0118AA                     l5352:
  4928  0118AA  0E20               	movlw	32
  4929  0118AC  641E               	cpfsgt	init_mdbdata@i,c
  4930  0118AE  D001               	goto	l2355
  4931  0118B0  0012               	return	
  4932  0118B2                     l2355:
  4933                           
  4934                           ;mdb.c: 16: {
  4935                           ;mdb.c: 17: mdbdata[i] = initdata;
  4936  0118B2  501E               	movf	init_mdbdata@i,w,c
  4937  0118B4  0D01               	mullw	1
  4938  0118B6  0E60               	movlw	low _mdbdata
  4939  0118B8  24F3               	addwf	prodl,w,c
  4940  0118BA  6ED9               	movwf	fsr2l,c
  4941  0118BC  0E00               	movlw	high _mdbdata
  4942  0118BE  20F4               	addwfc	prodh,w,c
  4943  0118C0  6EDA               	movwf	fsr2h,c
  4944  0118C2  C01D  FFDF         	movff	init_mdbdata@initdata,indf2
  4945  0118C6  2A1E               	incf	init_mdbdata@i,f,c
  4946  0118C8  D7F0               	goto	l5352
  4947  0118CA                     __end_of_init_mdbdata:
  4948                           	opt stack 0
  4949                           tblptru	equ	0xFF8
  4950                           tblptrh	equ	0xFF7
  4951                           tblptrl	equ	0xFF6
  4952                           tablat	equ	0xFF5
  4953                           prodh	equ	0xFF4
  4954                           prodl	equ	0xFF3
  4955                           postinc0	equ	0xFEE
  4956                           wreg	equ	0xFE8
  4957                           indf2	equ	0xFDF
  4958                           fsr2h	equ	0xFDA
  4959                           fsr2l	equ	0xFD9
  4960                           status	equ	0xFD8
  4961                           
  4962 ;; *************** function _EUSART1_Read *****************
  4963 ;; Defined at:
  4964 ;;		line 75 in file "mcc_generated_files/eusart1.c"
  4965 ;; Parameters:    Size  Location     Type
  4966 ;;		None
  4967 ;; Auto vars:     Size  Location     Type
  4968 ;;		None
  4969 ;; Return value:  Size  Location     Type
  4970 ;;                  1    wreg      unsigned char 
  4971 ;; Registers used:
  4972 ;;		wreg, status,2
  4973 ;; Tracked objects:
  4974 ;;		On entry : 0/0
  4975 ;;		On exit  : 0/0
  4976 ;;		Unchanged: 0/0
  4977 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  4978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4982 ;;Total ram usage:        0 bytes
  4983 ;; Hardware stack levels used:    1
  4984 ;; Hardware stack levels required when called:    2
  4985 ;; This function calls:
  4986 ;;		Nothing
  4987 ;; This function is called by:
  4988 ;;		_mdb_comm
  4989 ;;		_cctalk_read
  4990 ;; This function uses a non-reentrant model
  4991 ;;
  4992                           
  4993                           	psect	text24
  4994  011A3E                     __ptext24:
  4995                           	opt stack 0
  4996  011A3E                     _EUSART1_Read:
  4997                           	opt stack 24
  4998                           
  4999                           ;eusart1.c: 78: {
  5000                           
  5001                           ;eusart1.c: 77: while(!PIR3bits.RC1IF)
  5002                           
  5003                           ;incstack = 0
  5004  011A3E  010E               	movlb	14	; () banked
  5005  011A40  ABCD               	btfss	205,5,b	;volatile
  5006  011A42  D7FD               	goto	_EUSART1_Read
  5007                           
  5008                           ; BSR set to: 14
  5009                           ;eusart1.c: 79: }
  5010                           ;eusart1.c: 82: if(1 == RC1STAbits.OERR)
  5011  011A44  A29D               	btfss	3997,1,c	;volatile
  5012  011A46  D002               	goto	l101
  5013                           
  5014                           ; BSR set to: 14
  5015                           ;eusart1.c: 83: {
  5016                           ;eusart1.c: 86: RC1STAbits.CREN = 0;
  5017  011A48  989D               	bcf	3997,4,c	;volatile
  5018                           
  5019                           ;eusart1.c: 87: RC1STAbits.CREN = 1;
  5020  011A4A  889D               	bsf	3997,4,c	;volatile
  5021  011A4C                     l101:
  5022                           
  5023                           ; BSR set to: 14
  5024                           ;eusart1.c: 88: }
  5025                           ;eusart1.c: 90: return RC1REG;
  5026                           
  5027                           ; BSR set to: 14
  5028  011A4C  5099               	movf	3993,w,c	;volatile
  5029  011A4E  0012               	return	
  5030  011A50                     __end_of_EUSART1_Read:
  5031                           	opt stack 0
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           postinc0	equ	0xFEE
  5039                           wreg	equ	0xFE8
  5040                           indf2	equ	0xFDF
  5041                           fsr2h	equ	0xFDA
  5042                           fsr2l	equ	0xFD9
  5043                           status	equ	0xFD8
  5044                           
  5045 ;; *************** function _lcd_init *****************
  5046 ;; Defined at:
  5047 ;;		line 10 in file "lcd.c"
  5048 ;; Parameters:    Size  Location     Type
  5049 ;;		None
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;		None
  5052 ;; Return value:  Size  Location     Type
  5053 ;;                  1    wreg      void 
  5054 ;; Registers used:
  5055 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5056 ;; Tracked objects:
  5057 ;;		On entry : 0/0
  5058 ;;		On exit  : 0/0
  5059 ;;		Unchanged: 0/0
  5060 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5063 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5065 ;;Total ram usage:        2 bytes
  5066 ;; Hardware stack levels used:    1
  5067 ;; Hardware stack levels required when called:    8
  5068 ;; This function calls:
  5069 ;;		_lcd_clockE
  5070 ;;		_lcd_test
  5071 ;;		_lcd_write
  5072 ;; This function is called by:
  5073 ;;		_main
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           	psect	text25
  5078  010C54                     __ptext25:
  5079                           	opt stack 0
  5080  010C54                     _lcd_init:
  5081                           	opt stack 22
  5082                           
  5083                           ;lcd.c: 12: LATE = 0x00;
  5084                           
  5085                           ; BSR set to: 14
  5086                           ;incstack = 0
  5087  010C54  0E00               	movlw	0
  5088  010C56  6E87               	movwf	3975,c	;volatile
  5089                           
  5090                           ;lcd.c: 14: LATD = 0x03;
  5091  010C58  0E03               	movlw	3
  5092  010C5A  6E86               	movwf	3974,c	;volatile
  5093                           
  5094                           ;lcd.c: 15: for(count = 3; count > 0; count-- )
  5095  010C5C  0E03               	movlw	3
  5096  010C5E  6E4C               	movwf	_count,c
  5097  010C60                     l7144:
  5098  010C60  504C               	movf	_count,w,c
  5099  010C62  0A80               	xorlw	128
  5100  010C64  0F7F               	addlw	-129
  5101  010C66  A0D8               	btfss	status,0,c
  5102  010C68  D00B               	goto	u2330
  5103                           
  5104                           ;lcd.c: 16: {
  5105                           ;lcd.c: 17: lcd_clockE();
  5106  010C6A  EC46  F08D         	call	_lcd_clockE	;wreg free
  5107                           
  5108                           ;lcd.c: 18: _delay((unsigned long)((5)*(12000000/4000.0)));
  5109  010C6E  0E14               	movlw	20
  5110  010C70  6E25               	movwf	??_lcd_init& (0+255),c
  5111  010C72  0E7A               	movlw	122
  5112  010C74                     u2507:
  5113  010C74  2EE8               	decfsz	wreg,f,c
  5114  010C76  D7FE               	bra	u2507
  5115  010C78  2E25               	decfsz	??_lcd_init& (0+255),f,c
  5116  010C7A  D7FC               	bra	u2507
  5117  010C7C  064C               	decf	_count,f,c
  5118  010C7E  D7F0               	goto	l7144
  5119  010C80                     u2330:
  5120                           
  5121                           ;lcd.c: 20: }
  5122                           ;lcd.c: 21: _delay((unsigned long)((50)*(12000000/4000000.0)));
  5123  010C80  0E32               	movlw	50
  5124  010C82                     u2517:
  5125  010C82  2EE8               	decfsz	wreg,f,c
  5126  010C84  D7FE               	bra	u2517
  5127                           
  5128                           ;lcd.c: 22: LATD = 0x02;
  5129  010C86  0E02               	movlw	2
  5130  010C88  6E86               	movwf	3974,c	;volatile
  5131                           
  5132                           ;lcd.c: 23: lcd_clockE();
  5133  010C8A  EC46  F08D         	call	_lcd_clockE	;wreg free
  5134                           
  5135                           ;lcd.c: 26: lcd_write(dispfunc3);
  5136  010C8E  0EA3               	movlw	low _dispfunc3
  5137  010C90  6EF6               	movwf	tblptrl,c
  5138  010C92                     	if	1	;There is more than 1 active tblptr byte
  5139  010C92  0EFD               	movlw	high _dispfunc3
  5140  010C94  6EF7               	movwf	tblptrh,c
  5141  010C96                     	endif
  5142  010C96                     	if	1	;There are 3 active tblptr bytes
  5143  010C96  0E00               	movlw	low (_dispfunc3 shr (0+16))
  5144  010C98  6EF8               	movwf	tblptru,c
  5145  010C9A                     	endif
  5146  010C9A  0008               	tblrd		*
  5147  010C9C  50F5               	movf	tablat,w,c
  5148  010C9E  ECC6  F08B         	call	_lcd_write
  5149                           
  5150                           ;lcd.c: 28: lcd_write(dispon);
  5151  010CA2  0EA2               	movlw	low _dispon
  5152  010CA4  6EF6               	movwf	tblptrl,c
  5153  010CA6                     	if	1	;There is more than 1 active tblptr byte
  5154  010CA6  0EFD               	movlw	high _dispon
  5155  010CA8  6EF7               	movwf	tblptrh,c
  5156  010CAA                     	endif
  5157  010CAA                     	if	1	;There are 3 active tblptr bytes
  5158  010CAA  0E00               	movlw	low (_dispon shr (0+16))
  5159  010CAC  6EF8               	movwf	tblptru,c
  5160  010CAE                     	endif
  5161  010CAE  0008               	tblrd		*
  5162  010CB0  50F5               	movf	tablat,w,c
  5163  010CB2  ECC6  F08B         	call	_lcd_write
  5164                           
  5165                           ;lcd.c: 30: lcd_write(dispnormal);
  5166  010CB6  0E9E               	movlw	low _dispnormal
  5167  010CB8  6EF6               	movwf	tblptrl,c
  5168  010CBA                     	if	1	;There is more than 1 active tblptr byte
  5169  010CBA  0EFD               	movlw	high _dispnormal
  5170  010CBC  6EF7               	movwf	tblptrh,c
  5171  010CBE                     	endif
  5172  010CBE                     	if	1	;There are 3 active tblptr bytes
  5173  010CBE  0E00               	movlw	low (_dispnormal shr (0+16))
  5174  010CC0  6EF8               	movwf	tblptru,c
  5175  010CC2                     	endif
  5176  010CC2  0008               	tblrd		*
  5177  010CC4  50F5               	movf	tablat,w,c
  5178  010CC6  ECC6  F08B         	call	_lcd_write
  5179                           
  5180                           ;lcd.c: 32: lcd_write(dispclr);
  5181  010CCA  0EA1               	movlw	low _dispclr
  5182  010CCC  6EF6               	movwf	tblptrl,c
  5183  010CCE                     	if	1	;There is more than 1 active tblptr byte
  5184  010CCE  0EFD               	movlw	high _dispclr
  5185  010CD0  6EF7               	movwf	tblptrh,c
  5186  010CD2                     	endif
  5187  010CD2                     	if	1	;There are 3 active tblptr bytes
  5188  010CD2  0E00               	movlw	low (_dispclr shr (0+16))
  5189  010CD4  6EF8               	movwf	tblptru,c
  5190  010CD6                     	endif
  5191  010CD6  0008               	tblrd		*
  5192  010CD8  50F5               	movf	tablat,w,c
  5193  010CDA  ECC6  F08B         	call	_lcd_write
  5194                           
  5195                           ;lcd.c: 34: lcd_test();
  5196  010CDE  ECFF  F08C         	call	_lcd_test	;wreg free
  5197                           
  5198                           ;lcd.c: 35: _delay((unsigned long)((250)*(12000000/4000.0)));
  5199  010CE2  0E04               	movlw	4
  5200  010CE4  6E26               	movwf	(??_lcd_init+1)& (0+255),c
  5201  010CE6  0ECF               	movlw	207
  5202  010CE8  6E25               	movwf	??_lcd_init& (0+255),c
  5203  010CEA  0E02               	movlw	2
  5204  010CEC                     u2527:
  5205  010CEC  2EE8               	decfsz	wreg,f,c
  5206  010CEE  D7FE               	bra	u2527
  5207  010CF0  2E25               	decfsz	??_lcd_init& (0+255),f,c
  5208  010CF2  D7FC               	bra	u2527
  5209  010CF4  2E26               	decfsz	(??_lcd_init+1)& (0+255),f,c
  5210  010CF6  D7FA               	bra	u2527
  5211  010CF8  F000               	nop		;# 
  5212  010CFA  0012               	return		;funcret
  5213  010CFC                     __end_of_lcd_init:
  5214                           	opt stack 0
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           prodh	equ	0xFF4
  5220                           prodl	equ	0xFF3
  5221                           postinc0	equ	0xFEE
  5222                           wreg	equ	0xFE8
  5223                           indf2	equ	0xFDF
  5224                           fsr2h	equ	0xFDA
  5225                           fsr2l	equ	0xFD9
  5226                           status	equ	0xFD8
  5227                           
  5228 ;; *************** function _lcd_test *****************
  5229 ;; Defined at:
  5230 ;;		line 246 in file "lcd.c"
  5231 ;; Parameters:    Size  Location     Type
  5232 ;;		None
  5233 ;; Auto vars:     Size  Location     Type
  5234 ;;  character       1   25[COMRAM] unsigned char 
  5235 ;; Return value:  Size  Location     Type
  5236 ;;                  1    wreg      void 
  5237 ;; Registers used:
  5238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5239 ;; Tracked objects:
  5240 ;;		On entry : 0/0
  5241 ;;		On exit  : 0/0
  5242 ;;		Unchanged: 0/0
  5243 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5247 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5248 ;;Total ram usage:        1 bytes
  5249 ;; Hardware stack levels used:    1
  5250 ;; Hardware stack levels required when called:    7
  5251 ;; This function calls:
  5252 ;;		_lcd_writeC
  5253 ;; This function is called by:
  5254 ;;		_lcd_init
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text26
  5259  0119FE                     __ptext26:
  5260                           	opt stack 0
  5261  0119FE                     _lcd_test:
  5262                           	opt stack 22
  5263                           
  5264                           ;lcd.c: 248: uint8_t character = 0x30;
  5265                           
  5266                           ;incstack = 0
  5267  0119FE  0E30               	movlw	48
  5268  011A00  D004               	goto	L12
  5269  011A02                     
  5270                           ;lcd.c: 250: {
  5271                           ;lcd.c: 251: lcd_writeC(character);
  5272  011A02  5024               	movf	lcd_test@character,w,c
  5273  011A04  ECFD  F088         	call	_lcd_writeC
  5274                           
  5275                           ;lcd.c: 252: character = character+ 1;
  5276  011A08  2824               	incf	lcd_test@character,w,c
  5277  011A0A                     L12:
  5278  011A0A  6E24               	movwf	lcd_test@character,c
  5279  011A0C  0E7F               	movlw	127
  5280  011A0E  6424               	cpfsgt	lcd_test@character,c
  5281  011A10  D7F8               	goto	l1368
  5282  011A12  0012               	return	
  5283  011A14                     __end_of_lcd_test:
  5284                           	opt stack 0
  5285                           tblptru	equ	0xFF8
  5286                           tblptrh	equ	0xFF7
  5287                           tblptrl	equ	0xFF6
  5288                           tablat	equ	0xFF5
  5289                           prodh	equ	0xFF4
  5290                           prodl	equ	0xFF3
  5291                           postinc0	equ	0xFEE
  5292                           wreg	equ	0xFE8
  5293                           indf2	equ	0xFDF
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function _enter_service *****************
  5299 ;; Defined at:
  5300 ;;		line 165 in file "main.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  1    wreg      void 
  5307 ;; Registers used:
  5308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:   11
  5321 ;; This function calls:
  5322 ;;		_Audit
  5323 ;;		_Clear_cred
  5324 ;;		_Hopper_coin
  5325 ;;		_Sensor_set
  5326 ;;		_Vend_setup
  5327 ;;		_butindb
  5328 ;;		_lcd_string
  5329 ;;		_mdb_unlock
  5330 ;;		_price_set
  5331 ;;		_set_notes
  5332 ;; This function is called by:
  5333 ;;		_main
  5334 ;; This function uses a non-reentrant model
  5335 ;;
  5336                           
  5337                           	psect	text27
  5338  010CFC                     __ptext27:
  5339                           	opt stack 0
  5340  010CFC                     _enter_service:
  5341                           	opt stack 19
  5342                           
  5343                           ;main.c: 167: mdb_unlock();
  5344                           
  5345                           ;incstack = 0
  5346  010CFC  ECF6  F083         	call	_mdb_unlock	;wreg free
  5347                           
  5348                           ;main.c: 168: lcd_string(servmsg, line1);
  5349  010D00  0E38               	movlw	low _servmsg
  5350  010D02  6E24               	movwf	lcd_string@lcdstring,c
  5351  010D04  0EFE               	movlw	high _servmsg
  5352  010D06  6E25               	movwf	lcd_string@lcdstring+1,c
  5353  010D08  0E97               	movlw	low _line1
  5354  010D0A  6EF6               	movwf	tblptrl,c
  5355  010D0C                     	if	1	;There is more than 1 active tblptr byte
  5356  010D0C  0EFD               	movlw	high _line1
  5357  010D0E  6EF7               	movwf	tblptrh,c
  5358  010D10                     	endif
  5359  010D10                     	if	1	;There are 3 active tblptr bytes
  5360  010D10  0E00               	movlw	low (_line1 shr (0+16))
  5361  010D12  6EF8               	movwf	tblptru,c
  5362  010D14                     	endif
  5363  010D14  0008               	tblrd		*
  5364  010D16  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5365  010D1A  EC78  F085         	call	_lcd_string	;wreg free
  5366                           
  5367                           ;main.c: 171: while(venflags.service)
  5368  010D1E  D036               	goto	l900
  5369  010D20                     
  5370                           ;main.c: 172: {
  5371                           ;main.c: 173: buttons = butindb();
  5372  010D20  ECAD  F08B         	call	_butindb	;wreg free
  5373  010D24  6E38               	movwf	_buttons,c	;volatile
  5374                           
  5375                           ;main.c: 174: switch(buttons)
  5376  010D26  D019               	goto	l898
  5377  010D28  EC73  F08D         	call	_Audit	;wreg free
  5378                           
  5379                           ;main.c: 177: break;
  5380  010D2C  D02F               	goto	l900
  5381  010D2E  EC8A  F083         	call	_Sensor_set	;wreg free
  5382                           
  5383                           ;main.c: 179: break;
  5384  010D32  D02C               	goto	l900
  5385  010D34  EC1A  F083         	call	_Hopper_coin	;wreg free
  5386                           
  5387                           ;main.c: 181: break;
  5388  010D38  D029               	goto	l900
  5389  010D3A  ECA1  F082         	call	_set_notes	;wreg free
  5390                           
  5391                           ;main.c: 183: break;
  5392  010D3E  D026               	goto	l900
  5393  010D40  EC5D  F089         	call	_Clear_cred	;wreg free
  5394                           
  5395                           ;main.c: 185: venflags.service = 0;
  5396  010D44  9E2F               	bcf	_venflags,7,c
  5397  010D46  00FF               	reset		;# 
  5398  010D48  ECDD  F087         	call	_price_set	;wreg free
  5399                           
  5400                           ;main.c: 188: break;
  5401  010D4C  D01F               	goto	l900
  5402  010D4E  EC65  F08A         	call	_Vend_setup	;wreg free
  5403                           
  5404                           ;main.c: 190: break;
  5405  010D52  D01C               	goto	l900
  5406  010D54                     l907:
  5407  010D54  9E2F               	bcf	_venflags,7,c
  5408  010D56  00FF               	reset		;# 
  5409                           
  5410                           ;main.c: 194: }
  5411                           
  5412                           ;main.c: 193: break;
  5413  010D58  D019               	goto	l900
  5414  010D5A                     l898:
  5415  010D5A  5038               	movf	_buttons,w,c	;volatile
  5416                           
  5417                           ; Switch size 1, requested type "space"
  5418                           ; Number of cases is 8, Range of values is 1 to 128
  5419                           ; switch strategies available:
  5420                           ; Name         Instructions Cycles
  5421                           ; simple_byte           25    13 (average)
  5422                           ;	Chosen strategy is simple_byte
  5423  010D5C  0A01               	xorlw	1	; case 1
  5424  010D5E  B4D8               	btfsc	status,2,c
  5425  010D60  D7E3               	goto	l899
  5426  010D62  0A03               	xorlw	3	; case 2
  5427  010D64  B4D8               	btfsc	status,2,c
  5428  010D66  D7E3               	goto	l901
  5429  010D68  0A06               	xorlw	6	; case 4
  5430  010D6A  B4D8               	btfsc	status,2,c
  5431  010D6C  D7E3               	goto	l902
  5432  010D6E  0A0C               	xorlw	12	; case 8
  5433  010D70  B4D8               	btfsc	status,2,c
  5434  010D72  D7E3               	goto	l903
  5435  010D74  0A18               	xorlw	24	; case 16
  5436  010D76  B4D8               	btfsc	status,2,c
  5437  010D78  D7E3               	goto	l904
  5438  010D7A  0A30               	xorlw	48	; case 32
  5439  010D7C  B4D8               	btfsc	status,2,c
  5440  010D7E  D7E4               	goto	l905
  5441  010D80  0A60               	xorlw	96	; case 64
  5442  010D82  B4D8               	btfsc	status,2,c
  5443  010D84  D7E4               	goto	l906
  5444  010D86  0AC0               	xorlw	192	; case 128
  5445  010D88  B4D8               	btfsc	status,2,c
  5446  010D8A  D7E4               	goto	l907
  5447  010D8C                     l900:
  5448  010D8C  AE2F               	btfss	_venflags,7,c
  5449  010D8E  0012               	return	
  5450  010D90  D7C7               	goto	l897
  5451  010D92                     __end_of_enter_service:
  5452                           	opt stack 0
  5453                           tblptru	equ	0xFF8
  5454                           tblptrh	equ	0xFF7
  5455                           tblptrl	equ	0xFF6
  5456                           tablat	equ	0xFF5
  5457                           prodh	equ	0xFF4
  5458                           prodl	equ	0xFF3
  5459                           postinc0	equ	0xFEE
  5460                           wreg	equ	0xFE8
  5461                           indf2	equ	0xFDF
  5462                           fsr2h	equ	0xFDA
  5463                           fsr2l	equ	0xFD9
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function _set_notes *****************
  5467 ;; Defined at:
  5468 ;;		line 57 in file "mdb.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;                  1    wreg      void 
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:   10
  5489 ;; This function calls:
  5490 ;;		_butindb
  5491 ;;		_displ_note
  5492 ;;		_enable_notes
  5493 ;;		_lcd_string
  5494 ;; This function is called by:
  5495 ;;		_enter_service
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text28
  5500  010542                     __ptext28:
  5501                           	opt stack 0
  5502  010542                     _set_notes:
  5503                           	opt stack 19
  5504                           
  5505                           ;mdb.c: 59: lcd_string(setnotes, line1);
  5506                           
  5507                           ;incstack = 0
  5508  010542  0EF3               	movlw	low _setnotes
  5509  010544  6E24               	movwf	lcd_string@lcdstring,c
  5510  010546  0EFD               	movlw	high _setnotes
  5511  010548  6E25               	movwf	lcd_string@lcdstring+1,c
  5512  01054A  0E97               	movlw	low _line1
  5513  01054C  6EF6               	movwf	tblptrl,c
  5514  01054E                     	if	1	;There is more than 1 active tblptr byte
  5515  01054E  0EFD               	movlw	high _line1
  5516  010550  6EF7               	movwf	tblptrh,c
  5517  010552                     	endif
  5518  010552                     	if	1	;There are 3 active tblptr bytes
  5519  010552  0E00               	movlw	low (_line1 shr (0+16))
  5520  010554  6EF8               	movwf	tblptru,c
  5521  010556                     	endif
  5522  010556  0008               	tblrd		*
  5523  010558  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5524  01055C  EC78  F085         	call	_lcd_string	;wreg free
  5525                           
  5526                           ;mdb.c: 60: mdbflags.noteset = 1;
  5527  010560  8A3E               	bsf	_mdbflags,5,c
  5528                           
  5529                           ;mdb.c: 61: mdbflags.endis = 1;
  5530  010562  8C3E               	bsf	_mdbflags,6,c
  5531                           
  5532                           ;mdb.c: 62: while(mdbflags.noteset)
  5533  010564  D064               	goto	l2370
  5534  010566                     
  5535                           ;mdb.c: 63: {
  5536                           ;mdb.c: 64: buttons = butindb();
  5537  010566  ECAD  F08B         	call	_butindb	;wreg free
  5538  01056A  6E38               	movwf	_buttons,c	;volatile
  5539                           
  5540                           ;mdb.c: 65: notenum = buttons;
  5541  01056C  C038  F04D         	movff	_buttons,_notenum	;volatile
  5542                           
  5543                           ;mdb.c: 66: switch(buttons)
  5544  010570  D048               	goto	l2372
  5545  010572  0EC8               	movlw	low _tenrand
  5546  010574  6E29               	movwf	displ_note@notestring,c
  5547  010576  0EFF               	movlw	high _tenrand
  5548  010578  6E2A               	movwf	displ_note@notestring+1,c
  5549  01057A  ECBE  F08A         	call	_displ_note	;wreg free
  5550  01057E  6E42               	movwf	_dspposition,c
  5551                           
  5552                           ;mdb.c: 70: enable_notes(0x01);
  5553  010580  0E01               	movlw	1
  5554  010582  EC1D  F088         	call	_enable_notes
  5555                           
  5556                           ;mdb.c: 71: break;
  5557  010586  D050               	goto	l2374
  5558  010588  0EE9               	movlw	low _twentyrand
  5559  01058A  6E29               	movwf	displ_note@notestring,c
  5560  01058C  0EFF               	movlw	high _twentyrand
  5561  01058E  6E2A               	movwf	displ_note@notestring+1,c
  5562  010590  ECBE  F08A         	call	_displ_note	;wreg free
  5563  010594  6E42               	movwf	_dspposition,c
  5564                           
  5565                           ;mdb.c: 74: enable_notes(0x02);
  5566  010596  0E02               	movlw	2
  5567  010598  EC1D  F088         	call	_enable_notes
  5568                           
  5569                           ;mdb.c: 75: break;
  5570  01059C  D045               	goto	l2374
  5571  01059E  0EE1               	movlw	low _fiftyrand
  5572  0105A0  6E29               	movwf	displ_note@notestring,c
  5573  0105A2  0EFF               	movlw	high _fiftyrand
  5574  0105A4  6E2A               	movwf	displ_note@notestring+1,c
  5575  0105A6  ECBE  F08A         	call	_displ_note	;wreg free
  5576  0105AA  6E42               	movwf	_dspposition,c
  5577                           
  5578                           ;mdb.c: 78: enable_notes(0x04);
  5579  0105AC  0E04               	movlw	4
  5580  0105AE  EC1D  F088         	call	_enable_notes
  5581                           
  5582                           ;mdb.c: 79: break;
  5583  0105B2  D03A               	goto	l2374
  5584  0105B4  0ED9               	movlw	low _hundredrand
  5585  0105B6  6E29               	movwf	displ_note@notestring,c
  5586  0105B8  0EFF               	movlw	high _hundredrand
  5587  0105BA  6E2A               	movwf	displ_note@notestring+1,c
  5588  0105BC  ECBE  F08A         	call	_displ_note	;wreg free
  5589  0105C0  6E42               	movwf	_dspposition,c
  5590                           
  5591                           ;mdb.c: 82: enable_notes(0x08);
  5592  0105C2  0E08               	movlw	8
  5593  0105C4  EC1D  F088         	call	_enable_notes
  5594                           
  5595                           ;mdb.c: 83: break;
  5596  0105C8  D02F               	goto	l2374
  5597  0105CA  0ED1               	movlw	low _twohundredrand
  5598  0105CC  6E29               	movwf	displ_note@notestring,c
  5599  0105CE  0EFF               	movlw	high _twohundredrand
  5600  0105D0  6E2A               	movwf	displ_note@notestring+1,c
  5601  0105D2  ECBE  F08A         	call	_displ_note	;wreg free
  5602  0105D6  6E42               	movwf	_dspposition,c
  5603                           
  5604                           ;mdb.c: 86: enable_notes(0x10);
  5605  0105D8  0E10               	movlw	16
  5606  0105DA  EC1D  F088         	call	_enable_notes
  5607                           
  5608                           ;mdb.c: 87: break;
  5609  0105DE  D024               	goto	l2374
  5610  0105E0  0E38               	movlw	low _servmsg
  5611  0105E2  6E24               	movwf	lcd_string@lcdstring,c
  5612  0105E4  0EFE               	movlw	high _servmsg
  5613  0105E6  6E25               	movwf	lcd_string@lcdstring+1,c
  5614  0105E8  0E97               	movlw	low _line1
  5615  0105EA  6EF6               	movwf	tblptrl,c
  5616  0105EC                     	if	1	;There is more than 1 active tblptr byte
  5617  0105EC  0EFD               	movlw	high _line1
  5618  0105EE  6EF7               	movwf	tblptrh,c
  5619  0105F0                     	endif
  5620  0105F0                     	if	1	;There are 3 active tblptr bytes
  5621  0105F0  0E00               	movlw	low (_line1 shr (0+16))
  5622  0105F2  6EF8               	movwf	tblptru,c
  5623  0105F4                     	endif
  5624  0105F4  0008               	tblrd		*
  5625  0105F6  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5626  0105FA  EC78  F085         	call	_lcd_string	;wreg free
  5627                           
  5628                           ;mdb.c: 90: mdbflags.noteset = 0;
  5629  0105FE  9A3E               	bcf	_mdbflags,5,c
  5630                           
  5631                           ;mdb.c: 92: }
  5632                           
  5633                           ;mdb.c: 91: default : break;
  5634  010600  D013               	goto	l2374
  5635  010602                     l2372:
  5636  010602  5038               	movf	_buttons,w,c	;volatile
  5637                           
  5638                           ; Switch size 1, requested type "space"
  5639                           ; Number of cases is 6, Range of values is 1 to 128
  5640                           ; switch strategies available:
  5641                           ; Name         Instructions Cycles
  5642                           ; simple_byte           19    10 (average)
  5643                           ;	Chosen strategy is simple_byte
  5644  010604  0A01               	xorlw	1	; case 1
  5645  010606  B4D8               	btfsc	status,2,c
  5646  010608  D7B4               	goto	l2373
  5647  01060A  0A03               	xorlw	3	; case 2
  5648  01060C  B4D8               	btfsc	status,2,c
  5649  01060E  D7BC               	goto	l2375
  5650  010610  0A06               	xorlw	6	; case 4
  5651  010612  B4D8               	btfsc	status,2,c
  5652  010614  D7C4               	goto	l2376
  5653  010616  0A0C               	xorlw	12	; case 8
  5654  010618  B4D8               	btfsc	status,2,c
  5655  01061A  D7CC               	goto	l2377
  5656  01061C  0A18               	xorlw	24	; case 16
  5657  01061E  B4D8               	btfsc	status,2,c
  5658  010620  D7D4               	goto	l2378
  5659  010622  0A90               	xorlw	144	; case 128
  5660  010624  B4D8               	btfsc	status,2,c
  5661  010626  D7DC               	goto	l2379
  5662  010628                     l2374:
  5663                           
  5664                           ;mdb.c: 93: ((uint8_t*) &noteen)[0] = noteen_byte;
  5665  010628  C03C  F03D         	movff	_noteen_byte,_noteen	;volatile
  5666  01062C  F000               	nop		;# 
  5667  01062E                     l2370:
  5668  01062E  AA3E               	btfss	_mdbflags,5,c
  5669  010630  0012               	return	
  5670  010632  D799               	goto	l2371
  5671  010634                     __end_of_set_notes:
  5672                           	opt stack 0
  5673                           tblptru	equ	0xFF8
  5674                           tblptrh	equ	0xFF7
  5675                           tblptrl	equ	0xFF6
  5676                           tablat	equ	0xFF5
  5677                           prodh	equ	0xFF4
  5678                           prodl	equ	0xFF3
  5679                           postinc0	equ	0xFEE
  5680                           wreg	equ	0xFE8
  5681                           indf2	equ	0xFDF
  5682                           fsr2h	equ	0xFDA
  5683                           fsr2l	equ	0xFD9
  5684                           status	equ	0xFD8
  5685                           
  5686 ;; *************** function _enable_notes *****************
  5687 ;; Defined at:
  5688 ;;		line 98 in file "mdb.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  notenum         1    wreg     unsigned char 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  notenum         1   32[COMRAM] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  1    wreg      void 
  5695 ;; Registers used:
  5696 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 0/0
  5699 ;;		On exit  : 0/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;Total ram usage:        1 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:    9
  5709 ;; This function calls:
  5710 ;;		_butindb
  5711 ;;		_displ_nendis
  5712 ;;		_lcd_string
  5713 ;;		_save_notes
  5714 ;; This function is called by:
  5715 ;;		_set_notes
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           	psect	text29
  5720  01103A                     __ptext29:
  5721                           	opt stack 0
  5722  01103A                     _enable_notes:
  5723                           	opt stack 19
  5724                           
  5725                           ;incstack = 0
  5726                           ;enable_notes@notenum stored from wreg
  5727  01103A  6E2B               	movwf	enable_notes@notenum,c
  5728                           
  5729                           ;mdb.c: 100: mdbflags.endis = 1;
  5730  01103C  8C3E               	bsf	_mdbflags,6,c
  5731                           
  5732                           ;mdb.c: 101: displ_nendis(notenum);
  5733  01103E  502B               	movf	enable_notes@notenum,w,c
  5734  011040  EC94  F08B         	call	_displ_nendis
  5735                           
  5736                           ;mdb.c: 102: while(mdbflags.endis)
  5737  011044  D034               	goto	l2389
  5738  011046                     
  5739                           ;mdb.c: 103: {
  5740                           ;mdb.c: 104: buttons = butindb();
  5741  011046  ECAD  F08B         	call	_butindb	;wreg free
  5742  01104A  6E38               	movwf	_buttons,c	;volatile
  5743                           
  5744                           ;mdb.c: 105: switch(buttons)
  5745  01104C  D026               	goto	l2387
  5746  01104E  503C               	movf	_noteen_byte,w,c	;volatile
  5747  011050  102B               	iorwf	enable_notes@notenum,w,c
  5748  011052  6E3C               	movwf	_noteen_byte,c	;volatile
  5749                           
  5750                           ;mdb.c: 108: save_notes();
  5751  011054  EC65  F08C         	call	_save_notes	;wreg free
  5752                           
  5753                           ;mdb.c: 109: displ_nendis(notenum);
  5754  011058  502B               	movf	enable_notes@notenum,w,c
  5755  01105A  EC94  F08B         	call	_displ_nendis
  5756                           
  5757                           ;mdb.c: 110: break;
  5758  01105E  D027               	goto	l2389
  5759  011060  502B               	movf	enable_notes@notenum,w,c
  5760  011062  0AFF               	xorlw	255
  5761  011064  143C               	andwf	_noteen_byte,w,c	;volatile
  5762  011066  6E3C               	movwf	_noteen_byte,c	;volatile
  5763                           
  5764                           ;mdb.c: 112: save_notes();
  5765  011068  EC65  F08C         	call	_save_notes	;wreg free
  5766                           
  5767                           ;mdb.c: 113: displ_nendis(notenum);
  5768  01106C  502B               	movf	enable_notes@notenum,w,c
  5769  01106E  EC94  F08B         	call	_displ_nendis
  5770                           
  5771                           ;mdb.c: 114: break;
  5772  011072  D01D               	goto	l2389
  5773  011074                     l2391:
  5774  011074  9C3E               	bcf	_mdbflags,6,c
  5775                           
  5776                           ;mdb.c: 116: lcd_string(setnotes, line1);
  5777  011076  0EF3               	movlw	low _setnotes
  5778  011078  6E24               	movwf	lcd_string@lcdstring,c
  5779  01107A  0EFD               	movlw	high _setnotes
  5780  01107C  6E25               	movwf	lcd_string@lcdstring+1,c
  5781  01107E  0E97               	movlw	low _line1
  5782  011080  6EF6               	movwf	tblptrl,c
  5783  011082                     	if	1	;There is more than 1 active tblptr byte
  5784  011082  0EFD               	movlw	high _line1
  5785  011084  6EF7               	movwf	tblptrh,c
  5786  011086                     	endif
  5787  011086                     	if	1	;There are 3 active tblptr bytes
  5788  011086  0E00               	movlw	low (_line1 shr (0+16))
  5789  011088  6EF8               	movwf	tblptru,c
  5790  01108A                     	endif
  5791  01108A  0008               	tblrd		*
  5792  01108C  CFF5 F026          	movff	tablat,lcd_string@lcdline
  5793  011090  EC78  F085         	call	_lcd_string	;wreg free
  5794                           
  5795                           ;mdb.c: 117: buttons = 0;
  5796  011094  0E00               	movlw	0
  5797  011096  6E38               	movwf	_buttons,c	;volatile
  5798                           
  5799                           ;mdb.c: 119: }
  5800                           
  5801                           ;mdb.c: 118: default : break;
  5802  011098  D00A               	goto	l2389
  5803  01109A                     l2387:
  5804  01109A  5038               	movf	_buttons,w,c	;volatile
  5805                           
  5806                           ; Switch size 1, requested type "space"
  5807                           ; Number of cases is 3, Range of values is 1 to 128
  5808                           ; switch strategies available:
  5809                           ; Name         Instructions Cycles
  5810                           ; simple_byte           10     6 (average)
  5811                           ;	Chosen strategy is simple_byte
  5812  01109C  0A01               	xorlw	1	; case 1
  5813  01109E  B4D8               	btfsc	status,2,c
  5814  0110A0  D7D6               	goto	l2388
  5815  0110A2  0A03               	xorlw	3	; case 2
  5816  0110A4  B4D8               	btfsc	status,2,c
  5817  0110A6  D7DC               	goto	l2390
  5818  0110A8  0A82               	xorlw	130	; case 128
  5819  0110AA  B4D8               	btfsc	status,2,c
  5820  0110AC  D7E3               	goto	l2391
  5821  0110AE                     l2389:
  5822  0110AE  AC3E               	btfss	_mdbflags,6,c
  5823  0110B0  0012               	return	
  5824  0110B2  D7C9               	goto	l2386
  5825  0110B4                     __end_of_enable_notes:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           postinc0	equ	0xFEE
  5834                           wreg	equ	0xFE8
  5835                           indf2	equ	0xFDF
  5836                           fsr2h	equ	0xFDA
  5837                           fsr2l	equ	0xFD9
  5838                           status	equ	0xFD8
  5839                           
  5840 ;; *************** function _save_notes *****************
  5841 ;; Defined at:
  5842 ;;		line 129 in file "mdb.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;                  1    wreg      void 
  5849 ;; Registers used:
  5850 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;Total ram usage:        0 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    3
  5863 ;; This function calls:
  5864 ;;		_DATAEE_WriteByte
  5865 ;; This function is called by:
  5866 ;;		_enable_notes
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           	psect	text30
  5871  0118CA                     __ptext30:
  5872                           	opt stack 0
  5873  0118CA                     _save_notes:
  5874                           	opt stack 24
  5875                           
  5876                           ;mdb.c: 131: DATAEE_WriteByte(notebits, noteen_byte);
  5877                           
  5878                           ;incstack = 0
  5879  0118CA  0E5F               	movlw	low _notebits
  5880  0118CC  6EF6               	movwf	tblptrl,c
  5881  0118CE                     	if	1	;There is more than 1 active tblptr byte
  5882  0118CE  0EFD               	movlw	high _notebits
  5883  0118D0  6EF7               	movwf	tblptrh,c
  5884  0118D2                     	endif
  5885  0118D2                     	if	1	;There are 3 active tblptr bytes
  5886  0118D2  0E00               	movlw	low (_notebits shr (0+16))
  5887  0118D4  6EF8               	movwf	tblptru,c
  5888  0118D6                     	endif
  5889  0118D6  0009               	tblrd		*+
  5890  0118D8  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  5891  0118DC  000A               	tblrd		*-
  5892  0118DE  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  5893  0118E2  C03C  F01F         	movff	_noteen_byte,DATAEE_WriteByte@bData	;volatile
  5894  0118E6  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
  5895  0118EA  0012               	return		;funcret
  5896  0118EC                     __end_of_save_notes:
  5897                           	opt stack 0
  5898                           tblptru	equ	0xFF8
  5899                           tblptrh	equ	0xFF7
  5900                           tblptrl	equ	0xFF6
  5901                           tablat	equ	0xFF5
  5902                           prodh	equ	0xFF4
  5903                           prodl	equ	0xFF3
  5904                           postinc0	equ	0xFEE
  5905                           wreg	equ	0xFE8
  5906                           indf2	equ	0xFDF
  5907                           fsr2h	equ	0xFDA
  5908                           fsr2l	equ	0xFD9
  5909                           status	equ	0xFD8
  5910                           
  5911 ;; *************** function _displ_nendis *****************
  5912 ;; Defined at:
  5913 ;;		line 64 in file "lcd.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  note2disp       1    wreg     unsigned char 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  note2disp       1   30[COMRAM] unsigned char 
  5918 ;;  x               1   31[COMRAM] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  5928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;Total ram usage:        2 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    8
  5935 ;; This function calls:
  5936 ;;		_lcd_string
  5937 ;; This function is called by:
  5938 ;;		_enable_notes
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text31
  5943  011728                     __ptext31:
  5944                           	opt stack 0
  5945  011728                     _displ_nendis:
  5946                           	opt stack 19
  5947                           
  5948                           ;incstack = 0
  5949                           ;displ_nendis@note2disp stored from wreg
  5950  011728  6E29               	movwf	displ_nendis@note2disp,c
  5951                           
  5952                           ;lcd.c: 66: uint8_t x = note2disp & noteen_byte;
  5953  01172A  5029               	movf	displ_nendis@note2disp,w,c
  5954  01172C  143C               	andwf	_noteen_byte,w,c	;volatile
  5955  01172E  6E2A               	movwf	displ_nendis@x,c
  5956                           
  5957                           ;lcd.c: 67: if(x != 0x00)
  5958  011730  502A               	movf	displ_nendis@x,w,c
  5959  011732  B4D8               	btfsc	status,2,c
  5960  011734  D009               	goto	l1295
  5961                           
  5962                           ;lcd.c: 68: {
  5963                           ;lcd.c: 69: lcd_string(enabled, dspposition);
  5964  011736  0EBE               	movlw	low _enabled
  5965  011738  6E24               	movwf	lcd_string@lcdstring,c
  5966  01173A  0EFF               	movlw	high _enabled
  5967  01173C  6E25               	movwf	lcd_string@lcdstring+1,c
  5968  01173E  C042  F026         	movff	_dspposition,lcd_string@lcdline
  5969  011742  EC78  F085         	call	_lcd_string	;wreg free
  5970                           
  5971                           ;lcd.c: 70: }
  5972  011746  0012               	return	
  5973  011748                     l1295:
  5974                           
  5975                           ;lcd.c: 71: else
  5976                           ;lcd.c: 72: {
  5977                           ;lcd.c: 73: lcd_string(disabled, dspposition);
  5978  011748  0EB4               	movlw	low _disabled
  5979  01174A  6E24               	movwf	lcd_string@lcdstring,c
  5980  01174C  0EFF               	movlw	high _disabled
  5981  01174E  6E25               	movwf	lcd_string@lcdstring+1,c
  5982  011750  C042  F026         	movff	_dspposition,lcd_string@lcdline
  5983  011754  EC78  F085         	call	_lcd_string	;wreg free
  5984  011758  0012               	return	
  5985  01175A                     __end_of_displ_nendis:
  5986                           	opt stack 0
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           postinc0	equ	0xFEE
  5994                           wreg	equ	0xFE8
  5995                           indf2	equ	0xFDF
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function _displ_note *****************
  6001 ;; Defined at:
  6002 ;;		line 57 in file "lcd.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;  notestring      2   30[COMRAM] PTR unsigned char 
  6005 ;;		 -> twohundredrand(8), hundredrand(8), fiftyrand(8), twentyrand(8), 
  6006 ;;		 -> tenrand(9), 
  6007 ;; Auto vars:     Size  Location     Type
  6008 ;;		None
  6009 ;; Return value:  Size  Location     Type
  6010 ;;                  1    wreg      unsigned char 
  6011 ;; Registers used:
  6012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6013 ;; Tracked objects:
  6014 ;;		On entry : 0/0
  6015 ;;		On exit  : 0/0
  6016 ;;		Unchanged: 0/0
  6017 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6018 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6021 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6022 ;;Total ram usage:        2 bytes
  6023 ;; Hardware stack levels used:    1
  6024 ;; Hardware stack levels required when called:    8
  6025 ;; This function calls:
  6026 ;;		_lcd_string
  6027 ;;		_lcd_write
  6028 ;; This function is called by:
  6029 ;;		_set_notes
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	text32
  6034  01157C                     __ptext32:
  6035                           	opt stack 0
  6036  01157C                     _displ_note:
  6037                           	opt stack 20
  6038                           
  6039                           ;lcd.c: 59: lcd_write(dispclr);
  6040                           
  6041                           ;incstack = 0
  6042  01157C  0EA1               	movlw	low _dispclr
  6043  01157E  6EF6               	movwf	tblptrl,c
  6044  011580                     	if	1	;There is more than 1 active tblptr byte
  6045  011580  0EFD               	movlw	high _dispclr
  6046  011582  6EF7               	movwf	tblptrh,c
  6047  011584                     	endif
  6048  011584                     	if	1	;There are 3 active tblptr bytes
  6049  011584  0E00               	movlw	low (_dispclr shr (0+16))
  6050  011586  6EF8               	movwf	tblptru,c
  6051  011588                     	endif
  6052  011588  0008               	tblrd		*
  6053  01158A  50F5               	movf	tablat,w,c
  6054  01158C  ECC6  F08B         	call	_lcd_write
  6055                           
  6056                           ;lcd.c: 60: lcd_string(notestring, line2);
  6057  011590  C029  F024         	movff	displ_note@notestring,lcd_string@lcdstring
  6058  011594  C02A  F025         	movff	displ_note@notestring+1,lcd_string@lcdstring+1
  6059  011598  0E96               	movlw	low _line2
  6060  01159A  6EF6               	movwf	tblptrl,c
  6061  01159C                     	if	1	;There is more than 1 active tblptr byte
  6062  01159C  0EFD               	movlw	high _line2
  6063  01159E  6EF7               	movwf	tblptrh,c
  6064  0115A0                     	endif
  6065  0115A0                     	if	1	;There are 3 active tblptr bytes
  6066  0115A0  0E00               	movlw	low (_line2 shr (0+16))
  6067  0115A2  6EF8               	movwf	tblptru,c
  6068  0115A4                     	endif
  6069  0115A4  0008               	tblrd		*
  6070  0115A6  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6071  0115AA  EC78  F085         	call	_lcd_string	;wreg free
  6072                           
  6073                           ;lcd.c: 61: return bflag+2;
  6074  0115AE  5046               	movf	_bflag,w,c
  6075  0115B0  0F02               	addlw	2
  6076  0115B2  0012               	return	
  6077  0115B4                     __end_of_displ_note:
  6078                           	opt stack 0
  6079                           tblptru	equ	0xFF8
  6080                           tblptrh	equ	0xFF7
  6081                           tblptrl	equ	0xFF6
  6082                           tablat	equ	0xFF5
  6083                           prodh	equ	0xFF4
  6084                           prodl	equ	0xFF3
  6085                           postinc0	equ	0xFEE
  6086                           wreg	equ	0xFE8
  6087                           indf2	equ	0xFDF
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _price_set *****************
  6093 ;; Defined at:
  6094 ;;		line 296 in file "vend.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;		None
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  1    wreg      void 
  6101 ;; Registers used:
  6102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;Total ram usage:        0 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:   10
  6115 ;; This function calls:
  6116 ;;		_Read_Service
  6117 ;;		_butindb
  6118 ;;		_lcd_string
  6119 ;;		_set_price
  6120 ;; This function is called by:
  6121 ;;		_enter_service
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text33
  6126  010FBA                     __ptext33:
  6127                           	opt stack 0
  6128  010FBA                     _price_set:
  6129                           	opt stack 19
  6130                           
  6131                           ;vend.c: 298: venflags.priceset = 1;
  6132                           
  6133                           ;incstack = 0
  6134  010FBA  8030               	bsf	_venflags+1,0,c
  6135                           
  6136                           ;vend.c: 299: lcd_string(pricesetmsg, line1);
  6137  010FBC  0E6D               	movlw	low _pricesetmsg
  6138  010FBE  6E24               	movwf	lcd_string@lcdstring,c
  6139  010FC0  0EFF               	movlw	high _pricesetmsg
  6140  010FC2  6E25               	movwf	lcd_string@lcdstring+1,c
  6141  010FC4  0E97               	movlw	low _line1
  6142  010FC6  6EF6               	movwf	tblptrl,c
  6143  010FC8                     	if	1	;There is more than 1 active tblptr byte
  6144  010FC8  0EFD               	movlw	high _line1
  6145  010FCA  6EF7               	movwf	tblptrh,c
  6146  010FCC                     	endif
  6147  010FCC                     	if	1	;There are 3 active tblptr bytes
  6148  010FCC  0E00               	movlw	low (_line1 shr (0+16))
  6149  010FCE  6EF8               	movwf	tblptru,c
  6150  010FD0                     	endif
  6151  010FD0  0008               	tblrd		*
  6152  010FD2  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6153  010FD6  EC78  F085         	call	_lcd_string	;wreg free
  6154                           
  6155                           ;vend.c: 300: lcd_string(pricesetm2, line2);
  6156  010FDA  0E7B               	movlw	low _pricesetm2
  6157  010FDC  6E24               	movwf	lcd_string@lcdstring,c
  6158  010FDE  0EFE               	movlw	high _pricesetm2
  6159  010FE0  6E25               	movwf	lcd_string@lcdstring+1,c
  6160  010FE2  0E96               	movlw	low _line2
  6161  010FE4  6EF6               	movwf	tblptrl,c
  6162  010FE6                     	if	1	;There is more than 1 active tblptr byte
  6163  010FE6  0EFD               	movlw	high _line2
  6164  010FE8  6EF7               	movwf	tblptrh,c
  6165  010FEA                     	endif
  6166  010FEA                     	if	1	;There are 3 active tblptr bytes
  6167  010FEA  0E00               	movlw	low (_line2 shr (0+16))
  6168  010FEC  6EF8               	movwf	tblptru,c
  6169  010FEE                     	endif
  6170  010FEE  0008               	tblrd		*
  6171  010FF0  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6172  010FF4  EC78  F085         	call	_lcd_string	;wreg free
  6173                           
  6174                           ;vend.c: 301: while(venflags.priceset)
  6175  010FF8  D00E               	goto	l1860
  6176  010FFA                     
  6177                           ;vend.c: 302: {
  6178                           ;vend.c: 303: buttons = butindb();
  6179  010FFA  ECAD  F08B         	call	_butindb	;wreg free
  6180  010FFE  6E38               	movwf	_buttons,c	;volatile
  6181                           
  6182                           ;vend.c: 304: if(buttons != 0x00)
  6183  011000  5038               	movf	_buttons,w,c	;volatile
  6184  011002  B4D8               	btfsc	status,2,c
  6185  011004  D003               	goto	l1859
  6186                           
  6187                           ;vend.c: 305: {
  6188                           ;vend.c: 306: set_price(buttons);
  6189  011006  5038               	movf	_buttons,w,c	;volatile
  6190  011008  EC00  F080         	call	_set_price
  6191  01100C                     l1859:
  6192                           
  6193                           ;vend.c: 307: }
  6194                           ;vend.c: 308: if(Read_Service() == 0x00)
  6195  01100C  EC28  F08D         	call	_Read_Service	;wreg free
  6196  011010  0900               	iorlw	0
  6197  011012  B4D8               	btfsc	status,2,c
  6198                           
  6199                           ;vend.c: 309: {
  6200                           ;vend.c: 310: venflags.priceset = 0;
  6201  011014  9030               	bcf	_venflags+1,0,c
  6202  011016                     l1860:
  6203  011016  B030               	btfsc	_venflags+1,0,c
  6204  011018  D7F0               	goto	l1858
  6205                           
  6206                           ;vend.c: 311: }
  6207                           ;vend.c: 312: }
  6208                           ;vend.c: 313: lcd_string(servmsg, line1);
  6209  01101A  0E38               	movlw	low _servmsg
  6210  01101C  6E24               	movwf	lcd_string@lcdstring,c
  6211  01101E  0EFE               	movlw	high _servmsg
  6212  011020  6E25               	movwf	lcd_string@lcdstring+1,c
  6213  011022  0E97               	movlw	low _line1
  6214  011024  6EF6               	movwf	tblptrl,c
  6215  011026                     	if	1	;There is more than 1 active tblptr byte
  6216  011026  0EFD               	movlw	high _line1
  6217  011028  6EF7               	movwf	tblptrh,c
  6218  01102A                     	endif
  6219  01102A                     	if	1	;There are 3 active tblptr bytes
  6220  01102A  0E00               	movlw	low (_line1 shr (0+16))
  6221  01102C  6EF8               	movwf	tblptru,c
  6222  01102E                     	endif
  6223  01102E  0008               	tblrd		*
  6224  011030  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6225  011034  EC78  F085         	call	_lcd_string	;wreg free
  6226  011038  0012               	return		;funcret
  6227  01103A                     __end_of_price_set:
  6228                           	opt stack 0
  6229                           tblptru	equ	0xFF8
  6230                           tblptrh	equ	0xFF7
  6231                           tblptrl	equ	0xFF6
  6232                           tablat	equ	0xFF5
  6233                           prodh	equ	0xFF4
  6234                           prodl	equ	0xFF3
  6235                           postinc0	equ	0xFEE
  6236                           wreg	equ	0xFE8
  6237                           indf2	equ	0xFDF
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _set_price *****************
  6243 ;; Defined at:
  6244 ;;		line 316 in file "vend.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  buttons         1    wreg     unsigned char 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  buttons         1   14[BANK0 ] unsigned char 
  6249 ;;  channel         1   15[BANK0 ] unsigned char 
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      void 
  6252 ;; Registers used:
  6253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;Total ram usage:        4 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    9
  6266 ;; This function calls:
  6267 ;;		_DATAEE_ReadByte
  6268 ;;		_DATAEE_WriteByte
  6269 ;;		_butindb
  6270 ;;		_displ_price
  6271 ;;		_lcd_string
  6272 ;; This function is called by:
  6273 ;;		_price_set
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           	psect	text34
  6278  010000                     __ptext34:
  6279                           	opt stack 0
  6280  010000                     _set_price:
  6281                           	opt stack 19
  6282                           
  6283                           ;incstack = 0
  6284                           ;set_price@buttons stored from wreg
  6285  010000  0100               	movlb	0	; () banked
  6286  010002  6FA8               	movwf	set_price@buttons& (0+255),b
  6287                           
  6288                           ;vend.c: 318: venflags.setprice = 1;
  6289  010004  8230               	bsf	_venflags+1,1,c
  6290                           
  6291                           ;vend.c: 319: uint8_t channel = 0x00;
  6292  010006  0E00               	movlw	0
  6293  010008  0100               	movlb	0	; () banked
  6294  01000A  6FA9               	movwf	set_price@channel& (0+255),b
  6295                           
  6296                           ;vend.c: 321: while(buttons != 0)
  6297  01000C  D004               	goto	l1865
  6298  01000E                     
  6299                           ; BSR set to: 0
  6300                           ;vend.c: 322: {
  6301                           ;vend.c: 323: channel++;
  6302                           
  6303                           ; BSR set to: 0
  6304  01000E  2BA9               	incf	set_price@channel& (0+255),f,b
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;vend.c: 324: buttons = buttons >> 1;
  6308  010010  90D8               	bcf	status,0,c
  6309  010012  31A8               	rrcf	set_price@buttons& (0+255),w,b
  6310  010014  6FA8               	movwf	set_price@buttons& (0+255),b
  6311  010016                     l1865:
  6312                           
  6313                           ; BSR set to: 0
  6314                           
  6315                           ; BSR set to: 0
  6316  010016  51A8               	movf	set_price@buttons& (0+255),w,b
  6317  010018  A4D8               	btfss	status,2,c
  6318  01001A  D7F9               	goto	l1866
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;vend.c: 325: }
  6322                           ;vend.c: 327: channel--;
  6323                           
  6324                           ; BSR set to: 0
  6325  01001C  07A9               	decf	set_price@channel& (0+255),f,b
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;vend.c: 328: vendprice = DATAEE_ReadByte(pricestore + channel);
  6329  01001E  0E63               	movlw	low _pricestore
  6330  010020  6EF6               	movwf	tblptrl,c
  6331  010022                     	if	1	;There is more than 1 active tblptr byte
  6332  010022  0EFD               	movlw	high _pricestore
  6333  010024  6EF7               	movwf	tblptrh,c
  6334  010026                     	endif
  6335  010026                     	if	1	;There are 3 active tblptr bytes
  6336  010026  0E00               	movlw	low (_pricestore shr (0+16))
  6337  010028  6EF8               	movwf	tblptru,c
  6338  01002A                     	endif
  6339  01002A  0009               	tblrd		*+
  6340  01002C  CFF5 F0A6          	movff	tablat,??_set_price
  6341  010030  0009               	tblrd		*+
  6342  010032  CFF5 F0A7          	movff	tablat,??_set_price+1
  6343  010036  51A9               	movf	set_price@channel& (0+255),w,b
  6344  010038  25A6               	addwf	??_set_price& (0+255),w,b
  6345  01003A  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
  6346  01003C  0E00               	movlw	0
  6347  01003E  21A7               	addwfc	(??_set_price+1)& (0+255),w,b
  6348  010040  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
  6349  010042  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  6350  010046  6E37               	movwf	_vendprice,c	;volatile
  6351                           
  6352                           ;vend.c: 329: displ_price(vendprice);
  6353  010048  5037               	movf	_vendprice,w,c	;volatile
  6354  01004A  EC45  F08A         	call	_displ_price
  6355                           
  6356                           ;vend.c: 330: while(venflags.setprice)
  6357  01004E  D067               	goto	l1872
  6358  010050                     
  6359                           ;vend.c: 331: {
  6360                           ;vend.c: 332: buttons = butindb();
  6361  010050  ECAD  F08B         	call	_butindb	;wreg free
  6362  010054  0100               	movlb	0	; () banked
  6363  010056  6FA8               	movwf	set_price@buttons& (0+255),b
  6364                           
  6365                           ;vend.c: 334: switch(buttons)
  6366  010058  D057               	goto	l1870
  6367  01005A                     
  6368                           ; BSR set to: 0
  6369                           
  6370                           ; BSR set to: 0
  6371  01005A  2A37               	incf	_vendprice,f,c	;volatile
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;vend.c: 337: DATAEE_WriteByte(pricestore + channel, vendprice);
  6375  01005C  0E63               	movlw	low _pricestore
  6376  01005E  6EF6               	movwf	tblptrl,c
  6377  010060                     	if	1	;There is more than 1 active tblptr byte
  6378  010060  0EFD               	movlw	high _pricestore
  6379  010062  6EF7               	movwf	tblptrh,c
  6380  010064                     	endif
  6381  010064                     	if	1	;There are 3 active tblptr bytes
  6382  010064  0E00               	movlw	low (_pricestore shr (0+16))
  6383  010066  6EF8               	movwf	tblptru,c
  6384  010068                     	endif
  6385  010068  0009               	tblrd		*+
  6386  01006A  CFF5 F0A6          	movff	tablat,??_set_price
  6387  01006E  0009               	tblrd		*+
  6388  010070  CFF5 F0A7          	movff	tablat,??_set_price+1
  6389  010074  51A9               	movf	set_price@channel& (0+255),w,b
  6390  010076  25A6               	addwf	??_set_price& (0+255),w,b
  6391  010078  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  6392  01007A  0E00               	movlw	0
  6393  01007C  21A7               	addwfc	(??_set_price+1)& (0+255),w,b
  6394  01007E  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  6395  010080  C037  F01F         	movff	_vendprice,DATAEE_WriteByte@bData	;volatile
  6396  010084  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
  6397                           
  6398                           ;vend.c: 338: displ_price(vendprice);
  6399  010088  5037               	movf	_vendprice,w,c	;volatile
  6400  01008A  EC45  F08A         	call	_displ_price
  6401                           
  6402                           ;vend.c: 339: break;
  6403  01008E  D047               	goto	l1872
  6404  010090  0637               	decf	_vendprice,f,c	;volatile
  6405                           
  6406                           ;vend.c: 341: DATAEE_WriteByte(pricestore + channel, vendprice);
  6407  010092  0E63               	movlw	low _pricestore
  6408  010094  6EF6               	movwf	tblptrl,c
  6409  010096                     	if	1	;There is more than 1 active tblptr byte
  6410  010096  0EFD               	movlw	high _pricestore
  6411  010098  6EF7               	movwf	tblptrh,c
  6412  01009A                     	endif
  6413  01009A                     	if	1	;There are 3 active tblptr bytes
  6414  01009A  0E00               	movlw	low (_pricestore shr (0+16))
  6415  01009C  6EF8               	movwf	tblptru,c
  6416  01009E                     	endif
  6417  01009E  0009               	tblrd		*+
  6418  0100A0  CFF5 F0A6          	movff	tablat,??_set_price
  6419  0100A4  0009               	tblrd		*+
  6420  0100A6  CFF5 F0A7          	movff	tablat,??_set_price+1
  6421  0100AA  0100               	movlb	0	; () banked
  6422  0100AC  51A9               	movf	set_price@channel& (0+255),w,b
  6423  0100AE  25A6               	addwf	??_set_price& (0+255),w,b
  6424  0100B0  6E1D               	movwf	DATAEE_WriteByte@bAdd,c
  6425  0100B2  0E00               	movlw	0
  6426  0100B4  21A7               	addwfc	(??_set_price+1)& (0+255),w,b
  6427  0100B6  6E1E               	movwf	DATAEE_WriteByte@bAdd+1,c
  6428  0100B8  C037  F01F         	movff	_vendprice,DATAEE_WriteByte@bData	;volatile
  6429  0100BC  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
  6430                           
  6431                           ;vend.c: 342: displ_price(vendprice);
  6432  0100C0  5037               	movf	_vendprice,w,c	;volatile
  6433  0100C2  EC45  F08A         	call	_displ_price
  6434                           
  6435                           ;vend.c: 343: break;
  6436  0100C6  D02B               	goto	l1872
  6437  0100C8                     l1874:
  6438                           
  6439                           ; BSR set to: 0
  6440  0100C8  9230               	bcf	_venflags+1,1,c
  6441                           
  6442                           ; BSR set to: 0
  6443                           ;vend.c: 345: lcd_string(pricesetmsg, line1);
  6444  0100CA  0E6D               	movlw	low _pricesetmsg
  6445  0100CC  6E24               	movwf	lcd_string@lcdstring,c
  6446  0100CE  0EFF               	movlw	high _pricesetmsg
  6447  0100D0  6E25               	movwf	lcd_string@lcdstring+1,c
  6448  0100D2  0E97               	movlw	low _line1
  6449  0100D4  6EF6               	movwf	tblptrl,c
  6450  0100D6                     	if	1	;There is more than 1 active tblptr byte
  6451  0100D6  0EFD               	movlw	high _line1
  6452  0100D8  6EF7               	movwf	tblptrh,c
  6453  0100DA                     	endif
  6454  0100DA                     	if	1	;There are 3 active tblptr bytes
  6455  0100DA  0E00               	movlw	low (_line1 shr (0+16))
  6456  0100DC  6EF8               	movwf	tblptru,c
  6457  0100DE                     	endif
  6458  0100DE  0008               	tblrd		*
  6459  0100E0  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6460  0100E4  EC78  F085         	call	_lcd_string	;wreg free
  6461                           
  6462                           ;vend.c: 346: lcd_string(pricesetm2, line2);
  6463  0100E8  0E7B               	movlw	low _pricesetm2
  6464  0100EA  6E24               	movwf	lcd_string@lcdstring,c
  6465  0100EC  0EFE               	movlw	high _pricesetm2
  6466  0100EE  6E25               	movwf	lcd_string@lcdstring+1,c
  6467  0100F0  0E96               	movlw	low _line2
  6468  0100F2  6EF6               	movwf	tblptrl,c
  6469  0100F4                     	if	1	;There is more than 1 active tblptr byte
  6470  0100F4  0EFD               	movlw	high _line2
  6471  0100F6  6EF7               	movwf	tblptrh,c
  6472  0100F8                     	endif
  6473  0100F8                     	if	1	;There are 3 active tblptr bytes
  6474  0100F8  0E00               	movlw	low (_line2 shr (0+16))
  6475  0100FA  6EF8               	movwf	tblptru,c
  6476  0100FC                     	endif
  6477  0100FC  0008               	tblrd		*
  6478  0100FE  CFF5 F026          	movff	tablat,lcd_string@lcdline
  6479  010102  EC78  F085         	call	_lcd_string	;wreg free
  6480                           
  6481                           ;vend.c: 349: }
  6482                           
  6483                           ;vend.c: 348: break;
  6484  010106  D00B               	goto	l1872
  6485  010108                     l1870:
  6486  010108  0100               	movlb	0	; () banked
  6487  01010A  51A8               	movf	set_price@buttons& (0+255),w,b
  6488                           
  6489                           ; Switch size 1, requested type "space"
  6490                           ; Number of cases is 3, Range of values is 1 to 128
  6491                           ; switch strategies available:
  6492                           ; Name         Instructions Cycles
  6493                           ; simple_byte           10     6 (average)
  6494                           ;	Chosen strategy is simple_byte
  6495  01010C  0A01               	xorlw	1	; case 1
  6496  01010E  B4D8               	btfsc	status,2,c
  6497  010110  D7A4               	goto	l1871
  6498  010112  0A03               	xorlw	3	; case 2
  6499  010114  B4D8               	btfsc	status,2,c
  6500  010116  D7BC               	goto	l1873
  6501  010118  0A82               	xorlw	130	; case 128
  6502  01011A  B4D8               	btfsc	status,2,c
  6503  01011C  D7D5               	goto	l1874
  6504  01011E                     l1872:
  6505                           
  6506                           ; BSR set to: 0
  6507  01011E  A230               	btfss	_venflags+1,1,c
  6508  010120  0012               	return	
  6509  010122  D796               	goto	l1869
  6510  010124                     __end_of_set_price:
  6511                           	opt stack 0
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           postinc0	equ	0xFEE
  6519                           wreg	equ	0xFE8
  6520                           indf2	equ	0xFDF
  6521                           fsr2h	equ	0xFDA
  6522                           fsr2l	equ	0xFD9
  6523                           status	equ	0xFD8
  6524                           
  6525 ;; *************** function _displ_price *****************
  6526 ;; Defined at:
  6527 ;;		line 185 in file "lcd.c"
  6528 ;; Parameters:    Size  Location     Type
  6529 ;;  vendprice       1    wreg     unsigned char 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  vendprice       1   31[COMRAM] unsigned char 
  6532 ;; Return value:  Size  Location     Type
  6533 ;;                  1    wreg      void 
  6534 ;; Registers used:
  6535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6536 ;; Tracked objects:
  6537 ;;		On entry : 0/0
  6538 ;;		On exit  : 0/0
  6539 ;;		Unchanged: 0/0
  6540 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6544 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6545 ;;Total ram usage:        1 bytes
  6546 ;; Hardware stack levels used:    1
  6547 ;; Hardware stack levels required when called:    8
  6548 ;; This function calls:
  6549 ;;		_displ_hex
  6550 ;;		_lcd_dispadd
  6551 ;;		_lcd_write
  6552 ;;		_lcd_writeC
  6553 ;; This function is called by:
  6554 ;;		_set_price
  6555 ;; This function uses a non-reentrant model
  6556 ;;
  6557                           
  6558                           	psect	text35
  6559  01148A                     __ptext35:
  6560                           	opt stack 0
  6561  01148A                     _displ_price:
  6562                           	opt stack 19
  6563                           
  6564                           ;incstack = 0
  6565                           ;displ_price@vendprice stored from wreg
  6566  01148A  6E2A               	movwf	displ_price@vendprice,c
  6567                           
  6568                           ;lcd.c: 187: lcd_write(dispclr);
  6569  01148C  0EA1               	movlw	low _dispclr
  6570  01148E  6EF6               	movwf	tblptrl,c
  6571  011490                     	if	1	;There is more than 1 active tblptr byte
  6572  011490  0EFD               	movlw	high _dispclr
  6573  011492  6EF7               	movwf	tblptrh,c
  6574  011494                     	endif
  6575  011494                     	if	1	;There are 3 active tblptr bytes
  6576  011494  0E00               	movlw	low (_dispclr shr (0+16))
  6577  011496  6EF8               	movwf	tblptru,c
  6578  011498                     	endif
  6579  011498  0008               	tblrd		*
  6580  01149A  50F5               	movf	tablat,w,c
  6581  01149C  ECC6  F08B         	call	_lcd_write
  6582                           
  6583                           ;lcd.c: 188: lcd_dispadd(line2 + 4);
  6584  0114A0  0E96               	movlw	low _line2
  6585  0114A2  6EF6               	movwf	tblptrl,c
  6586  0114A4                     	if	1	;There is more than 1 active tblptr byte
  6587  0114A4  0EFD               	movlw	high _line2
  6588  0114A6  6EF7               	movwf	tblptrh,c
  6589  0114A8                     	endif
  6590  0114A8                     	if	1	;There are 3 active tblptr bytes
  6591  0114A8  0E00               	movlw	low (_line2 shr (0+16))
  6592  0114AA  6EF8               	movwf	tblptru,c
  6593  0114AC                     	endif
  6594  0114AC  0008               	tblrd		*
  6595  0114AE  50F5               	movf	tablat,w,c
  6596  0114B0  0F04               	addlw	4
  6597  0114B2  ECC4  F08C         	call	_lcd_dispadd
  6598                           
  6599                           ;lcd.c: 189: lcd_writeC((uint8_t)'R');
  6600  0114B6  0E52               	movlw	82
  6601  0114B8  ECFD  F088         	call	_lcd_writeC
  6602                           
  6603                           ;lcd.c: 190: displ_hex(vendprice);
  6604  0114BC  502A               	movf	displ_price@vendprice,w,c
  6605  0114BE  6E27               	movwf	displ_hex@hexnum,c
  6606  0114C0  6A28               	clrf	displ_hex@hexnum+1,c
  6607  0114C2  6A29               	clrf	displ_hex@hexnum+2,c
  6608  0114C4  EC1D  F085         	call	_displ_hex	;wreg free
  6609  0114C8  0012               	return		;funcret
  6610  0114CA                     __end_of_displ_price:
  6611                           	opt stack 0
  6612                           tblptru	equ	0xFF8
  6613                           tblptrh	equ	0xFF7
  6614                           tblptrl	equ	0xFF6
  6615                           tablat	equ	0xFF5
  6616                           prodh	equ	0xFF4
  6617                           prodl	equ	0xFF3
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           indf2	equ	0xFDF
  6621                           fsr2h	equ	0xFDA
  6622                           fsr2l	equ	0xFD9
  6623                           status	equ	0xFD8
  6624                           
  6625 ;; *************** function _Read_Service *****************
  6626 ;; Defined at:
  6627 ;;		line 246 in file "vend.c"
  6628 ;; Parameters:    Size  Location     Type
  6629 ;;		None
  6630 ;; Auto vars:     Size  Location     Type
  6631 ;;  senval          1   18[COMRAM] unsigned char 
  6632 ;; Return value:  Size  Location     Type
  6633 ;;                  1    wreg      unsigned char 
  6634 ;; Registers used:
  6635 ;;		wreg, status,2
  6636 ;; Tracked objects:
  6637 ;;		On entry : 0/0
  6638 ;;		On exit  : 0/0
  6639 ;;		Unchanged: 0/0
  6640 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6642 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6644 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6645 ;;Total ram usage:        1 bytes
  6646 ;; Hardware stack levels used:    1
  6647 ;; Hardware stack levels required when called:    2
  6648 ;; This function calls:
  6649 ;;		Nothing
  6650 ;; This function is called by:
  6651 ;;		_price_set
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655                           	psect	text36
  6656  011A50                     __ptext36:
  6657                           	opt stack 0
  6658  011A50                     _Read_Service:
  6659                           	opt stack 26
  6660                           
  6661                           ;vend.c: 248: DAC1CON1 = 0x00;
  6662                           
  6663                           ;incstack = 0
  6664  011A50  0E00               	movlw	0
  6665  011A52  010F               	movlb	15	; () banked
  6666  011A54  6F34               	movwf	52,b	;volatile
  6667                           
  6668                           ; BSR set to: 15
  6669                           ;vend.c: 249: uint8_t senval = CMOUT;
  6670  011A56  CF3D F01D          	movff	3901,Read_Service@senval	;volatile
  6671                           
  6672                           ; BSR set to: 15
  6673                           ;vend.c: 250: DAC1CON1 = sensorval;
  6674  011A5A  C036  FF34         	movff	_sensorval,3892	;volatile
  6675                           
  6676                           ;vend.c: 251: return senval;
  6677  011A5E  501D               	movf	Read_Service@senval,w,c
  6678  011A60  0012               	return	
  6679  011A62                     __end_of_Read_Service:
  6680                           	opt stack 0
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           postinc0	equ	0xFEE
  6688                           wreg	equ	0xFE8
  6689                           indf2	equ	0xFDF
  6690                           fsr2h	equ	0xFDA
  6691                           fsr2l	equ	0xFD9
  6692                           status	equ	0xFD8
  6693                           
  6694 ;; *************** function _mdb_unlock *****************
  6695 ;; Defined at:
  6696 ;;		line 375 in file "mdb.c"
  6697 ;; Parameters:    Size  Location     Type
  6698 ;;		None
  6699 ;; Auto vars:     Size  Location     Type
  6700 ;;		None
  6701 ;; Return value:  Size  Location     Type
  6702 ;;                  1    wreg      void 
  6703 ;; Registers used:
  6704 ;;		wreg, status,2, status,0, cstack
  6705 ;; Tracked objects:
  6706 ;;		On entry : 0/0
  6707 ;;		On exit  : 0/0
  6708 ;;		Unchanged: 0/0
  6709 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;Total ram usage:        1 bytes
  6715 ;; Hardware stack levels used:    1
  6716 ;; Hardware stack levels required when called:    3
  6717 ;; This function calls:
  6718 ;;		_CMP1_Initialize
  6719 ;;		_DAC1_Initialize
  6720 ;;		_TMR1_Initialize
  6721 ;;		_TMR3_Initialize
  6722 ;;		_TMR5_Initialize
  6723 ;; This function is called by:
  6724 ;;		_enter_service
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text37
  6729  0107EC                     __ptext37:
  6730                           	opt stack 0
  6731  0107EC                     _mdb_unlock:
  6732                           	opt stack 26
  6733                           
  6734                           ;mdb.c: 377: _delay((unsigned long)((50)*(12000000/4000.0)));
  6735                           
  6736                           ; BSR set to: 15
  6737                           ;incstack = 0
  6738  0107EC  0EC3               	movlw	195
  6739  0107EE  6E1F               	movwf	??_mdb_unlock& (0+255),c
  6740  0107F0  0ECD               	movlw	205
  6741  0107F2                     u2537:
  6742  0107F2  2EE8               	decfsz	wreg,f,c
  6743  0107F4  D7FE               	bra	u2537
  6744  0107F6  2E1F               	decfsz	??_mdb_unlock& (0+255),f,c
  6745  0107F8  D7FC               	bra	u2537
  6746  0107FA  F000               	nop	
  6747                           
  6748                           ;mdb.c: 378: LATE = 0x00;
  6749  0107FC  0E00               	movlw	0
  6750  0107FE  6E87               	movwf	3975,c	;volatile
  6751                           
  6752                           ;mdb.c: 379: LATD = 0x00;
  6753  010800  0E00               	movlw	0
  6754  010802  6E86               	movwf	3974,c	;volatile
  6755                           
  6756                           ;mdb.c: 380: LATA = 0xC0;
  6757  010804  0EC0               	movlw	192
  6758  010806  6E83               	movwf	3971,c	;volatile
  6759                           
  6760                           ;mdb.c: 381: LATB = 0x00;
  6761  010808  0E00               	movlw	0
  6762  01080A  6E84               	movwf	3972,c	;volatile
  6763                           
  6764                           ;mdb.c: 382: LATC = 0x01;
  6765  01080C  0E01               	movlw	1
  6766  01080E  6E85               	movwf	3973,c	;volatile
  6767                           
  6768                           ;mdb.c: 387: TRISE = 0x00;
  6769  010810  0E00               	movlw	0
  6770  010812  6E8C               	movwf	3980,c	;volatile
  6771                           
  6772                           ;mdb.c: 388: TRISA = 0x1F;
  6773  010814  0E1F               	movlw	31
  6774  010816  6E88               	movwf	3976,c	;volatile
  6775                           
  6776                           ;mdb.c: 389: TRISB = 0xD0;
  6777  010818  0ED0               	movlw	208
  6778  01081A  6E89               	movwf	3977,c	;volatile
  6779                           
  6780                           ;mdb.c: 390: TRISC = 0x80;
  6781  01081C  0E80               	movlw	128
  6782  01081E  6E8A               	movwf	3978,c	;volatile
  6783                           
  6784                           ;mdb.c: 391: TRISD = 0x00;
  6785  010820  0E00               	movlw	0
  6786  010822  6E8B               	movwf	3979,c	;volatile
  6787                           
  6788                           ;mdb.c: 396: ANSELC = 0x00;
  6789  010824  0E00               	movlw	0
  6790  010826  010F               	movlb	15	; () banked
  6791  010828  6F21               	movwf	33,b	;volatile
  6792                           
  6793                           ; BSR set to: 15
  6794                           ;mdb.c: 397: ANSELB = 0xC0;
  6795  01082A  0EC0               	movlw	192
  6796  01082C  6F19               	movwf	25,b	;volatile
  6797                           
  6798                           ; BSR set to: 15
  6799                           ;mdb.c: 398: ANSELD = 0x00;
  6800  01082E  0E00               	movlw	0
  6801  010830  6F26               	movwf	38,b	;volatile
  6802                           
  6803                           ; BSR set to: 15
  6804                           ;mdb.c: 399: ANSELE = 0x00;
  6805  010832  0E00               	movlw	0
  6806  010834  6F2E               	movwf	46,b	;volatile
  6807                           
  6808                           ; BSR set to: 15
  6809                           ;mdb.c: 400: ANSELA = 0x01;
  6810  010836  0E01               	movlw	1
  6811  010838  6F11               	movwf	17,b	;volatile
  6812                           
  6813                           ; BSR set to: 15
  6814                           ;mdb.c: 405: WPUD = 0x00;
  6815  01083A  0E00               	movlw	0
  6816  01083C  6F25               	movwf	37,b	;volatile
  6817                           
  6818                           ; BSR set to: 15
  6819                           ;mdb.c: 406: WPUE = 0x00;
  6820  01083E  0E00               	movlw	0
  6821  010840  6F2D               	movwf	45,b	;volatile
  6822                           
  6823                           ; BSR set to: 15
  6824                           ;mdb.c: 407: WPUB = 0x00;
  6825  010842  0E00               	movlw	0
  6826  010844  6F18               	movwf	24,b	;volatile
  6827                           
  6828                           ; BSR set to: 15
  6829                           ;mdb.c: 408: WPUA = 0x00;
  6830  010846  0E00               	movlw	0
  6831  010848  6F10               	movwf	16,b	;volatile
  6832                           
  6833                           ; BSR set to: 15
  6834                           ;mdb.c: 409: WPUC = 0x00;
  6835  01084A  0E00               	movlw	0
  6836  01084C  6F20               	movwf	32,b	;volatile
  6837                           
  6838                           ; BSR set to: 15
  6839                           ;mdb.c: 414: ODCONE = 0x00;
  6840  01084E  0E00               	movlw	0
  6841  010850  6F2C               	movwf	44,b	;volatile
  6842                           
  6843                           ; BSR set to: 15
  6844                           ;mdb.c: 415: ODCONA = 0x00;
  6845  010852  0E00               	movlw	0
  6846  010854  6F0F               	movwf	15,b	;volatile
  6847                           
  6848                           ; BSR set to: 15
  6849                           ;mdb.c: 416: ODCONB = 0x00;
  6850  010856  0E00               	movlw	0
  6851  010858  6F17               	movwf	23,b	;volatile
  6852                           
  6853                           ; BSR set to: 15
  6854                           ;mdb.c: 417: ODCONC = 0x00;
  6855  01085A  0E00               	movlw	0
  6856  01085C  6F1F               	movwf	31,b	;volatile
  6857                           
  6858                           ; BSR set to: 15
  6859                           ;mdb.c: 418: ODCOND = 0x00;
  6860  01085E  0E00               	movlw	0
  6861  010860  6F24               	movwf	36,b	;volatile
  6862                           
  6863                           ; BSR set to: 15
  6864                           ;mdb.c: 419: LATC = 0x01;
  6865  010862  0E01               	movlw	1
  6866  010864  6E85               	movwf	3973,c	;volatile
  6867                           
  6868                           ; BSR set to: 15
  6869                           ;mdb.c: 420: TRISC = 0x80;
  6870  010866  0E80               	movlw	128
  6871  010868  6E8A               	movwf	3978,c	;volatile
  6872                           
  6873                           ; BSR set to: 15
  6874                           ;mdb.c: 421: ANSELC = 0x00;
  6875  01086A  0E00               	movlw	0
  6876  01086C  6F21               	movwf	33,b	;volatile
  6877                           
  6878                           ; BSR set to: 15
  6879                           ;mdb.c: 422: WPUC = 0x00;
  6880  01086E  0E00               	movlw	0
  6881  010870  6F20               	movwf	32,b	;volatile
  6882                           
  6883                           ; BSR set to: 15
  6884                           ;mdb.c: 423: ODCONC = 0x00;
  6885  010872  0E00               	movlw	0
  6886  010874  6F1F               	movwf	31,b	;volatile
  6887                           
  6888                           ; BSR set to: 15
  6889                           ;mdb.c: 424: PPSLOCK = 0x55;
  6890  010876  0E55               	movlw	85
  6891  010878  010E               	movlb	14	; () banked
  6892  01087A  6FA0               	movwf	160,b	;volsfr
  6893                           
  6894                           ; BSR set to: 14
  6895                           ;mdb.c: 425: PPSLOCK = 0xAA;
  6896  01087C  0EAA               	movlw	170
  6897  01087E  6FA0               	movwf	160,b	;volsfr
  6898                           
  6899                           ; BSR set to: 14
  6900                           ;mdb.c: 426: PPSLOCKbits.PPSLOCKED = 0x00;
  6901  010880  91A0               	bcf	160,0,b	;volsfr
  6902                           
  6903                           ; BSR set to: 14
  6904                           ;mdb.c: 428: RX1PPSbits.RXPPS = 0x0;
  6905  010882  91B5               	bcf	181,0,b	;volatile
  6906  010884  93B5               	bcf	181,1,b	;volatile
  6907  010886  95B5               	bcf	181,2,b	;volatile
  6908  010888  97B5               	bcf	181,3,b	;volatile
  6909  01088A  99B5               	bcf	181,4,b	;volatile
  6910                           
  6911                           ; BSR set to: 14
  6912                           ;mdb.c: 429: RC6PPS = 0x0;
  6913  01088C  0E00               	movlw	0
  6914  01088E  6FFD               	movwf	253,b	;volatile
  6915                           
  6916                           ; BSR set to: 14
  6917                           ;mdb.c: 430: RB5PPS = 0x0;
  6918  010890  0E00               	movlw	0
  6919  010892  6FF4               	movwf	244,b	;volatile
  6920                           
  6921                           ; BSR set to: 14
  6922                           ;mdb.c: 431: RX2PPSbits.RXPPS = 0x0;
  6923  010894  918D               	bcf	141,0,b	;volatile
  6924  010896  938D               	bcf	141,1,b	;volatile
  6925  010898  958D               	bcf	141,2,b	;volatile
  6926  01089A  978D               	bcf	141,3,b	;volatile
  6927  01089C  998D               	bcf	141,4,b	;volatile
  6928                           
  6929                           ; BSR set to: 14
  6930                           ;mdb.c: 432: CMP1_Initialize();
  6931  01089E  EC15  F08D         	call	_CMP1_Initialize	;wreg free
  6932                           
  6933                           ;mdb.c: 433: TMR3_Initialize();
  6934  0108A2  EC10  F08B         	call	_TMR3_Initialize	;wreg free
  6935                           
  6936                           ;mdb.c: 434: DAC1_Initialize();
  6937  0108A6  EC4D  F08D         	call	_DAC1_Initialize	;wreg free
  6938                           
  6939                           ;mdb.c: 435: TMR5_Initialize();
  6940  0108AA  ECF5  F08A         	call	_TMR5_Initialize	;wreg free
  6941                           
  6942                           ;mdb.c: 436: TMR1_Initialize();
  6943  0108AE  EC2B  F08B         	call	_TMR1_Initialize	;wreg free
  6944  0108B2  0012               	return		;funcret
  6945  0108B4                     __end_of_mdb_unlock:
  6946                           	opt stack 0
  6947                           tblptru	equ	0xFF8
  6948                           tblptrh	equ	0xFF7
  6949                           tblptrl	equ	0xFF6
  6950                           tablat	equ	0xFF5
  6951                           prodh	equ	0xFF4
  6952                           prodl	equ	0xFF3
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           indf2	equ	0xFDF
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function _Vend_setup *****************
  6961 ;; Defined at:
  6962 ;;		line 357 in file "vend.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;		None
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;                  1    wreg      void 
  6969 ;; Registers used:
  6970 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  6976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;Total ram usage:        0 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    8
  6983 ;; This function calls:
  6984 ;;		_Vend_timeset
  6985 ;;		_butindb
  6986 ;;		_lcd_string
  6987 ;; This function is called by:
  6988 ;;		_enter_service
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text38
  6993  0114CA                     __ptext38:
  6994                           	opt stack 0
  6995  0114CA                     _Vend_setup:
  6996                           	opt stack 21
  6997                           
  6998                           ;vend.c: 359: venflags.vendset = 1;
  6999                           
  7000                           ;incstack = 0
  7001  0114CA  8430               	bsf	_venflags+1,2,c
  7002                           
  7003                           ;vend.c: 360: lcd_string(vendsetup, line1);
  7004  0114CC  0EA6               	movlw	low _vendsetup
  7005  0114CE  6E24               	movwf	lcd_string@lcdstring,c
  7006  0114D0  0EFD               	movlw	high _vendsetup
  7007  0114D2  6E25               	movwf	lcd_string@lcdstring+1,c
  7008  0114D4  0E97               	movlw	low _line1
  7009  0114D6  6EF6               	movwf	tblptrl,c
  7010  0114D8                     	if	1	;There is more than 1 active tblptr byte
  7011  0114D8  0EFD               	movlw	high _line1
  7012  0114DA  6EF7               	movwf	tblptrh,c
  7013  0114DC                     	endif
  7014  0114DC                     	if	1	;There are 3 active tblptr bytes
  7015  0114DC  0E00               	movlw	low (_line1 shr (0+16))
  7016  0114DE  6EF8               	movwf	tblptru,c
  7017  0114E0                     	endif
  7018  0114E0  0008               	tblrd		*
  7019  0114E2  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7020  0114E6  EC78  F085         	call	_lcd_string	;wreg free
  7021                           
  7022                           ;vend.c: 361: while(venflags.vendset)
  7023  0114EA  D00B               	goto	l1883
  7024  0114EC                     
  7025                           ;vend.c: 362: {
  7026                           ;vend.c: 363: buttons = butindb();
  7027  0114EC  ECAD  F08B         	call	_butindb	;wreg free
  7028  0114F0  6E38               	movwf	_buttons,c	;volatile
  7029                           
  7030                           ;vend.c: 364: switch(buttons)
  7031  0114F2  D003               	goto	l1881
  7032  0114F4  EC72  F08D         	call	_Vend_timeset	;wreg free
  7033                           
  7034                           ;vend.c: 367: }
  7035  0114F8  D004               	goto	l1883
  7036  0114FA                     l1881:
  7037  0114FA  5038               	movf	_buttons,w,c	;volatile
  7038                           
  7039                           ; Switch size 1, requested type "space"
  7040                           ; Number of cases is 1, Range of values is 1 to 1
  7041                           ; switch strategies available:
  7042                           ; Name         Instructions Cycles
  7043                           ; simple_byte            4     3 (average)
  7044                           ;	Chosen strategy is simple_byte
  7045  0114FC  0A01               	xorlw	1	; case 1
  7046  0114FE  B4D8               	btfsc	status,2,c
  7047  011500  D7F9               	goto	l1882
  7048  011502                     l1883:
  7049  011502  A430               	btfss	_venflags+1,2,c
  7050  011504  0012               	return	
  7051  011506  D7F2               	goto	l1880
  7052  011508                     __end_of_Vend_setup:
  7053                           	opt stack 0
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           postinc0	equ	0xFEE
  7061                           wreg	equ	0xFE8
  7062                           indf2	equ	0xFDF
  7063                           fsr2h	equ	0xFDA
  7064                           fsr2l	equ	0xFD9
  7065                           status	equ	0xFD8
  7066                           
  7067 ;; *************** function _Vend_timeset *****************
  7068 ;; Defined at:
  7069 ;;		line 371 in file "vend.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;		None
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;		None
  7074 ;; Return value:  Size  Location     Type
  7075 ;;                  1    wreg      void 
  7076 ;; Registers used:
  7077 ;;		None
  7078 ;; Tracked objects:
  7079 ;;		On entry : 0/0
  7080 ;;		On exit  : 0/0
  7081 ;;		Unchanged: 0/0
  7082 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7087 ;;Total ram usage:        0 bytes
  7088 ;; Hardware stack levels used:    1
  7089 ;; Hardware stack levels required when called:    2
  7090 ;; This function calls:
  7091 ;;		Nothing
  7092 ;; This function is called by:
  7093 ;;		_Vend_setup
  7094 ;; This function uses a non-reentrant model
  7095 ;;
  7096                           
  7097                           	psect	text39
  7098  011AE4                     __ptext39:
  7099                           	opt stack 0
  7100  011AE4                     _Vend_timeset:
  7101                           	opt stack 26
  7102                           
  7103                           ;incstack = 0
  7104  011AE4  0012               	return		;funcret
  7105  011AE6                     __end_of_Vend_timeset:
  7106                           	opt stack 0
  7107                           tblptru	equ	0xFF8
  7108                           tblptrh	equ	0xFF7
  7109                           tblptrl	equ	0xFF6
  7110                           tablat	equ	0xFF5
  7111                           prodh	equ	0xFF4
  7112                           prodl	equ	0xFF3
  7113                           postinc0	equ	0xFEE
  7114                           wreg	equ	0xFE8
  7115                           indf2	equ	0xFDF
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _Sensor_set *****************
  7121 ;; Defined at:
  7122 ;;		line 254 in file "vend.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;		None
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  dacpos          1   12[BANK0 ] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;                  1    wreg      void 
  7129 ;; Registers used:
  7130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;Total ram usage:        1 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    9
  7143 ;; This function calls:
  7144 ;;		_butindb
  7145 ;;		_displ_sens
  7146 ;;		_lcd_string
  7147 ;; This function is called by:
  7148 ;;		_enter_service
  7149 ;; This function uses a non-reentrant model
  7150 ;;
  7151                           
  7152                           	psect	text40
  7153  010714                     __ptext40:
  7154                           	opt stack 0
  7155  010714                     _Sensor_set:
  7156                           	opt stack 20
  7157                           
  7158                           ;vend.c: 256: mdbflags.endis = 1;
  7159                           
  7160                           ;incstack = 0
  7161  010714  8C3E               	bsf	_mdbflags,6,c
  7162                           
  7163                           ;vend.c: 258: lcd_string(sensmsg, line1);
  7164  010716  0EA9               	movlw	low _sensmsg
  7165  010718  6E24               	movwf	lcd_string@lcdstring,c
  7166  01071A  0EFF               	movlw	high _sensmsg
  7167  01071C  6E25               	movwf	lcd_string@lcdstring+1,c
  7168  01071E  0E97               	movlw	low _line1
  7169  010720  6EF6               	movwf	tblptrl,c
  7170  010722                     	if	1	;There is more than 1 active tblptr byte
  7171  010722  0EFD               	movlw	high _line1
  7172  010724  6EF7               	movwf	tblptrh,c
  7173  010726                     	endif
  7174  010726                     	if	1	;There are 3 active tblptr bytes
  7175  010726  0E00               	movlw	low (_line1 shr (0+16))
  7176  010728  6EF8               	movwf	tblptru,c
  7177  01072A                     	endif
  7178  01072A  0008               	tblrd		*
  7179  01072C  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7180  010730  EC78  F085         	call	_lcd_string	;wreg free
  7181                           
  7182                           ;vend.c: 260: senspos = bflag + 2;
  7183  010734  5046               	movf	_bflag,w,c
  7184  010736  0F02               	addlw	2
  7185  010738  6E35               	movwf	_senspos,c	;volatile
  7186                           
  7187                           ;vend.c: 262: lcd_string(dacmsg, line2);
  7188  01073A  0E8F               	movlw	low _dacmsg
  7189  01073C  6E24               	movwf	lcd_string@lcdstring,c
  7190  01073E  0EFF               	movlw	high _dacmsg
  7191  010740  6E25               	movwf	lcd_string@lcdstring+1,c
  7192  010742  0E96               	movlw	low _line2
  7193  010744  6EF6               	movwf	tblptrl,c
  7194  010746                     	if	1	;There is more than 1 active tblptr byte
  7195  010746  0EFD               	movlw	high _line2
  7196  010748  6EF7               	movwf	tblptrh,c
  7197  01074A                     	endif
  7198  01074A                     	if	1	;There are 3 active tblptr bytes
  7199  01074A  0E00               	movlw	low (_line2 shr (0+16))
  7200  01074C  6EF8               	movwf	tblptru,c
  7201  01074E                     	endif
  7202  01074E  0008               	tblrd		*
  7203  010750  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7204  010754  EC78  F085         	call	_lcd_string	;wreg free
  7205                           
  7206                           ;vend.c: 264: uint8_t dacpos = bflag + 2;
  7207  010758  5046               	movf	_bflag,w,c
  7208  01075A  0F02               	addlw	2
  7209  01075C  0100               	movlb	0	; () banked
  7210  01075E  6FA6               	movwf	Sensor_set@dacpos& (0+255),b
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;vend.c: 265: displ_sens(senspos, dacpos);
  7214  010760  C0A6  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  7215  010764  5035               	movf	_senspos,w,c	;volatile
  7216  010766  EC5A  F088         	call	_displ_sens
  7217                           
  7218                           ;vend.c: 266: while(mdbflags.endis)
  7219  01076A  D03D               	goto	l1849
  7220  01076C                     
  7221                           ;vend.c: 267: {
  7222                           ;vend.c: 268: buttons = butindb();
  7223  01076C  ECAD  F08B         	call	_butindb	;wreg free
  7224  010770  6E38               	movwf	_buttons,c	;volatile
  7225                           
  7226                           ;vend.c: 269: switch(buttons)
  7227  010772  D027               	goto	l1844
  7228  010774  5036               	movf	_sensorval,w,c	;volatile
  7229  010776  0B1F               	andlw	31
  7230  010778  010F               	movlb	15	; () banked
  7231  01077A  6F34               	movwf	52,b	;volatile
  7232                           
  7233                           ; BSR set to: 15
  7234  01077C  2A36               	incf	_sensorval,f,c	;volatile
  7235                           
  7236                           ; BSR set to: 15
  7237                           ;vend.c: 272: displ_sens(senspos, dacpos);
  7238  01077E  C0A6  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  7239  010782  5035               	movf	_senspos,w,c	;volatile
  7240  010784  EC5A  F088         	call	_displ_sens
  7241                           
  7242                           ;vend.c: 273: break;
  7243  010788  D026               	goto	l1846
  7244  01078A  5036               	movf	_sensorval,w,c	;volatile
  7245  01078C  0B1F               	andlw	31
  7246  01078E  010F               	movlb	15	; () banked
  7247  010790  6F34               	movwf	52,b	;volatile
  7248                           
  7249                           ; BSR set to: 15
  7250  010792  0636               	decf	_sensorval,f,c	;volatile
  7251                           
  7252                           ; BSR set to: 15
  7253                           ;vend.c: 275: displ_sens(senspos, dacpos);
  7254  010794  C0A6  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  7255  010798  5035               	movf	_senspos,w,c	;volatile
  7256  01079A  EC5A  F088         	call	_displ_sens
  7257                           
  7258                           ;vend.c: 276: break;
  7259  01079E  D01B               	goto	l1846
  7260  0107A0                     l1848:
  7261  0107A0  9C3E               	bcf	_mdbflags,6,c
  7262                           
  7263                           ;vend.c: 278: lcd_string(servmsg, line1);
  7264  0107A2  0E38               	movlw	low _servmsg
  7265  0107A4  6E24               	movwf	lcd_string@lcdstring,c
  7266  0107A6  0EFE               	movlw	high _servmsg
  7267  0107A8  6E25               	movwf	lcd_string@lcdstring+1,c
  7268  0107AA  0E97               	movlw	low _line1
  7269  0107AC  6EF6               	movwf	tblptrl,c
  7270  0107AE                     	if	1	;There is more than 1 active tblptr byte
  7271  0107AE  0EFD               	movlw	high _line1
  7272  0107B0  6EF7               	movwf	tblptrh,c
  7273  0107B2                     	endif
  7274  0107B2                     	if	1	;There are 3 active tblptr bytes
  7275  0107B2  0E00               	movlw	low (_line1 shr (0+16))
  7276  0107B4  6EF8               	movwf	tblptru,c
  7277  0107B6                     	endif
  7278  0107B6  0008               	tblrd		*
  7279  0107B8  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7280  0107BC  EC78  F085         	call	_lcd_string	;wreg free
  7281                           
  7282                           ;vend.c: 280: }
  7283                           
  7284                           ;vend.c: 279: break;
  7285  0107C0  D00A               	goto	l1846
  7286  0107C2                     l1844:
  7287  0107C2  5038               	movf	_buttons,w,c	;volatile
  7288                           
  7289                           ; Switch size 1, requested type "space"
  7290                           ; Number of cases is 3, Range of values is 1 to 128
  7291                           ; switch strategies available:
  7292                           ; Name         Instructions Cycles
  7293                           ; simple_byte           10     6 (average)
  7294                           ;	Chosen strategy is simple_byte
  7295  0107C4  0A01               	xorlw	1	; case 1
  7296  0107C6  B4D8               	btfsc	status,2,c
  7297  0107C8  D7D5               	goto	l1845
  7298  0107CA  0A03               	xorlw	3	; case 2
  7299  0107CC  B4D8               	btfsc	status,2,c
  7300  0107CE  D7DD               	goto	l1847
  7301  0107D0  0A82               	xorlw	130	; case 128
  7302  0107D2  B4D8               	btfsc	status,2,c
  7303  0107D4  D7E5               	goto	l1848
  7304  0107D6                     l1846:
  7305                           
  7306                           ;vend.c: 281: if(PIR4bits.TMR3IF)
  7307  0107D6  010E               	movlb	14	; () banked
  7308  0107D8  A5CE               	btfss	206,2,b	;volatile
  7309  0107DA  D005               	goto	l1849
  7310                           
  7311                           ; BSR set to: 14
  7312                           ;vend.c: 282: {
  7313                           ;vend.c: 283: displ_sens(senspos, dacpos);
  7314  0107DC  C0A6  F02A         	movff	Sensor_set@dacpos,displ_sens@dmsgpos
  7315  0107E0  5035               	movf	_senspos,w,c	;volatile
  7316  0107E2  EC5A  F088         	call	_displ_sens
  7317  0107E6                     l1849:
  7318  0107E6  AC3E               	btfss	_mdbflags,6,c
  7319  0107E8  0012               	return	
  7320  0107EA  D7C0               	goto	l1843
  7321  0107EC                     __end_of_Sensor_set:
  7322                           	opt stack 0
  7323                           tblptru	equ	0xFF8
  7324                           tblptrh	equ	0xFF7
  7325                           tblptrl	equ	0xFF6
  7326                           tablat	equ	0xFF5
  7327                           prodh	equ	0xFF4
  7328                           prodl	equ	0xFF3
  7329                           postinc0	equ	0xFEE
  7330                           wreg	equ	0xFE8
  7331                           indf2	equ	0xFDF
  7332                           fsr2h	equ	0xFDA
  7333                           fsr2l	equ	0xFD9
  7334                           status	equ	0xFD8
  7335                           
  7336 ;; *************** function _displ_sens *****************
  7337 ;; Defined at:
  7338 ;;		line 40 in file "lcd.c"
  7339 ;; Parameters:    Size  Location     Type
  7340 ;;  smsgpos         1    wreg     unsigned char 
  7341 ;;  dmsgpos         1   31[COMRAM] unsigned char 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  smsgpos         1   32[COMRAM] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  1    wreg      void 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7353 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7356 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;Total ram usage:        2 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    8
  7360 ;; This function calls:
  7361 ;;		_CMP1_GetOutputStatus
  7362 ;;		_DATAEE_WriteByte
  7363 ;;		_displ_hex
  7364 ;;		_lcd_dispadd
  7365 ;;		_lcd_string
  7366 ;; This function is called by:
  7367 ;;		_Sensor_set
  7368 ;; This function uses a non-reentrant model
  7369 ;;
  7370                           
  7371                           	psect	text41
  7372  0110B4                     __ptext41:
  7373                           	opt stack 0
  7374  0110B4                     _displ_sens:
  7375                           	opt stack 20
  7376                           
  7377                           ;incstack = 0
  7378                           ;displ_sens@smsgpos stored from wreg
  7379  0110B4  6E2B               	movwf	displ_sens@smsgpos,c
  7380                           
  7381                           ;lcd.c: 42: if(CMP1_GetOutputStatus())
  7382  0110B6  EC3F  F08D         	call	_CMP1_GetOutputStatus	;wreg free
  7383  0110BA  0900               	iorlw	0
  7384  0110BC  B4D8               	btfsc	status,2,c
  7385  0110BE  D009               	goto	l1287
  7386                           
  7387                           ;lcd.c: 43: {
  7388                           ;lcd.c: 44: lcd_string(offmsg, smsgpos);
  7389  0110C0  0EF7               	movlw	low _offmsg
  7390  0110C2  6E24               	movwf	lcd_string@lcdstring,c
  7391  0110C4  0EFF               	movlw	high _offmsg
  7392  0110C6  6E25               	movwf	lcd_string@lcdstring+1,c
  7393  0110C8  C02B  F026         	movff	displ_sens@smsgpos,lcd_string@lcdline
  7394  0110CC  EC78  F085         	call	_lcd_string	;wreg free
  7395                           
  7396                           ;lcd.c: 45: }
  7397  0110D0  D008               	goto	l1288
  7398  0110D2                     l1287:
  7399                           
  7400                           ;lcd.c: 46: else
  7401                           ;lcd.c: 47: {
  7402                           ;lcd.c: 48: lcd_string(onmsg, smsgpos);
  7403  0110D2  0EFB               	movlw	low _onmsg
  7404  0110D4  6E24               	movwf	lcd_string@lcdstring,c
  7405  0110D6  0EFF               	movlw	high _onmsg
  7406  0110D8  6E25               	movwf	lcd_string@lcdstring+1,c
  7407  0110DA  C02B  F026         	movff	displ_sens@smsgpos,lcd_string@lcdline
  7408  0110DE  EC78  F085         	call	_lcd_string	;wreg free
  7409  0110E2                     l1288:
  7410                           
  7411                           ;lcd.c: 49: }
  7412                           ;lcd.c: 50: DATAEE_WriteByte(sensval, sensorval);
  7413  0110E2  0E5D               	movlw	low _sensval
  7414  0110E4  6EF6               	movwf	tblptrl,c
  7415  0110E6                     	if	1	;There is more than 1 active tblptr byte
  7416  0110E6  0EFD               	movlw	high _sensval
  7417  0110E8  6EF7               	movwf	tblptrh,c
  7418  0110EA                     	endif
  7419  0110EA                     	if	1	;There are 3 active tblptr bytes
  7420  0110EA  0E00               	movlw	low (_sensval shr (0+16))
  7421  0110EC  6EF8               	movwf	tblptru,c
  7422  0110EE                     	endif
  7423  0110EE  0009               	tblrd		*+
  7424  0110F0  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  7425  0110F4  000A               	tblrd		*-
  7426  0110F6  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  7427  0110FA  C036  F01F         	movff	_sensorval,DATAEE_WriteByte@bData	;volatile
  7428  0110FE  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
  7429                           
  7430                           ;lcd.c: 51: lcd_string(clrmsg, dmsgpos);
  7431  011102  0EF1               	movlw	low _clrmsg
  7432  011104  6E24               	movwf	lcd_string@lcdstring,c
  7433  011106  0EFF               	movlw	high _clrmsg
  7434  011108  6E25               	movwf	lcd_string@lcdstring+1,c
  7435  01110A  C02A  F026         	movff	displ_sens@dmsgpos,lcd_string@lcdline
  7436  01110E  EC78  F085         	call	_lcd_string	;wreg free
  7437                           
  7438                           ;lcd.c: 52: lcd_dispadd(dmsgpos);
  7439  011112  502A               	movf	displ_sens@dmsgpos,w,c
  7440  011114  ECC4  F08C         	call	_lcd_dispadd
  7441                           
  7442                           ;lcd.c: 53: displ_hex((uint8_t) DAC1CON1);
  7443  011118  010F               	movlb	15	; () banked
  7444  01111A  5134               	movf	52,w,b	;volatile
  7445  01111C  6E27               	movwf	displ_hex@hexnum,c
  7446  01111E  6A28               	clrf	displ_hex@hexnum+1,c
  7447  011120  6A29               	clrf	displ_hex@hexnum+2,c
  7448  011122  EC1D  F085         	call	_displ_hex	;wreg free
  7449  011126  0012               	return		;funcret
  7450  011128                     __end_of_displ_sens:
  7451                           	opt stack 0
  7452                           tblptru	equ	0xFF8
  7453                           tblptrh	equ	0xFF7
  7454                           tblptrl	equ	0xFF6
  7455                           tablat	equ	0xFF5
  7456                           prodh	equ	0xFF4
  7457                           prodl	equ	0xFF3
  7458                           postinc0	equ	0xFEE
  7459                           wreg	equ	0xFE8
  7460                           indf2	equ	0xFDF
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8
  7464                           
  7465 ;; *************** function _CMP1_GetOutputStatus *****************
  7466 ;; Defined at:
  7467 ;;		line 74 in file "mcc_generated_files/cmp1.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;		None
  7470 ;; Auto vars:     Size  Location     Type
  7471 ;;		None
  7472 ;; Return value:  Size  Location     Type
  7473 ;;                  1    wreg      unsigned char 
  7474 ;; Registers used:
  7475 ;;		wreg
  7476 ;; Tracked objects:
  7477 ;;		On entry : 0/0
  7478 ;;		On exit  : 0/0
  7479 ;;		Unchanged: 0/0
  7480 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;Total ram usage:        0 bytes
  7486 ;; Hardware stack levels used:    1
  7487 ;; Hardware stack levels required when called:    2
  7488 ;; This function calls:
  7489 ;;		Nothing
  7490 ;; This function is called by:
  7491 ;;		_main
  7492 ;;		_displ_sens
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text42
  7497  011A7E                     __ptext42:
  7498                           	opt stack 0
  7499  011A7E                     _CMP1_GetOutputStatus:
  7500                           	opt stack 25
  7501                           
  7502                           ;cmp1.c: 76: return (CMOUTbits.MC1OUT);
  7503                           
  7504                           ;incstack = 0
  7505  011A7E  010F               	movlb	15	; () banked
  7506  011A80  A13D               	btfss	61,0,b	;volatile
  7507  011A82  D002               	goto	u2080
  7508  011A84  0E01               	movlw	1
  7509  011A86  0012               	return	
  7510  011A88                     u2080:
  7511  011A88  0E00               	movlw	0
  7512  011A8A  0012               	return	
  7513  011A8C                     __end_of_CMP1_GetOutputStatus:
  7514                           	opt stack 0
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           indf2	equ	0xFDF
  7524                           fsr2h	equ	0xFDA
  7525                           fsr2l	equ	0xFD9
  7526                           status	equ	0xFD8
  7527                           
  7528 ;; *************** function _Hopper_coin *****************
  7529 ;; Defined at:
  7530 ;;		line 179 in file "vend.c"
  7531 ;; Parameters:    Size  Location     Type
  7532 ;;		None
  7533 ;; Auto vars:     Size  Location     Type
  7534 ;;  coinval         1   12[BANK0 ] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  1    wreg      void 
  7537 ;; Registers used:
  7538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;Total ram usage:        1 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    9
  7551 ;; This function calls:
  7552 ;;		_DATAEE_ReadByte
  7553 ;;		_Update_Hopcoin
  7554 ;;		_butindb
  7555 ;;		_displ_hex
  7556 ;;		_lcd_dispadd
  7557 ;;		_lcd_string
  7558 ;; This function is called by:
  7559 ;;		_enter_service
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text43
  7564  010634                     __ptext43:
  7565                           	opt stack 0
  7566  010634                     _Hopper_coin:
  7567                           	opt stack 20
  7568                           
  7569                           ;vend.c: 181: lcd_string(hoppcoin, line1);
  7570                           
  7571                           ; BSR set to: 15
  7572                           ;incstack = 0
  7573  010634  0EB4               	movlw	low _hoppcoin
  7574  010636  6E24               	movwf	lcd_string@lcdstring,c
  7575  010638  0EFE               	movlw	high _hoppcoin
  7576  01063A  6E25               	movwf	lcd_string@lcdstring+1,c
  7577  01063C  0E97               	movlw	low _line1
  7578  01063E  6EF6               	movwf	tblptrl,c
  7579  010640                     	if	1	;There is more than 1 active tblptr byte
  7580  010640  0EFD               	movlw	high _line1
  7581  010642  6EF7               	movwf	tblptrh,c
  7582  010644                     	endif
  7583  010644                     	if	1	;There are 3 active tblptr bytes
  7584  010644  0E00               	movlw	low (_line1 shr (0+16))
  7585  010646  6EF8               	movwf	tblptru,c
  7586  010648                     	endif
  7587  010648  0008               	tblrd		*
  7588  01064A  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7589  01064E  EC78  F085         	call	_lcd_string	;wreg free
  7590                           
  7591                           ;vend.c: 182: mdbflags.endis = 1;
  7592  010652  8C3E               	bsf	_mdbflags,6,c
  7593                           
  7594                           ;vend.c: 183: senspos = bflag + 2;
  7595  010654  5046               	movf	_bflag,w,c
  7596  010656  0F02               	addlw	2
  7597  010658  6E35               	movwf	_senspos,c	;volatile
  7598                           
  7599                           ;vend.c: 184: uint8_t coinval = DATAEE_ReadByte(hopcoin);
  7600  01065A  0E59               	movlw	low _hopcoin
  7601  01065C  6EF6               	movwf	tblptrl,c
  7602  01065E                     	if	1	;There is more than 1 active tblptr byte
  7603  01065E  0EFD               	movlw	high _hopcoin
  7604  010660  6EF7               	movwf	tblptrh,c
  7605  010662                     	endif
  7606  010662                     	if	1	;There are 3 active tblptr bytes
  7607  010662  0E00               	movlw	low (_hopcoin shr (0+16))
  7608  010664  6EF8               	movwf	tblptru,c
  7609  010666                     	endif
  7610  010666  0009               	tblrd		*+
  7611  010668  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  7612  01066C  000A               	tblrd		*-
  7613  01066E  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  7614  010672  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  7615  010676  0100               	movlb	0	; () banked
  7616  010678  6FA6               	movwf	Hopper_coin@coinval& (0+255),b
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;vend.c: 185: lcd_dispadd(senspos);
  7620  01067A  5035               	movf	_senspos,w,c	;volatile
  7621  01067C  ECC4  F08C         	call	_lcd_dispadd
  7622                           
  7623                           ;vend.c: 186: displ_hex((uint24_t)coinval);
  7624  010680  0100               	movlb	0	; () banked
  7625  010682  51A6               	movf	Hopper_coin@coinval& (0+255),w,b
  7626  010684  6E27               	movwf	displ_hex@hexnum,c
  7627  010686  6A28               	clrf	displ_hex@hexnum+1,c
  7628  010688  6A29               	clrf	displ_hex@hexnum+2,c
  7629  01068A  EC1D  F085         	call	_displ_hex	;wreg free
  7630                           
  7631                           ;vend.c: 187: while(mdbflags.endis)
  7632  01068E  D03F               	goto	l1813
  7633  010690                     
  7634                           ;vend.c: 188: {
  7635                           ;vend.c: 189: buttons = butindb();
  7636  010690  ECAD  F08B         	call	_butindb	;wreg free
  7637  010694  6E38               	movwf	_buttons,c	;volatile
  7638                           
  7639                           ;vend.c: 190: switch(buttons)
  7640  010696  D021               	goto	l1815
  7641  010698  0E01               	movlw	1
  7642  01069A  6E2A               	movwf	Update_Hopcoin@direction,c
  7643  01069C  0100               	movlb	0	; () banked
  7644  01069E  51A6               	movf	Hopper_coin@coinval& (0+255),w,b
  7645  0106A0  EC9A  F087         	call	_Update_Hopcoin
  7646                           
  7647                           ;vend.c: 193: break;
  7648  0106A4  D024               	goto	l1817
  7649  0106A6  0E02               	movlw	2
  7650  0106A8  6E2A               	movwf	Update_Hopcoin@direction,c
  7651  0106AA  0100               	movlb	0	; () banked
  7652  0106AC  51A6               	movf	Hopper_coin@coinval& (0+255),w,b
  7653  0106AE  EC9A  F087         	call	_Update_Hopcoin
  7654                           
  7655                           ;vend.c: 195: break;
  7656  0106B2  D01D               	goto	l1817
  7657  0106B4                     l1819:
  7658  0106B4  9C3E               	bcf	_mdbflags,6,c
  7659                           
  7660                           ;vend.c: 197: lcd_string(servmsg, line1);
  7661  0106B6  0E38               	movlw	low _servmsg
  7662  0106B8  6E24               	movwf	lcd_string@lcdstring,c
  7663  0106BA  0EFE               	movlw	high _servmsg
  7664  0106BC  6E25               	movwf	lcd_string@lcdstring+1,c
  7665  0106BE  0E97               	movlw	low _line1
  7666  0106C0  6EF6               	movwf	tblptrl,c
  7667  0106C2                     	if	1	;There is more than 1 active tblptr byte
  7668  0106C2  0EFD               	movlw	high _line1
  7669  0106C4  6EF7               	movwf	tblptrh,c
  7670  0106C6                     	endif
  7671  0106C6                     	if	1	;There are 3 active tblptr bytes
  7672  0106C6  0E00               	movlw	low (_line1 shr (0+16))
  7673  0106C8  6EF8               	movwf	tblptru,c
  7674  0106CA                     	endif
  7675  0106CA  0008               	tblrd		*
  7676  0106CC  CFF5 F026          	movff	tablat,lcd_string@lcdline
  7677  0106D0  EC78  F085         	call	_lcd_string	;wreg free
  7678                           
  7679                           ;vend.c: 198: buttons = 0x00;
  7680  0106D4  0E00               	movlw	0
  7681  0106D6  6E38               	movwf	_buttons,c	;volatile
  7682                           
  7683                           ;vend.c: 200: }
  7684                           
  7685                           ;vend.c: 199: break;
  7686  0106D8  D00A               	goto	l1817
  7687  0106DA                     l1815:
  7688  0106DA  5038               	movf	_buttons,w,c	;volatile
  7689                           
  7690                           ; Switch size 1, requested type "space"
  7691                           ; Number of cases is 3, Range of values is 1 to 128
  7692                           ; switch strategies available:
  7693                           ; Name         Instructions Cycles
  7694                           ; simple_byte           10     6 (average)
  7695                           ;	Chosen strategy is simple_byte
  7696  0106DC  0A01               	xorlw	1	; case 1
  7697  0106DE  B4D8               	btfsc	status,2,c
  7698  0106E0  D7DB               	goto	l1816
  7699  0106E2  0A03               	xorlw	3	; case 2
  7700  0106E4  B4D8               	btfsc	status,2,c
  7701  0106E6  D7DF               	goto	l1818
  7702  0106E8  0A82               	xorlw	130	; case 128
  7703  0106EA  B4D8               	btfsc	status,2,c
  7704  0106EC  D7E3               	goto	l1819
  7705  0106EE                     l1817:
  7706                           
  7707                           ;vend.c: 201: coinval = DATAEE_ReadByte(hopcoin);
  7708  0106EE  0E59               	movlw	low _hopcoin
  7709  0106F0  6EF6               	movwf	tblptrl,c
  7710  0106F2                     	if	1	;There is more than 1 active tblptr byte
  7711  0106F2  0EFD               	movlw	high _hopcoin
  7712  0106F4  6EF7               	movwf	tblptrh,c
  7713  0106F6                     	endif
  7714  0106F6                     	if	1	;There are 3 active tblptr bytes
  7715  0106F6  0E00               	movlw	low (_hopcoin shr (0+16))
  7716  0106F8  6EF8               	movwf	tblptru,c
  7717  0106FA                     	endif
  7718  0106FA  0009               	tblrd		*+
  7719  0106FC  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  7720  010700  000A               	tblrd		*-
  7721  010702  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  7722  010706  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  7723  01070A  0100               	movlb	0	; () banked
  7724  01070C  6FA6               	movwf	Hopper_coin@coinval& (0+255),b
  7725  01070E                     l1813:
  7726                           
  7727                           ; BSR set to: 0
  7728  01070E  AC3E               	btfss	_mdbflags,6,c
  7729  010710  0012               	return	
  7730  010712  D7BE               	goto	l1814
  7731  010714                     __end_of_Hopper_coin:
  7732                           	opt stack 0
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           postinc0	equ	0xFEE
  7740                           wreg	equ	0xFE8
  7741                           indf2	equ	0xFDF
  7742                           fsr2h	equ	0xFDA
  7743                           fsr2l	equ	0xFD9
  7744                           status	equ	0xFD8
  7745                           
  7746 ;; *************** function _butindb *****************
  7747 ;; Defined at:
  7748 ;;		line 130 in file "vend.c"
  7749 ;; Parameters:    Size  Location     Type
  7750 ;;		None
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;  butt            1   22[COMRAM] unsigned char 
  7753 ;;  butval          1   21[COMRAM] unsigned char 
  7754 ;; Return value:  Size  Location     Type
  7755 ;;                  1    wreg      unsigned char 
  7756 ;; Registers used:
  7757 ;;		wreg, status,2, status,0, cstack
  7758 ;; Tracked objects:
  7759 ;;		On entry : 0/0
  7760 ;;		On exit  : 0/0
  7761 ;;		Unchanged: 0/0
  7762 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7766 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;Total ram usage:        4 bytes
  7768 ;; Hardware stack levels used:    1
  7769 ;; Hardware stack levels required when called:    3
  7770 ;; This function calls:
  7771 ;;		_butin
  7772 ;; This function is called by:
  7773 ;;		_enter_service
  7774 ;;		_Hopper_coin
  7775 ;;		_Sensor_set
  7776 ;;		_price_set
  7777 ;;		_set_price
  7778 ;;		_Vend_setup
  7779 ;;		_set_notes
  7780 ;;		_enable_notes
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text44
  7785  01175A                     __ptext44:
  7786                           	opt stack 0
  7787  01175A                     _butindb:
  7788                           	opt stack 24
  7789                           
  7790                           ;vend.c: 132: uint8_t butt = butin();
  7791                           
  7792                           ;incstack = 0
  7793  01175A  ECDD  F089         	call	_butin	;wreg free
  7794  01175E  6E21               	movwf	butindb@butt,c
  7795                           
  7796                           ;vend.c: 133: uint8_t butval = butt;
  7797  011760  C021  F020         	movff	butindb@butt,butindb@butval
  7798                           
  7799                           ;vend.c: 134: while(butval != 0x00)
  7800  011764  D003               	goto	l1798
  7801  011766                     
  7802                           ;vend.c: 135: {
  7803                           ;vend.c: 136: butval = butin();
  7804  011766  ECDD  F089         	call	_butin	;wreg free
  7805  01176A  6E20               	movwf	butindb@butval,c
  7806  01176C                     l1798:
  7807  01176C  5020               	movf	butindb@butval,w,c
  7808  01176E  A4D8               	btfss	status,2,c
  7809  011770  D7FA               	goto	l1799
  7810                           
  7811                           ;vend.c: 137: }
  7812                           ;vend.c: 138: _delay((unsigned long)((500)*(12000000/4000.0)));
  7813  011772  0E08               	movlw	8
  7814  011774  6E1F               	movwf	(??_butindb+1)& (0+255),c
  7815  011776  0E9D               	movlw	157
  7816  011778  6E1E               	movwf	??_butindb& (0+255),c
  7817  01177A  0E06               	movlw	6
  7818  01177C                     u2547:
  7819  01177C  2EE8               	decfsz	wreg,f,c
  7820  01177E  D7FE               	bra	u2547
  7821  011780  2E1E               	decfsz	??_butindb& (0+255),f,c
  7822  011782  D7FC               	bra	u2547
  7823  011784  2E1F               	decfsz	(??_butindb+1)& (0+255),f,c
  7824  011786  D7FA               	bra	u2547
  7825                           
  7826                           ;vend.c: 140: return butt;
  7827  011788  5021               	movf	butindb@butt,w,c
  7828  01178A  0012               	return	
  7829  01178C                     __end_of_butindb:
  7830                           	opt stack 0
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           postinc0	equ	0xFEE
  7838                           wreg	equ	0xFE8
  7839                           indf2	equ	0xFDF
  7840                           fsr2h	equ	0xFDA
  7841                           fsr2l	equ	0xFD9
  7842                           status	equ	0xFD8
  7843                           
  7844 ;; *************** function _butin *****************
  7845 ;; Defined at:
  7846 ;;		line 143 in file "vend.c"
  7847 ;; Parameters:    Size  Location     Type
  7848 ;;		None
  7849 ;; Auto vars:     Size  Location     Type
  7850 ;;		None
  7851 ;; Return value:  Size  Location     Type
  7852 ;;                  1    wreg      unsigned char 
  7853 ;; Registers used:
  7854 ;;		wreg, status,2, status,0
  7855 ;; Tracked objects:
  7856 ;;		On entry : 0/0
  7857 ;;		On exit  : 0/0
  7858 ;;		Unchanged: 0/0
  7859 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7864 ;;Total ram usage:        1 bytes
  7865 ;; Hardware stack levels used:    1
  7866 ;; Hardware stack levels required when called:    2
  7867 ;; This function calls:
  7868 ;;		Nothing
  7869 ;; This function is called by:
  7870 ;;		_butindb
  7871 ;; This function uses a non-reentrant model
  7872 ;;
  7873                           
  7874                           	psect	text45
  7875  0113BA                     __ptext45:
  7876                           	opt stack 0
  7877  0113BA                     _butin:
  7878                           	opt stack 24
  7879                           
  7880                           ;vend.c: 145: LATA7 = 0;
  7881                           
  7882                           ;incstack = 0
  7883  0113BA  9E83               	bcf	3971,7,c	;volatile
  7884                           
  7885                           ;vend.c: 146: LATA6 = 1;
  7886  0113BC  8C83               	bsf	3971,6,c	;volatile
  7887                           
  7888                           ;vend.c: 147: _delay((unsigned long)((15)*(12000000/4000.0)));
  7889  0113BE  0E3B               	movlw	59
  7890  0113C0  6E1D               	movwf	??_butin& (0+255),c
  7891  0113C2  0E70               	movlw	112
  7892  0113C4                     u2557:
  7893  0113C4  2EE8               	decfsz	wreg,f,c
  7894  0113C6  D7FE               	bra	u2557
  7895  0113C8  2E1D               	decfsz	??_butin& (0+255),f,c
  7896  0113CA  D7FC               	bra	u2557
  7897                           
  7898                           ;vend.c: 149: buttons = ((PORTA >> 1) & 0x0F) << 4;
  7899  0113CC  CF8D F01D          	movff	3981,??_butin	;volatile
  7900  0113D0  90D8               	bcf	status,0,c
  7901  0113D2  321D               	rrcf	??_butin,f,c
  7902  0113D4  0E0F               	movlw	15
  7903  0113D6  161D               	andwf	??_butin,f,c
  7904  0113D8  381D               	swapf	??_butin,w,c
  7905  0113DA  0BF0               	andlw	240
  7906  0113DC  6E38               	movwf	_buttons,c	;volatile
  7907                           
  7908                           ;vend.c: 150: LATA7 = 1;
  7909  0113DE  8E83               	bsf	3971,7,c	;volatile
  7910                           
  7911                           ;vend.c: 151: LATA6 = 0;
  7912  0113E0  9C83               	bcf	3971,6,c	;volatile
  7913                           
  7914                           ;vend.c: 152: _delay((unsigned long)((15)*(12000000/4000.0)));
  7915  0113E2  0E3B               	movlw	59
  7916  0113E4  6E1D               	movwf	??_butin& (0+255),c
  7917  0113E6  0E70               	movlw	112
  7918  0113E8                     u2567:
  7919  0113E8  2EE8               	decfsz	wreg,f,c
  7920  0113EA  D7FE               	bra	u2567
  7921  0113EC  2E1D               	decfsz	??_butin& (0+255),f,c
  7922  0113EE  D7FC               	bra	u2567
  7923                           
  7924                           ;vend.c: 154: buttons = ((PORTA >> 1) & 0x0F) | buttons;
  7925  0113F0  90D8               	bcf	status,0,c
  7926  0113F2  308D               	rrcf	3981,w,c	;volatile
  7927  0113F4  0B0F               	andlw	15
  7928  0113F6  1038               	iorwf	_buttons,w,c	;volatile
  7929  0113F8  6E38               	movwf	_buttons,c	;volatile
  7930                           
  7931                           ;vend.c: 155: LATA7 = 1;
  7932  0113FA  8E83               	bsf	3971,7,c	;volatile
  7933                           
  7934                           ;vend.c: 156: LATA6 = 1;
  7935  0113FC  8C83               	bsf	3971,6,c	;volatile
  7936                           
  7937                           ;vend.c: 157: return ~buttons;
  7938  0113FE  5038               	movf	_buttons,w,c	;volatile
  7939  011400  0AFF               	xorlw	255
  7940  011402  0012               	return	
  7941  011404                     __end_of_butin:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           prodh	equ	0xFF4
  7948                           prodl	equ	0xFF3
  7949                           postinc0	equ	0xFEE
  7950                           wreg	equ	0xFE8
  7951                           indf2	equ	0xFDF
  7952                           fsr2h	equ	0xFDA
  7953                           fsr2l	equ	0xFD9
  7954                           status	equ	0xFD8
  7955                           
  7956 ;; *************** function _Update_Hopcoin *****************
  7957 ;; Defined at:
  7958 ;;		line 205 in file "vend.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  newval          1    wreg     unsigned char 
  7961 ;;  direction       1   31[COMRAM] unsigned char 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  newval          1   32[COMRAM] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;                  1    wreg      void 
  7966 ;; Registers used:
  7967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  7973 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7976 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7977 ;;Total ram usage:        2 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:    8
  7980 ;; This function calls:
  7981 ;;		_DATAEE_WriteByte
  7982 ;;		_displ_hex
  7983 ;;		_lcd_dispadd
  7984 ;;		_lcd_string
  7985 ;; This function is called by:
  7986 ;;		_Hopper_coin
  7987 ;; This function uses a non-reentrant model
  7988 ;;
  7989                           
  7990                           	psect	text46
  7991  010F34                     __ptext46:
  7992                           	opt stack 0
  7993  010F34                     _Update_Hopcoin:
  7994                           	opt stack 20
  7995                           
  7996                           ;incstack = 0
  7997                           ;Update_Hopcoin@newval stored from wreg
  7998  010F34  6E2B               	movwf	Update_Hopcoin@newval,c
  7999                           
  8000                           ;vend.c: 208: switch(newval)
  8001  010F36  D014               	goto	l1824
  8002  010F38  042A               	decf	Update_Hopcoin@direction,w,c
  8003  010F3A  A4D8               	btfss	status,2,c
  8004  010F3C  D005               	goto	u2150
  8005                           
  8006                           ;vend.c: 211: {
  8007                           ;vend.c: 212: newval++;
  8008  010F3E  2A2B               	incf	Update_Hopcoin@newval,f,c
  8009                           
  8010                           ;vend.c: 213: }
  8011  010F40  D01A               	goto	l1828
  8012  010F42  042A               	decf	Update_Hopcoin@direction,w,c
  8013  010F44  A4D8               	btfss	status,2,c
  8014  010F46  D002               	goto	l1830
  8015  010F48                     u2150:
  8016                           
  8017                           ;vend.c: 220: {
  8018                           ;vend.c: 221: newval = 0x05;
  8019  010F48  0E05               	movlw	5
  8020  010F4A  D006               	goto	L14
  8021  010F4C                     l1830:
  8022                           
  8023                           ;vend.c: 223: else
  8024                           ;vend.c: 224: {
  8025                           ;vend.c: 225: newval--;
  8026  010F4C  062B               	decf	Update_Hopcoin@newval,f,c
  8027                           
  8028                           ;vend.c: 226: }
  8029                           ;vend.c: 227: break;
  8030  010F4E  D013               	goto	l1828
  8031  010F50  042A               	decf	Update_Hopcoin@direction,w,c
  8032  010F52  A4D8               	btfss	status,2,c
  8033  010F54  D003               	goto	l1835
  8034                           
  8035                           ;vend.c: 229: {
  8036                           ;vend.c: 231: newval = 0x01;
  8037  010F56  0E01               	movlw	1
  8038  010F58                     L14:
  8039  010F58  6E2B               	movwf	Update_Hopcoin@newval,c
  8040                           
  8041                           ;vend.c: 236: }
  8042                           ;vend.c: 237: break;
  8043  010F5A  D00D               	goto	l1828
  8044  010F5C                     l1835:
  8045  010F5C  0E02               	movlw	2
  8046  010F5E  D7FC               	goto	L14
  8047  010F60                     l1824:
  8048  010F60  502B               	movf	Update_Hopcoin@newval,w,c
  8049                           
  8050                           ; Switch size 1, requested type "space"
  8051                           ; Number of cases is 3, Range of values is 1 to 5
  8052                           ; switch strategies available:
  8053                           ; Name         Instructions Cycles
  8054                           ; simple_byte           10     6 (average)
  8055                           ;	Chosen strategy is simple_byte
  8056  010F62  0A01               	xorlw	1	; case 1
  8057  010F64  B4D8               	btfsc	status,2,c
  8058  010F66  D7E8               	goto	l1825
  8059  010F68  0A03               	xorlw	3	; case 2
  8060  010F6A  B4D8               	btfsc	status,2,c
  8061  010F6C  D7EA               	goto	l1829
  8062  010F6E  0A07               	xorlw	7	; case 5
  8063  010F70  B4D8               	btfsc	status,2,c
  8064  010F72  D7EE               	goto	l1832
  8065  010F74  D7F3               	goto	l1835
  8066  010F76                     l1828:
  8067                           
  8068                           ;vend.c: 240: lcd_string(clrmsg, senspos);
  8069  010F76  0EF1               	movlw	low _clrmsg
  8070  010F78  6E24               	movwf	lcd_string@lcdstring,c
  8071  010F7A  0EFF               	movlw	high _clrmsg
  8072  010F7C  6E25               	movwf	lcd_string@lcdstring+1,c
  8073  010F7E  C035  F026         	movff	_senspos,lcd_string@lcdline	;volatile
  8074  010F82  EC78  F085         	call	_lcd_string	;wreg free
  8075                           
  8076                           ;vend.c: 241: DATAEE_WriteByte(hopcoin, newval);
  8077  010F86  0E59               	movlw	low _hopcoin
  8078  010F88  6EF6               	movwf	tblptrl,c
  8079  010F8A                     	if	1	;There is more than 1 active tblptr byte
  8080  010F8A  0EFD               	movlw	high _hopcoin
  8081  010F8C  6EF7               	movwf	tblptrh,c
  8082  010F8E                     	endif
  8083  010F8E                     	if	1	;There are 3 active tblptr bytes
  8084  010F8E  0E00               	movlw	low (_hopcoin shr (0+16))
  8085  010F90  6EF8               	movwf	tblptru,c
  8086  010F92                     	endif
  8087  010F92  0009               	tblrd		*+
  8088  010F94  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  8089  010F98  000A               	tblrd		*-
  8090  010F9A  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  8091  010F9E  C02B  F01F         	movff	Update_Hopcoin@newval,DATAEE_WriteByte@bData
  8092  010FA2  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
  8093                           
  8094                           ;vend.c: 242: lcd_dispadd(senspos);
  8095  010FA6  5035               	movf	_senspos,w,c	;volatile
  8096  010FA8  ECC4  F08C         	call	_lcd_dispadd
  8097                           
  8098                           ;vend.c: 243: displ_hex((uint24_t)newval);
  8099  010FAC  502B               	movf	Update_Hopcoin@newval,w,c
  8100  010FAE  6E27               	movwf	displ_hex@hexnum,c
  8101  010FB0  6A28               	clrf	displ_hex@hexnum+1,c
  8102  010FB2  6A29               	clrf	displ_hex@hexnum+2,c
  8103  010FB4  EC1D  F085         	call	_displ_hex	;wreg free
  8104  010FB8  0012               	return		;funcret
  8105  010FBA                     __end_of_Update_Hopcoin:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           postinc0	equ	0xFEE
  8114                           wreg	equ	0xFE8
  8115                           indf2	equ	0xFDF
  8116                           fsr2h	equ	0xFDA
  8117                           fsr2l	equ	0xFD9
  8118                           status	equ	0xFD8
  8119                           
  8120 ;; *************** function _Clear_cred *****************
  8121 ;; Defined at:
  8122 ;;		line 288 in file "vend.c"
  8123 ;; Parameters:    Size  Location     Type
  8124 ;;		None
  8125 ;; Auto vars:     Size  Location     Type
  8126 ;;		None
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      void 
  8129 ;; Registers used:
  8130 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;Total ram usage:        2 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    8
  8143 ;; This function calls:
  8144 ;;		_DATAEE_WriteByte
  8145 ;;		_lcd_string
  8146 ;; This function is called by:
  8147 ;;		_enter_service
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text47
  8152  0112BA                     __ptext47:
  8153                           	opt stack 0
  8154  0112BA                     _Clear_cred:
  8155                           	opt stack 21
  8156                           
  8157                           ;vend.c: 290: DATAEE_WriteByte(credmem, 0x00);
  8158                           
  8159                           ;incstack = 0
  8160  0112BA  0E6B               	movlw	low _credmem
  8161  0112BC  6EF6               	movwf	tblptrl,c
  8162  0112BE                     	if	1	;There is more than 1 active tblptr byte
  8163  0112BE  0EFD               	movlw	high _credmem
  8164  0112C0  6EF7               	movwf	tblptrh,c
  8165  0112C2                     	endif
  8166  0112C2                     	if	1	;There are 3 active tblptr bytes
  8167  0112C2  0E00               	movlw	low (_credmem shr (0+16))
  8168  0112C4  6EF8               	movwf	tblptru,c
  8169  0112C6                     	endif
  8170  0112C6  0009               	tblrd		*+
  8171  0112C8  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
  8172  0112CC  000A               	tblrd		*-
  8173  0112CE  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
  8174  0112D2  0E00               	movlw	0
  8175  0112D4  6E1F               	movwf	DATAEE_WriteByte@bData,c
  8176  0112D6  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
  8177                           
  8178                           ;vend.c: 291: lcd_string(creditclr, line1);
  8179  0112DA  0E7F               	movlw	low _creditclr
  8180  0112DC  6E24               	movwf	lcd_string@lcdstring,c
  8181  0112DE  0EFF               	movlw	high _creditclr
  8182  0112E0  6E25               	movwf	lcd_string@lcdstring+1,c
  8183  0112E2  0E97               	movlw	low _line1
  8184  0112E4  6EF6               	movwf	tblptrl,c
  8185  0112E6                     	if	1	;There is more than 1 active tblptr byte
  8186  0112E6  0EFD               	movlw	high _line1
  8187  0112E8  6EF7               	movwf	tblptrh,c
  8188  0112EA                     	endif
  8189  0112EA                     	if	1	;There are 3 active tblptr bytes
  8190  0112EA  0E00               	movlw	low (_line1 shr (0+16))
  8191  0112EC  6EF8               	movwf	tblptru,c
  8192  0112EE                     	endif
  8193  0112EE  0008               	tblrd		*
  8194  0112F0  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8195  0112F4  EC78  F085         	call	_lcd_string	;wreg free
  8196                           
  8197                           ;vend.c: 292: _delay((unsigned long)((1000)*(12000000/4000.0)));
  8198  0112F8  0E10               	movlw	16
  8199  0112FA  6E2A               	movwf	(??_Clear_cred+1)& (0+255),c
  8200  0112FC  0E39               	movlw	57
  8201  0112FE  6E29               	movwf	??_Clear_cred& (0+255),c
  8202  011300  0E0E               	movlw	14
  8203  011302                     u2577:
  8204  011302  2EE8               	decfsz	wreg,f,c
  8205  011304  D7FE               	bra	u2577
  8206  011306  2E29               	decfsz	??_Clear_cred& (0+255),f,c
  8207  011308  D7FC               	bra	u2577
  8208  01130A  2E2A               	decfsz	(??_Clear_cred+1)& (0+255),f,c
  8209  01130C  D7FA               	bra	u2577
  8210  01130E  0012               	return		;funcret
  8211  011310                     __end_of_Clear_cred:
  8212                           	opt stack 0
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           indf2	equ	0xFDF
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _Audit *****************
  8227 ;; Defined at:
  8228 ;;		line 165 in file "vend.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		None
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        0 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    2
  8249 ;; This function calls:
  8250 ;;		Nothing
  8251 ;; This function is called by:
  8252 ;;		_enter_service
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text48
  8257  011AE6                     __ptext48:
  8258                           	opt stack 0
  8259  011AE6                     _Audit:
  8260                           	opt stack 27
  8261                           
  8262                           ;incstack = 0
  8263  011AE6  0012               	return		;funcret
  8264  011AE8                     __end_of_Audit:
  8265                           	opt stack 0
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           prodh	equ	0xFF4
  8271                           prodl	equ	0xFF3
  8272                           postinc0	equ	0xFEE
  8273                           wreg	equ	0xFE8
  8274                           indf2	equ	0xFDF
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function _displ_noteer *****************
  8280 ;; Defined at:
  8281 ;;		line 132 in file "lcd.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;		None
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      void 
  8288 ;; Registers used:
  8289 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;Total ram usage:        0 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    8
  8302 ;; This function calls:
  8303 ;;		_displ_code
  8304 ;;		_lcd_string
  8305 ;; This function is called by:
  8306 ;;		_main
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text49
  8311  0117F0                     __ptext49:
  8312                           	opt stack 0
  8313  0117F0                     _displ_noteer:
  8314                           	opt stack 22
  8315                           
  8316                           ;lcd.c: 134: lcd_string(noteerr, line1);
  8317                           
  8318                           ;incstack = 0
  8319  0117F0  0E3D               	movlw	low _noteerr
  8320  0117F2  6E24               	movwf	lcd_string@lcdstring,c
  8321  0117F4  0EFF               	movlw	high _noteerr
  8322  0117F6  6E25               	movwf	lcd_string@lcdstring+1,c
  8323  0117F8  0E97               	movlw	low _line1
  8324  0117FA  6EF6               	movwf	tblptrl,c
  8325  0117FC                     	if	1	;There is more than 1 active tblptr byte
  8326  0117FC  0EFD               	movlw	high _line1
  8327  0117FE  6EF7               	movwf	tblptrh,c
  8328  011800                     	endif
  8329  011800                     	if	1	;There are 3 active tblptr bytes
  8330  011800  0E00               	movlw	low (_line1 shr (0+16))
  8331  011802  6EF8               	movwf	tblptru,c
  8332  011804                     	endif
  8333  011804  0008               	tblrd		*
  8334  011806  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8335  01180A  EC78  F085         	call	_lcd_string	;wreg free
  8336                           
  8337                           ;lcd.c: 135: ercode = mdbdata[0];
  8338  01180E  C060  F043         	movff	_mdbdata,_ercode
  8339                           
  8340                           ;lcd.c: 136: displ_code(ercode);
  8341  011812  5043               	movf	_ercode,w,c
  8342  011814  EC23  F081         	call	_displ_code
  8343                           
  8344                           ;lcd.c: 137: mdbflags.noteerr = 0;
  8345  011818  923E               	bcf	_mdbflags,1,c
  8346                           
  8347                           ;lcd.c: 138: venflags.noterr = 0;
  8348  01181A  9C2F               	bcf	_venflags,6,c
  8349                           
  8350                           ;lcd.c: 139: venflags.credisplay = 0;
  8351  01181C  982F               	bcf	_venflags,4,c
  8352  01181E  0012               	return		;funcret
  8353  011820                     __end_of_displ_noteer:
  8354                           	opt stack 0
  8355                           tblptru	equ	0xFF8
  8356                           tblptrh	equ	0xFF7
  8357                           tblptrl	equ	0xFF6
  8358                           tablat	equ	0xFF5
  8359                           prodh	equ	0xFF4
  8360                           prodl	equ	0xFF3
  8361                           postinc0	equ	0xFEE
  8362                           wreg	equ	0xFE8
  8363                           indf2	equ	0xFDF
  8364                           fsr2h	equ	0xFDA
  8365                           fsr2l	equ	0xFD9
  8366                           status	equ	0xFD8
  8367                           
  8368 ;; *************** function _displ_code *****************
  8369 ;; Defined at:
  8370 ;;		line 85 in file "lcd.c"
  8371 ;; Parameters:    Size  Location     Type
  8372 ;;  ercode          1    wreg     unsigned char 
  8373 ;; Auto vars:     Size  Location     Type
  8374 ;;  ercode          1   27[COMRAM] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;                  1    wreg      void 
  8377 ;; Registers used:
  8378 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8385 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8386 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8387 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;Total ram usage:        3 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    7
  8391 ;; This function calls:
  8392 ;;		_lcd_writeC
  8393 ;; This function is called by:
  8394 ;;		_displ_noteer
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           	psect	text50
  8399  010246                     __ptext50:
  8400                           	opt stack 0
  8401  010246                     _displ_code:
  8402                           	opt stack 22
  8403                           
  8404                           ;incstack = 0
  8405                           ;displ_code@ercode stored from wreg
  8406  010246  6E26               	movwf	displ_code@ercode,c
  8407                           
  8408                           ;lcd.c: 87: if((ercode >> 4) < 0x0A)
  8409  010248  C026  F024         	movff	displ_code@ercode,??_displ_code
  8410  01024C  3A24               	swapf	??_displ_code,f,c
  8411  01024E  0E0F               	movlw	15
  8412  010250  1624               	andwf	??_displ_code,f,c
  8413  010252  0E0A               	movlw	10
  8414  010254  6024               	cpfslt	??_displ_code,c
  8415  010256  D01E               	goto	l1305
  8416                           
  8417                           ;lcd.c: 88: {
  8418                           ;lcd.c: 89: lcd_writeC((ercode >> 4) | 0x30);
  8419  010258  3826               	swapf	displ_code@ercode,w,c
  8420  01025A  0B0F               	andlw	15
  8421  01025C  0930               	iorlw	48
  8422  01025E  ECFD  F088         	call	_lcd_writeC
  8423                           
  8424                           ;lcd.c: 90: }
  8425  010262  D033               	goto	l1307
  8426  010264  0E41               	movlw	65
  8427  010266  ECFD  F088         	call	_lcd_writeC
  8428                           
  8429                           ;lcd.c: 96: break;
  8430  01026A  D02F               	goto	l1307
  8431  01026C  0E42               	movlw	66
  8432  01026E  ECFD  F088         	call	_lcd_writeC
  8433                           
  8434                           ;lcd.c: 98: break;
  8435  010272  D02B               	goto	l1307
  8436  010274  0E43               	movlw	67
  8437  010276  ECFD  F088         	call	_lcd_writeC
  8438                           
  8439                           ;lcd.c: 100: break;
  8440  01027A  D027               	goto	l1307
  8441  01027C  0E44               	movlw	68
  8442  01027E  ECFD  F088         	call	_lcd_writeC
  8443                           
  8444                           ;lcd.c: 102: break;
  8445  010282  D023               	goto	l1307
  8446  010284  0E45               	movlw	69
  8447  010286  ECFD  F088         	call	_lcd_writeC
  8448                           
  8449                           ;lcd.c: 104: break;
  8450  01028A  D01F               	goto	l1307
  8451  01028C  0E46               	movlw	70
  8452  01028E  ECFD  F088         	call	_lcd_writeC
  8453                           
  8454                           ;lcd.c: 106: }
  8455  010292  D01B               	goto	l1307
  8456  010294                     l1305:
  8457  010294  3826               	swapf	displ_code@ercode,w,c
  8458  010296  0B0F               	andlw	15
  8459  010298  6E24               	movwf	??_displ_code& (0+255),c
  8460  01029A  6A25               	clrf	(??_displ_code+1)& (0+255),c
  8461                           
  8462                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8463                           ; Switch size 1, requested type "space"
  8464                           ; Number of cases is 1, Range of values is 0 to 0
  8465                           ; switch strategies available:
  8466                           ; Name         Instructions Cycles
  8467                           ; simple_byte            4     3 (average)
  8468                           ;	Chosen strategy is simple_byte
  8469  01029C  5025               	movf	??_displ_code+1,w,c
  8470  01029E  0A00               	xorlw	0	; case 0
  8471  0102A0  A4D8               	btfss	status,2,c
  8472  0102A2  D013               	goto	l1307
  8473                           
  8474                           ; Switch size 1, requested type "space"
  8475                           ; Number of cases is 6, Range of values is 10 to 15
  8476                           ; switch strategies available:
  8477                           ; Name         Instructions Cycles
  8478                           ; simple_byte           19    10 (average)
  8479                           ;	Chosen strategy is simple_byte
  8480  0102A4  5024               	movf	??_displ_code,w,c
  8481  0102A6  0A0A               	xorlw	10	; case 10
  8482  0102A8  B4D8               	btfsc	status,2,c
  8483  0102AA  D7DC               	goto	l1306
  8484  0102AC  0A01               	xorlw	1	; case 11
  8485  0102AE  B4D8               	btfsc	status,2,c
  8486  0102B0  D7DD               	goto	l1308
  8487  0102B2  0A07               	xorlw	7	; case 12
  8488  0102B4  B4D8               	btfsc	status,2,c
  8489  0102B6  D7DE               	goto	l1309
  8490  0102B8  0A01               	xorlw	1	; case 13
  8491  0102BA  B4D8               	btfsc	status,2,c
  8492  0102BC  D7DF               	goto	l1310
  8493  0102BE  0A03               	xorlw	3	; case 14
  8494  0102C0  B4D8               	btfsc	status,2,c
  8495  0102C2  D7E0               	goto	l1311
  8496  0102C4  0A01               	xorlw	1	; case 15
  8497  0102C6  B4D8               	btfsc	status,2,c
  8498  0102C8  D7E1               	goto	l1312
  8499  0102CA                     l1307:
  8500                           
  8501                           ;lcd.c: 107: }
  8502                           ;lcd.c: 108: if((ercode & 0x0F) < 0x0A)
  8503  0102CA  C026  F024         	movff	displ_code@ercode,??_displ_code
  8504  0102CE  0E0F               	movlw	15
  8505  0102D0  1624               	andwf	??_displ_code,f,c
  8506  0102D2  0E0A               	movlw	10
  8507  0102D4  6024               	cpfslt	??_displ_code,c
  8508  0102D6  D01E               	goto	l1315
  8509                           
  8510                           ;lcd.c: 109: {
  8511                           ;lcd.c: 110: lcd_writeC((ercode & 0x0F) | 0x30);
  8512  0102D8  5026               	movf	displ_code@ercode,w,c
  8513  0102DA  0B0F               	andlw	15
  8514  0102DC  0930               	iorlw	48
  8515  0102DE  ECFD  F088         	call	_lcd_writeC
  8516                           
  8517                           ;lcd.c: 111: }
  8518  0102E2  0012               	return	
  8519  0102E4  0E41               	movlw	65
  8520  0102E6  ECFD  F088         	call	_lcd_writeC
  8521                           
  8522                           ;lcd.c: 117: break;
  8523  0102EA  0012               	return	
  8524  0102EC  0E42               	movlw	66
  8525  0102EE  ECFD  F088         	call	_lcd_writeC
  8526                           
  8527                           ;lcd.c: 119: break;
  8528  0102F2  0012               	return	
  8529  0102F4  0E43               	movlw	67
  8530  0102F6  ECFD  F088         	call	_lcd_writeC
  8531                           
  8532                           ;lcd.c: 121: break;
  8533  0102FA  0012               	return	
  8534  0102FC  0E44               	movlw	68
  8535  0102FE  ECFD  F088         	call	_lcd_writeC
  8536                           
  8537                           ;lcd.c: 123: break;
  8538  010302  0012               	return	
  8539  010304  0E45               	movlw	69
  8540  010306  ECFD  F088         	call	_lcd_writeC
  8541                           
  8542                           ;lcd.c: 125: break;
  8543  01030A  0012               	return	
  8544  01030C  0E46               	movlw	70
  8545  01030E  ECFD  F088         	call	_lcd_writeC
  8546                           
  8547                           ;lcd.c: 127: }
  8548  010312  0012               	return	
  8549  010314                     l1315:
  8550  010314  5026               	movf	displ_code@ercode,w,c
  8551  010316  0B0F               	andlw	15
  8552  010318  6E24               	movwf	??_displ_code& (0+255),c
  8553  01031A  6A25               	clrf	(??_displ_code+1)& (0+255),c
  8554                           
  8555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8556                           ; Switch size 1, requested type "space"
  8557                           ; Number of cases is 1, Range of values is 0 to 0
  8558                           ; switch strategies available:
  8559                           ; Name         Instructions Cycles
  8560                           ; simple_byte            4     3 (average)
  8561                           ;	Chosen strategy is simple_byte
  8562  01031C  5025               	movf	??_displ_code+1,w,c
  8563  01031E  0A00               	xorlw	0	; case 0
  8564  010320  A4D8               	btfss	status,2,c
  8565  010322  0012               	return	
  8566                           
  8567                           ; Switch size 1, requested type "space"
  8568                           ; Number of cases is 6, Range of values is 10 to 15
  8569                           ; switch strategies available:
  8570                           ; Name         Instructions Cycles
  8571                           ; simple_byte           19    10 (average)
  8572                           ;	Chosen strategy is simple_byte
  8573  010324  5024               	movf	??_displ_code,w,c
  8574  010326  0A0A               	xorlw	10	; case 10
  8575  010328  B4D8               	btfsc	status,2,c
  8576  01032A  D7DC               	goto	l1316
  8577  01032C  0A01               	xorlw	1	; case 11
  8578  01032E  B4D8               	btfsc	status,2,c
  8579  010330  D7DD               	goto	l1318
  8580  010332  0A07               	xorlw	7	; case 12
  8581  010334  B4D8               	btfsc	status,2,c
  8582  010336  D7DE               	goto	l1319
  8583  010338  0A01               	xorlw	1	; case 13
  8584  01033A  B4D8               	btfsc	status,2,c
  8585  01033C  D7DF               	goto	l1320
  8586  01033E  0A03               	xorlw	3	; case 14
  8587  010340  B4D8               	btfsc	status,2,c
  8588  010342  D7E0               	goto	l1321
  8589  010344  0A01               	xorlw	1	; case 15
  8590  010346  A4D8               	btfss	status,2,c
  8591  010348  0012               	return	
  8592  01034A  D7E0               	goto	l1322
  8593  01034C                     __end_of_displ_code:
  8594                           	opt stack 0
  8595                           tblptru	equ	0xFF8
  8596                           tblptrh	equ	0xFF7
  8597                           tblptrl	equ	0xFF6
  8598                           tablat	equ	0xFF5
  8599                           prodh	equ	0xFF4
  8600                           prodl	equ	0xFF3
  8601                           postinc0	equ	0xFEE
  8602                           wreg	equ	0xFE8
  8603                           indf2	equ	0xFDF
  8604                           fsr2h	equ	0xFDA
  8605                           fsr2l	equ	0xFD9
  8606                           status	equ	0xFD8
  8607                           
  8608 ;; *************** function _displ_credit *****************
  8609 ;; Defined at:
  8610 ;;		line 77 in file "lcd.c"
  8611 ;; Parameters:    Size  Location     Type
  8612 ;;		None
  8613 ;; Auto vars:     Size  Location     Type
  8614 ;;  cash            1   31[COMRAM] unsigned char 
  8615 ;; Return value:  Size  Location     Type
  8616 ;;                  1    wreg      void 
  8617 ;; Registers used:
  8618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8619 ;; Tracked objects:
  8620 ;;		On entry : 0/0
  8621 ;;		On exit  : 0/0
  8622 ;;		Unchanged: 0/0
  8623 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;Total ram usage:        1 bytes
  8629 ;; Hardware stack levels used:    1
  8630 ;; Hardware stack levels required when called:    8
  8631 ;; This function calls:
  8632 ;;		_credit_check
  8633 ;;		_displ_hex
  8634 ;;		_lcd_string
  8635 ;; This function is called by:
  8636 ;;		_main
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           	psect	text51
  8641  0116C0                     __ptext51:
  8642                           	opt stack 0
  8643  0116C0                     _displ_credit:
  8644                           	opt stack 22
  8645                           
  8646                           ;lcd.c: 79: lcd_string(credits, line1);
  8647                           
  8648                           ;incstack = 0
  8649  0116C0  0E9C               	movlw	low _credits
  8650  0116C2  6E24               	movwf	lcd_string@lcdstring,c
  8651  0116C4  0EFF               	movlw	high _credits
  8652  0116C6  6E25               	movwf	lcd_string@lcdstring+1,c
  8653  0116C8  0E97               	movlw	low _line1
  8654  0116CA  6EF6               	movwf	tblptrl,c
  8655  0116CC                     	if	1	;There is more than 1 active tblptr byte
  8656  0116CC  0EFD               	movlw	high _line1
  8657  0116CE  6EF7               	movwf	tblptrh,c
  8658  0116D0                     	endif
  8659  0116D0                     	if	1	;There are 3 active tblptr bytes
  8660  0116D0  0E00               	movlw	low (_line1 shr (0+16))
  8661  0116D2  6EF8               	movwf	tblptru,c
  8662  0116D4                     	endif
  8663  0116D4  0008               	tblrd		*
  8664  0116D6  CFF5 F026          	movff	tablat,lcd_string@lcdline
  8665  0116DA  EC78  F085         	call	_lcd_string	;wreg free
  8666                           
  8667                           ;lcd.c: 80: uint8_t cash = credit_check();
  8668  0116DE  EC76  F08C         	call	_credit_check	;wreg free
  8669  0116E2  6E2A               	movwf	displ_credit@cash,c
  8670                           
  8671                           ;lcd.c: 81: displ_hex((uint8_t) cash);
  8672  0116E4  502A               	movf	displ_credit@cash,w,c
  8673  0116E6  6E27               	movwf	displ_hex@hexnum,c
  8674  0116E8  6A28               	clrf	displ_hex@hexnum+1,c
  8675  0116EA  6A29               	clrf	displ_hex@hexnum+2,c
  8676  0116EC  EC1D  F085         	call	_displ_hex	;wreg free
  8677                           
  8678                           ;lcd.c: 82: venflags.credisplay = 0;
  8679  0116F0  982F               	bcf	_venflags,4,c
  8680  0116F2  0012               	return		;funcret
  8681  0116F4                     __end_of_displ_credit:
  8682                           	opt stack 0
  8683                           tblptru	equ	0xFF8
  8684                           tblptrh	equ	0xFF7
  8685                           tblptrl	equ	0xFF6
  8686                           tablat	equ	0xFF5
  8687                           prodh	equ	0xFF4
  8688                           prodl	equ	0xFF3
  8689                           postinc0	equ	0xFEE
  8690                           wreg	equ	0xFE8
  8691                           indf2	equ	0xFDF
  8692                           fsr2h	equ	0xFDA
  8693                           fsr2l	equ	0xFD9
  8694                           status	equ	0xFD8
  8695                           
  8696 ;; *************** function _lcd_string *****************
  8697 ;; Defined at:
  8698 ;;		line 167 in file "lcd.c"
  8699 ;; Parameters:    Size  Location     Type
  8700 ;;  lcdstring       2   25[COMRAM] PTR unsigned char 
  8701 ;;		 -> twohundredrand(8), hundredrand(8), fiftyrand(8), twentyrand(8), 
  8702 ;;		 -> tenrand(9), setnotes(69), vendsetup(77), pricesetm2(57), 
  8703 ;;		 -> pricesetmsg(18), creditclr(16), dacmsg(13), sensmsg(11), 
  8704 ;;		 -> hoppcoin(51), initnote(37), inithop(20), noteerr(28), 
  8705 ;;		 -> credits(13), disabled(10), enabled(10), clrmsg(6), 
  8706 ;;		 -> onmsg(4), offmsg(4), servmsg(67), inscoin(49), 
  8707 ;;  lcdline         1   27[COMRAM] unsigned char 
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;		None
  8710 ;; Return value:  Size  Location     Type
  8711 ;;                  1    wreg      void 
  8712 ;; Registers used:
  8713 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : 0/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8719 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8721 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8722 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8723 ;;Total ram usage:        5 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; Hardware stack levels required when called:    7
  8726 ;; This function calls:
  8727 ;;		_lcd_dispadd
  8728 ;;		_lcd_write
  8729 ;;		_lcd_writeC
  8730 ;; This function is called by:
  8731 ;;		_main
  8732 ;;		_enter_service
  8733 ;;		_displ_sens
  8734 ;;		_displ_note
  8735 ;;		_displ_nendis
  8736 ;;		_displ_credit
  8737 ;;		_displ_noteer
  8738 ;;		_vend_init
  8739 ;;		_Hopper_coin
  8740 ;;		_Update_Hopcoin
  8741 ;;		_Sensor_set
  8742 ;;		_Clear_cred
  8743 ;;		_price_set
  8744 ;;		_set_price
  8745 ;;		_Vend_setup
  8746 ;;		_set_notes
  8747 ;;		_enable_notes
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           	psect	text52
  8752  010AF0                     __ptext52:
  8753                           	opt stack 0
  8754  010AF0                     _lcd_string:
  8755                           	opt stack 22
  8756                           
  8757                           ;lcd.c: 169: if(lcdline == line1)
  8758                           
  8759                           ;incstack = 0
  8760  010AF0  0E97               	movlw	low _line1
  8761  010AF2  6EF6               	movwf	tblptrl,c
  8762  010AF4                     	if	1	;There is more than 1 active tblptr byte
  8763  010AF4  0EFD               	movlw	high _line1
  8764  010AF6  6EF7               	movwf	tblptrh,c
  8765  010AF8                     	endif
  8766  010AF8                     	if	1	;There are 3 active tblptr bytes
  8767  010AF8  0E00               	movlw	low (_line1 shr (0+16))
  8768  010AFA  6EF8               	movwf	tblptru,c
  8769  010AFC                     	endif
  8770  010AFC  0008               	tblrd		*
  8771  010AFE  50F5               	movf	tablat,w,c
  8772  010B00  6226               	cpfseq	lcd_string@lcdline,c
  8773  010B02  D00B               	goto	l1339
  8774                           
  8775                           ;lcd.c: 170: {
  8776                           ;lcd.c: 171: lcd_write(dispclr);
  8777  010B04  0EA1               	movlw	low _dispclr
  8778  010B06  6EF6               	movwf	tblptrl,c
  8779  010B08                     	if	1	;There is more than 1 active tblptr byte
  8780  010B08  0EFD               	movlw	high _dispclr
  8781  010B0A  6EF7               	movwf	tblptrh,c
  8782  010B0C                     	endif
  8783  010B0C                     	if	1	;There are 3 active tblptr bytes
  8784  010B0C  0E00               	movlw	low (_dispclr shr (0+16))
  8785  010B0E  6EF8               	movwf	tblptru,c
  8786  010B10                     	endif
  8787  010B10  0008               	tblrd		*
  8788  010B12  50F5               	movf	tablat,w,c
  8789  010B14  ECC6  F08B         	call	_lcd_write
  8790                           
  8791                           ;lcd.c: 172: }
  8792  010B18  D004               	goto	l1340
  8793  010B1A                     l1339:
  8794                           
  8795                           ;lcd.c: 173: else
  8796                           ;lcd.c: 174: {
  8797                           ;lcd.c: 176: lcd_dispadd(lcdline | 0x80);
  8798  010B1A  5026               	movf	lcd_string@lcdline,w,c
  8799  010B1C  0980               	iorlw	128
  8800  010B1E  ECC4  F08C         	call	_lcd_dispadd
  8801  010B22                     l1340:
  8802                           
  8803                           ;lcd.c: 177: }
  8804                           ;lcd.c: 178: for(stradd = 0; lcdstring[stradd] != 0; stradd++)
  8805  010B22  0E00               	movlw	0
  8806  010B24  6E44               	movwf	_stradd,c
  8807  010B26  D028               	goto	l1341
  8808  010B28                     
  8809                           ;lcd.c: 179: {
  8810                           ;lcd.c: 180: lcdata = lcdstring[stradd];
  8811  010B28  5044               	movf	_stradd,w,c
  8812  010B2A  0D01               	mullw	1
  8813  010B2C  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
  8814  010B30  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
  8815  010B34  50F3               	movf	prodl,w,c
  8816  010B36  2627               	addwf	??_lcd_string,f,c
  8817  010B38  50F4               	movf	prodh,w,c
  8818  010B3A  2228               	addwfc	??_lcd_string+1,f,c
  8819  010B3C  C027  FFF6         	movff	??_lcd_string,tblptrl
  8820  010B40  C028  FFF7         	movff	??_lcd_string+1,tblptrh
  8821  010B44                     	if	0	;tblptru may be non-zero
  8822  010B44                     	endif
  8823  010B44                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8824  010B44  0E00               	movlw	low (__mediumconst shr (0+16))
  8825  010B46  6EF8               	movwf	tblptru,c
  8826  010B48                     	endif
  8827  010B48  0008               	tblrd		*
  8828  010B4A  CFF5 F045          	movff	tablat,_lcdata
  8829                           
  8830                           ;lcd.c: 181: lcd_writeC(lcdstring[stradd]);
  8831  010B4E  5044               	movf	_stradd,w,c
  8832  010B50  0D01               	mullw	1
  8833  010B52  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
  8834  010B56  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
  8835  010B5A  50F3               	movf	prodl,w,c
  8836  010B5C  2627               	addwf	??_lcd_string,f,c
  8837  010B5E  50F4               	movf	prodh,w,c
  8838  010B60  2228               	addwfc	??_lcd_string+1,f,c
  8839  010B62  C027  FFF6         	movff	??_lcd_string,tblptrl
  8840  010B66  C028  FFF7         	movff	??_lcd_string+1,tblptrh
  8841  010B6A                     	if	0	;tblptru may be non-zero
  8842  010B6A                     	endif
  8843  010B6A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8844  010B6A  0E00               	movlw	low (__mediumconst shr (0+16))
  8845  010B6C  6EF8               	movwf	tblptru,c
  8846  010B6E                     	endif
  8847  010B6E  0008               	tblrd		*
  8848  010B70  50F5               	movf	tablat,w,c
  8849  010B72  ECFD  F088         	call	_lcd_writeC
  8850  010B76  2A44               	incf	_stradd,f,c
  8851  010B78                     l1341:
  8852  010B78  5044               	movf	_stradd,w,c
  8853  010B7A  0D01               	mullw	1
  8854  010B7C  C024  F027         	movff	lcd_string@lcdstring,??_lcd_string
  8855  010B80  C025  F028         	movff	lcd_string@lcdstring+1,??_lcd_string+1
  8856  010B84  50F3               	movf	prodl,w,c
  8857  010B86  2627               	addwf	??_lcd_string,f,c
  8858  010B88  50F4               	movf	prodh,w,c
  8859  010B8A  2228               	addwfc	??_lcd_string+1,f,c
  8860  010B8C  C027  FFF6         	movff	??_lcd_string,tblptrl
  8861  010B90  C028  FFF7         	movff	??_lcd_string+1,tblptrh
  8862  010B94                     	if	0	;tblptru may be non-zero
  8863  010B94                     	endif
  8864  010B94                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8865  010B94  0E00               	movlw	low (__mediumconst shr (0+16))
  8866  010B96  6EF8               	movwf	tblptru,c
  8867  010B98                     	endif
  8868  010B98  0008               	tblrd		*
  8869  010B9A  50F5               	movf	tablat,w,c
  8870  010B9C  0900               	iorlw	0
  8871  010B9E  B4D8               	btfsc	status,2,c
  8872  010BA0  0012               	return	
  8873  010BA2  D7C2               	goto	l1342
  8874  010BA4                     __end_of_lcd_string:
  8875                           	opt stack 0
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           postinc0	equ	0xFEE
  8883                           wreg	equ	0xFE8
  8884                           indf2	equ	0xFDF
  8885                           fsr2h	equ	0xFDA
  8886                           fsr2l	equ	0xFD9
  8887                           status	equ	0xFD8
  8888                           
  8889 ;; *************** function _displ_hex *****************
  8890 ;; Defined at:
  8891 ;;		line 142 in file "lcd.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  hexnum          3   28[COMRAM] unsigned um
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  value           8    0[BANK0 ] unsigned char [8]
  8896 ;;  hexnumsave      3    8[BANK0 ] unsigned um
  8897 ;;  i               1   11[BANK0 ] char 
  8898 ;; Return value:  Size  Location     Type
  8899 ;;                  1    wreg      void 
  8900 ;; Registers used:
  8901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8902 ;; Tracked objects:
  8903 ;;		On entry : 0/0
  8904 ;;		On exit  : 0/0
  8905 ;;		Unchanged: 0/0
  8906 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  8907 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;      Locals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8910 ;;      Totals:         3       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8911 ;;Total ram usage:       15 bytes
  8912 ;; Hardware stack levels used:    1
  8913 ;; Hardware stack levels required when called:    7
  8914 ;; This function calls:
  8915 ;;		___ltdiv
  8916 ;;		___ltmod
  8917 ;;		_lcd_writeC
  8918 ;; This function is called by:
  8919 ;;		_displ_sens
  8920 ;;		_displ_credit
  8921 ;;		_displ_price
  8922 ;;		_Hopper_coin
  8923 ;;		_Update_Hopcoin
  8924 ;; This function uses a non-reentrant model
  8925 ;;
  8926                           
  8927                           	psect	text53
  8928  010A3A                     __ptext53:
  8929                           	opt stack 0
  8930  010A3A                     _displ_hex:
  8931                           	opt stack 19
  8932                           
  8933                           ;lcd.c: 144: signed char i = 0;
  8934                           
  8935                           ;incstack = 0
  8936  010A3A  0E00               	movlw	0
  8937  010A3C  0100               	movlb	0	; () banked
  8938  010A3E  6FA5               	movwf	displ_hex@i& (0+255),b
  8939                           
  8940                           ; BSR set to: 0
  8941                           ;lcd.c: 145: uint8_t value[8];
  8942                           ;lcd.c: 146: uint24_t hexnumsave = hexnum;
  8943  010A40  C027  F0A2         	movff	displ_hex@hexnum,displ_hex@hexnumsave
  8944  010A44  C028  F0A3         	movff	displ_hex@hexnum+1,displ_hex@hexnumsave+1
  8945  010A48  C029  F0A4         	movff	displ_hex@hexnum+2,displ_hex@hexnumsave+2
  8946                           
  8947                           ;lcd.c: 147: while(hexnum > 0)
  8948  010A4C  D02F               	goto	l1329
  8949  010A4E                     
  8950                           ; BSR set to: 0
  8951                           ;lcd.c: 148: {
  8952                           ;lcd.c: 149: value[i] = hexnum % 10;
  8953                           
  8954                           ; BSR set to: 0
  8955  010A4E  51A5               	movf	displ_hex@i& (0+255),w,b
  8956  010A50  0D01               	mullw	1
  8957  010A52  0E9A               	movlw	low displ_hex@value
  8958  010A54  24F3               	addwf	prodl,w,c
  8959  010A56  6ED9               	movwf	fsr2l,c
  8960  010A58  0E00               	movlw	high displ_hex@value
  8961  010A5A  20F4               	addwfc	prodh,w,c
  8962  010A5C  6EDA               	movwf	fsr2h,c
  8963  010A5E  C027  F01D         	movff	displ_hex@hexnum,___ltmod@dividend
  8964  010A62  C028  F01E         	movff	displ_hex@hexnum+1,___ltmod@dividend+1
  8965  010A66  C029  F01F         	movff	displ_hex@hexnum+2,___ltmod@dividend+2
  8966  010A6A  0E0A               	movlw	10
  8967  010A6C  6E20               	movwf	___ltmod@divisor,c
  8968  010A6E  0E00               	movlw	0
  8969  010A70  6E21               	movwf	___ltmod@divisor+1,c
  8970  010A72  0E00               	movlw	0
  8971  010A74  6E22               	movwf	___ltmod@divisor+2,c
  8972  010A76  ECB3  F089         	call	___ltmod	;wreg free
  8973  010A7A  501D               	movf	?___ltmod,w,c
  8974  010A7C  6EDF               	movwf	indf2,c
  8975                           
  8976                           ;lcd.c: 150: hexnum /= 10;
  8977  010A7E  C027  F01D         	movff	displ_hex@hexnum,___ltdiv@dividend
  8978  010A82  C028  F01E         	movff	displ_hex@hexnum+1,___ltdiv@dividend+1
  8979  010A86  C029  F01F         	movff	displ_hex@hexnum+2,___ltdiv@dividend+2
  8980  010A8A  0E0A               	movlw	10
  8981  010A8C  6E20               	movwf	___ltdiv@divisor,c
  8982  010A8E  0E00               	movlw	0
  8983  010A90  6E21               	movwf	___ltdiv@divisor+1,c
  8984  010A92  0E00               	movlw	0
  8985  010A94  6E22               	movwf	___ltdiv@divisor+2,c
  8986  010A96  EC94  F088         	call	___ltdiv	;wreg free
  8987  010A9A  C01D  F027         	movff	?___ltdiv,displ_hex@hexnum
  8988  010A9E  C01E  F028         	movff	?___ltdiv+1,displ_hex@hexnum+1
  8989  010AA2  C01F  F029         	movff	?___ltdiv+2,displ_hex@hexnum+2
  8990                           
  8991                           ;lcd.c: 151: i = i + 1;
  8992  010AA6  0100               	movlb	0	; () banked
  8993  010AA8  29A5               	incf	displ_hex@i& (0+255),w,b
  8994  010AAA  6FA5               	movwf	displ_hex@i& (0+255),b
  8995  010AAC                     l1329:
  8996                           
  8997                           ; BSR set to: 0
  8998                           
  8999                           ; BSR set to: 0
  9000  010AAC  5027               	movf	displ_hex@hexnum,w,c
  9001  010AAE  1028               	iorwf	displ_hex@hexnum+1,w,c
  9002  010AB0  1029               	iorwf	displ_hex@hexnum+2,w,c
  9003  010AB2  B4D8               	btfsc	status,2,c
  9004  010AB4  D00E               	goto	l1332
  9005  010AB6  D7CB               	goto	l1330
  9006  010AB8                     
  9007                           ; BSR set to: 0
  9008                           ;lcd.c: 155: {
  9009                           ;lcd.c: 156: i--;
  9010                           
  9011                           ; BSR set to: 0
  9012  010AB8  07A5               	decf	displ_hex@i& (0+255),f,b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;lcd.c: 157: lcd_writeC(value[i] | 0x30);
  9016  010ABA  51A5               	movf	displ_hex@i& (0+255),w,b
  9017  010ABC  0D01               	mullw	1
  9018  010ABE  0E9A               	movlw	low displ_hex@value
  9019  010AC0  24F3               	addwf	prodl,w,c
  9020  010AC2  6ED9               	movwf	fsr2l,c
  9021  010AC4  0E00               	movlw	high displ_hex@value
  9022  010AC6  20F4               	addwfc	prodh,w,c
  9023  010AC8  6EDA               	movwf	fsr2h,c
  9024  010ACA  50DF               	movf	indf2,w,c
  9025  010ACC  0930               	iorlw	48
  9026  010ACE  ECFD  F088         	call	_lcd_writeC
  9027  010AD2                     l1332:
  9028  010AD2  0100               	movlb	0	; () banked
  9029  010AD4  51A5               	movf	displ_hex@i& (0+255),w,b
  9030  010AD6  0A80               	xorlw	128
  9031  010AD8  0F7F               	addlw	-129
  9032  010ADA  B0D8               	btfsc	status,0,c
  9033  010ADC  D7ED               	goto	l1333
  9034                           
  9035                           ; BSR set to: 0
  9036                           ;lcd.c: 158: }
  9037                           ;lcd.c: 160: if(hexnumsave == 0)
  9038                           
  9039                           ; BSR set to: 0
  9040  010ADE  51A2               	movf	displ_hex@hexnumsave& (0+255),w,b
  9041  010AE0  11A3               	iorwf	(displ_hex@hexnumsave+1)& (0+255),w,b
  9042  010AE2  11A4               	iorwf	(displ_hex@hexnumsave+2)& (0+255),w,b
  9043  010AE4  A4D8               	btfss	status,2,c
  9044  010AE6  0012               	return	
  9045                           
  9046                           ; BSR set to: 0
  9047                           ;lcd.c: 161: {
  9048                           ;lcd.c: 162: lcd_writeC(0x30);
  9049  010AE8  0E30               	movlw	48
  9050  010AEA  ECFD  F088         	call	_lcd_writeC
  9051  010AEE  0012               	return	
  9052  010AF0                     __end_of_displ_hex:
  9053                           	opt stack 0
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           postinc0	equ	0xFEE
  9061                           wreg	equ	0xFE8
  9062                           indf2	equ	0xFDF
  9063                           fsr2h	equ	0xFDA
  9064                           fsr2l	equ	0xFD9
  9065                           status	equ	0xFD8
  9066                           
  9067 ;; *************** function _lcd_writeC *****************
  9068 ;; Defined at:
  9069 ;;		line 194 in file "lcd.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  lcdata          1    wreg     unsigned char 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  lcdata          1   24[COMRAM] unsigned char 
  9074 ;; Return value:  Size  Location     Type
  9075 ;;                  1    wreg      void 
  9076 ;; Registers used:
  9077 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;Total ram usage:        1 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    6
  9090 ;; This function calls:
  9091 ;;		_lcd_dispadd
  9092 ;;		_lcd_write
  9093 ;; This function is called by:
  9094 ;;		_displ_code
  9095 ;;		_displ_hex
  9096 ;;		_lcd_string
  9097 ;;		_displ_price
  9098 ;;		_lcd_test
  9099 ;; This function uses a non-reentrant model
  9100 ;;
  9101                           
  9102                           	psect	text54
  9103  0111FA                     __ptext54:
  9104                           	opt stack 0
  9105  0111FA                     _lcd_writeC:
  9106                           	opt stack 22
  9107                           
  9108                           ;incstack = 0
  9109                           ;lcd_writeC@lcdata stored from wreg
  9110  0111FA  6E23               	movwf	lcd_writeC@lcdata,c
  9111  0111FC  8487               	bsf	3975,2,c	;# 
  9112                           
  9113                           ;lcd.c: 199: lcd_write(lcdata);
  9114  0111FE  5023               	movf	lcd_writeC@lcdata,w,c
  9115  011200  ECC6  F08B         	call	_lcd_write
  9116                           
  9117                           ;lcd.c: 203: switch(bflag)
  9118  011204  D021               	goto	l1350
  9119  011206  0E96               	movlw	low _line2
  9120  011208  6EF6               	movwf	tblptrl,c
  9121  01120A                     	if	1	;There is more than 1 active tblptr byte
  9122  01120A  0EFD               	movlw	high _line2
  9123  01120C  6EF7               	movwf	tblptrh,c
  9124  01120E                     	endif
  9125  01120E                     	if	1	;There are 3 active tblptr bytes
  9126  01120E  0E00               	movlw	low (_line2 shr (0+16))
  9127  011210  6EF8               	movwf	tblptru,c
  9128  011212                     	endif
  9129  011212  0008               	tblrd		*
  9130  011214  50F5               	movf	tablat,w,c
  9131  011216  ECC4  F08C         	call	_lcd_dispadd
  9132                           
  9133                           ;lcd.c: 206: break;
  9134  01121A  D020               	goto	l1352
  9135  01121C  0E95               	movlw	low _line3
  9136  01121E  6EF6               	movwf	tblptrl,c
  9137  011220                     	if	1	;There is more than 1 active tblptr byte
  9138  011220  0EFD               	movlw	high _line3
  9139  011222  6EF7               	movwf	tblptrh,c
  9140  011224                     	endif
  9141  011224                     	if	1	;There are 3 active tblptr bytes
  9142  011224  0E00               	movlw	low (_line3 shr (0+16))
  9143  011226  6EF8               	movwf	tblptru,c
  9144  011228                     	endif
  9145  011228  0008               	tblrd		*
  9146  01122A  50F5               	movf	tablat,w,c
  9147  01122C  ECC4  F08C         	call	_lcd_dispadd
  9148                           
  9149                           ;lcd.c: 208: break;
  9150  011230  D015               	goto	l1352
  9151  011232  0E94               	movlw	low _line4
  9152  011234  6EF6               	movwf	tblptrl,c
  9153  011236                     	if	1	;There is more than 1 active tblptr byte
  9154  011236  0EFD               	movlw	high _line4
  9155  011238  6EF7               	movwf	tblptrh,c
  9156  01123A                     	endif
  9157  01123A                     	if	1	;There are 3 active tblptr bytes
  9158  01123A  0E00               	movlw	low (_line4 shr (0+16))
  9159  01123C  6EF8               	movwf	tblptru,c
  9160  01123E                     	endif
  9161  01123E  0008               	tblrd		*
  9162  011240  50F5               	movf	tablat,w,c
  9163  011242  ECC4  F08C         	call	_lcd_dispadd
  9164                           
  9165                           ;lcd.c: 210: }
  9166  011246  D00A               	goto	l1352
  9167  011248                     l1350:
  9168  011248  5046               	movf	_bflag,w,c
  9169                           
  9170                           ; Switch size 1, requested type "space"
  9171                           ; Number of cases is 3, Range of values is 19 to 83
  9172                           ; switch strategies available:
  9173                           ; Name         Instructions Cycles
  9174                           ; simple_byte           10     6 (average)
  9175                           ;	Chosen strategy is simple_byte
  9176  01124A  0A13               	xorlw	19	; case 19
  9177  01124C  B4D8               	btfsc	status,2,c
  9178  01124E  D7DB               	goto	l1351
  9179  011250  0A34               	xorlw	52	; case 39
  9180  011252  B4D8               	btfsc	status,2,c
  9181  011254  D7EE               	goto	l1354
  9182  011256  0A74               	xorlw	116	; case 83
  9183  011258  B4D8               	btfsc	status,2,c
  9184  01125A  D7E0               	goto	l1353
  9185  01125C                     l1352:
  9186  01125C  9487               	bcf	3975,2,c	;# 
  9187  01125E  0012               	return		;funcret
  9188  011260                     __end_of_lcd_writeC:
  9189                           	opt stack 0
  9190                           tblptru	equ	0xFF8
  9191                           tblptrh	equ	0xFF7
  9192                           tblptrl	equ	0xFF6
  9193                           tablat	equ	0xFF5
  9194                           prodh	equ	0xFF4
  9195                           prodl	equ	0xFF3
  9196                           postinc0	equ	0xFEE
  9197                           wreg	equ	0xFE8
  9198                           indf2	equ	0xFDF
  9199                           fsr2h	equ	0xFDA
  9200                           fsr2l	equ	0xFD9
  9201                           status	equ	0xFD8
  9202                           
  9203 ;; *************** function _lcd_dispadd *****************
  9204 ;; Defined at:
  9205 ;;		line 214 in file "lcd.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;  lcdaddress      1    wreg     unsigned char 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  lcdaddress      1   22[COMRAM] unsigned char 
  9210 ;;  lcdatasave      1   23[COMRAM] unsigned char 
  9211 ;; Return value:  Size  Location     Type
  9212 ;;                  1    wreg      void 
  9213 ;; Registers used:
  9214 ;;		wreg, status,2, status,0, cstack
  9215 ;; Tracked objects:
  9216 ;;		On entry : 0/0
  9217 ;;		On exit  : 0/0
  9218 ;;		Unchanged: 0/0
  9219 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;Total ram usage:        2 bytes
  9225 ;; Hardware stack levels used:    1
  9226 ;; Hardware stack levels required when called:    5
  9227 ;; This function calls:
  9228 ;;		_lcd_write
  9229 ;; This function is called by:
  9230 ;;		_displ_sens
  9231 ;;		_lcd_string
  9232 ;;		_displ_price
  9233 ;;		_lcd_writeC
  9234 ;;		_Hopper_coin
  9235 ;;		_Update_Hopcoin
  9236 ;; This function uses a non-reentrant model
  9237 ;;
  9238                           
  9239                           	psect	text55
  9240  011988                     __ptext55:
  9241                           	opt stack 0
  9242  011988                     _lcd_dispadd:
  9243                           	opt stack 22
  9244                           
  9245                           ;incstack = 0
  9246                           ;lcd_dispadd@lcdaddress stored from wreg
  9247  011988  6E21               	movwf	lcd_dispadd@lcdaddress,c
  9248                           
  9249                           ;lcd.c: 216: uint8_t lcdatasave = lcdata;
  9250  01198A  C045  F022         	movff	_lcdata,lcd_dispadd@lcdatasave
  9251  01198E  9487               	bcf	3975,2,c	;# 
  9252                           
  9253                           ;lcd.c: 219: lcd_write(lcdaddress | 0x80);
  9254  011990  5021               	movf	lcd_dispadd@lcdaddress,w,c
  9255  011992  0980               	iorlw	128
  9256  011994  ECC6  F08B         	call	_lcd_write
  9257  011998  8487               	bsf	3975,2,c	;# 
  9258                           
  9259                           ;lcd.c: 221: lcdata = lcdatasave;
  9260  01199A  C022  F045         	movff	lcd_dispadd@lcdatasave,_lcdata
  9261  01199E  0012               	return		;funcret
  9262  0119A0                     __end_of_lcd_dispadd:
  9263                           	opt stack 0
  9264                           tblptru	equ	0xFF8
  9265                           tblptrh	equ	0xFF7
  9266                           tblptrl	equ	0xFF6
  9267                           tablat	equ	0xFF5
  9268                           prodh	equ	0xFF4
  9269                           prodl	equ	0xFF3
  9270                           postinc0	equ	0xFEE
  9271                           wreg	equ	0xFE8
  9272                           indf2	equ	0xFDF
  9273                           fsr2h	equ	0xFDA
  9274                           fsr2l	equ	0xFD9
  9275                           status	equ	0xFD8
  9276                           
  9277 ;; *************** function _lcd_write *****************
  9278 ;; Defined at:
  9279 ;;		line 226 in file "lcd.c"
  9280 ;; Parameters:    Size  Location     Type
  9281 ;;  lcdata          1    wreg     unsigned char 
  9282 ;; Auto vars:     Size  Location     Type
  9283 ;;  lcdata          1   21[COMRAM] unsigned char 
  9284 ;;  savelatd        1   20[COMRAM] unsigned char 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2, status,0, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;Total ram usage:        2 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    4
  9301 ;; This function calls:
  9302 ;;		_lcd_clockE
  9303 ;;		_read_busy
  9304 ;; This function is called by:
  9305 ;;		_lcd_init
  9306 ;;		_displ_note
  9307 ;;		_lcd_string
  9308 ;;		_displ_price
  9309 ;;		_lcd_writeC
  9310 ;;		_lcd_dispadd
  9311 ;; This function uses a non-reentrant model
  9312 ;;
  9313                           
  9314                           	psect	text56
  9315  01178C                     __ptext56:
  9316                           	opt stack 0
  9317  01178C                     _lcd_write:
  9318                           	opt stack 23
  9319                           
  9320                           ;incstack = 0
  9321                           ;lcd_write@lcdata stored from wreg
  9322  01178C  6E20               	movwf	lcd_write@lcdata,c
  9323                           
  9324                           ;lcd.c: 228: uint8_t savelatd = LATD;
  9325  01178E  CF86 F01F          	movff	3974,lcd_write@savelatd	;volatile
  9326                           
  9327                           ;lcd.c: 231: bflag = read_busy();
  9328  011792  EC24  F08A         	call	_read_busy	;wreg free
  9329  011796  D002               	goto	L15
  9330  011798                     
  9331                           ;lcd.c: 233: {
  9332                           ;lcd.c: 234: bflag = read_busy();
  9333  011798  EC24  F08A         	call	_read_busy	;wreg free
  9334  01179C                     L15:
  9335  01179C  6E46               	movwf	_bflag,c
  9336  01179E  BE46               	btfsc	_bflag,7,c
  9337  0117A0  D7FB               	goto	l1362
  9338                           
  9339                           ;lcd.c: 235: }
  9340                           ;lcd.c: 236: LATD = (lcdata >> 4) & 0x0F;
  9341  0117A2  3820               	swapf	lcd_write@lcdata,w,c
  9342  0117A4  0B0F               	andlw	15
  9343  0117A6  0B0F               	andlw	15
  9344  0117A8  6E86               	movwf	3974,c	;volatile
  9345                           
  9346                           ;lcd.c: 238: lcd_clockE();
  9347  0117AA  EC46  F08D         	call	_lcd_clockE	;wreg free
  9348                           
  9349                           ;lcd.c: 240: LATD = lcdata & 0x0F;
  9350  0117AE  5020               	movf	lcd_write@lcdata,w,c
  9351  0117B0  0B0F               	andlw	15
  9352  0117B2  6E86               	movwf	3974,c	;volatile
  9353                           
  9354                           ;lcd.c: 241: lcd_clockE();
  9355  0117B4  EC46  F08D         	call	_lcd_clockE	;wreg free
  9356                           
  9357                           ;lcd.c: 242: LATD = savelatd;
  9358  0117B8  C01F  FF86         	movff	lcd_write@savelatd,3974	;volatile
  9359  0117BC  0012               	return		;funcret
  9360  0117BE                     __end_of_lcd_write:
  9361                           	opt stack 0
  9362                           tblptru	equ	0xFF8
  9363                           tblptrh	equ	0xFF7
  9364                           tblptrl	equ	0xFF6
  9365                           tablat	equ	0xFF5
  9366                           prodh	equ	0xFF4
  9367                           prodl	equ	0xFF3
  9368                           postinc0	equ	0xFEE
  9369                           wreg	equ	0xFE8
  9370                           indf2	equ	0xFDF
  9371                           fsr2h	equ	0xFDA
  9372                           fsr2l	equ	0xFD9
  9373                           status	equ	0xFD8
  9374                           
  9375 ;; *************** function _read_busy *****************
  9376 ;; Defined at:
  9377 ;;		line 257 in file "lcd.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;  savelatd        1   19[COMRAM] unsigned char 
  9382 ;;  savelate        1   18[COMRAM] unsigned char 
  9383 ;; Return value:  Size  Location     Type
  9384 ;;                  1    wreg      char 
  9385 ;; Registers used:
  9386 ;;		wreg, status,2, status,0, cstack
  9387 ;; Tracked objects:
  9388 ;;		On entry : 0/0
  9389 ;;		On exit  : 0/0
  9390 ;;		Unchanged: 0/0
  9391 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;Total ram usage:        2 bytes
  9397 ;; Hardware stack levels used:    1
  9398 ;; Hardware stack levels required when called:    3
  9399 ;; This function calls:
  9400 ;;		_lcd_clockH
  9401 ;;		_lcd_clockL
  9402 ;; This function is called by:
  9403 ;;		_lcd_write
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           	psect	text57
  9408  011448                     __ptext57:
  9409                           	opt stack 0
  9410  011448                     _read_busy:
  9411                           	opt stack 23
  9412                           
  9413                           ;lcd.c: 259: uint8_t savelate = LATE;
  9414                           
  9415                           ;incstack = 0
  9416  011448  CF87 F01D          	movff	3975,read_busy@savelate	;volatile
  9417                           
  9418                           ;lcd.c: 260: uint8_t savelatd = LATD;
  9419  01144C  CF86 F01E          	movff	3974,read_busy@savelatd	;volatile
  9420  011450  9487               	bcf	3975,2,c	;# 
  9421  011452  8287               	bsf	3975,1,c	;# 
  9422                           
  9423                           ;lcd.c: 263: TRISD = (TRISD | 0x0F);
  9424  011454  508B               	movf	3979,w,c	;volatile
  9425  011456  090F               	iorlw	15
  9426  011458  6E8B               	movwf	3979,c	;volatile
  9427                           
  9428                           ;lcd.c: 264: lcd_clockH();
  9429  01145A  EC5B  F08D         	call	_lcd_clockH	;wreg free
  9430                           
  9431                           ;lcd.c: 265: bflag = (PORTD << 4);
  9432  01145E  3890               	swapf	3984,w,c	;volatile
  9433  011460  0BF0               	andlw	240
  9434  011462  6E46               	movwf	_bflag,c
  9435                           
  9436                           ;lcd.c: 266: lcd_clockL();
  9437  011464  EC57  F08D         	call	_lcd_clockL	;wreg free
  9438                           
  9439                           ;lcd.c: 267: lcd_clockH();
  9440  011468  EC5B  F08D         	call	_lcd_clockH	;wreg free
  9441                           
  9442                           ;lcd.c: 268: bflag = bflag | (PORTD & 0x0F);
  9443  01146C  5090               	movf	3984,w,c	;volatile
  9444  01146E  0B0F               	andlw	15
  9445  011470  1046               	iorwf	_bflag,w,c
  9446  011472  6E46               	movwf	_bflag,c
  9447  011474  9087               	bcf	3975,0,c	;# 
  9448                           
  9449                           ;lcd.c: 270: TRISD = (TRISD & 0xF0);
  9450  011476  508B               	movf	3979,w,c	;volatile
  9451  011478  0BF0               	andlw	240
  9452  01147A  6E8B               	movwf	3979,c	;volatile
  9453  01147C  9287               	bcf	3975,1,c	;# 
  9454                           
  9455                           ;lcd.c: 272: LATD = savelatd;
  9456  01147E  C01E  FF86         	movff	read_busy@savelatd,3974	;volatile
  9457                           
  9458                           ;lcd.c: 273: LATE = savelate;
  9459  011482  C01D  FF87         	movff	read_busy@savelate,3975	;volatile
  9460                           
  9461                           ;lcd.c: 274: return(bflag);
  9462  011486  5046               	movf	_bflag,w,c
  9463  011488  0012               	return	
  9464  01148A                     __end_of_read_busy:
  9465                           	opt stack 0
  9466                           tblptru	equ	0xFF8
  9467                           tblptrh	equ	0xFF7
  9468                           tblptrl	equ	0xFF6
  9469                           tablat	equ	0xFF5
  9470                           prodh	equ	0xFF4
  9471                           prodl	equ	0xFF3
  9472                           postinc0	equ	0xFEE
  9473                           wreg	equ	0xFE8
  9474                           indf2	equ	0xFDF
  9475                           fsr2h	equ	0xFDA
  9476                           fsr2l	equ	0xFD9
  9477                           status	equ	0xFD8
  9478                           
  9479 ;; *************** function _lcd_clockL *****************
  9480 ;; Defined at:
  9481 ;;		line 289 in file "lcd.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;		None
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;		None
  9486 ;; Return value:  Size  Location     Type
  9487 ;;                  1    wreg      void 
  9488 ;; Registers used:
  9489 ;;		None
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;Total ram usage:        0 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    2
  9502 ;; This function calls:
  9503 ;;		Nothing
  9504 ;; This function is called by:
  9505 ;;		_read_busy
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text58
  9510  011AAE                     __ptext58:
  9511                           	opt stack 0
  9512  011AAE                     _lcd_clockL:
  9513                           	opt stack 23
  9514                           
  9515                           ;incstack = 0
  9516  011AAE  9087               	bcf	3975,0,c	;# 
  9517                           
  9518                           ;lcd.c: 292: _delay((unsigned long)((1)*(12000000/4000000.0)));
  9519  011AB0  D000               	nop2		;2 cycle nop
  9520  011AB2  F000               	nop	
  9521  011AB4  0012               	return		;funcret
  9522  011AB6                     __end_of_lcd_clockL:
  9523                           	opt stack 0
  9524                           tblptru	equ	0xFF8
  9525                           tblptrh	equ	0xFF7
  9526                           tblptrl	equ	0xFF6
  9527                           tablat	equ	0xFF5
  9528                           prodh	equ	0xFF4
  9529                           prodl	equ	0xFF3
  9530                           postinc0	equ	0xFEE
  9531                           wreg	equ	0xFE8
  9532                           indf2	equ	0xFDF
  9533                           fsr2h	equ	0xFDA
  9534                           fsr2l	equ	0xFD9
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _lcd_clockH *****************
  9538 ;; Defined at:
  9539 ;;		line 281 in file "lcd.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;		None
  9542 ;; Auto vars:     Size  Location     Type
  9543 ;;		None
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  1    wreg      void 
  9546 ;; Registers used:
  9547 ;;		None
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9557 ;;Total ram usage:        0 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    2
  9560 ;; This function calls:
  9561 ;;		Nothing
  9562 ;; This function is called by:
  9563 ;;		_read_busy
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           	psect	text59
  9568  011AB6                     __ptext59:
  9569                           	opt stack 0
  9570  011AB6                     _lcd_clockH:
  9571                           	opt stack 23
  9572                           
  9573                           ;incstack = 0
  9574  011AB6  8087               	bsf	3975,0,c	;# 
  9575                           
  9576                           ;lcd.c: 284: _delay((unsigned long)((1)*(12000000/4000000.0)));
  9577  011AB8  D000               	nop2		;2 cycle nop
  9578  011ABA  F000               	nop	
  9579  011ABC  0012               	return		;funcret
  9580  011ABE                     __end_of_lcd_clockH:
  9581                           	opt stack 0
  9582                           tblptru	equ	0xFF8
  9583                           tblptrh	equ	0xFF7
  9584                           tblptrl	equ	0xFF6
  9585                           tablat	equ	0xFF5
  9586                           prodh	equ	0xFF4
  9587                           prodl	equ	0xFF3
  9588                           postinc0	equ	0xFEE
  9589                           wreg	equ	0xFE8
  9590                           indf2	equ	0xFDF
  9591                           fsr2h	equ	0xFDA
  9592                           fsr2l	equ	0xFD9
  9593                           status	equ	0xFD8
  9594                           
  9595 ;; *************** function _lcd_clockE *****************
  9596 ;; Defined at:
  9597 ;;		line 297 in file "lcd.c"
  9598 ;; Parameters:    Size  Location     Type
  9599 ;;		None
  9600 ;; Auto vars:     Size  Location     Type
  9601 ;;		None
  9602 ;; Return value:  Size  Location     Type
  9603 ;;                  1    wreg      void 
  9604 ;; Registers used:
  9605 ;;		None
  9606 ;; Tracked objects:
  9607 ;;		On entry : 0/0
  9608 ;;		On exit  : 0/0
  9609 ;;		Unchanged: 0/0
  9610 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9615 ;;Total ram usage:        0 bytes
  9616 ;; Hardware stack levels used:    1
  9617 ;; Hardware stack levels required when called:    2
  9618 ;; This function calls:
  9619 ;;		Nothing
  9620 ;; This function is called by:
  9621 ;;		_lcd_init
  9622 ;;		_lcd_write
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text60
  9627  011A8C                     __ptext60:
  9628                           	opt stack 0
  9629  011A8C                     _lcd_clockE:
  9630                           	opt stack 24
  9631                           
  9632                           ;incstack = 0
  9633  011A8C  8087               	bsf	3975,0,c	;# 
  9634                           
  9635                           ;lcd.c: 300: _delay((unsigned long)((1)*(12000000/4000000.0)));
  9636  011A8E  D000               	nop2		;2 cycle nop
  9637  011A90  F000               	nop	
  9638  011A92  9087               	bcf	3975,0,c	;# 
  9639                           
  9640                           ;lcd.c: 302: _delay((unsigned long)((1)*(12000000/4000000.0)));
  9641  011A94  D000               	nop2		;2 cycle nop
  9642  011A96  F000               	nop	
  9643  011A98  0012               	return		;funcret
  9644  011A9A                     __end_of_lcd_clockE:
  9645                           	opt stack 0
  9646                           tblptru	equ	0xFF8
  9647                           tblptrh	equ	0xFF7
  9648                           tblptrl	equ	0xFF6
  9649                           tablat	equ	0xFF5
  9650                           prodh	equ	0xFF4
  9651                           prodl	equ	0xFF3
  9652                           postinc0	equ	0xFEE
  9653                           wreg	equ	0xFE8
  9654                           indf2	equ	0xFDF
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8
  9658                           
  9659 ;; *************** function ___ltmod *****************
  9660 ;; Defined at:
  9661 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/ltmod.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  dividend        3   18[COMRAM] unsigned um
  9664 ;;  divisor         3   21[COMRAM] unsigned um
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  counter         1   24[COMRAM] unsigned char 
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  3   18[COMRAM] unsigned um
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9676 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;Total ram usage:        7 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    2
  9683 ;; This function calls:
  9684 ;;		Nothing
  9685 ;; This function is called by:
  9686 ;;		_displ_hex
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           	psect	text61
  9691  011366                     __ptext61:
  9692                           	opt stack 0
  9693  011366                     ___ltmod:
  9694                           	opt stack 23
  9695                           
  9696                           ;incstack = 0
  9697  011366  5020               	movf	___ltmod@divisor,w,c
  9698  011368  1021               	iorwf	___ltmod@divisor+1,w,c
  9699  01136A  1022               	iorwf	___ltmod@divisor+2,w,c
  9700  01136C  B4D8               	btfsc	status,2,c
  9701  01136E  D01E               	goto	l3298
  9702  011370  0E01               	movlw	1
  9703  011372  6E23               	movwf	___ltmod@counter,c
  9704  011374  D005               	goto	l3293
  9705  011376  90D8               	bcf	status,0,c
  9706  011378  3620               	rlcf	___ltmod@divisor,f,c
  9707  01137A  3621               	rlcf	___ltmod@divisor+1,f,c
  9708  01137C  3622               	rlcf	___ltmod@divisor+2,f,c
  9709  01137E  2A23               	incf	___ltmod@counter,f,c
  9710  011380                     l3293:
  9711  011380  AE22               	btfss	___ltmod@divisor+2,7,c
  9712  011382  D7F9               	goto	l3294
  9713  011384                     u1990:
  9714  011384  5020               	movf	___ltmod@divisor,w,c
  9715  011386  5C1D               	subwf	___ltmod@dividend,w,c
  9716  011388  5021               	movf	___ltmod@divisor+1,w,c
  9717  01138A  581E               	subwfb	___ltmod@dividend+1,w,c
  9718  01138C  5022               	movf	___ltmod@divisor+2,w,c
  9719  01138E  581F               	subwfb	___ltmod@dividend+2,w,c
  9720  011390  A0D8               	btfss	status,0,c
  9721  011392  D006               	goto	l3297
  9722  011394  5020               	movf	___ltmod@divisor,w,c
  9723  011396  5E1D               	subwf	___ltmod@dividend,f,c
  9724  011398  5021               	movf	___ltmod@divisor+1,w,c
  9725  01139A  5A1E               	subwfb	___ltmod@dividend+1,f,c
  9726  01139C  5022               	movf	___ltmod@divisor+2,w,c
  9727  01139E  5A1F               	subwfb	___ltmod@dividend+2,f,c
  9728  0113A0                     l3297:
  9729  0113A0  90D8               	bcf	status,0,c
  9730  0113A2  3222               	rrcf	___ltmod@divisor+2,f,c
  9731  0113A4  3221               	rrcf	___ltmod@divisor+1,f,c
  9732  0113A6  3220               	rrcf	___ltmod@divisor,f,c
  9733  0113A8  2E23               	decfsz	___ltmod@counter,f,c
  9734  0113AA  D7EC               	goto	u1990
  9735  0113AC                     l3298:
  9736  0113AC  C01D  F01D         	movff	___ltmod@dividend,?___ltmod
  9737  0113B0  C01E  F01E         	movff	___ltmod@dividend+1,?___ltmod+1
  9738  0113B4  C01F  F01F         	movff	___ltmod@dividend+2,?___ltmod+2
  9739  0113B8  0012               	return		;funcret
  9740  0113BA                     __end_of___ltmod:
  9741                           	opt stack 0
  9742                           tblptru	equ	0xFF8
  9743                           tblptrh	equ	0xFF7
  9744                           tblptrl	equ	0xFF6
  9745                           tablat	equ	0xFF5
  9746                           prodh	equ	0xFF4
  9747                           prodl	equ	0xFF3
  9748                           postinc0	equ	0xFEE
  9749                           wreg	equ	0xFE8
  9750                           indf2	equ	0xFDF
  9751                           fsr2h	equ	0xFDA
  9752                           fsr2l	equ	0xFD9
  9753                           status	equ	0xFD8
  9754                           
  9755 ;; *************** function ___ltdiv *****************
  9756 ;; Defined at:
  9757 ;;		line 8 in file "/opt/microchip/xc8/v1.44/sources/common/ltdiv.c"
  9758 ;; Parameters:    Size  Location     Type
  9759 ;;  dividend        3   18[COMRAM] unsigned um
  9760 ;;  divisor         3   21[COMRAM] unsigned um
  9761 ;; Auto vars:     Size  Location     Type
  9762 ;;  quotient        3   24[COMRAM] unsigned um
  9763 ;;  counter         1   27[COMRAM] unsigned char 
  9764 ;; Return value:  Size  Location     Type
  9765 ;;                  3   18[COMRAM] unsigned um
  9766 ;; Registers used:
  9767 ;;		wreg, status,2, status,0
  9768 ;; Tracked objects:
  9769 ;;		On entry : 0/0
  9770 ;;		On exit  : 0/0
  9771 ;;		Unchanged: 0/0
  9772 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9773 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9774 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9776 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9777 ;;Total ram usage:       10 bytes
  9778 ;; Hardware stack levels used:    1
  9779 ;; Hardware stack levels required when called:    2
  9780 ;; This function calls:
  9781 ;;		Nothing
  9782 ;; This function is called by:
  9783 ;;		_displ_hex
  9784 ;; This function uses a non-reentrant model
  9785 ;;
  9786                           
  9787                           	psect	text62
  9788  011128                     __ptext62:
  9789                           	opt stack 0
  9790  011128                     ___ltdiv:
  9791                           	opt stack 23
  9792                           
  9793                           ;incstack = 0
  9794  011128  0E00               	movlw	0
  9795  01112A  6E23               	movwf	___ltdiv@quotient,c
  9796  01112C  0E00               	movlw	0
  9797  01112E  6E24               	movwf	___ltdiv@quotient+1,c
  9798  011130  0E00               	movlw	0
  9799  011132  6E25               	movwf	___ltdiv@quotient+2,c
  9800  011134  5020               	movf	___ltdiv@divisor,w,c
  9801  011136  1021               	iorwf	___ltdiv@divisor+1,w,c
  9802  011138  1022               	iorwf	___ltdiv@divisor+2,w,c
  9803  01113A  B4D8               	btfsc	status,2,c
  9804  01113C  D023               	goto	l3288
  9805  01113E  0E01               	movlw	1
  9806  011140  6E26               	movwf	___ltdiv@counter,c
  9807  011142  D005               	goto	l3283
  9808  011144  90D8               	bcf	status,0,c
  9809  011146  3620               	rlcf	___ltdiv@divisor,f,c
  9810  011148  3621               	rlcf	___ltdiv@divisor+1,f,c
  9811  01114A  3622               	rlcf	___ltdiv@divisor+2,f,c
  9812  01114C  2A26               	incf	___ltdiv@counter,f,c
  9813  01114E                     l3283:
  9814  01114E  AE22               	btfss	___ltdiv@divisor+2,7,c
  9815  011150  D7F9               	goto	l3284
  9816  011152                     u1960:
  9817  011152  90D8               	bcf	status,0,c
  9818  011154  3623               	rlcf	___ltdiv@quotient,f,c
  9819  011156  3624               	rlcf	___ltdiv@quotient+1,f,c
  9820  011158  3625               	rlcf	___ltdiv@quotient+2,f,c
  9821  01115A  5020               	movf	___ltdiv@divisor,w,c
  9822  01115C  5C1D               	subwf	___ltdiv@dividend,w,c
  9823  01115E  5021               	movf	___ltdiv@divisor+1,w,c
  9824  011160  581E               	subwfb	___ltdiv@dividend+1,w,c
  9825  011162  5022               	movf	___ltdiv@divisor+2,w,c
  9826  011164  581F               	subwfb	___ltdiv@dividend+2,w,c
  9827  011166  A0D8               	btfss	status,0,c
  9828  011168  D007               	goto	l3287
  9829  01116A  5020               	movf	___ltdiv@divisor,w,c
  9830  01116C  5E1D               	subwf	___ltdiv@dividend,f,c
  9831  01116E  5021               	movf	___ltdiv@divisor+1,w,c
  9832  011170  5A1E               	subwfb	___ltdiv@dividend+1,f,c
  9833  011172  5022               	movf	___ltdiv@divisor+2,w,c
  9834  011174  5A1F               	subwfb	___ltdiv@dividend+2,f,c
  9835  011176  8023               	bsf	___ltdiv@quotient,0,c
  9836  011178                     l3287:
  9837  011178  90D8               	bcf	status,0,c
  9838  01117A  3222               	rrcf	___ltdiv@divisor+2,f,c
  9839  01117C  3221               	rrcf	___ltdiv@divisor+1,f,c
  9840  01117E  3220               	rrcf	___ltdiv@divisor,f,c
  9841  011180  2E26               	decfsz	___ltdiv@counter,f,c
  9842  011182  D7E7               	goto	u1960
  9843  011184                     l3288:
  9844  011184  C023  F01D         	movff	___ltdiv@quotient,?___ltdiv
  9845  011188  C024  F01E         	movff	___ltdiv@quotient+1,?___ltdiv+1
  9846  01118C  C025  F01F         	movff	___ltdiv@quotient+2,?___ltdiv+2
  9847  011190  0012               	return		;funcret
  9848  011192                     __end_of___ltdiv:
  9849                           	opt stack 0
  9850                           tblptru	equ	0xFF8
  9851                           tblptrh	equ	0xFF7
  9852                           tblptrl	equ	0xFF6
  9853                           tablat	equ	0xFF5
  9854                           prodh	equ	0xFF4
  9855                           prodl	equ	0xFF3
  9856                           postinc0	equ	0xFEE
  9857                           wreg	equ	0xFE8
  9858                           indf2	equ	0xFDF
  9859                           fsr2h	equ	0xFDA
  9860                           fsr2l	equ	0xFD9
  9861                           status	equ	0xFD8
  9862                           
  9863 ;; *************** function _credit_check *****************
  9864 ;; Defined at:
  9865 ;;		line 124 in file "vend.c"
  9866 ;; Parameters:    Size  Location     Type
  9867 ;;		None
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;		None
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  1    wreg      unsigned char 
  9872 ;; Registers used:
  9873 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : 0/0
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;Total ram usage:        0 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    3
  9886 ;; This function calls:
  9887 ;;		_DATAEE_ReadByte
  9888 ;; This function is called by:
  9889 ;;		_displ_credit
  9890 ;;		_vend_init
  9891 ;; This function uses a non-reentrant model
  9892 ;;
  9893                           
  9894                           	psect	text63
  9895  0118EC                     __ptext63:
  9896                           	opt stack 0
  9897  0118EC                     _credit_check:
  9898                           	opt stack 26
  9899                           
  9900                           ;vend.c: 126: cash = DATAEE_ReadByte(credmem);
  9901                           
  9902                           ;incstack = 0
  9903  0118EC  0E6B               	movlw	low _credmem
  9904  0118EE  6EF6               	movwf	tblptrl,c
  9905  0118F0                     	if	1	;There is more than 1 active tblptr byte
  9906  0118F0  0EFD               	movlw	high _credmem
  9907  0118F2  6EF7               	movwf	tblptrh,c
  9908  0118F4                     	endif
  9909  0118F4                     	if	1	;There are 3 active tblptr bytes
  9910  0118F4  0E00               	movlw	low (_credmem shr (0+16))
  9911  0118F6  6EF8               	movwf	tblptru,c
  9912  0118F8                     	endif
  9913  0118F8  0009               	tblrd		*+
  9914  0118FA  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  9915  0118FE  000A               	tblrd		*-
  9916  011900  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  9917  011904  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  9918  011908  6E39               	movwf	_cash,c	;volatile
  9919                           
  9920                           ;vend.c: 127: return(cash);
  9921  01190A  5039               	movf	_cash,w,c	;volatile
  9922  01190C  0012               	return	
  9923  01190E                     __end_of_credit_check:
  9924                           	opt stack 0
  9925                           tblptru	equ	0xFF8
  9926                           tblptrh	equ	0xFF7
  9927                           tblptrl	equ	0xFF6
  9928                           tablat	equ	0xFF5
  9929                           prodh	equ	0xFF4
  9930                           prodl	equ	0xFF3
  9931                           postinc0	equ	0xFEE
  9932                           wreg	equ	0xFE8
  9933                           indf2	equ	0xFDF
  9934                           fsr2h	equ	0xFDA
  9935                           fsr2l	equ	0xFD9
  9936                           status	equ	0xFD8
  9937                           
  9938 ;; *************** function _credit_subtract *****************
  9939 ;; Defined at:
  9940 ;;		line 111 in file "vend.c"
  9941 ;; Parameters:    Size  Location     Type
  9942 ;;  credit          1    wreg     unsigned char 
  9943 ;; Auto vars:     Size  Location     Type
  9944 ;;  credit          1   22[COMRAM] unsigned char 
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      void 
  9947 ;; Registers used:
  9948 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9949 ;; Tracked objects:
  9950 ;;		On entry : 0/0
  9951 ;;		On exit  : 0/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
  9954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9958 ;;Total ram usage:        1 bytes
  9959 ;; Hardware stack levels used:    1
  9960 ;; Hardware stack levels required when called:    3
  9961 ;; This function calls:
  9962 ;;		_DATAEE_ReadByte
  9963 ;;		_DATAEE_WriteByte
  9964 ;; This function is called by:
  9965 ;;		_main
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           	psect	text64
  9970  011310                     __ptext64:
  9971                           	opt stack 0
  9972  011310                     _credit_subtract:
  9973                           	opt stack 27
  9974                           
  9975                           ;incstack = 0
  9976                           ;credit_subtract@credit stored from wreg
  9977  011310  6E21               	movwf	credit_subtract@credit,c
  9978                           
  9979                           ;vend.c: 113: cash = DATAEE_ReadByte(credmem);
  9980  011312  0E6B               	movlw	low _credmem
  9981  011314  6EF6               	movwf	tblptrl,c
  9982  011316                     	if	1	;There is more than 1 active tblptr byte
  9983  011316  0EFD               	movlw	high _credmem
  9984  011318  6EF7               	movwf	tblptrh,c
  9985  01131A                     	endif
  9986  01131A                     	if	1	;There are 3 active tblptr bytes
  9987  01131A  0E00               	movlw	low (_credmem shr (0+16))
  9988  01131C  6EF8               	movwf	tblptru,c
  9989  01131E                     	endif
  9990  01131E  0009               	tblrd		*+
  9991  011320  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
  9992  011324  000A               	tblrd		*-
  9993  011326  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
  9994  01132A  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
  9995  01132E  6E39               	movwf	_cash,c	;volatile
  9996                           
  9997                           ;vend.c: 114: cash = (cash - credit) & 0xFF;
  9998  011330  5021               	movf	credit_subtract@credit,w,c
  9999  011332  0800               	sublw	0
 10000  011334  2439               	addwf	_cash,w,c	;volatile
 10001  011336  6E39               	movwf	_cash,c	;volatile
 10002                           
 10003                           ;vend.c: 115: DATAEE_WriteByte(credmem, cash);
 10004  011338  0E6B               	movlw	low _credmem
 10005  01133A  6EF6               	movwf	tblptrl,c
 10006  01133C                     	if	1	;There is more than 1 active tblptr byte
 10007  01133C  0EFD               	movlw	high _credmem
 10008  01133E  6EF7               	movwf	tblptrh,c
 10009  011340                     	endif
 10010  011340                     	if	1	;There are 3 active tblptr bytes
 10011  011340  0E00               	movlw	low (_credmem shr (0+16))
 10012  011342  6EF8               	movwf	tblptru,c
 10013  011344                     	endif
 10014  011344  0009               	tblrd		*+
 10015  011346  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 10016  01134A  000A               	tblrd		*-
 10017  01134C  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 10018  011350  C039  F01F         	movff	_cash,DATAEE_WriteByte@bData	;volatile
 10019  011354  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
 10020                           
 10021                           ;vend.c: 116: if(cash == 0)
 10022  011358  5039               	movf	_cash,w,c	;volatile
 10023  01135A  A4D8               	btfss	status,2,c
 10024  01135C  0012               	return	
 10025                           
 10026                           ;vend.c: 117: {
 10027                           ;vend.c: 118: venflags.iscredit = 0;
 10028  01135E  902F               	bcf	_venflags,0,c
 10029                           
 10030                           ;vend.c: 119: venflags.inscoin = 1;
 10031  011360  842F               	bsf	_venflags,2,c
 10032                           
 10033                           ;vend.c: 120: venflags.credisplay = 0;
 10034  011362  982F               	bcf	_venflags,4,c
 10035  011364  0012               	return	
 10036  011366                     __end_of_credit_subtract:
 10037                           	opt stack 0
 10038                           tblptru	equ	0xFF8
 10039                           tblptrh	equ	0xFF7
 10040                           tblptrl	equ	0xFF6
 10041                           tablat	equ	0xFF5
 10042                           prodh	equ	0xFF4
 10043                           prodl	equ	0xFF3
 10044                           postinc0	equ	0xFEE
 10045                           wreg	equ	0xFE8
 10046                           indf2	equ	0xFDF
 10047                           fsr2h	equ	0xFDA
 10048                           fsr2l	equ	0xFD9
 10049                           status	equ	0xFD8
 10050                           
 10051 ;; *************** function _credit_add *****************
 10052 ;; Defined at:
 10053 ;;		line 96 in file "vend.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;  credit          1    wreg     unsigned char 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  credit          1   29[COMRAM] unsigned char 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  1    wreg      void 
 10060 ;; Registers used:
 10061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10070 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10071 ;;Total ram usage:        1 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    5
 10074 ;; This function calls:
 10075 ;;		_DATAEE_ReadByte
 10076 ;;		_DATAEE_WriteByte
 10077 ;;		_Update_cashaudit
 10078 ;; This function is called by:
 10079 ;;		_main
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           	psect	text65
 10084  011260                     __ptext65:
 10085                           	opt stack 0
 10086  011260                     _credit_add:
 10087                           	opt stack 25
 10088                           
 10089                           ;incstack = 0
 10090                           ;credit_add@credit stored from wreg
 10091  011260  6E28               	movwf	credit_add@credit,c
 10092                           
 10093                           ;vend.c: 98: cash = DATAEE_ReadByte(credmem);
 10094  011262  0E6B               	movlw	low _credmem
 10095  011264  6EF6               	movwf	tblptrl,c
 10096  011266                     	if	1	;There is more than 1 active tblptr byte
 10097  011266  0EFD               	movlw	high _credmem
 10098  011268  6EF7               	movwf	tblptrh,c
 10099  01126A                     	endif
 10100  01126A                     	if	1	;There are 3 active tblptr bytes
 10101  01126A  0E00               	movlw	low (_credmem shr (0+16))
 10102  01126C  6EF8               	movwf	tblptru,c
 10103  01126E                     	endif
 10104  01126E  0009               	tblrd		*+
 10105  011270  CFF5 F01D          	movff	tablat,DATAEE_ReadByte@bAdd
 10106  011274  000A               	tblrd		*-
 10107  011276  CFF5 F01E          	movff	tablat,DATAEE_ReadByte@bAdd+1
 10108  01127A  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
 10109  01127E  6E39               	movwf	_cash,c	;volatile
 10110                           
 10111                           ;vend.c: 99: cash = cash + credit;
 10112  011280  5039               	movf	_cash,w,c	;volatile
 10113  011282  2428               	addwf	credit_add@credit,w,c
 10114  011284  6E39               	movwf	_cash,c	;volatile
 10115                           
 10116                           ;vend.c: 100: DATAEE_WriteByte(credmem, cash);
 10117  011286  0E6B               	movlw	low _credmem
 10118  011288  6EF6               	movwf	tblptrl,c
 10119  01128A                     	if	1	;There is more than 1 active tblptr byte
 10120  01128A  0EFD               	movlw	high _credmem
 10121  01128C  6EF7               	movwf	tblptrh,c
 10122  01128E                     	endif
 10123  01128E                     	if	1	;There are 3 active tblptr bytes
 10124  01128E  0E00               	movlw	low (_credmem shr (0+16))
 10125  011290  6EF8               	movwf	tblptru,c
 10126  011292                     	endif
 10127  011292  0009               	tblrd		*+
 10128  011294  CFF5 F01D          	movff	tablat,DATAEE_WriteByte@bAdd
 10129  011298  000A               	tblrd		*-
 10130  01129A  CFF5 F01E          	movff	tablat,DATAEE_WriteByte@bAdd+1
 10131  01129E  C039  F01F         	movff	_cash,DATAEE_WriteByte@bData	;volatile
 10132  0112A2  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
 10133                           
 10134                           ;vend.c: 101: if(cash != 0)
 10135  0112A6  5039               	movf	_cash,w,c	;volatile
 10136  0112A8  B4D8               	btfsc	status,2,c
 10137  0112AA  D003               	goto	l1787
 10138                           
 10139                           ;vend.c: 102: {
 10140                           ;vend.c: 103: venflags.iscredit = 1;
 10141  0112AC  802F               	bsf	_venflags,0,c
 10142                           
 10143                           ;vend.c: 104: venflags.inscoin = 0;
 10144  0112AE  942F               	bcf	_venflags,2,c
 10145                           
 10146                           ;vend.c: 105: venflags.credisplay = 1;
 10147  0112B0  882F               	bsf	_venflags,4,c
 10148  0112B2                     l1787:
 10149                           
 10150                           ;vend.c: 107: }
 10151                           ;vend.c: 108: Update_cashaudit(credit);
 10152  0112B2  5028               	movf	credit_add@credit,w,c
 10153  0112B4  EC5A  F084         	call	_Update_cashaudit
 10154  0112B8  0012               	return		;funcret
 10155  0112BA                     __end_of_credit_add:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           postinc0	equ	0xFEE
 10164                           wreg	equ	0xFE8
 10165                           indf2	equ	0xFDF
 10166                           fsr2h	equ	0xFDA
 10167                           fsr2l	equ	0xFD9
 10168                           status	equ	0xFD8
 10169                           
 10170 ;; *************** function _Update_cashaudit *****************
 10171 ;; Defined at:
 10172 ;;		line 81 in file "vend.c"
 10173 ;; Parameters:    Size  Location     Type
 10174 ;;  addcash         1    wreg     unsigned char 
 10175 ;; Auto vars:     Size  Location     Type
 10176 ;;  addcash         1   28[COMRAM] unsigned char 
 10177 ;; Return value:  Size  Location     Type
 10178 ;;                  1    wreg      void 
 10179 ;; Registers used:
 10180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10181 ;; Tracked objects:
 10182 ;;		On entry : 0/0
 10183 ;;		On exit  : 0/0
 10184 ;;		Unchanged: 0/0
 10185 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10189 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;Total ram usage:        1 bytes
 10191 ;; Hardware stack levels used:    1
 10192 ;; Hardware stack levels required when called:    4
 10193 ;; This function calls:
 10194 ;;		_Read_NVstore
 10195 ;;		_Write_NVstore
 10196 ;; This function is called by:
 10197 ;;		_credit_add
 10198 ;; This function uses a non-reentrant model
 10199 ;;
 10200                           
 10201                           	psect	text66
 10202  0108B4                     __ptext66:
 10203                           	opt stack 0
 10204  0108B4                     _Update_cashaudit:
 10205                           	opt stack 25
 10206                           
 10207                           ;incstack = 0
 10208                           ;Update_cashaudit@addcash stored from wreg
 10209  0108B4  6E27               	movwf	Update_cashaudit@addcash,c
 10210                           
 10211                           ;vend.c: 83: Read_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
 10212  0108B6  0E69               	movlw	low _cashinv
 10213  0108B8  6EF6               	movwf	tblptrl,c
 10214  0108BA                     	if	1	;There is more than 1 active tblptr byte
 10215  0108BA  0EFD               	movlw	high _cashinv
 10216  0108BC  6EF7               	movwf	tblptrh,c
 10217  0108BE                     	endif
 10218  0108BE                     	if	1	;There are 3 active tblptr bytes
 10219  0108BE  0E00               	movlw	low (_cashinv shr (0+16))
 10220  0108C0  6EF8               	movwf	tblptru,c
 10221  0108C2                     	endif
 10222  0108C2  0009               	tblrd		*+
 10223  0108C4  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 10224  0108C8  000A               	tblrd		*-
 10225  0108CA  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 10226  0108CE  0E4A               	movlw	low _pvcash
 10227  0108D0  6E21               	movwf	Read_NVstore@storemem,c
 10228  0108D2  0E00               	movlw	high _pvcash
 10229  0108D4  6E22               	movwf	Read_NVstore@storemem+1,c
 10230  0108D6  0E02               	movlw	2
 10231  0108D8  6E23               	movwf	Read_NVstore@storesize,c
 10232  0108DA  EC7A  F08B         	call	_Read_NVstore	;wreg free
 10233                           
 10234                           ;vend.c: 84: Read_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
 10235  0108DE  0E67               	movlw	low _cashint
 10236  0108E0  6EF6               	movwf	tblptrl,c
 10237  0108E2                     	if	1	;There is more than 1 active tblptr byte
 10238  0108E2  0EFD               	movlw	high _cashint
 10239  0108E4  6EF7               	movwf	tblptrh,c
 10240  0108E6                     	endif
 10241  0108E6                     	if	1	;There are 3 active tblptr bytes
 10242  0108E6  0E00               	movlw	low (_cashint shr (0+16))
 10243  0108E8  6EF8               	movwf	tblptru,c
 10244  0108EA                     	endif
 10245  0108EA  0009               	tblrd		*+
 10246  0108EC  CFF5 F01F          	movff	tablat,Read_NVstore@storeadd
 10247  0108F0  000A               	tblrd		*-
 10248  0108F2  CFF5 F020          	movff	tablat,Read_NVstore@storeadd+1
 10249  0108F6  0E47               	movlw	low _pnvcash
 10250  0108F8  6E21               	movwf	Read_NVstore@storemem,c
 10251  0108FA  0E00               	movlw	high _pnvcash
 10252  0108FC  6E22               	movwf	Read_NVstore@storemem+1,c
 10253  0108FE  0E03               	movlw	3
 10254  010900  6E23               	movwf	Read_NVstore@storesize,c
 10255  010902  EC7A  F08B         	call	_Read_NVstore	;wreg free
 10256                           
 10257                           ;vend.c: 86: pvcash = pvcash + (uint16_t)addcash;
 10258  010906  5027               	movf	Update_cashaudit@addcash,w,c
 10259  010908  244A               	addwf	_pvcash,w,c	;volatile
 10260  01090A  6E4A               	movwf	_pvcash,c	;volatile
 10261  01090C  0E00               	movlw	0
 10262  01090E  204B               	addwfc	_pvcash+1,w,c	;volatile
 10263  010910  6E4B               	movwf	_pvcash+1,c	;volatile
 10264                           
 10265                           ;vend.c: 88: pnvcash = pnvcash + (uint24_t)addcash;
 10266  010912  5027               	movf	Update_cashaudit@addcash,w,c
 10267  010914  2447               	addwf	_pnvcash,w,c	;volatile
 10268  010916  6E47               	movwf	_pnvcash,c	;volatile
 10269  010918  0E00               	movlw	0
 10270  01091A  2048               	addwfc	_pnvcash+1,w,c	;volatile
 10271  01091C  6E48               	movwf	_pnvcash+1,c	;volatile
 10272  01091E  0E00               	movlw	0
 10273  010920  2049               	addwfc	_pnvcash+2,w,c	;volatile
 10274  010922  6E49               	movwf	_pnvcash+2,c	;volatile
 10275                           
 10276                           ;vend.c: 90: Write_NVstore(cashinv, ((uint8_t*) &pvcash), 0x02);
 10277  010924  0E69               	movlw	low _cashinv
 10278  010926  6EF6               	movwf	tblptrl,c
 10279  010928                     	if	1	;There is more than 1 active tblptr byte
 10280  010928  0EFD               	movlw	high _cashinv
 10281  01092A  6EF7               	movwf	tblptrh,c
 10282  01092C                     	endif
 10283  01092C                     	if	1	;There are 3 active tblptr bytes
 10284  01092C  0E00               	movlw	low (_cashinv shr (0+16))
 10285  01092E  6EF8               	movwf	tblptru,c
 10286  010930                     	endif
 10287  010930  0009               	tblrd		*+
 10288  010932  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
 10289  010936  000A               	tblrd		*-
 10290  010938  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
 10291  01093C  0E4A               	movlw	low _pvcash
 10292  01093E  6E23               	movwf	Write_NVstore@storemem,c
 10293  010940  0E00               	movlw	high _pvcash
 10294  010942  6E24               	movwf	Write_NVstore@storemem+1,c
 10295  010944  0E02               	movlw	2
 10296  010946  6E25               	movwf	Write_NVstore@storesize,c
 10297  010948  EC3E  F08C         	call	_Write_NVstore	;wreg free
 10298                           
 10299                           ;vend.c: 91: Write_NVstore(cashint, ((uint8_t*) &pnvcash), 0x03);
 10300  01094C  0E67               	movlw	low _cashint
 10301  01094E  6EF6               	movwf	tblptrl,c
 10302  010950                     	if	1	;There is more than 1 active tblptr byte
 10303  010950  0EFD               	movlw	high _cashint
 10304  010952  6EF7               	movwf	tblptrh,c
 10305  010954                     	endif
 10306  010954                     	if	1	;There are 3 active tblptr bytes
 10307  010954  0E00               	movlw	low (_cashint shr (0+16))
 10308  010956  6EF8               	movwf	tblptru,c
 10309  010958                     	endif
 10310  010958  0009               	tblrd		*+
 10311  01095A  CFF5 F021          	movff	tablat,Write_NVstore@storeadd
 10312  01095E  000A               	tblrd		*-
 10313  010960  CFF5 F022          	movff	tablat,Write_NVstore@storeadd+1
 10314  010964  0E47               	movlw	low _pnvcash
 10315  010966  6E23               	movwf	Write_NVstore@storemem,c
 10316  010968  0E00               	movlw	high _pnvcash
 10317  01096A  6E24               	movwf	Write_NVstore@storemem+1,c
 10318  01096C  0E03               	movlw	3
 10319  01096E  6E25               	movwf	Write_NVstore@storesize,c
 10320  010970  EC3E  F08C         	call	_Write_NVstore	;wreg free
 10321  010974  F000               	nop		;# 
 10322  010976  0012               	return		;funcret
 10323  010978                     __end_of_Update_cashaudit:
 10324                           	opt stack 0
 10325                           tblptru	equ	0xFF8
 10326                           tblptrh	equ	0xFF7
 10327                           tblptrl	equ	0xFF6
 10328                           tablat	equ	0xFF5
 10329                           prodh	equ	0xFF4
 10330                           prodl	equ	0xFF3
 10331                           postinc0	equ	0xFEE
 10332                           wreg	equ	0xFE8
 10333                           indf2	equ	0xFDF
 10334                           fsr2h	equ	0xFDA
 10335                           fsr2l	equ	0xFD9
 10336                           status	equ	0xFD8
 10337                           
 10338 ;; *************** function _Write_NVstore *****************
 10339 ;; Defined at:
 10340 ;;		line 61 in file "vend.c"
 10341 ;; Parameters:    Size  Location     Type
 10342 ;;  storeadd        2   22[COMRAM] unsigned int 
 10343 ;;  storemem        2   24[COMRAM] PTR unsigned char 
 10344 ;;		 -> pnvcash(3), pvcash(2), 
 10345 ;;  storesize       1   26[COMRAM] unsigned char 
 10346 ;; Auto vars:     Size  Location     Type
 10347 ;;  i               1   27[COMRAM] unsigned char 
 10348 ;; Return value:  Size  Location     Type
 10349 ;;                  1    wreg      void 
 10350 ;; Registers used:
 10351 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10352 ;; Tracked objects:
 10353 ;;		On entry : 0/0
 10354 ;;		On exit  : 0/0
 10355 ;;		Unchanged: 0/0
 10356 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10357 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10358 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10360 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10361 ;;Total ram usage:        6 bytes
 10362 ;; Hardware stack levels used:    1
 10363 ;; Hardware stack levels required when called:    3
 10364 ;; This function calls:
 10365 ;;		_DATAEE_WriteByte
 10366 ;; This function is called by:
 10367 ;;		_Update_cashaudit
 10368 ;; This function uses a non-reentrant model
 10369 ;;
 10370                           
 10371                           	psect	text67
 10372  01187C                     __ptext67:
 10373                           	opt stack 0
 10374  01187C                     _Write_NVstore:
 10375                           	opt stack 25
 10376                           
 10377                           ;vend.c: 63: uint8_t i = 0;
 10378                           
 10379                           ;incstack = 0
 10380  01187C  0E00               	movlw	0
 10381  01187E  6E26               	movwf	Write_NVstore@i,c
 10382                           
 10383                           ;vend.c: 64: while(i < storesize)
 10384  011880  D00C               	goto	l1772
 10385  011882                     
 10386                           ;vend.c: 65: {
 10387                           ;vend.c: 66: DATAEE_WriteByte(storeadd, storemem + i);
 10388  011882  C021  F01D         	movff	Write_NVstore@storeadd,DATAEE_WriteByte@bAdd
 10389  011886  C022  F01E         	movff	Write_NVstore@storeadd+1,DATAEE_WriteByte@bAdd+1
 10390  01188A  5026               	movf	Write_NVstore@i,w,c
 10391  01188C  0D01               	mullw	1
 10392  01188E  5023               	movf	Write_NVstore@storemem,w,c
 10393  011890  24F3               	addwf	prodl,w,c
 10394  011892  6E1F               	movwf	DATAEE_WriteByte@bData,c
 10395  011894  ECA1  F08A         	call	_DATAEE_WriteByte	;wreg free
 10396                           
 10397                           ;vend.c: 67: i++;
 10398  011898  2A26               	incf	Write_NVstore@i,f,c
 10399  01189A                     l1772:
 10400  01189A  5025               	movf	Write_NVstore@storesize,w,c
 10401  01189C  5C26               	subwf	Write_NVstore@i,w,c
 10402  01189E  B0D8               	btfsc	status,0,c
 10403  0118A0  0012               	return	
 10404  0118A2  D7EF               	goto	l1773
 10405  0118A4                     __end_of_Write_NVstore:
 10406                           	opt stack 0
 10407                           tblptru	equ	0xFF8
 10408                           tblptrh	equ	0xFF7
 10409                           tblptrl	equ	0xFF6
 10410                           tablat	equ	0xFF5
 10411                           prodh	equ	0xFF4
 10412                           prodl	equ	0xFF3
 10413                           postinc0	equ	0xFEE
 10414                           wreg	equ	0xFE8
 10415                           indf2	equ	0xFDF
 10416                           fsr2h	equ	0xFDA
 10417                           fsr2l	equ	0xFD9
 10418                           status	equ	0xFD8
 10419                           
 10420 ;; *************** function _DATAEE_WriteByte *****************
 10421 ;; Defined at:
 10422 ;;		line 169 in file "mcc_generated_files/memory.c"
 10423 ;; Parameters:    Size  Location     Type
 10424 ;;  bAdd            2   18[COMRAM] unsigned int 
 10425 ;;  bData           1   20[COMRAM] unsigned char 
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;  GIEBitValue     1   21[COMRAM] unsigned char 
 10428 ;; Return value:  Size  Location     Type
 10429 ;;                  1    wreg      void 
 10430 ;; Registers used:
 10431 ;;		wreg, status,2, status,0
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10437 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10440 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10441 ;;Total ram usage:        4 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    2
 10444 ;; This function calls:
 10445 ;;		Nothing
 10446 ;; This function is called by:
 10447 ;;		_displ_sens
 10448 ;;		_Write_NVstore
 10449 ;;		_credit_add
 10450 ;;		_credit_subtract
 10451 ;;		_Update_Hopcoin
 10452 ;;		_Clear_cred
 10453 ;;		_set_price
 10454 ;;		_save_notes
 10455 ;; This function uses a non-reentrant model
 10456 ;;
 10457                           
 10458                           	psect	text68
 10459  011542                     __ptext68:
 10460                           	opt stack 0
 10461  011542                     _DATAEE_WriteByte:
 10462                           	opt stack 24
 10463                           
 10464                           ;memory.c: 171: uint8_t GIEBitValue = INTCONbits.GIE;
 10465                           
 10466                           ;incstack = 0
 10467  011542  0E00               	movlw	0
 10468  011544  BEF2               	btfsc	intcon,7,c	;volatile
 10469  011546  0E01               	movlw	1
 10470  011548  6E20               	movwf	DATAEE_WriteByte@GIEBitValue,c
 10471                           
 10472                           ;memory.c: 173: NVMADRH = ((bAdd >> 8) & 0x03);
 10473  01154A  501E               	movf	DATAEE_WriteByte@bAdd+1,w,c
 10474  01154C  0B03               	andlw	3
 10475  01154E  6E7F               	movwf	3967,c	;volatile
 10476                           
 10477                           ;memory.c: 174: NVMADRL = (bAdd & 0xFF);
 10478  011550  C01D  FF7E         	movff	DATAEE_WriteByte@bAdd,3966	;volatile
 10479                           
 10480                           ;memory.c: 175: NVMDAT = bData;
 10481  011554  C01F  FF80         	movff	DATAEE_WriteByte@bData,3968	;volatile
 10482                           
 10483                           ;memory.c: 176: NVMCON1bits.NVMREG = 0;
 10484  011558  0E3F               	movlw	-193
 10485  01155A  1681               	andwf	3969,f,c	;volsfr
 10486                           
 10487                           ;memory.c: 177: NVMCON1bits.WREN = 1;
 10488  01155C  8481               	bsf	3969,2,c	;volsfr
 10489                           
 10490                           ;memory.c: 178: INTCONbits.GIE = 0;
 10491  01155E  9EF2               	bcf	intcon,7,c	;volatile
 10492                           
 10493                           ;memory.c: 179: NVMCON2 = 0x55;
 10494  011560  0E55               	movlw	85
 10495  011562  6E82               	movwf	3970,c	;volsfr
 10496                           
 10497                           ;memory.c: 180: NVMCON2 = 0xAA;
 10498  011564  0EAA               	movlw	170
 10499  011566  6E82               	movwf	3970,c	;volsfr
 10500                           
 10501                           ;memory.c: 181: NVMCON1bits.WR = 1;
 10502  011568  8281               	bsf	3969,1,c	;volsfr
 10503  01156A                     
 10504                           ;memory.c: 184: {
 10505  01156A  B281               	btfsc	3969,1,c	;volsfr
 10506  01156C  D7FE               	goto	l253
 10507                           
 10508                           ;memory.c: 185: }
 10509                           ;memory.c: 187: NVMCON1bits.WREN = 0;
 10510  01156E  9481               	bcf	3969,2,c	;volsfr
 10511                           
 10512                           ;memory.c: 188: INTCONbits.GIE = GIEBitValue;
 10513  011570  B020               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 10514  011572  D002               	bra	u2025
 10515  011574  9EF2               	bcf	intcon,7,c	;volatile
 10516  011576  D001               	bra	u2026
 10517  011578                     u2025:
 10518  011578  8EF2               	bsf	intcon,7,c	;volatile
 10519  01157A                     u2026:
 10520  01157A  0012               	return		;funcret
 10521  01157C                     __end_of_DATAEE_WriteByte:
 10522                           	opt stack 0
 10523                           tblptru	equ	0xFF8
 10524                           tblptrh	equ	0xFF7
 10525                           tblptrl	equ	0xFF6
 10526                           tablat	equ	0xFF5
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           intcon	equ	0xFF2
 10530                           postinc0	equ	0xFEE
 10531                           wreg	equ	0xFE8
 10532                           indf2	equ	0xFDF
 10533                           fsr2h	equ	0xFDA
 10534                           fsr2l	equ	0xFD9
 10535                           status	equ	0xFD8
 10536                           
 10537 ;; *************** function _Read_NVstore *****************
 10538 ;; Defined at:
 10539 ;;		line 71 in file "vend.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  storeadd        2   20[COMRAM] unsigned int 
 10542 ;;  storemem        2   22[COMRAM] PTR unsigned char 
 10543 ;;		 -> pnvcash(3), pvcash(2), 
 10544 ;;  storesize       1   24[COMRAM] unsigned char 
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  i               1   25[COMRAM] unsigned char 
 10547 ;; Return value:  Size  Location     Type
 10548 ;;                  1    wreg      void 
 10549 ;; Registers used:
 10550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : 0/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10556 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10559 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;Total ram usage:        6 bytes
 10561 ;; Hardware stack levels used:    1
 10562 ;; Hardware stack levels required when called:    3
 10563 ;; This function calls:
 10564 ;;		_DATAEE_ReadByte
 10565 ;; This function is called by:
 10566 ;;		_Update_cashaudit
 10567 ;; This function uses a non-reentrant model
 10568 ;;
 10569                           
 10570                           	psect	text69
 10571  0116F4                     __ptext69:
 10572                           	opt stack 0
 10573  0116F4                     _Read_NVstore:
 10574                           	opt stack 25
 10575                           
 10576                           ;vend.c: 73: uint8_t i = 0;
 10577                           
 10578                           ;incstack = 0
 10579  0116F4  0E00               	movlw	0
 10580  0116F6  6E24               	movwf	Read_NVstore@i,c
 10581                           
 10582                           ;vend.c: 74: while(i < storesize)
 10583  0116F8  D012               	goto	l1778
 10584  0116FA                     
 10585                           ;vend.c: 75: {
 10586                           ;vend.c: 76: storemem[i] = DATAEE_ReadByte(storeadd + i);
 10587  0116FA  5024               	movf	Read_NVstore@i,w,c
 10588  0116FC  0D01               	mullw	1
 10589  0116FE  50F3               	movf	prodl,w,c
 10590  011700  2421               	addwf	Read_NVstore@storemem,w,c
 10591  011702  6ED9               	movwf	fsr2l,c
 10592  011704  50F4               	movf	prodh,w,c
 10593  011706  2022               	addwfc	Read_NVstore@storemem+1,w,c
 10594  011708  6EDA               	movwf	fsr2h,c
 10595  01170A  5024               	movf	Read_NVstore@i,w,c
 10596  01170C  241F               	addwf	Read_NVstore@storeadd,w,c
 10597  01170E  6E1D               	movwf	DATAEE_ReadByte@bAdd,c
 10598  011710  0E00               	movlw	0
 10599  011712  2020               	addwfc	Read_NVstore@storeadd+1,w,c
 10600  011714  6E1E               	movwf	DATAEE_ReadByte@bAdd+1,c
 10601  011716  ECD0  F08C         	call	_DATAEE_ReadByte	;wreg free
 10602  01171A  6EDF               	movwf	indf2,c
 10603                           
 10604                           ;vend.c: 77: i++;
 10605  01171C  2A24               	incf	Read_NVstore@i,f,c
 10606  01171E                     l1778:
 10607  01171E  5023               	movf	Read_NVstore@storesize,w,c
 10608  011720  5C24               	subwf	Read_NVstore@i,w,c
 10609  011722  B0D8               	btfsc	status,0,c
 10610  011724  0012               	return	
 10611  011726  D7E9               	goto	l1779
 10612  011728                     __end_of_Read_NVstore:
 10613                           	opt stack 0
 10614                           tblptru	equ	0xFF8
 10615                           tblptrh	equ	0xFF7
 10616                           tblptrl	equ	0xFF6
 10617                           tablat	equ	0xFF5
 10618                           prodh	equ	0xFF4
 10619                           prodl	equ	0xFF3
 10620                           intcon	equ	0xFF2
 10621                           postinc0	equ	0xFEE
 10622                           wreg	equ	0xFE8
 10623                           indf2	equ	0xFDF
 10624                           fsr2h	equ	0xFDA
 10625                           fsr2l	equ	0xFD9
 10626                           status	equ	0xFD8
 10627                           
 10628 ;; *************** function _DATAEE_ReadByte *****************
 10629 ;; Defined at:
 10630 ;;		line 191 in file "mcc_generated_files/memory.c"
 10631 ;; Parameters:    Size  Location     Type
 10632 ;;  bAdd            2   18[COMRAM] unsigned int 
 10633 ;; Auto vars:     Size  Location     Type
 10634 ;;		None
 10635 ;; Return value:  Size  Location     Type
 10636 ;;                  1    wreg      unsigned char 
 10637 ;; Registers used:
 10638 ;;		wreg, status,2, status,0
 10639 ;; Tracked objects:
 10640 ;;		On entry : 0/0
 10641 ;;		On exit  : 0/0
 10642 ;;		Unchanged: 0/0
 10643 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10647 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;Total ram usage:        2 bytes
 10649 ;; Hardware stack levels used:    1
 10650 ;; Hardware stack levels required when called:    2
 10651 ;; This function calls:
 10652 ;;		Nothing
 10653 ;; This function is called by:
 10654 ;;		_Init_vendmem
 10655 ;;		_vend_init
 10656 ;;		_Read_NVstore
 10657 ;;		_credit_add
 10658 ;;		_credit_subtract
 10659 ;;		_credit_check
 10660 ;;		_Hopper_coin
 10661 ;;		_set_price
 10662 ;;		_mdb_init
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           	psect	text70
 10667  0119A0                     __ptext70:
 10668                           	opt stack 0
 10669  0119A0                     _DATAEE_ReadByte:
 10670                           	opt stack 26
 10671                           
 10672                           ;memory.c: 193: NVMADRH = ((bAdd >> 8) & 0x03);
 10673                           
 10674                           ;incstack = 0
 10675  0119A0  501E               	movf	DATAEE_ReadByte@bAdd+1,w,c
 10676  0119A2  0B03               	andlw	3
 10677  0119A4  6E7F               	movwf	3967,c	;volatile
 10678                           
 10679                           ;memory.c: 194: NVMADRL = (bAdd & 0xFF);
 10680  0119A6  C01D  FF7E         	movff	DATAEE_ReadByte@bAdd,3966	;volatile
 10681                           
 10682                           ;memory.c: 195: NVMCON1bits.NVMREG = 0;
 10683  0119AA  0E3F               	movlw	-193
 10684  0119AC  1681               	andwf	3969,f,c	;volsfr
 10685                           
 10686                           ;memory.c: 196: NVMCON1bits.RD = 1;
 10687  0119AE  8081               	bsf	3969,0,c	;volsfr
 10688                           
 10689                           ;memory.c: 197: __nop();
 10690  0119B0  F000               	nop	
 10691                           
 10692                           ;memory.c: 198: __nop();
 10693  0119B2  F000               	nop	
 10694                           
 10695                           ;memory.c: 200: return (NVMDAT);
 10696  0119B4  5080               	movf	3968,w,c	;volatile
 10697  0119B6  0012               	return	
 10698  0119B8                     __end_of_DATAEE_ReadByte:
 10699                           	opt stack 0
 10700                           tblptru	equ	0xFF8
 10701                           tblptrh	equ	0xFF7
 10702                           tblptrl	equ	0xFF6
 10703                           tablat	equ	0xFF5
 10704                           prodh	equ	0xFF4
 10705                           prodl	equ	0xFF3
 10706                           intcon	equ	0xFF2
 10707                           postinc0	equ	0xFEE
 10708                           wreg	equ	0xFE8
 10709                           indf2	equ	0xFDF
 10710                           fsr2h	equ	0xFDA
 10711                           fsr2l	equ	0xFD9
 10712                           status	equ	0xFD8
 10713                           
 10714 ;; *************** function _SYSTEM_Initialize *****************
 10715 ;; Defined at:
 10716 ;;		line 116 in file "mcc_generated_files/mcc.c"
 10717 ;; Parameters:    Size  Location     Type
 10718 ;;		None
 10719 ;; Auto vars:     Size  Location     Type
 10720 ;;		None
 10721 ;; Return value:  Size  Location     Type
 10722 ;;                  1    wreg      void 
 10723 ;; Registers used:
 10724 ;;		wreg, status,2, status,0, cstack
 10725 ;; Tracked objects:
 10726 ;;		On entry : 0/0
 10727 ;;		On exit  : 0/0
 10728 ;;		Unchanged: 0/0
 10729 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10734 ;;Total ram usage:        0 bytes
 10735 ;; Hardware stack levels used:    1
 10736 ;; Hardware stack levels required when called:    3
 10737 ;; This function calls:
 10738 ;;		_CMP1_Initialize
 10739 ;;		_DAC1_Initialize
 10740 ;;		_EUSART1_Initialize
 10741 ;;		_EUSART2_Initialize
 10742 ;;		_INTERRUPT_Initialize
 10743 ;;		_OSCILLATOR_Initialize
 10744 ;;		_PIN_MANAGER_Initialize
 10745 ;;		_PMD_Initialize
 10746 ;;		_TMR0_Initialize
 10747 ;;		_TMR1_Initialize
 10748 ;;		_TMR3_Initialize
 10749 ;;		_TMR5_Initialize
 10750 ;; This function is called by:
 10751 ;;		_main
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text71
 10756  0117BE                     __ptext71:
 10757                           	opt stack 0
 10758  0117BE                     _SYSTEM_Initialize:
 10759                           	opt stack 27
 10760                           
 10761                           ;mcc.c: 118: INTERRUPT_Initialize();
 10762                           
 10763                           ;incstack = 0
 10764  0117BE  EC5F  F08D         	call	_INTERRUPT_Initialize	;wreg free
 10765                           
 10766                           ;mcc.c: 119: PMD_Initialize();
 10767  0117C2  ECB6  F08C         	call	_PMD_Initialize	;wreg free
 10768                           
 10769                           ;mcc.c: 120: PIN_MANAGER_Initialize();
 10770  0117C6  ECD2  F085         	call	_PIN_MANAGER_Initialize	;wreg free
 10771                           
 10772                           ;mcc.c: 121: OSCILLATOR_Initialize();
 10773  0117CA  ECDC  F08C         	call	_OSCILLATOR_Initialize	;wreg free
 10774                           
 10775                           ;mcc.c: 122: CMP1_Initialize();
 10776  0117CE  EC15  F08D         	call	_CMP1_Initialize	;wreg free
 10777                           
 10778                           ;mcc.c: 123: TMR3_Initialize();
 10779  0117D2  EC10  F08B         	call	_TMR3_Initialize	;wreg free
 10780                           
 10781                           ;mcc.c: 124: DAC1_Initialize();
 10782  0117D6  EC4D  F08D         	call	_DAC1_Initialize	;wreg free
 10783                           
 10784                           ;mcc.c: 125: TMR5_Initialize();
 10785  0117DA  ECF5  F08A         	call	_TMR5_Initialize	;wreg free
 10786                           
 10787                           ;mcc.c: 126: TMR1_Initialize();
 10788  0117DE  EC2B  F08B         	call	_TMR1_Initialize	;wreg free
 10789                           
 10790                           ;mcc.c: 127: TMR0_Initialize();
 10791  0117E2  EC27  F08C         	call	_TMR0_Initialize	;wreg free
 10792                           
 10793                           ;mcc.c: 128: EUSART1_Initialize();
 10794  0117E6  EC0A  F08D         	call	_EUSART1_Initialize	;wreg free
 10795                           
 10796                           ;mcc.c: 129: EUSART2_Initialize();
 10797  0117EA  ECE8  F08C         	call	_EUSART2_Initialize	;wreg free
 10798  0117EE  0012               	return		;funcret
 10799  0117F0                     __end_of_SYSTEM_Initialize:
 10800                           	opt stack 0
 10801                           tblptru	equ	0xFF8
 10802                           tblptrh	equ	0xFF7
 10803                           tblptrl	equ	0xFF6
 10804                           tablat	equ	0xFF5
 10805                           prodh	equ	0xFF4
 10806                           prodl	equ	0xFF3
 10807                           intcon	equ	0xFF2
 10808                           postinc0	equ	0xFEE
 10809                           wreg	equ	0xFE8
 10810                           indf2	equ	0xFDF
 10811                           fsr2h	equ	0xFDA
 10812                           fsr2l	equ	0xFD9
 10813                           status	equ	0xFD8
 10814                           
 10815 ;; *************** function _TMR5_Initialize *****************
 10816 ;; Defined at:
 10817 ;;		line 62 in file "mcc_generated_files/tmr5.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;		None
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;		None
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  1    wreg      void 
 10824 ;; Registers used:
 10825 ;;		wreg, status,2, status,0
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10835 ;;Total ram usage:        2 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; Hardware stack levels required when called:    2
 10838 ;; This function calls:
 10839 ;;		Nothing
 10840 ;; This function is called by:
 10841 ;;		_SYSTEM_Initialize
 10842 ;;		_mdb_unlock
 10843 ;; This function uses a non-reentrant model
 10844 ;;
 10845                           
 10846                           	psect	text72
 10847  0115EA                     __ptext72:
 10848                           	opt stack 0
 10849  0115EA                     _TMR5_Initialize:
 10850                           	opt stack 26
 10851                           
 10852                           ;tmr5.c: 67: T5GCON = 0x00;
 10853                           
 10854                           ;incstack = 0
 10855  0115EA  0E00               	movlw	0
 10856  0115EC  6EC4               	movwf	4036,c	;volatile
 10857                           
 10858                           ;tmr5.c: 70: T5GATE = 0x00;
 10859  0115EE  0E00               	movlw	0
 10860  0115F0  6EC5               	movwf	4037,c	;volatile
 10861                           
 10862                           ;tmr5.c: 73: T5CLK = 0x04;
 10863  0115F2  0E04               	movlw	4
 10864  0115F4  6EC6               	movwf	4038,c	;volatile
 10865                           
 10866                           ;tmr5.c: 76: TMR5H = 0xE1;
 10867  0115F6  0EE1               	movlw	225
 10868  0115F8  6EC2               	movwf	4034,c	;volatile
 10869                           
 10870                           ;tmr5.c: 79: TMR5L = 0xBA;
 10871  0115FA  0EBA               	movlw	186
 10872  0115FC  6EC1               	movwf	4033,c	;volatile
 10873                           
 10874                           ;tmr5.c: 82: timer5ReloadVal=(uint16_t)((TMR5H << 8) | TMR5L);
 10875  0115FE  50C1               	movf	4033,w,c	;volatile
 10876  011600  CFC2 F01D          	movff	4034,??_TMR5_Initialize	;volatile
 10877  011604  6A1E               	clrf	(??_TMR5_Initialize+1)& (0+255),c
 10878  011606  C01D  F01E         	movff	??_TMR5_Initialize,??_TMR5_Initialize+1
 10879  01160A  6A1D               	clrf	??_TMR5_Initialize,c
 10880  01160C  101D               	iorwf	??_TMR5_Initialize,w,c
 10881  01160E  0100               	movlb	0	; () banked
 10882  011610  6FAC               	movwf	_timer5ReloadVal& (0+255),b	;volatile
 10883  011612  501E               	movf	??_TMR5_Initialize+1,w,c
 10884  011614  6FAD               	movwf	(_timer5ReloadVal+1)& (0+255),b	;volatile
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;tmr5.c: 85: PIR4bits.TMR5IF = 0;
 10888  011616  010E               	movlb	14	; () banked
 10889  011618  99CE               	bcf	206,4,b	;volatile
 10890                           
 10891                           ; BSR set to: 14
 10892                           ;tmr5.c: 88: T5CON = 0x01;
 10893  01161A  0E01               	movlw	1
 10894  01161C  6EC3               	movwf	4035,c	;volatile
 10895                           
 10896                           ; BSR set to: 14
 10897  01161E  0012               	return		;funcret
 10898  011620                     __end_of_TMR5_Initialize:
 10899                           	opt stack 0
 10900                           tblptru	equ	0xFF8
 10901                           tblptrh	equ	0xFF7
 10902                           tblptrl	equ	0xFF6
 10903                           tablat	equ	0xFF5
 10904                           prodh	equ	0xFF4
 10905                           prodl	equ	0xFF3
 10906                           intcon	equ	0xFF2
 10907                           postinc0	equ	0xFEE
 10908                           wreg	equ	0xFE8
 10909                           indf2	equ	0xFDF
 10910                           fsr2h	equ	0xFDA
 10911                           fsr2l	equ	0xFD9
 10912                           status	equ	0xFD8
 10913                           
 10914 ;; *************** function _TMR3_Initialize *****************
 10915 ;; Defined at:
 10916 ;;		line 62 in file "mcc_generated_files/tmr3.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;		None
 10919 ;; Auto vars:     Size  Location     Type
 10920 ;;		None
 10921 ;; Return value:  Size  Location     Type
 10922 ;;                  1    wreg      void 
 10923 ;; Registers used:
 10924 ;;		wreg, status,2, status,0
 10925 ;; Tracked objects:
 10926 ;;		On entry : 0/0
 10927 ;;		On exit  : 0/0
 10928 ;;		Unchanged: 0/0
 10929 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 10930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10932 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;Total ram usage:        2 bytes
 10935 ;; Hardware stack levels used:    1
 10936 ;; Hardware stack levels required when called:    2
 10937 ;; This function calls:
 10938 ;;		Nothing
 10939 ;; This function is called by:
 10940 ;;		_SYSTEM_Initialize
 10941 ;;		_mdb_poll
 10942 ;;		_mdb_unlock
 10943 ;;		_cctalk_comm
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text73
 10948  011620                     __ptext73:
 10949                           	opt stack 0
 10950  011620                     _TMR3_Initialize:
 10951                           	opt stack 24
 10952                           
 10953                           ;tmr3.c: 67: T3GCON = 0x00;
 10954                           
 10955                           ; BSR set to: 14
 10956                           ;incstack = 0
 10957  011620  0E00               	movlw	0
 10958  011622  6ECA               	movwf	4042,c	;volatile
 10959                           
 10960                           ;tmr3.c: 70: T3GATE = 0x00;
 10961  011624  0E00               	movlw	0
 10962  011626  6ECB               	movwf	4043,c	;volatile
 10963                           
 10964                           ;tmr3.c: 73: T3CLK = 0x05;
 10965  011628  0E05               	movlw	5
 10966  01162A  6ECC               	movwf	4044,c	;volatile
 10967                           
 10968                           ;tmr3.c: 76: TMR3H = 0x9E;
 10969  01162C  0E9E               	movlw	158
 10970  01162E  6EC8               	movwf	4040,c	;volatile
 10971                           
 10972                           ;tmr3.c: 79: TMR3L = 0x58;
 10973  011630  0E58               	movlw	88
 10974  011632  6EC7               	movwf	4039,c	;volatile
 10975                           
 10976                           ;tmr3.c: 82: timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
 10977  011634  50C7               	movf	4039,w,c	;volatile
 10978  011636  CFC8 F01D          	movff	4040,??_TMR3_Initialize	;volatile
 10979  01163A  6A1E               	clrf	(??_TMR3_Initialize+1)& (0+255),c
 10980  01163C  C01D  F01E         	movff	??_TMR3_Initialize,??_TMR3_Initialize+1
 10981  011640  6A1D               	clrf	??_TMR3_Initialize,c
 10982  011642  101D               	iorwf	??_TMR3_Initialize,w,c
 10983  011644  0100               	movlb	0	; () banked
 10984  011646  6FAE               	movwf	_timer3ReloadVal& (0+255),b	;volatile
 10985  011648  501E               	movf	??_TMR3_Initialize+1,w,c
 10986  01164A  6FAF               	movwf	(_timer3ReloadVal+1)& (0+255),b	;volatile
 10987                           
 10988                           ; BSR set to: 0
 10989                           ;tmr3.c: 85: PIR4bits.TMR3IF = 0;
 10990  01164C  010E               	movlb	14	; () banked
 10991  01164E  95CE               	bcf	206,2,b	;volatile
 10992                           
 10993                           ; BSR set to: 14
 10994                           ;tmr3.c: 88: T3CON = 0x01;
 10995  011650  0E01               	movlw	1
 10996  011652  6EC9               	movwf	4041,c	;volatile
 10997                           
 10998                           ; BSR set to: 14
 10999  011654  0012               	return		;funcret
 11000  011656                     __end_of_TMR3_Initialize:
 11001                           	opt stack 0
 11002                           tblptru	equ	0xFF8
 11003                           tblptrh	equ	0xFF7
 11004                           tblptrl	equ	0xFF6
 11005                           tablat	equ	0xFF5
 11006                           prodh	equ	0xFF4
 11007                           prodl	equ	0xFF3
 11008                           intcon	equ	0xFF2
 11009                           postinc0	equ	0xFEE
 11010                           wreg	equ	0xFE8
 11011                           indf2	equ	0xFDF
 11012                           fsr2h	equ	0xFDA
 11013                           fsr2l	equ	0xFD9
 11014                           status	equ	0xFD8
 11015                           
 11016 ;; *************** function _TMR1_Initialize *****************
 11017 ;; Defined at:
 11018 ;;		line 62 in file "mcc_generated_files/tmr1.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;		None
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;		None
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  1    wreg      void 
 11025 ;; Registers used:
 11026 ;;		wreg, status,2, status,0
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11034 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;Total ram usage:        2 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    2
 11039 ;; This function calls:
 11040 ;;		Nothing
 11041 ;; This function is called by:
 11042 ;;		_SYSTEM_Initialize
 11043 ;;		_mdb_comm
 11044 ;;		_mdb_unlock
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           	psect	text74
 11049  011656                     __ptext74:
 11050                           	opt stack 0
 11051  011656                     _TMR1_Initialize:
 11052                           	opt stack 24
 11053                           
 11054                           ;tmr1.c: 67: T1GCON = 0x00;
 11055                           
 11056                           ; BSR set to: 14
 11057                           ;incstack = 0
 11058  011656  0E00               	movlw	0
 11059  011658  6ED0               	movwf	4048,c	;volatile
 11060                           
 11061                           ;tmr1.c: 70: T1GATE = 0x00;
 11062  01165A  0E00               	movlw	0
 11063  01165C  6ED1               	movwf	4049,c	;volatile
 11064                           
 11065                           ;tmr1.c: 73: T1CLK = 0x05;
 11066  01165E  0E05               	movlw	5
 11067  011660  6ED2               	movwf	4050,c	;volatile
 11068                           
 11069                           ;tmr1.c: 76: TMR1H = 0xF6;
 11070  011662  0EF6               	movlw	246
 11071  011664  6ECE               	movwf	4046,c	;volatile
 11072                           
 11073                           ;tmr1.c: 79: TMR1L = 0x3C;
 11074  011666  0E3C               	movlw	60
 11075  011668  6ECD               	movwf	4045,c	;volatile
 11076                           
 11077                           ;tmr1.c: 82: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
 11078  01166A  50CD               	movf	4045,w,c	;volatile
 11079  01166C  CFCE F01D          	movff	4046,??_TMR1_Initialize	;volatile
 11080  011670  6A1E               	clrf	(??_TMR1_Initialize+1)& (0+255),c
 11081  011672  C01D  F01E         	movff	??_TMR1_Initialize,??_TMR1_Initialize+1
 11082  011676  6A1D               	clrf	??_TMR1_Initialize,c
 11083  011678  101D               	iorwf	??_TMR1_Initialize,w,c
 11084  01167A  0100               	movlb	0	; () banked
 11085  01167C  6FB0               	movwf	_timer1ReloadVal& (0+255),b	;volatile
 11086  01167E  501E               	movf	??_TMR1_Initialize+1,w,c
 11087  011680  6FB1               	movwf	(_timer1ReloadVal+1)& (0+255),b	;volatile
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;tmr1.c: 85: PIR4bits.TMR1IF = 0;
 11091  011682  010E               	movlb	14	; () banked
 11092  011684  91CE               	bcf	206,0,b	;volatile
 11093                           
 11094                           ; BSR set to: 14
 11095                           ;tmr1.c: 88: T1CON = 0x01;
 11096  011686  0E01               	movlw	1
 11097  011688  6ECF               	movwf	4047,c	;volatile
 11098                           
 11099                           ; BSR set to: 14
 11100  01168A  0012               	return		;funcret
 11101  01168C                     __end_of_TMR1_Initialize:
 11102                           	opt stack 0
 11103                           tblptru	equ	0xFF8
 11104                           tblptrh	equ	0xFF7
 11105                           tblptrl	equ	0xFF6
 11106                           tablat	equ	0xFF5
 11107                           prodh	equ	0xFF4
 11108                           prodl	equ	0xFF3
 11109                           intcon	equ	0xFF2
 11110                           postinc0	equ	0xFEE
 11111                           wreg	equ	0xFE8
 11112                           indf2	equ	0xFDF
 11113                           fsr2h	equ	0xFDA
 11114                           fsr2l	equ	0xFD9
 11115                           status	equ	0xFD8
 11116                           
 11117 ;; *************** function _TMR0_Initialize *****************
 11118 ;; Defined at:
 11119 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 11120 ;; Parameters:    Size  Location     Type
 11121 ;;		None
 11122 ;; Auto vars:     Size  Location     Type
 11123 ;;		None
 11124 ;; Return value:  Size  Location     Type
 11125 ;;                  1    wreg      void 
 11126 ;; Registers used:
 11127 ;;		wreg, status,2, status,0
 11128 ;; Tracked objects:
 11129 ;;		On entry : 0/0
 11130 ;;		On exit  : 0/0
 11131 ;;		Unchanged: 0/0
 11132 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11135 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11136 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;Total ram usage:        2 bytes
 11138 ;; Hardware stack levels used:    1
 11139 ;; Hardware stack levels required when called:    2
 11140 ;; This function calls:
 11141 ;;		Nothing
 11142 ;; This function is called by:
 11143 ;;		_SYSTEM_Initialize
 11144 ;; This function uses a non-reentrant model
 11145 ;;
 11146                           
 11147                           	psect	text75
 11148  01184E                     __ptext75:
 11149                           	opt stack 0
 11150  01184E                     _TMR0_Initialize:
 11151                           	opt stack 27
 11152                           
 11153                           ;tmr0.c: 69: T0CON1 = 0x82;
 11154                           
 11155                           ; BSR set to: 14
 11156                           ;incstack = 0
 11157  01184E  0E82               	movlw	130
 11158  011850  6ED6               	movwf	4054,c	;volatile
 11159                           
 11160                           ;tmr0.c: 72: TMR0H = 0xA5;
 11161  011852  0EA5               	movlw	165
 11162  011854  6ED4               	movwf	4052,c	;volatile
 11163                           
 11164                           ;tmr0.c: 75: TMR0L = 0x2E;
 11165  011856  0E2E               	movlw	46
 11166  011858  6ED3               	movwf	4051,c	;volatile
 11167                           
 11168                           ;tmr0.c: 78: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
 11169  01185A  50D3               	movf	4051,w,c	;volatile
 11170  01185C  CFD4 F01D          	movff	4052,??_TMR0_Initialize	;volatile
 11171  011860  6A1E               	clrf	(??_TMR0_Initialize+1)& (0+255),c
 11172  011862  C01D  F01E         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
 11173  011866  6A1D               	clrf	??_TMR0_Initialize,c
 11174  011868  101D               	iorwf	??_TMR0_Initialize,w,c
 11175  01186A  0100               	movlb	0	; () banked
 11176  01186C  6FAA               	movwf	_timer0ReloadVal16bit& (0+255),b	;volatile
 11177  01186E  501E               	movf	??_TMR0_Initialize+1,w,c
 11178  011870  6FAB               	movwf	(_timer0ReloadVal16bit+1)& (0+255),b	;volatile
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;tmr0.c: 81: PIR0bits.TMR0IF = 0;
 11182  011872  010E               	movlb	14	; () banked
 11183  011874  9BCA               	bcf	202,5,b	;volatile
 11184                           
 11185                           ; BSR set to: 14
 11186                           ;tmr0.c: 84: T0CON0 = 0x90;
 11187  011876  0E90               	movlw	144
 11188  011878  6ED5               	movwf	4053,c	;volatile
 11189                           
 11190                           ; BSR set to: 14
 11191  01187A  0012               	return		;funcret
 11192  01187C                     __end_of_TMR0_Initialize:
 11193                           	opt stack 0
 11194                           tblptru	equ	0xFF8
 11195                           tblptrh	equ	0xFF7
 11196                           tblptrl	equ	0xFF6
 11197                           tablat	equ	0xFF5
 11198                           prodh	equ	0xFF4
 11199                           prodl	equ	0xFF3
 11200                           intcon	equ	0xFF2
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           indf2	equ	0xFDF
 11204                           fsr2h	equ	0xFDA
 11205                           fsr2l	equ	0xFD9
 11206                           status	equ	0xFD8
 11207                           
 11208 ;; *************** function _PMD_Initialize *****************
 11209 ;; Defined at:
 11210 ;;		line 146 in file "mcc_generated_files/mcc.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;		None
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;		None
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      void 
 11217 ;; Registers used:
 11218 ;;		wreg, status,2
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;Total ram usage:        0 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:    2
 11231 ;; This function calls:
 11232 ;;		Nothing
 11233 ;; This function is called by:
 11234 ;;		_SYSTEM_Initialize
 11235 ;; This function uses a non-reentrant model
 11236 ;;
 11237                           
 11238                           	psect	text76
 11239  01196C                     __ptext76:
 11240                           	opt stack 0
 11241  01196C                     _PMD_Initialize:
 11242                           	opt stack 27
 11243                           
 11244                           ;mcc.c: 149: PMD0 = 0x00;
 11245                           
 11246                           ; BSR set to: 14
 11247                           ;incstack = 0
 11248  01196C  0E00               	movlw	0
 11249  01196E  010E               	movlb	14	; () banked
 11250  011970  6FE1               	movwf	225,b	;volatile
 11251                           
 11252                           ;mcc.c: 151: PMD1 = 0x00;
 11253  011972  0E00               	movlw	0
 11254  011974  6FE2               	movwf	226,b	;volatile
 11255                           
 11256                           ;mcc.c: 153: PMD2 = 0x00;
 11257  011976  0E00               	movlw	0
 11258  011978  6FE3               	movwf	227,b	;volatile
 11259                           
 11260                           ;mcc.c: 155: PMD3 = 0x00;
 11261  01197A  0E00               	movlw	0
 11262  01197C  6FE4               	movwf	228,b	;volatile
 11263                           
 11264                           ;mcc.c: 157: PMD4 = 0x00;
 11265  01197E  0E00               	movlw	0
 11266  011980  6FE5               	movwf	229,b	;volatile
 11267                           
 11268                           ;mcc.c: 159: PMD5 = 0x00;
 11269  011982  0E00               	movlw	0
 11270  011984  6FE6               	movwf	230,b	;volatile
 11271                           
 11272                           ; BSR set to: 14
 11273  011986  0012               	return		;funcret
 11274  011988                     __end_of_PMD_Initialize:
 11275                           	opt stack 0
 11276                           tblptru	equ	0xFF8
 11277                           tblptrh	equ	0xFF7
 11278                           tblptrl	equ	0xFF6
 11279                           tablat	equ	0xFF5
 11280                           prodh	equ	0xFF4
 11281                           prodl	equ	0xFF3
 11282                           intcon	equ	0xFF2
 11283                           postinc0	equ	0xFEE
 11284                           wreg	equ	0xFE8
 11285                           indf2	equ	0xFDF
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function _PIN_MANAGER_Initialize *****************
 11291 ;; Defined at:
 11292 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;		None
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;  state           1   18[COMRAM] unsigned char 
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  1    wreg      void 
 11299 ;; Registers used:
 11300 ;;		wreg, status,2
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;Total ram usage:        1 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    2
 11313 ;; This function calls:
 11314 ;;		Nothing
 11315 ;; This function is called by:
 11316 ;;		_SYSTEM_Initialize
 11317 ;; This function uses a non-reentrant model
 11318 ;;
 11319                           
 11320                           	psect	text77
 11321  010BA4                     __ptext77:
 11322                           	opt stack 0
 11323  010BA4                     _PIN_MANAGER_Initialize:
 11324                           	opt stack 27
 11325                           
 11326                           ;pin_manager.c: 57: LATE = 0x00;
 11327                           
 11328                           ; BSR set to: 14
 11329                           ;incstack = 0
 11330  010BA4  0E00               	movlw	0
 11331  010BA6  6E87               	movwf	3975,c	;volatile
 11332                           
 11333                           ;pin_manager.c: 58: LATD = 0x00;
 11334  010BA8  0E00               	movlw	0
 11335  010BAA  6E86               	movwf	3974,c	;volatile
 11336                           
 11337                           ;pin_manager.c: 59: LATA = 0xC0;
 11338  010BAC  0EC0               	movlw	192
 11339  010BAE  6E83               	movwf	3971,c	;volatile
 11340                           
 11341                           ;pin_manager.c: 60: LATB = 0x00;
 11342  010BB0  0E00               	movlw	0
 11343  010BB2  6E84               	movwf	3972,c	;volatile
 11344                           
 11345                           ;pin_manager.c: 61: LATC = 0x40;
 11346  010BB4  0E40               	movlw	64
 11347  010BB6  6E85               	movwf	3973,c	;volatile
 11348                           
 11349                           ;pin_manager.c: 66: TRISE = 0x00;
 11350  010BB8  0E00               	movlw	0
 11351  010BBA  6E8C               	movwf	3980,c	;volatile
 11352                           
 11353                           ;pin_manager.c: 67: TRISA = 0x1F;
 11354  010BBC  0E1F               	movlw	31
 11355  010BBE  6E88               	movwf	3976,c	;volatile
 11356                           
 11357                           ;pin_manager.c: 68: TRISB = 0xD0;
 11358  010BC0  0ED0               	movlw	208
 11359  010BC2  6E89               	movwf	3977,c	;volatile
 11360                           
 11361                           ;pin_manager.c: 69: TRISC = 0x80;
 11362  010BC4  0E80               	movlw	128
 11363  010BC6  6E8A               	movwf	3978,c	;volatile
 11364                           
 11365                           ;pin_manager.c: 70: TRISD = 0x00;
 11366  010BC8  0E00               	movlw	0
 11367  010BCA  6E8B               	movwf	3979,c	;volatile
 11368                           
 11369                           ;pin_manager.c: 75: ANSELC = 0x00;
 11370  010BCC  0E00               	movlw	0
 11371  010BCE  010F               	movlb	15	; () banked
 11372  010BD0  6F21               	movwf	33,b	;volatile
 11373                           
 11374                           ;pin_manager.c: 76: ANSELB = 0xC0;
 11375  010BD2  0EC0               	movlw	192
 11376  010BD4  6F19               	movwf	25,b	;volatile
 11377                           
 11378                           ;pin_manager.c: 77: ANSELD = 0x00;
 11379  010BD6  0E00               	movlw	0
 11380  010BD8  6F26               	movwf	38,b	;volatile
 11381                           
 11382                           ;pin_manager.c: 78: ANSELE = 0x00;
 11383  010BDA  0E00               	movlw	0
 11384  010BDC  6F2E               	movwf	46,b	;volatile
 11385                           
 11386                           ;pin_manager.c: 79: ANSELA = 0x01;
 11387  010BDE  0E01               	movlw	1
 11388  010BE0  6F11               	movwf	17,b	;volatile
 11389                           
 11390                           ;pin_manager.c: 84: WPUD = 0x00;
 11391  010BE2  0E00               	movlw	0
 11392  010BE4  6F25               	movwf	37,b	;volatile
 11393                           
 11394                           ;pin_manager.c: 85: WPUE = 0x00;
 11395  010BE6  0E00               	movlw	0
 11396  010BE8  6F2D               	movwf	45,b	;volatile
 11397                           
 11398                           ;pin_manager.c: 86: WPUB = 0x00;
 11399  010BEA  0E00               	movlw	0
 11400  010BEC  6F18               	movwf	24,b	;volatile
 11401                           
 11402                           ;pin_manager.c: 87: WPUA = 0x00;
 11403  010BEE  0E00               	movlw	0
 11404  010BF0  6F10               	movwf	16,b	;volatile
 11405                           
 11406                           ;pin_manager.c: 88: WPUC = 0x00;
 11407  010BF2  0E00               	movlw	0
 11408  010BF4  6F20               	movwf	32,b	;volatile
 11409                           
 11410                           ;pin_manager.c: 93: ODCONE = 0x00;
 11411  010BF6  0E00               	movlw	0
 11412  010BF8  6F2C               	movwf	44,b	;volatile
 11413                           
 11414                           ;pin_manager.c: 94: ODCONA = 0x00;
 11415  010BFA  0E00               	movlw	0
 11416  010BFC  6F0F               	movwf	15,b	;volatile
 11417                           
 11418                           ;pin_manager.c: 95: ODCONB = 0x00;
 11419  010BFE  0E00               	movlw	0
 11420  010C00  6F17               	movwf	23,b	;volatile
 11421                           
 11422                           ;pin_manager.c: 96: ODCONC = 0x00;
 11423  010C02  0E00               	movlw	0
 11424  010C04  6F1F               	movwf	31,b	;volatile
 11425                           
 11426                           ;pin_manager.c: 97: ODCOND = 0x00;
 11427  010C06  0E00               	movlw	0
 11428  010C08  6F24               	movwf	36,b	;volatile
 11429                           
 11430                           ; BSR set to: 15
 11431                           ;pin_manager.c: 103: PIE0bits.IOCIE = 1;
 11432  010C0A  010E               	movlb	14	; () banked
 11433  010C0C  89C2               	bsf	194,4,b	;volatile
 11434                           
 11435                           ;pin_manager.c: 106: bool state = (unsigned char)GIE;
 11436  010C0E  0E00               	movlw	0
 11437  010C10  BEF2               	btfsc	intcon,7,c	;volatile
 11438  010C12  0E01               	movlw	1
 11439  010C14  6E1D               	movwf	PIN_MANAGER_Initialize@state,c
 11440                           
 11441                           ; BSR set to: 14
 11442                           ;pin_manager.c: 107: GIE = 0;
 11443  010C16  9EF2               	bcf	intcon,7,c	;volatile
 11444                           
 11445                           ;pin_manager.c: 108: PPSLOCK = 0x55;
 11446  010C18  0E55               	movlw	85
 11447  010C1A  6FA0               	movwf	160,b	;volsfr
 11448                           
 11449                           ;pin_manager.c: 109: PPSLOCK = 0xAA;
 11450  010C1C  0EAA               	movlw	170
 11451  010C1E  6FA0               	movwf	160,b	;volsfr
 11452                           
 11453                           ; BSR set to: 14
 11454                           ;pin_manager.c: 110: PPSLOCKbits.PPSLOCKED = 0x00;
 11455  010C20  91A0               	bcf	160,0,b	;volsfr
 11456                           
 11457                           ; BSR set to: 14
 11458                           ;pin_manager.c: 112: RX1PPSbits.RXPPS = 0x17;
 11459  010C22  81B5               	bsf	181,0,b	;volatile
 11460  010C24  83B5               	bsf	181,1,b	;volatile
 11461  010C26  85B5               	bsf	181,2,b	;volatile
 11462  010C28  97B5               	bcf	181,3,b	;volatile
 11463  010C2A  89B5               	bsf	181,4,b	;volatile
 11464                           
 11465                           ;pin_manager.c: 113: RC6PPS = 0x09;
 11466  010C2C  0E09               	movlw	9
 11467  010C2E  6FFD               	movwf	253,b	;volatile
 11468                           
 11469                           ;pin_manager.c: 114: RB5PPS = 0x0B;
 11470  010C30  0E0B               	movlw	11
 11471  010C32  6FF4               	movwf	244,b	;volatile
 11472                           
 11473                           ; BSR set to: 14
 11474                           ;pin_manager.c: 115: RX2PPSbits.RXPPS = 0x0C;
 11475  010C34  918D               	bcf	141,0,b	;volatile
 11476  010C36  938D               	bcf	141,1,b	;volatile
 11477  010C38  858D               	bsf	141,2,b	;volatile
 11478  010C3A  878D               	bsf	141,3,b	;volatile
 11479  010C3C  998D               	bcf	141,4,b	;volatile
 11480                           
 11481                           ;pin_manager.c: 117: PPSLOCK = 0x55;
 11482  010C3E  0E55               	movlw	85
 11483  010C40  6FA0               	movwf	160,b	;volsfr
 11484                           
 11485                           ;pin_manager.c: 118: PPSLOCK = 0xAA;
 11486  010C42  0EAA               	movlw	170
 11487  010C44  6FA0               	movwf	160,b	;volsfr
 11488                           
 11489                           ; BSR set to: 14
 11490                           ;pin_manager.c: 119: PPSLOCKbits.PPSLOCKED = 0x01;
 11491  010C46  81A0               	bsf	160,0,b	;volsfr
 11492                           
 11493                           ; BSR set to: 14
 11494                           ;pin_manager.c: 121: GIE = state;
 11495  010C48  A01D               	btfss	PIN_MANAGER_Initialize@state,0,c
 11496  010C4A  D002               	goto	u1560
 11497  010C4C  8EF2               	bsf	intcon,7,c	;volatile
 11498  010C4E  0012               	return	
 11499  010C50                     u1560:
 11500  010C50  9EF2               	bcf	intcon,7,c	;volatile
 11501  010C52  0012               	return		;funcret
 11502  010C54                     __end_of_PIN_MANAGER_Initialize:
 11503                           	opt stack 0
 11504                           tblptru	equ	0xFF8
 11505                           tblptrh	equ	0xFF7
 11506                           tblptrl	equ	0xFF6
 11507                           tablat	equ	0xFF5
 11508                           prodh	equ	0xFF4
 11509                           prodl	equ	0xFF3
 11510                           intcon	equ	0xFF2
 11511                           postinc0	equ	0xFEE
 11512                           wreg	equ	0xFE8
 11513                           indf2	equ	0xFDF
 11514                           fsr2h	equ	0xFDA
 11515                           fsr2l	equ	0xFD9
 11516                           status	equ	0xFD8
 11517                           
 11518 ;; *************** function _OSCILLATOR_Initialize *****************
 11519 ;; Defined at:
 11520 ;;		line 132 in file "mcc_generated_files/mcc.c"
 11521 ;; Parameters:    Size  Location     Type
 11522 ;;		None
 11523 ;; Auto vars:     Size  Location     Type
 11524 ;;		None
 11525 ;; Return value:  Size  Location     Type
 11526 ;;                  1    wreg      void 
 11527 ;; Registers used:
 11528 ;;		wreg, status,2
 11529 ;; Tracked objects:
 11530 ;;		On entry : 0/0
 11531 ;;		On exit  : 0/0
 11532 ;;		Unchanged: 0/0
 11533 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11538 ;;Total ram usage:        0 bytes
 11539 ;; Hardware stack levels used:    1
 11540 ;; Hardware stack levels required when called:    2
 11541 ;; This function calls:
 11542 ;;		Nothing
 11543 ;; This function is called by:
 11544 ;;		_SYSTEM_Initialize
 11545 ;; This function uses a non-reentrant model
 11546 ;;
 11547                           
 11548                           	psect	text78
 11549  0119B8                     __ptext78:
 11550                           	opt stack 0
 11551  0119B8                     _OSCILLATOR_Initialize:
 11552                           	opt stack 27
 11553                           
 11554                           ;mcc.c: 135: OSCCON1 = 0x60;
 11555                           
 11556                           ;incstack = 0
 11557  0119B8  0E60               	movlw	96
 11558  0119BA  010E               	movlb	14	; () banked
 11559  0119BC  6FD8               	movwf	216,b	;volatile
 11560                           
 11561                           ;mcc.c: 137: OSCCON3 = 0x00;
 11562  0119BE  0E00               	movlw	0
 11563  0119C0  6FDA               	movwf	218,b	;volatile
 11564                           
 11565                           ;mcc.c: 139: OSCEN = 0x00;
 11566  0119C2  0E00               	movlw	0
 11567  0119C4  6FDC               	movwf	220,b	;volatile
 11568                           
 11569                           ;mcc.c: 141: OSCFRQ = 0x04;
 11570  0119C6  0E04               	movlw	4
 11571  0119C8  6FDE               	movwf	222,b	;volatile
 11572                           
 11573                           ;mcc.c: 143: OSCTUNE = 0x00;
 11574  0119CA  0E00               	movlw	0
 11575  0119CC  6FDD               	movwf	221,b	;volatile
 11576                           
 11577                           ; BSR set to: 14
 11578  0119CE  0012               	return		;funcret
 11579  0119D0                     __end_of_OSCILLATOR_Initialize:
 11580                           	opt stack 0
 11581                           tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon	equ	0xFF2
 11588                           postinc0	equ	0xFEE
 11589                           wreg	equ	0xFE8
 11590                           indf2	equ	0xFDF
 11591                           fsr2h	equ	0xFDA
 11592                           fsr2l	equ	0xFD9
 11593                           status	equ	0xFD8
 11594                           
 11595 ;; *************** function _INTERRUPT_Initialize *****************
 11596 ;; Defined at:
 11597 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;		None
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;		None
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      void 
 11604 ;; Registers used:
 11605 ;;		None
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;Total ram usage:        0 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; Hardware stack levels required when called:    2
 11618 ;; This function calls:
 11619 ;;		Nothing
 11620 ;; This function is called by:
 11621 ;;		_SYSTEM_Initialize
 11622 ;; This function uses a non-reentrant model
 11623 ;;
 11624                           
 11625                           	psect	text79
 11626  011ABE                     __ptext79:
 11627                           	opt stack 0
 11628  011ABE                     _INTERRUPT_Initialize:
 11629                           	opt stack 27
 11630                           
 11631                           ;interrupt_manager.c: 54: INTCONbits.IPEN = 1;
 11632                           
 11633                           ; BSR set to: 14
 11634                           ;incstack = 0
 11635  011ABE  8AF2               	bsf	intcon,5,c	;volatile
 11636                           
 11637                           ;interrupt_manager.c: 59: IPR0bits.IOCIP = 1;
 11638  011AC0  010E               	movlb	14	; () banked
 11639  011AC2  89BA               	bsf	186,4,b	;volatile
 11640                           
 11641                           ; BSR set to: 14
 11642  011AC4  0012               	return		;funcret
 11643  011AC6                     __end_of_INTERRUPT_Initialize:
 11644                           	opt stack 0
 11645                           tblptru	equ	0xFF8
 11646                           tblptrh	equ	0xFF7
 11647                           tblptrl	equ	0xFF6
 11648                           tablat	equ	0xFF5
 11649                           prodh	equ	0xFF4
 11650                           prodl	equ	0xFF3
 11651                           intcon	equ	0xFF2
 11652                           postinc0	equ	0xFEE
 11653                           wreg	equ	0xFE8
 11654                           indf2	equ	0xFDF
 11655                           fsr2h	equ	0xFDA
 11656                           fsr2l	equ	0xFD9
 11657                           status	equ	0xFD8
 11658                           
 11659 ;; *************** function _EUSART2_Initialize *****************
 11660 ;; Defined at:
 11661 ;;		line 53 in file "mcc_generated_files/eusart2.c"
 11662 ;; Parameters:    Size  Location     Type
 11663 ;;		None
 11664 ;; Auto vars:     Size  Location     Type
 11665 ;;		None
 11666 ;; Return value:  Size  Location     Type
 11667 ;;                  1    wreg      void 
 11668 ;; Registers used:
 11669 ;;		wreg, status,2
 11670 ;; Tracked objects:
 11671 ;;		On entry : 0/0
 11672 ;;		On exit  : 0/0
 11673 ;;		Unchanged: 0/0
 11674 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11679 ;;Total ram usage:        0 bytes
 11680 ;; Hardware stack levels used:    1
 11681 ;; Hardware stack levels required when called:    2
 11682 ;; This function calls:
 11683 ;;		Nothing
 11684 ;; This function is called by:
 11685 ;;		_SYSTEM_Initialize
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           	psect	text80
 11690  0119D0                     __ptext80:
 11691                           	opt stack 0
 11692  0119D0                     _EUSART2_Initialize:
 11693                           	opt stack 27
 11694                           
 11695                           ;eusart2.c: 58: BAUD2CON = 0x08;
 11696                           
 11697                           ; BSR set to: 14
 11698                           ;incstack = 0
 11699  0119D0  0E08               	movlw	8
 11700  0119D2  010E               	movlb	14	; () banked
 11701  0119D4  6F9F               	movwf	159,b	;volatile
 11702                           
 11703                           ;eusart2.c: 61: RC2STA = 0x10;
 11704  0119D6  0E10               	movlw	16
 11705  0119D8  6F9D               	movwf	157,b	;volatile
 11706                           
 11707                           ;eusart2.c: 64: TX2STA = 0x04;
 11708  0119DA  0E04               	movlw	4
 11709  0119DC  6F9E               	movwf	158,b	;volatile
 11710                           
 11711                           ;eusart2.c: 67: SP2BRGL = 0x38;
 11712  0119DE  0E38               	movlw	56
 11713  0119E0  6F9B               	movwf	155,b	;volatile
 11714                           
 11715                           ;eusart2.c: 70: SP2BRGH = 0x01;
 11716  0119E2  0E01               	movlw	1
 11717  0119E4  6F9C               	movwf	156,b	;volatile
 11718                           
 11719                           ; BSR set to: 14
 11720  0119E6  0012               	return		;funcret
 11721  0119E8                     __end_of_EUSART2_Initialize:
 11722                           	opt stack 0
 11723                           tblptru	equ	0xFF8
 11724                           tblptrh	equ	0xFF7
 11725                           tblptrl	equ	0xFF6
 11726                           tablat	equ	0xFF5
 11727                           prodh	equ	0xFF4
 11728                           prodl	equ	0xFF3
 11729                           intcon	equ	0xFF2
 11730                           postinc0	equ	0xFEE
 11731                           wreg	equ	0xFE8
 11732                           indf2	equ	0xFDF
 11733                           fsr2h	equ	0xFDA
 11734                           fsr2l	equ	0xFD9
 11735                           status	equ	0xFD8
 11736                           
 11737 ;; *************** function _EUSART1_Initialize *****************
 11738 ;; Defined at:
 11739 ;;		line 53 in file "mcc_generated_files/eusart1.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;		None
 11742 ;; Auto vars:     Size  Location     Type
 11743 ;;		None
 11744 ;; Return value:  Size  Location     Type
 11745 ;;                  1    wreg      void 
 11746 ;; Registers used:
 11747 ;;		wreg, status,2
 11748 ;; Tracked objects:
 11749 ;;		On entry : 0/0
 11750 ;;		On exit  : 0/0
 11751 ;;		Unchanged: 0/0
 11752 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11757 ;;Total ram usage:        0 bytes
 11758 ;; Hardware stack levels used:    1
 11759 ;; Hardware stack levels required when called:    2
 11760 ;; This function calls:
 11761 ;;		Nothing
 11762 ;; This function is called by:
 11763 ;;		_SYSTEM_Initialize
 11764 ;; This function uses a non-reentrant model
 11765 ;;
 11766                           
 11767                           	psect	text81
 11768  011A14                     __ptext81:
 11769                           	opt stack 0
 11770  011A14                     _EUSART1_Initialize:
 11771                           	opt stack 27
 11772                           
 11773                           ;eusart1.c: 58: BAUD1CON = 0x08;
 11774                           
 11775                           ; BSR set to: 14
 11776                           ;incstack = 0
 11777  011A14  0E08               	movlw	8
 11778  011A16  6E9F               	movwf	3999,c	;volatile
 11779                           
 11780                           ;eusart1.c: 61: RC1STA = 0x90;
 11781  011A18  0E90               	movlw	144
 11782  011A1A  6E9D               	movwf	3997,c	;volatile
 11783                           
 11784                           ;eusart1.c: 64: TX1STA = 0xAC;
 11785  011A1C  0EAC               	movlw	172
 11786  011A1E  6E9E               	movwf	3998,c	;volatile
 11787                           
 11788                           ;eusart1.c: 67: SP1BRGL = 0x38;
 11789  011A20  0E38               	movlw	56
 11790  011A22  6E9B               	movwf	3995,c	;volatile
 11791                           
 11792                           ;eusart1.c: 70: SP1BRGH = 0x01;
 11793  011A24  0E01               	movlw	1
 11794  011A26  6E9C               	movwf	3996,c	;volatile
 11795  011A28  0012               	return		;funcret
 11796  011A2A                     __end_of_EUSART1_Initialize:
 11797                           	opt stack 0
 11798                           tblptru	equ	0xFF8
 11799                           tblptrh	equ	0xFF7
 11800                           tblptrl	equ	0xFF6
 11801                           tablat	equ	0xFF5
 11802                           prodh	equ	0xFF4
 11803                           prodl	equ	0xFF3
 11804                           intcon	equ	0xFF2
 11805                           postinc0	equ	0xFEE
 11806                           wreg	equ	0xFE8
 11807                           indf2	equ	0xFDF
 11808                           fsr2h	equ	0xFDA
 11809                           fsr2l	equ	0xFD9
 11810                           status	equ	0xFD8
 11811                           
 11812 ;; *************** function _DAC1_Initialize *****************
 11813 ;; Defined at:
 11814 ;;		line 57 in file "mcc_generated_files/dac1.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;		None
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;		None
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  1    wreg      void 
 11821 ;; Registers used:
 11822 ;;		wreg, status,2
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11832 ;;Total ram usage:        0 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:    2
 11835 ;; This function calls:
 11836 ;;		Nothing
 11837 ;; This function is called by:
 11838 ;;		_SYSTEM_Initialize
 11839 ;;		_mdb_unlock
 11840 ;; This function uses a non-reentrant model
 11841 ;;
 11842                           
 11843                           	psect	text82
 11844  011A9A                     __ptext82:
 11845                           	opt stack 0
 11846  011A9A                     _DAC1_Initialize:
 11847                           	opt stack 26
 11848                           
 11849                           ;dac1.c: 60: DAC1CON0 = 0x80;
 11850                           
 11851                           ;incstack = 0
 11852  011A9A  0E80               	movlw	128
 11853  011A9C  010F               	movlb	15	; () banked
 11854  011A9E  6F33               	movwf	51,b	;volatile
 11855                           
 11856                           ;dac1.c: 62: DAC1CON1 = 0x1C;
 11857  011AA0  0E1C               	movlw	28
 11858  011AA2  6F34               	movwf	52,b	;volatile
 11859                           
 11860                           ; BSR set to: 15
 11861  011AA4  0012               	return		;funcret
 11862  011AA6                     __end_of_DAC1_Initialize:
 11863                           	opt stack 0
 11864                           tblptru	equ	0xFF8
 11865                           tblptrh	equ	0xFF7
 11866                           tblptrl	equ	0xFF6
 11867                           tablat	equ	0xFF5
 11868                           prodh	equ	0xFF4
 11869                           prodl	equ	0xFF3
 11870                           intcon	equ	0xFF2
 11871                           postinc0	equ	0xFEE
 11872                           wreg	equ	0xFE8
 11873                           indf2	equ	0xFDF
 11874                           fsr2h	equ	0xFDA
 11875                           fsr2l	equ	0xFD9
 11876                           status	equ	0xFD8
 11877                           
 11878 ;; *************** function _CMP1_Initialize *****************
 11879 ;; Defined at:
 11880 ;;		line 57 in file "mcc_generated_files/cmp1.c"
 11881 ;; Parameters:    Size  Location     Type
 11882 ;;		None
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;		None
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  1    wreg      void 
 11887 ;; Registers used:
 11888 ;;		wreg, status,2
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;Total ram usage:        0 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:    2
 11901 ;; This function calls:
 11902 ;;		Nothing
 11903 ;; This function is called by:
 11904 ;;		_SYSTEM_Initialize
 11905 ;;		_mdb_unlock
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           	psect	text83
 11910  011A2A                     __ptext83:
 11911                           	opt stack 0
 11912  011A2A                     _CMP1_Initialize:
 11913                           	opt stack 26
 11914                           
 11915                           ;cmp1.c: 61: CM1CON0 = 0x90;
 11916                           
 11917                           ; BSR set to: 15
 11918                           ;incstack = 0
 11919  011A2A  0E90               	movlw	144
 11920  011A2C  010F               	movlb	15	; () banked
 11921  011A2E  6F39               	movwf	57,b	;volatile
 11922                           
 11923                           ;cmp1.c: 64: CM1CON1 = 0x00;
 11924  011A30  0E00               	movlw	0
 11925  011A32  6F3A               	movwf	58,b	;volatile
 11926                           
 11927                           ;cmp1.c: 67: CM1NCH = 0x00;
 11928  011A34  0E00               	movlw	0
 11929  011A36  6F3B               	movwf	59,b	;volatile
 11930                           
 11931                           ;cmp1.c: 70: CM1PCH = 0x05;
 11932  011A38  0E05               	movlw	5
 11933  011A3A  6F3C               	movwf	60,b	;volatile
 11934                           
 11935                           ; BSR set to: 15
 11936  011A3C  0012               	return		;funcret
 11937  011A3E                     __end_of_CMP1_Initialize:
 11938                           	opt stack 0
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           intcon	equ	0xFF2
 11946                           postinc0	equ	0xFEE
 11947                           wreg	equ	0xFE8
 11948                           indf2	equ	0xFDF
 11949                           fsr2h	equ	0xFDA
 11950                           fsr2l	equ	0xFD9
 11951                           status	equ	0xFD8
 11952                           
 11953 ;; *************** function _INTERRUPT_InterruptManagerHigh *****************
 11954 ;; Defined at:
 11955 ;;		line 64 in file "mcc_generated_files/interrupt_manager.c"
 11956 ;; Parameters:    Size  Location     Type
 11957 ;;		None
 11958 ;; Auto vars:     Size  Location     Type
 11959 ;;		None
 11960 ;; Return value:  Size  Location     Type
 11961 ;;                  1    wreg      void 
 11962 ;; Registers used:
 11963 ;;		cstack
 11964 ;; Tracked objects:
 11965 ;;		On entry : 0/0
 11966 ;;		On exit  : 0/0
 11967 ;;		Unchanged: 0/0
 11968 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 11969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11971 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11972 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11973 ;;Total ram usage:       18 bytes
 11974 ;; Hardware stack levels used:    1
 11975 ;; Hardware stack levels required when called:    1
 11976 ;; This function calls:
 11977 ;;		_PIN_MANAGER_IOC
 11978 ;; This function is called by:
 11979 ;;		Interrupt level 2
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           	psect	intcode
 11984  000008                     __pintcode:
 11985                           	opt stack 0
 11986  000008                     _INTERRUPT_InterruptManagerHigh:
 11987                           	opt stack 19
 11988                           
 11989                           ; BSR set to: 15
 11990                           ;incstack = 0
 11991  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11992  00000A  CFFA F00B          	movff	pclath,??_INTERRUPT_InterruptManagerHigh
 11993  00000E  CFFB F00C          	movff	pclatu,??_INTERRUPT_InterruptManagerHigh+1
 11994  000012  CFE9 F00D          	movff	fsr0l,??_INTERRUPT_InterruptManagerHigh+2
 11995  000016  CFEA F00E          	movff	fsr0h,??_INTERRUPT_InterruptManagerHigh+3
 11996  00001A  CFE1 F00F          	movff	fsr1l,??_INTERRUPT_InterruptManagerHigh+4
 11997  00001E  CFE2 F010          	movff	fsr1h,??_INTERRUPT_InterruptManagerHigh+5
 11998  000022  CFD9 F011          	movff	fsr2l,??_INTERRUPT_InterruptManagerHigh+6
 11999  000026  CFDA F012          	movff	fsr2h,??_INTERRUPT_InterruptManagerHigh+7
 12000  00002A  CFF3 F013          	movff	prodl,??_INTERRUPT_InterruptManagerHigh+8
 12001  00002E  CFF4 F014          	movff	prodh,??_INTERRUPT_InterruptManagerHigh+9
 12002  000032  CFF6 F015          	movff	tblptrl,??_INTERRUPT_InterruptManagerHigh+10
 12003  000036  CFF7 F016          	movff	tblptrh,??_INTERRUPT_InterruptManagerHigh+11
 12004  00003A  CFF8 F017          	movff	tblptru,??_INTERRUPT_InterruptManagerHigh+12
 12005  00003E  CFF5 F018          	movff	tablat,??_INTERRUPT_InterruptManagerHigh+13
 12006  000042  C04F  F019         	movff	btemp,??_INTERRUPT_InterruptManagerHigh+14
 12007  000046  C050  F01A         	movff	btemp+1,??_INTERRUPT_InterruptManagerHigh+15
 12008  00004A  C051  F01B         	movff	btemp+2,??_INTERRUPT_InterruptManagerHigh+16
 12009  00004E  C052  F01C         	movff	btemp+3,??_INTERRUPT_InterruptManagerHigh+17
 12010                           
 12011                           ;interrupt_manager.c: 67: if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 12012  000052  010E               	movlb	14	; () banked
 12013  000054  B9C2               	btfsc	194,4,b	;volatile
 12014                           
 12015                           ; BSR set to: 14
 12016  000056  A9CA               	btfss	202,4,b	;volatile
 12017  000058  D002               	goto	i2l197
 12018                           
 12019                           ; BSR set to: 14
 12020                           ;interrupt_manager.c: 68: {
 12021                           ;interrupt_manager.c: 69: PIN_MANAGER_IOC();
 12022  00005A  EC6F  F08D         	call	_PIN_MANAGER_IOC	;wreg free
 12023  00005E                     i2l197:
 12024                           
 12025                           ;interrupt_manager.c: 71: else
 12026                           ;interrupt_manager.c: 72: {
 12027  00005E  C01C  F052         	movff	??_INTERRUPT_InterruptManagerHigh+17,btemp+3
 12028  000062  C01B  F051         	movff	??_INTERRUPT_InterruptManagerHigh+16,btemp+2
 12029  000066  C01A  F050         	movff	??_INTERRUPT_InterruptManagerHigh+15,btemp+1
 12030  00006A  C019  F04F         	movff	??_INTERRUPT_InterruptManagerHigh+14,btemp
 12031  00006E  C018  FFF5         	movff	??_INTERRUPT_InterruptManagerHigh+13,tablat
 12032  000072  C017  FFF8         	movff	??_INTERRUPT_InterruptManagerHigh+12,tblptru
 12033  000076  C016  FFF7         	movff	??_INTERRUPT_InterruptManagerHigh+11,tblptrh
 12034  00007A  C015  FFF6         	movff	??_INTERRUPT_InterruptManagerHigh+10,tblptrl
 12035  00007E  C014  FFF4         	movff	??_INTERRUPT_InterruptManagerHigh+9,prodh
 12036  000082  C013  FFF3         	movff	??_INTERRUPT_InterruptManagerHigh+8,prodl
 12037  000086  C012  FFDA         	movff	??_INTERRUPT_InterruptManagerHigh+7,fsr2h
 12038  00008A  C011  FFD9         	movff	??_INTERRUPT_InterruptManagerHigh+6,fsr2l
 12039  00008E  C010  FFE2         	movff	??_INTERRUPT_InterruptManagerHigh+5,fsr1h
 12040  000092  C00F  FFE1         	movff	??_INTERRUPT_InterruptManagerHigh+4,fsr1l
 12041  000096  C00E  FFEA         	movff	??_INTERRUPT_InterruptManagerHigh+3,fsr0h
 12042  00009A  C00D  FFE9         	movff	??_INTERRUPT_InterruptManagerHigh+2,fsr0l
 12043  00009E  C00C  FFFB         	movff	??_INTERRUPT_InterruptManagerHigh+1,pclatu
 12044  0000A2  C00B  FFFA         	movff	??_INTERRUPT_InterruptManagerHigh,pclath
 12045  0000A6  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12046  0000A8  0011               	retfie		f
 12047  0000AA                     __end_of_INTERRUPT_InterruptManagerHigh:
 12048                           	opt stack 0
 12049                           pclatu	equ	0xFFB
 12050                           pclath	equ	0xFFA
 12051                           tblptru	equ	0xFF8
 12052                           tblptrh	equ	0xFF7
 12053                           tblptrl	equ	0xFF6
 12054                           tablat	equ	0xFF5
 12055                           prodh	equ	0xFF4
 12056                           prodl	equ	0xFF3
 12057                           intcon	equ	0xFF2
 12058                           postinc0	equ	0xFEE
 12059                           fsr0h	equ	0xFEA
 12060                           fsr0l	equ	0xFE9
 12061                           wreg	equ	0xFE8
 12062                           fsr1h	equ	0xFE2
 12063                           fsr1l	equ	0xFE1
 12064                           indf2	equ	0xFDF
 12065                           fsr2h	equ	0xFDA
 12066                           fsr2l	equ	0xFD9
 12067                           status	equ	0xFD8
 12068                           
 12069 ;; *************** function _PIN_MANAGER_IOC *****************
 12070 ;; Defined at:
 12071 ;;		line 124 in file "mcc_generated_files/pin_manager.c"
 12072 ;; Parameters:    Size  Location     Type
 12073 ;;		None
 12074 ;; Auto vars:     Size  Location     Type
 12075 ;;		None
 12076 ;; Return value:  Size  Location     Type
 12077 ;;                  1    wreg      void 
 12078 ;; Registers used:
 12079 ;;		None
 12080 ;; Tracked objects:
 12081 ;;		On entry : 0/0
 12082 ;;		On exit  : 0/0
 12083 ;;		Unchanged: 0/0
 12084 ;; Data sizes:    COMRAMh COMRAMl   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK1
      +0  BANK11  BANK12  BANK13  BANK14
 12085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;Total ram usage:        0 bytes
 12090 ;; Hardware stack levels used:    1
 12091 ;; This function calls:
 12092 ;;		Nothing
 12093 ;; This function is called by:
 12094 ;;		_INTERRUPT_InterruptManagerHigh
 12095 ;; This function uses a non-reentrant model
 12096 ;;
 12097                           
 12098                           	psect	text85
 12099  011ADE                     __ptext85:
 12100                           	opt stack 0
 12101  011ADE                     _PIN_MANAGER_IOC:
 12102                           	opt stack 19
 12103                           
 12104                           ;pin_manager.c: 128: PIR0bits.IOCIF = 0;
 12105                           
 12106                           ;incstack = 0
 12107  011ADE  010E               	movlb	14	; () banked
 12108  011AE0  99CA               	bcf	202,4,b	;volatile
 12109                           
 12110                           ; BSR set to: 14
 12111  011AE2  0012               	return		;funcret
 12112  011AE4                     __end_of_PIN_MANAGER_IOC:
 12113                           	opt stack 0
 12114                           pclatu	equ	0xFFB
 12115                           pclath	equ	0xFFA
 12116                           tblptru	equ	0xFF8
 12117                           tblptrh	equ	0xFF7
 12118                           tblptrl	equ	0xFF6
 12119                           tablat	equ	0xFF5
 12120                           prodh	equ	0xFF4
 12121                           prodl	equ	0xFF3
 12122                           intcon	equ	0xFF2
 12123                           postinc0	equ	0xFEE
 12124                           fsr0h	equ	0xFEA
 12125                           fsr0l	equ	0xFE9
 12126                           wreg	equ	0xFE8
 12127                           fsr1h	equ	0xFE2
 12128                           fsr1l	equ	0xFE1
 12129                           indf2	equ	0xFDF
 12130                           fsr2h	equ	0xFDA
 12131                           fsr2l	equ	0xFD9
 12132                           status	equ	0xFD8
 12133                           pclatu	equ	0xFFB
 12134                           pclath	equ	0xFFA
 12135                           tblptru	equ	0xFF8
 12136                           tblptrh	equ	0xFF7
 12137                           tblptrl	equ	0xFF6
 12138                           tablat	equ	0xFF5
 12139                           prodh	equ	0xFF4
 12140                           prodl	equ	0xFF3
 12141                           intcon	equ	0xFF2
 12142                           postinc0	equ	0xFEE
 12143                           fsr0h	equ	0xFEA
 12144                           fsr0l	equ	0xFE9
 12145                           wreg	equ	0xFE8
 12146                           fsr1h	equ	0xFE2
 12147                           fsr1l	equ	0xFE1
 12148                           indf2	equ	0xFDF
 12149                           fsr2h	equ	0xFDA
 12150                           fsr2l	equ	0xFD9
 12151                           status	equ	0xFD8
 12152                           
 12153                           	psect	rparam
 12154  0000                     pclatu	equ	0xFFB
 12155                           pclath	equ	0xFFA
 12156                           tblptru	equ	0xFF8
 12157                           tblptrh	equ	0xFF7
 12158                           tblptrl	equ	0xFF6
 12159                           tablat	equ	0xFF5
 12160                           prodh	equ	0xFF4
 12161                           prodl	equ	0xFF3
 12162                           intcon	equ	0xFF2
 12163                           postinc0	equ	0xFEE
 12164                           fsr0h	equ	0xFEA
 12165                           fsr0l	equ	0xFE9
 12166                           wreg	equ	0xFE8
 12167                           fsr1h	equ	0xFE2
 12168                           fsr1l	equ	0xFE1
 12169                           indf2	equ	0xFDF
 12170                           fsr2h	equ	0xFDA
 12171                           fsr2l	equ	0xFD9
 12172                           status	equ	0xFD8
 12173                           
 12174                           	psect	temp
 12175  00004F                     btemp:
 12176                           	opt stack 0
 12177  00004F                     	ds	1
 12178  0000                     int$flags	set	btemp
 12179  0000                     wtemp6	set	btemp+1
 12180                           pclatu	equ	0xFFB
 12181                           pclath	equ	0xFFA
 12182                           tblptru	equ	0xFF8
 12183                           tblptrh	equ	0xFF7
 12184                           tblptrl	equ	0xFF6
 12185                           tablat	equ	0xFF5
 12186                           prodh	equ	0xFF4
 12187                           prodl	equ	0xFF3
 12188                           intcon	equ	0xFF2
 12189                           postinc0	equ	0xFEE
 12190                           fsr0h	equ	0xFEA
 12191                           fsr0l	equ	0xFE9
 12192                           wreg	equ	0xFE8
 12193                           fsr1h	equ	0xFE2
 12194                           fsr1l	equ	0xFE1
 12195                           indf2	equ	0xFDF
 12196                           fsr2h	equ	0xFDA
 12197                           fsr2l	equ	0xFD9
 12198                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    874
    Data        1
    BSS         91
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAMh          85     33      67
    COMRAMl           1      0       1
    BANK0           160     16      82
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          136      0       0

Pointer List with Targets:

    Read_NVstore@storemem	PTR unsigned char  size(2) Largest target is 3
		 -> pnvcash(COMRAMh[3]), pvcash(COMRAMh[2]), 

    Write_NVstore@storemem	PTR unsigned char  size(2) Largest target is 3
		 -> pnvcash(COMRAMh[3]), pvcash(COMRAMh[2]), 

    Init_vendmem@chanlink	PTR unsigned char  size(2) Largest target is 1
		 -> chanlink1(BIGRAMl[1]), 

    lcd_string@lcdstring	PTR unsigned char  size(2) Largest target is 77
		 -> twohundredrand(CODE[8]), hundredrand(CODE[8]), fiftyrand(CODE[8]), twentyrand(CODE[8]), 
		 -> tenrand(CODE[9]), setnotes(CODE[69]), vendsetup(CODE[77]), pricesetm2(CODE[57]), 
		 -> pricesetmsg(CODE[18]), creditclr(CODE[16]), dacmsg(CODE[13]), sensmsg(CODE[11]), 
		 -> hoppcoin(CODE[51]), initnote(CODE[37]), inithop(CODE[20]), noteerr(CODE[28]), 
		 -> credits(CODE[13]), disabled(CODE[10]), enabled(CODE[10]), clrmsg(CODE[6]), 
		 -> onmsg(CODE[4]), offmsg(CODE[4]), servmsg(CODE[67]), inscoin(CODE[49]), 

    displ_note@notestring	PTR unsigned char  size(2) Largest target is 9
		 -> twohundredrand(CODE[8]), hundredrand(CODE[8]), fiftyrand(CODE[8]), twentyrand(CODE[8]), 
		 -> tenrand(CODE[9]), 


Critical Paths under _main in COMRAMh

    _vend_init->_lcd_string
    _mdb_init->_mdb_reset
    _mdb_security->_mdb_comm
    _mdb_reset->_mdb_comm
    _mdb_noten->_mdb_comm
    _cctalk_init->_cctalk_adpoll
    _cctalk_init->_cctalk_pinenter
    _cctalk_init->_cctalk_poll
    _cctalk_poll->_cctalk_comm
    _cctalk_pinenter->_cctalk_comm
    _cctalk_adpoll->_cctalk_comm
    _cctalk_comm->_TMR3_Initialize
    _cctalk_comm->_init_mdbdata
    _cctalk_comm->_mdb_transmit
    _Init_vendmem->_DATAEE_ReadByte
    _mdb_poll->_mdb_comm
    _mdb_comm->_TMR1_Initialize
    _mdb_comm->_init_mdbdata
    _mdb_comm->_mdb_transmit
    _mdb_transmit->_EUSART1_Write
    _lcd_init->_lcd_test
    _lcd_test->_lcd_writeC
    _set_notes->_enable_notes
    _enable_notes->_displ_nendis
    _save_notes->_DATAEE_WriteByte
    _displ_nendis->_lcd_string
    _displ_note->_lcd_string
    _set_price->_displ_price
    _displ_price->_displ_hex
    _mdb_unlock->_TMR1_Initialize
    _mdb_unlock->_TMR3_Initialize
    _mdb_unlock->_TMR5_Initialize
    _Vend_setup->_lcd_string
    _Sensor_set->_displ_sens
    _displ_sens->_displ_hex
    _Hopper_coin->_Update_Hopcoin
    _butindb->_butin
    _Update_Hopcoin->_displ_hex
    _Clear_cred->_lcd_string
    _displ_noteer->_lcd_string
    _displ_code->_lcd_writeC
    _displ_credit->_displ_hex
    _lcd_string->_lcd_writeC
    _displ_hex->___ltdiv
    _lcd_writeC->_lcd_dispadd
    _lcd_dispadd->_lcd_write
    _lcd_write->_read_busy
    _credit_check->_DATAEE_ReadByte
    _credit_subtract->_DATAEE_WriteByte
    _credit_add->_Update_cashaudit
    _Update_cashaudit->_Write_NVstore
    _Write_NVstore->_DATAEE_WriteByte
    _Read_NVstore->_DATAEE_ReadByte
    _SYSTEM_Initialize->_TMR0_Initialize
    _SYSTEM_Initialize->_TMR1_Initialize
    _SYSTEM_Initialize->_TMR3_Initialize
    _SYSTEM_Initialize->_TMR5_Initialize

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAMh

    None.

Critical Paths under _main in COMRAMl

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in COMRAMl

    None.

Critical Paths under _main in BANK0

    _price_set->_set_price
    _displ_price->_displ_hex
    _displ_sens->_displ_hex
    _Hopper_coin->_displ_hex
    _Update_Hopcoin->_displ_hex
    _displ_credit->_displ_hex

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManagerHigh in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  158437
               _CMP1_GetOutputStatus
                  _SYSTEM_Initialize
                         _credit_add
                    _credit_subtract
                       _displ_credit
                       _displ_noteer
                      _enter_service
                           _lcd_init
                         _lcd_string
                           _mdb_init
                           _mdb_poll
                          _vend_init
 ---------------------------------------------------------------------------------
 (1) _vend_init                                            0     0      0   17756
                     _DAC1_SetOutput
                    _DATAEE_ReadByte
                       _Init_vendmem
                        _cctalk_init
                       _credit_check
                         _lcd_string
                           _mdb_init
 ---------------------------------------------------------------------------------
 (2) _mdb_init                                             3     3      0    4928
                                             26 COMRAMh    3     3      0
                    _DATAEE_ReadByte
               _eusartmdb_Initialize
                           _mdb_comm
                          _mdb_noten
                          _mdb_reset
                       _mdb_security
 ---------------------------------------------------------------------------------
 (3) _mdb_security                                         0     0      0     983
                       _init_mdbdata
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _mdb_reset                                            3     3      0     924
                                             23 COMRAMh    3     3      0
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (3) _mdb_noten                                            0     0      0     983
                       _init_mdbdata
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (2) _cctalk_init                                          1     1      0    3201
                                             26 COMRAMh    1     1      0
                      _cctalk_adpoll
                          _cctalk_on
                    _cctalk_pinenter
                        _cctalk_poll
               _eusartmdb_Initialize
                             _mdb_on
 ---------------------------------------------------------------------------------
 (3) _eusartmdb_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _cctalk_poll                                          1     1      0    1037
                                             25 COMRAMh    1     1      0
                        _cctalk_comm
 ---------------------------------------------------------------------------------
 (3) _cctalk_pinenter                                      1     1      0    1127
                                             25 COMRAMh    1     1      0
                        _cctalk_comm
                       _init_mdbdata
 ---------------------------------------------------------------------------------
 (3) _cctalk_on                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _cctalk_adpoll                                        1     1      0    1037
                                             25 COMRAMh    1     1      0
                        _cctalk_comm
 ---------------------------------------------------------------------------------
 (4) _cctalk_comm                                          5     3      2    1036
                                             20 COMRAMh    5     3      2
                    _TMR3_Initialize
                        _cctalk_read
                       _init_mdbdata
                       _mdb_transmit
 ---------------------------------------------------------------------------------
 (5) _cctalk_read                                          1     1      0      24
                                             18 COMRAMh    1     1      0
                       _EUSART1_Read
                          _mdb_waitr
 ---------------------------------------------------------------------------------
 (2) _Init_vendmem                                         5     5      0    1309
                                             20 COMRAMh    5     5      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DAC1_SetOutput                                       1     1      0      22
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (1) _mdb_poll                                             1     1      0     894
                                             23 COMRAMh    1     1      0
                    _TMR3_Initialize
                           _mdb_comm
 ---------------------------------------------------------------------------------
 (4) _mdb_comm                                             3     2      1     893
                                             20 COMRAMh    3     2      1
                       _EUSART1_Read
                    _TMR1_Initialize
                       _init_mdbdata
                             _mdb_on
                       _mdb_transmit
                          _mdb_waitr
 ---------------------------------------------------------------------------------
 (5) _mdb_waitr                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _mdb_transmit                                         1     1      0      44
                                             19 COMRAMh    1     1      0
                      _EUSART1_Write
                          _mdb_waitx
 ---------------------------------------------------------------------------------
 (6) _mdb_waitx                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      22
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (5) _mdb_on                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _init_mdbdata                                         2     2      0      90
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     687
                                             26 COMRAMh    2     2      0
                         _lcd_clockE
                           _lcd_test
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_test                                             1     1      0     523
                                             25 COMRAMh    1     1      0
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (1) _enter_service                                        0     0      0  102000
                              _Audit
                         _Clear_cred
                        _Hopper_coin
                         _Sensor_set
                         _Vend_setup
                            _butindb
                         _lcd_string
                         _mdb_unlock
                          _price_set
                          _set_notes
 ---------------------------------------------------------------------------------
 (2) _set_notes                                            0     0      0   26864
                            _butindb
                         _displ_note
                       _enable_notes
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _enable_notes                                         1     1      0   14093
                                             32 COMRAMh    1     1      0
                            _butindb
                       _displ_nendis
                         _lcd_string
                         _save_notes
 ---------------------------------------------------------------------------------
 (4) _save_notes                                           0     0      0    1747
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (4) _displ_nendis                                         2     2      0    6077
                                             30 COMRAMh    2     2      0
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _displ_note                                           2     0      2    6657
                                             30 COMRAMh    2     0      2
                         _lcd_string
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _price_set                                            0     0      0   18261
                       _Read_Service
                            _butindb
                         _lcd_string
                          _set_price
 ---------------------------------------------------------------------------------
 (3) _set_price                                            4     4      0   12124
                                             12 BANK0      4     4      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                            _butindb
                        _displ_price
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _displ_price                                          1     1      0    2920
                                             31 COMRAMh    1     1      0
                          _displ_hex
                        _lcd_dispadd
                          _lcd_write
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _Read_Service                                         1     1      0      23
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (2) _mdb_unlock                                           1     1      0       0
                                             20 COMRAMh    1     1      0
                    _CMP1_Initialize
                    _DAC1_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _Vend_setup                                           0     0      0    6114
                       _Vend_timeset
                            _butindb
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _Vend_timeset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Sensor_set                                           1     1      0   16785
                                             12 BANK0      1     1      0
                            _butindb
                         _displ_sens
                         _lcd_string
 ---------------------------------------------------------------------------------
 (3) _displ_sens                                           2     1      1   10544
                                             31 COMRAMh    2     1      1
               _CMP1_GetOutputStatus
                   _DATAEE_WriteByte
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _CMP1_GetOutputStatus                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Hopper_coin                                          1     1      0   20103
                                             12 BANK0      1     1      0
                    _DATAEE_ReadByte
                     _Update_Hopcoin
                            _butindb
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (4) _butindb                                              4     4      0     102
                                             19 COMRAMh    4     4      0
                              _butin
 ---------------------------------------------------------------------------------
 (5) _butin                                                1     1      0       0
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (3) _Update_Hopcoin                                       2     1      1   10447
                                             31 COMRAMh    2     1      1
                   _DATAEE_WriteByte
                          _displ_hex
                        _lcd_dispadd
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Clear_cred                                           2     2      0    7759
                                             30 COMRAMh    2     2      0
                   _DATAEE_WriteByte
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _Audit                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _displ_noteer                                         0     0      0    6622
                         _displ_code
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _displ_code                                           3     3      0     610
                                             25 COMRAMh    3     3      0
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (1) _displ_credit                                         1     1      0    9260
                                             31 COMRAMh    1     1      0
                       _credit_check
                          _displ_hex
                         _lcd_string
 ---------------------------------------------------------------------------------
 (2) _lcd_string                                           5     2      3    6012
                                             25 COMRAMh    5     2      3
                        _lcd_dispadd
                          _lcd_write
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (5) _displ_hex                                           15    12      3    2072
                                             28 COMRAMh    3     0      3
                                              0 BANK0     12    12      0
                            ___ltdiv
                            ___ltmod
                         _lcd_writeC
 ---------------------------------------------------------------------------------
 (3) _lcd_writeC                                           1     1      0     424
                                             24 COMRAMh    1     1      0
                        _lcd_dispadd
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_dispadd                                          2     2      0     229
                                             22 COMRAMh    2     2      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (4) _lcd_write                                            2     2      0     164
                                             20 COMRAMh    2     2      0
                         _lcd_clockE
                          _read_busy
 ---------------------------------------------------------------------------------
 (5) _read_busy                                            2     2      0      68
                                             18 COMRAMh    2     2      0
                         _lcd_clockH
                         _lcd_clockL
 ---------------------------------------------------------------------------------
 (6) _lcd_clockL                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _lcd_clockH                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _lcd_clockE                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___ltmod                                              7     1      6     412
                                             18 COMRAMh    7     1      6
 ---------------------------------------------------------------------------------
 (6) ___ltdiv                                             10     4      6     421
                                             18 COMRAMh   10     4      6
 ---------------------------------------------------------------------------------
 (2) _credit_check                                         0     0      0    1142
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (1) _credit_subtract                                      1     1      0    2920
                                             22 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (1) _credit_add                                           1     1      0    7335
                                             29 COMRAMh    1     1      0
                    _DATAEE_ReadByte
                   _DATAEE_WriteByte
                   _Update_cashaudit
 ---------------------------------------------------------------------------------
 (2) _Update_cashaudit                                     1     1      0    4384
                                             28 COMRAMh    1     1      0
                       _Read_NVstore
                      _Write_NVstore
 ---------------------------------------------------------------------------------
 (3) _Write_NVstore                                        6     1      5    2448
                                             22 COMRAMh    6     1      5
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     4     1      3    1747
                                             18 COMRAMh    4     1      3
 ---------------------------------------------------------------------------------
 (3) _Read_NVstore                                         6     1      5    1874
                                             20 COMRAMh    6     1      5
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      2     0      2    1142
                                             18 COMRAMh    2     0      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                    _CMP1_Initialize
                    _DAC1_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR5_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _TMR3_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (5) _TMR1_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             18 COMRAMh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                             18 COMRAMh    1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DAC1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManagerHigh                     18    18      0       0
                                              0 COMRAMh   18    18      0
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CMP1_GetOutputStatus
   _SYSTEM_Initialize
     _CMP1_Initialize
     _DAC1_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _TMR0_Initialize
     _TMR1_Initialize
     _TMR3_Initialize
     _TMR5_Initialize
   _credit_add
     _DATAEE_ReadByte
     _DATAEE_WriteByte
     _Update_cashaudit
       _Read_NVstore
         _DATAEE_ReadByte
       _Write_NVstore
         _DATAEE_WriteByte
   _credit_subtract
     _DATAEE_ReadByte
     _DATAEE_WriteByte
   _displ_credit
     _credit_check
       _DATAEE_ReadByte
     _displ_hex
       ___ltdiv
       ___ltmod
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _displ_noteer
     _displ_code
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
   _enter_service
     _Audit
     _Clear_cred
       _DATAEE_WriteByte
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Hopper_coin
       _DATAEE_ReadByte
       _Update_Hopcoin
         _DATAEE_WriteByte
         _displ_hex
           ___ltdiv
           ___ltmod
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _butindb
         _butin
       _displ_hex
         ___ltdiv
         ___ltmod
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Sensor_set
       _butindb
         _butin
       _displ_sens
         _CMP1_GetOutputStatus
         _DATAEE_WriteByte
         _displ_hex
           ___ltdiv
           ___ltmod
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _Vend_setup
       _Vend_timeset
       _butindb
         _butin
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
     _butindb
       _butin
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _mdb_unlock
       _CMP1_Initialize
       _DAC1_Initialize
       _TMR1_Initialize
       _TMR3_Initialize
       _TMR5_Initialize
     _price_set
       _Read_Service
       _butindb
         _butin
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
       _set_price
         _DATAEE_ReadByte
         _DATAEE_WriteByte
         _butindb
           _butin
         _displ_price
           _displ_hex
             ___ltdiv
             ___ltmod
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
     _set_notes
       _butindb
         _butin
       _displ_note
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _enable_notes
         _butindb
           _butin
         _displ_nendis
           _lcd_string
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
             _lcd_writeC
               _lcd_dispadd
                 _lcd_write
                   _lcd_clockE
                   _read_busy
                     _lcd_clockH
                     _lcd_clockL
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
         _lcd_string
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
           _lcd_writeC
             _lcd_dispadd
               _lcd_write
                 _lcd_clockE
                 _read_busy
                   _lcd_clockH
                   _lcd_clockL
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
         _save_notes
           _DATAEE_WriteByte
       _lcd_string
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
         _lcd_writeC
           _lcd_dispadd
             _lcd_write
               _lcd_clockE
               _read_busy
                 _lcd_clockH
                 _lcd_clockL
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
   _lcd_init
     _lcd_clockE
     _lcd_test
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
   _lcd_string
     _lcd_dispadd
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
     _lcd_write
       _lcd_clockE
       _read_busy
         _lcd_clockH
         _lcd_clockL
     _lcd_writeC
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
   _mdb_init
     _DATAEE_ReadByte
     _eusartmdb_Initialize
     _mdb_comm
       _EUSART1_Read
       _TMR1_Initialize
       _init_mdbdata
       _mdb_on
       _mdb_transmit
         _EUSART1_Write
         _mdb_waitx
       _mdb_waitr
     _mdb_noten
       _init_mdbdata
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
     _mdb_reset
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
     _mdb_security
       _init_mdbdata
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
   _mdb_poll
     _TMR3_Initialize
     _mdb_comm
       _EUSART1_Read
       _TMR1_Initialize
       _init_mdbdata
       _mdb_on
       _mdb_transmit
         _EUSART1_Write
         _mdb_waitx
       _mdb_waitr
   _vend_init
     _DAC1_SetOutput
     _DATAEE_ReadByte
     _Init_vendmem
       _DATAEE_ReadByte
     _cctalk_init
       _cctalk_adpoll
         _cctalk_comm
           _TMR3_Initialize
           _cctalk_read
             _EUSART1_Read
             _mdb_waitr
           _init_mdbdata
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
       _cctalk_on
       _cctalk_pinenter
         _cctalk_comm
           _TMR3_Initialize
           _cctalk_read
             _EUSART1_Read
             _mdb_waitr
           _init_mdbdata
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
         _init_mdbdata
       _cctalk_poll
         _cctalk_comm
           _TMR3_Initialize
           _cctalk_read
             _EUSART1_Read
             _mdb_waitr
           _init_mdbdata
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
       _eusartmdb_Initialize
       _mdb_on
     _credit_check
       _DATAEE_ReadByte
     _lcd_string
       _lcd_dispadd
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
       _lcd_write
         _lcd_clockE
         _read_busy
           _lcd_clockH
           _lcd_clockL
       _lcd_writeC
         _lcd_dispadd
           _lcd_write
             _lcd_clockE
             _read_busy
               _lcd_clockH
               _lcd_clockL
         _lcd_write
           _lcd_clockE
           _read_busy
             _lcd_clockH
             _lcd_clockL
     _mdb_init
       _DATAEE_ReadByte
       _eusartmdb_Initialize
       _mdb_comm
         _EUSART1_Read
         _TMR1_Initialize
         _init_mdbdata
         _mdb_on
         _mdb_transmit
           _EUSART1_Write
           _mdb_waitx
         _mdb_waitr
       _mdb_noten
         _init_mdbdata
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
       _mdb_reset
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr
       _mdb_security
         _init_mdbdata
         _mdb_comm
           _EUSART1_Read
           _TMR1_Initialize
           _init_mdbdata
           _mdb_on
           _mdb_transmit
             _EUSART1_Write
             _mdb_waitx
           _mdb_waitr

 _INTERRUPT_InterruptManagerHigh (ROOT)
   _PIN_MANAGER_IOC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAMh            E7D      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      33        0.0%
BANK13             100      0       0      34        0.0%
BITBANK12          100      0       0      31        0.0%
BANK12             100      0       0      32        0.0%
BITBANK11          100      0       0      29        0.0%
BANK11             100      0       0      30        0.0%
BITBANK10          100      0       0      27        0.0%
BANK10             100      0       0      28        0.0%
BITBANK9           100      0       0      24        0.0%
BANK9              100      0       0      25        0.0%
BITBANK8           100      0       0      22        0.0%
BANK8              100      0       0      23        0.0%
BITBANK7           100      0       0      20        0.0%
BANK7              100      0       0      21        0.0%
BITBANK6           100      0       0      18        0.0%
BANK6              100      0       0      19        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      17        0.0%
BITBANK4           100      0       0      14        0.0%
BANK4              100      0       0      15        0.0%
BITBANK3           100      0       0      12        0.0%
BANK3              100      0       0      13        0.0%
BITBANK2           100      0       0      10        0.0%
BANK2              100      0       0      11        0.0%
BITBANK1           100      0       0       8        0.0%
BANK1              100      0       0       9        0.0%
BITBANK0            A0      0       0       6        0.0%
BANK0               A0     10      52       7       51.2%
BITBANK14           88      0       0      35        0.0%
BANK14              88      0       0      36        0.0%
COMRAMh             55     21      43       2       78.8%
BITCOMRAMh          55      0       0       0        0.0%
BIGRAMl              2      0       0      38        0.0%
BITCOMRAMl           1      0       0       1        0.0%
COMRAMl              1      0       1       3      100.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       4        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      96      26        0.0%
DATA                 0      0      96       5        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Tue Jan 16 15:08:51 2018

                       lcd_writeC@lcdata 0023                             ?_displ_price 000B  
                            __CFG_CP$OFF 000000                        ??_CMP1_Initialize 001D  
                          ?_displ_credit 0000                            ?_displ_nendis 000B  
                        lcd_write@lcdata 0020                            ?_displ_noteer 0000  
                            __CFG_LVP$ON 000000                                      LATE 000F87  
                        _DAC1_Initialize 1A9A                 __size_of_cctalk_pinenter 0034  
                                    l101 1A4C                                      l253 156A  
                                    l900 0D8C                                      l901 0D2E  
                                    l902 0D34                                      l903 0D3A  
                                    l904 0D40                                      l905 0D48  
                                    l906 0D4E                                      l907 0D54  
                                    l871 0984                                      l880 0A0C  
                                    l881 09F4                                      l874 09C4  
                                    l883 09FA                                      l875 09D6  
                                    l886 0A00                                      l878 0A30  
                                    l879 0A28                                      l888 0A06  
                                    l897 0D20                                      l898 0D5A  
                                    l899 0D28                                      _GIE 007F97  
                           __CFG_CPD$OFF 000000                          _timer1ReloadVal 00B0  
                __size_of_PMD_Initialize 001C                                      prod 000FF3  
                                    wreg 000FE8                         ??_Update_Hopcoin 002B  
                         _DAC1_SetOutput 1AA6                           ??_credit_check 001F  
                           _BAUD1CONbits 000F9F                             __CFG_ZCD$OFF 000000  
                          ?_mdb_security 0000                                     l1310 027C  
                                   l1311 0284                                     l1320 02FC  
                                   l1312 028C                                     l1321 0304  
                                   l1305 0294                                     l1330 0A4E  
                                   l1322 030C                                     l1306 0264  
                                   l1315 0314                                     l1307 02CA  
                                   l1332 0AD2                                     l1340 0B22  
                                   l1316 02E4                                     l1308 026C  
                                   l1333 0AB8                                     l1341 0B78  
                                   l1309 0274                                     l1350 1248  
                                   l1342 0B28                                     l1318 02EC  
                                   l1351 1206                                     l1319 02F4  
                                   l1352 125C                                     l1353 121C  
                                   l1329 0AAC                                     l1362 1798  
                                   l1354 1232                                     l2410 0186  
                                   l1339 0B1A                                     l2411 0154  
                        _timer3ReloadVal 00AE                                     l2420 01EC  
                                   l2421 01A8                                     l2413 015C  
                                   l2430 01D2                                     l2422 01B0  
                                   l2414 0164                                     l1287 10D2  
                                   l1295 1748                                     l2431 01D6  
                                   l2423 0240                                     l2415 016C  
                                   l1288 10E2                                     l1368 1A02  
                                   l2440 046C                                     l2432 01DA  
                                   l2424 01B4                                     l2416 0174  
                                   l2433 01DE                                     l2425 01B8  
                                   l2417 017C                                     l2370 062E  
                                   l2434 01E2                                     l2426 01C2  
                                   l2371 0566                                     l2355 18B2  
                                   l2443 04C2                                     l2435 01E6  
                                   l2427 01C6                                     l2363 0ECC  
                                   l2372 0602                                     l2452 053A  
                                   l2444 04F4                                     l2428 01CA  
                                   l2364 0EB2                                     l1813 070E  
                                   l2373 0572                                     l2445 04CA  
                                   l2429 01CE                                     l1830 0F4C  
                                   l1814 0690                                     l2390 1060  
                                   l2374 0628                                     l1815 06DA  
                                   l2391 1074                                     l2375 0588  
                                   l2439 049C                                     l1824 0F60  
                                   l1832 0F50                                     l1816 0698  
                                   l2376 059E                                     l1825 0F38  
                                   l1817 06EE                                     l2377 05B4  
                                   l1761 0EA6                                     l1818 06A6  
                                   l2386 1046                                     l2378 05CA  
                                   l5202 1A72                                     l1762 0E82  
                                   l3283 114E                                     l1835 0F5C  
                                   l1819 06B4                                     l1843 076C  
                                   l2387 109A                                     l2379 05E0  
                                   l1772 189A                                     l3284 1144  
                                   l1828 0F76                                     l1844 07C2  
                                   l1860 1016                                     l2388 104E  
                                   l1773 1882                                     l3293 1380  
                                   l1829 0F42                                     l1845 0774  
                                   l2389 10AE                                     l3294 1376  
                                   l1846 07D6                                     l1870 0108  
                                   l3287 1178                                     l1847 078A  
                                   l1871 005A                                     l1767 0E16  
                                   l3288 1184                                     l1848 07A0  
                                   l1880 14EC                                     l1872 011E  
                                   l3297 13A0                                     l1849 07E6  
                                   l1881 14FA                                     l1873 0090  
                                   l1865 0016                                     l1778 171E  
                                   l3298 13AC                                     l1882 14F4  
                                   l1874 00C8                                     l1866 000E  
                                   l1858 0FFA                                     l1779 16FA  
                                   l1787 12B2                                     l1883 1502  
                                   l1859 100C                                     l1869 0050  
                                   l2853 142E                                     l1798 176C  
                                   l2854 1418                                     l1799 1766  
                                   l5352 18AA                                     l2881 0442  
                                   l2874 03CC                                     l2875 039E  
                                   l2885 1962                                     l2886 1956  
                                   l2878 03F2                                     l2879 0412  
                                   l7144 0C60                                     u1300 04A2  
                                   u2025 1578                                     u2026 157A  
                                   u1330 04FE                                     u1315 04EC  
                                   u1317 04EE                                     _LATA 000F83  
                                   u2150 0F48                                     u1350 0508  
                                   _LATB 000F84                                     u1415 041C  
                                   _LATC 000F85                                     u2080 1A88  
                                   _LATD 000F86                                     u1417 041E  
                                   _LATE 000F87                                     u2330 0C80  
                                   u1365 0512                                     u1710 143C  
                                   u1367 0514                                     u1560 0C50  
                                   u2507 0C74                                     u2517 0C82  
                                   u2527 0CEC                                     u2537 07F2  
                                   u2547 177C                                     u2557 13C4  
                                   u2567 13E8                                     u2487 119C  
                                   u1960 1152                                     u2577 1302  
                                   u2497 141E                                     _PMD0 000EE1  
                                   _PMD1 000EE2                                     u1990 1384  
                                   _PMD2 000EE3                                     _PMD3 000EE4  
                                   _PMD4 000EE5                                     _PMD5 000EE6  
          __size_of_eusartmdb_Initialize 0016                                     _WPUA 000F10  
                                   _WPUB 000F18                                     _WPUC 000F20  
                                   _WPUD 000F25                                     _WPUE 000F2D  
                          _EUSART1_Write 1A70                            __CFG_FCMEN$ON 000000  
                                   _cash 0039                                     _dest 0094  
                                   _main 0978                                     _exit FD30  
                          ?_EUSART1_Read 000B                            ?_mdb_transmit 0000  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr2h 000FDA                                     fsr0l 000FE9  
                                   indf2 000FDF                                     fsr1l 000FE1  
                                   fsr2l 000FD9                                     btemp 004F  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 00AA                          _timer5ReloadVal 00AC  
                             _Clear_cred 12BA                          _TMR3_Initialize 1620  
                 __size_of_enter_service 0096                            __CFG_CSWEN$ON 000000  
                           ___param_bank 000000                            __CFG_SCANE$ON 000000  
                         ??_displ_credit 002A                __size_of_DATAEE_WriteByte 003A  
                __end_of_TMR0_Initialize 187C                           ??_displ_nendis 0029  
         __size_of_OSCILLATOR_Initialize 0018                           ??_displ_noteer 0029  
                          ?_Read_NVstore 001F            __end_of_OSCILLATOR_Initialize 19D0  
                                  ?_main 000B                            __CFG_WDTE$OFF 000000  
                                  _T1CLK 000FD2                                    _T1CON 000FCF  
                                  _T3CLK 000FCC                                    _LATA6 007C1E  
                                  _T3CON 000FC9                                    _LATA7 007C1F  
                                  _CMOUT 000F3D                                    _T5CLK 000FC6  
                                  _T5CON 000FC3                          __end_of___ltdiv 1192  
                         __CFG_DEBUG$OFF 000000                          __end_of___ltmod 13BA  
                 __end_of_DAC1_SetOutput 1AAE                                    i2l197 005E  
                                  _OSCEN 000EDC                   __size_of_Write_NVstore 0028  
                                  _TMR0H 000FD4                                    _TMR1H 000FCE  
                        __end_of_cc_poll FD72                                    _TMR0L 000FD3  
                                  _TMR1L 000FCD                                    _TMR3H 000FC8  
                                  _TMR3L 000FC7                                    _TMR5H 000FC2  
                                  _TMR5L 000FC1                                    _PORTA 000F8D  
                        __end_of_cc_test FD7D                                    _PORTD 000F90  
                        __end_of_cc_stop FD78                                    _TRISA 000F88  
                                  _TRISB 000F89                                    _TRISC 000F8A  
                                  _TRISD 000F8B                                    _TRISE 000F8C  
                          ?_Read_Service 000B                          __end_of_cashint FD69  
                        __end_of_cashinv FD6B                                    _Audit 1AE6  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                         __pidataCOMRAMh 1AE8                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                            __CFG_WRT4$OFF 000000  
                          __CFG_WRT5$OFF 000000                            __CFG_WRT6$OFF 000000  
                          __CFG_WRT7$OFF 000000                          __end_of_enabled FFC8  
                         __CFG_EBTR0$OFF 000000                        lcd_write@savelatd 001F  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                          __end_of_credclr FCBF  
                         __CFG_EBTR4$OFF 000000                          __end_of_credmem FD6D  
                         __CFG_EBTR5$OFF 000000                          __end_of_credits FFA9  
                         __CFG_EBTR6$OFF 000000                           __CFG_EBTR7$OFF 000000  
                        __end_of_dispclr FDA2                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                          __end_of_dispoff FD9B  
                          __CFG_WRTD$OFF 000000                            ??_Hopper_coin 002C  
                                  _bflag 0046                          _DATAEE_ReadByte 19A0  
                         __CFG_EBTRB$OFF 000000                           ??_mdb_security 0022  
                __end_of_PIN_MANAGER_IOC 1AE4                          __end_of_butindb 178C  
                        __end_of_dsphome FDA0                                    _line1 FD97  
                                  _line2 FD96                                    _line3 FD95  
                                  _line4 FD94                                    _count 004C  
                                  _butin 13BA                          __end_of_mastadd FD7F  
                        __end_of_hopcoin FD5B                          __end_of_inithop FF6D  
                                  _vcash 0090                          __end_of_inscoin FF18  
                                  _onmsg FFFB                       __CFG_MCLRE$EXTMCLR 000000  
                        __end_of_second1 FD71                           ?_EUSART1_Write 000B  
                __end_of_TMR1_Initialize 168C                            ?_Init_vendmem 000B  
                                  pclath 000FFA                                    tablat 000FF5  
                        __end_of_noteerr FF59                          __end_of_tenrand FFD1  
                        __end_of_sensmsg FFB4                          __end_of_sensval FD5F  
                        __end_of_servmsg FE7B                           ??_EUSART1_Read 001D  
                         ??_mdb_transmit 001E                                    status 000FD8  
                                  wtemp6 0050                    __end_of_cctalk_adpoll 194E  
                   __size_of_cctalk_comm 00FC                     __size_of_cctalk_init 0044  
                   __size_of_cctalk_read 001E                     __size_of_cctalk_poll 002E  
                        _TMR5_Initialize 15EA             __end_of_CMP1_GetOutputStatus 1A8C  
                        __initialization 15B4               __end_of_EUSART1_Initialize 1A2A  
                           __end_of_main 0A3A                  __end_of_DAC1_Initialize 1AA6  
                           __end_of_exit FD35                           ??_Read_NVstore 0024  
                                 ??_main 002C                            __activetblptr 000003  
                        ?_DAC1_SetOutput 000B                     __end_of_enable_notes 10B4  
                         ??_Read_Service 001D                              butindb@butt 0021  
                                 ?_Audit 0000                            _enter_service 0CFC  
             __end_of_EUSART2_Initialize 19E8                        ??_cctalk_pinenter 0024  
                                 ?_butin 0000                                   _CM1NCH 000F3B  
                                 _CM1PCH 000F3C                           ??_Init_vendmem 001F  
                                 _ANSELA 000F11                                   _ANSELB 000F19  
                                 _ANSELC 000F21                                   _ANSELD 000F26  
                                 _ANSELE 000F2E                                   _T0CON0 000FD5  
                                 _T0CON1 000FD6                                   _T1GATE 000FD1  
                                 _T1GCON 000FD0                                   _T3GATE 000FCB  
                                 _T3GCON 000FCA                                   _T5GATE 000FC5  
                                 _T5GCON 000FC4                                   _RC1REG 000F99  
                                 _RC2REG 000E99                                   _RC1STA 000F9D  
                                 _RC2STA 000E9D                                   _RB5PPS 000EF4  
                                 _ODCONA 000F0F                                   _ODCONB 000F17  
                                 _ODCONC 000F1F                                   _RC6PPS 000EFD  
                                 _ODCOND 000F24                                   _ODCONE 000F2C  
               __size_of_credit_subtract 0056                         credit_add@credit 0028  
                __end_of_TMR3_Initialize 1656                           __CFG_WDTCCS$SC 000000  
                                 _TABLAT 000FF5                            ?_init_mdbdata 000B  
                       __end_of_cc_level FD77                                   _OSCFRQ 000EDE  
                                 _NVMDAT 000F80                         __end_of_cc_reset FD7E  
                                 _TX1REG 000F9A                                   _TX2REG 000E9A  
                                 _TX1STA 000F9E                                   _TX2STA 000E9E  
                    __end_of_Hopper_coin 0714                            _Write_NVstore 187C  
                       __end_of_cashoutv FD5D                              ?_Clear_cred 0000  
                         __CFG_PWRTE$OFF 000000                  DAC1_SetOutput@inputData 001D  
                         __CFG_XINST$OFF 000000                         __end_of_disabled FFBE  
                   __size_of_lcd_dispadd 0018                         __end_of_auditmsg FD28  
                       __end_of_dispaddr FDA1                         __end_of_lcd_init 0CFC  
                       __end_of_lcd_test 1A14                         __end_of_mdb_comm 0542  
                       __end_of_mdb_init 11FA                         __end_of_mdb_poll 0246  
                   __end_of_credit_check 190E                                   _cc_pay FD79  
                                 _cc_pin FD75                                   _dacmsg FF8F  
                         __CFG_STVREN$ON 000000                        ?_Update_cashaudit 000B  
                             _Sensor_set 0714                            displ_nendis@x 002A  
                              ??___ltdiv 0023                          mdb_reset@i_3182 0024  
                              ??___ltmod 0023                                   _credit 003A  
                                 _lcdata 0045                                   _clrmsg FFF1  
                                 _dispon FDA2                                   _mdb_on 1AD8  
                                 _dispsl FD98                               _Vend_setup 14CA  
                                 _dispsr FD99                                   _ercode 0043  
                                 _hexnum 008B                                   _hopadd FD7F  
                       ?_TMR0_Initialize 0000                                   _mcount 0041  
                                 _offmsg FFF7                                   clear_0 15CC  
                                 clear_1 15D8                       ??_Update_cashaudit 0027  
                       __end_of_hoperror FD39                         __end_of_hoppcoin FEE7  
                       __end_of_initnote FF3D                                   _nvcash 0088  
                                 _noteen 003D                                   _senset FCFE  
                                 _pvcash 004A                                   _slvadd 0097  
                       __end_of_nochange FCFE                     __size_of_displ_price 0040  
                                 _stradd 0044                                   _tvends 0080  
                      read_busy@savelatd 001E                        read_busy@savelate 001D  
                __end_of_DATAEE_ReadByte 19B8                                ??_butindb 001E  
                         _PMD_Initialize 196C                           ?_enter_service 0000  
                       __end_of_notebits FD61                         __end_of_pricemsg FD30  
                       __end_of_notetest FD1B                             __mediumconst FC94  
                       __end_of_setnotes FE38                                   tblptrh 000FF7  
                                 tblptrl 000FF6                         __end_of_vendtest FCD8  
                                 tblptru 000FF8                     Update_Hopcoin@newval 002B  
                        ??_EUSART1_Write 001D                         ?_PIN_MANAGER_IOC 000B  
          __size_of_INTERRUPT_Initialize 0008                           ??_init_mdbdata 001D  
                   __end_of_displ_credit 16F4                         ?_TMR1_Initialize 0000  
                __end_of_TMR5_Initialize 1620         ??_INTERRUPT_InterruptManagerHigh 000B  
        ?_INTERRUPT_InterruptManagerHigh 000B                        _SYSTEM_Initialize 17BE  
                   __end_of_displ_nendis 175A                               __accesstop 0060  
                __end_of__initialization 15E0                     __end_of_displ_noteer 1820  
                         ?_Write_NVstore 0021                    __end_of_note_features FD8D  
                        _CMP1_Initialize 1A2A                       ?_SYSTEM_Initialize 000B  
                  __end_of_theft_attempt FD81                             __pbssCOMRAMh 002C  
                          ___rparam_used 000001                             __pbssCOMRAMl 004E  
                          __end_of_Audit 1AE8                      ??_SYSTEM_Initialize 001F  
                       ?_DAC1_Initialize 0000                     __end_of_mdb_security 192E  
                       _DATAEE_WriteByte 1542                            __end_of_line1 FD98  
                          __end_of_line2 FD97                            __end_of_line3 FD96  
                          __end_of_line4 FD95                            __end_of_butin 1404  
                          __end_of_onmsg FFFF                    __end_of_note_rejected FD82  
                     __size_of_cctalk_on 0006                    __end_of_note_security FD92  
                 __end_of_PMD_Initialize 1988                     __end_of_EUSART1_Read 1A50  
                   __end_of_mdb_transmit 1A70                               _cc_countrq FD78  
                                ??_Audit 001D                      __size_of_Clear_cred 0056  
                   _CMP1_GetOutputStatus 1A7E                           Write_NVstore@i 0026  
                     __size_of_displ_hex 00B6                              _Hopper_coin 0634  
                     __size_of_lcd_write 0032                                  ??_butin 001D  
              __end_of_SYSTEM_Initialize 17F0                       __size_of_mdb_reset 0086  
                     __size_of_mdb_noten 003A                       __size_of_mdb_waitr 0006  
                     __size_of_mdb_waitx 0006                               __pbssBANK0 0060  
                    displ_hex@hexnumsave 00A2                         ?_TMR3_Initialize 0000  
                   __end_of_Read_NVstore 1728                     displ_price@vendprice 002A  
                          _chan1linkbits FD57                            _chan2linkbits FD55  
                     __size_of_read_busy 0042                     __end_of_Read_Service 1A62  
                      ??_credit_subtract 0021                            _chan3linkbits FD53  
                          _chan4linkbits FD51                            _chan5linkbits FD4F  
                            ?_Sensor_set 0000             __end_of_eusartmdb_Initialize 19FE  
                            ?_Vend_setup 0000                            _chan6linkbits FD4D  
                  __size_of_enable_notes 007A                                  ?_mdb_on 0000  
                                _CM1CON0 000F39                                  _CM1CON1 000F3A  
                   __end_of_Init_vendmem 0EAE                            _chan7linkbits FD4B  
                        ?_PMD_Initialize 0000                            _chan8linkbits FD49  
                        ??_enter_service 002C                       __size_of_set_price 0124  
                     __size_of_set_notes 00F2                       __size_of_price_set 0080  
                       ?_DATAEE_ReadByte 001D                       __size_of_vend_init 008E  
                  displ_nendis@note2disp 0029                               _credit_add 1260  
                      __end_of_cc_adpoll FD73                               _lcd_clockE 1A8C  
                             _lcd_clockH 1AB6                               _lcd_clockL 1AAE  
                      __end_of_cc_enable FD7C                                  _SP1BRGH 000F9C  
                                _SP1BRGL 000F9B                                  _SP2BRGH 000E9C  
                                _SP2BRGL 000E9B                               _lcdaddress 0098  
                                _OSCCON1 000ED8                                  _OSCCON3 000EDA  
                                _TBLPTRH 000FF7                        __end_of_chan1time FD49  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                      __end_of_chan2time FD47                    ?_CMP1_GetOutputStatus 000B  
                      __end_of_chan3time FD45                        __end_of_chan4time FD43  
                      __end_of_chan5time FD41                        __end_of_chan6time FD3F  
                                _NVMADRH 000F7F                                  _NVMADRL 000F7E  
                             _jammed_err FD87                        __end_of_chan7time FD3D  
                                _OSCTUNE 000EDD                        __end_of_chan8time FD3B  
                                _NVMCON2 000F82                        __end_of_cc_newpin FD75  
                      __end_of_cc_serial FD74                               _displ_code 0246  
                                _PPSLOCK 000EA0                               _displ_note 157C  
                             _displ_sens 10B4                  __end_of_CMP1_Initialize 1A3E  
                      __end_of_cc_status FD7B                               _lcd_string 0AF0  
                             _dispcursor FD9D                               _lcd_writeC 11FA  
                              ?_lcd_init 0000                            ?_Vend_timeset 0000  
                              ?_lcd_test 0000                                ?_mdb_comm 001F  
                              ?_mdb_init 0000                               _dispshleft FD9B  
                             _dispnormal FD9E                                ?_mdb_poll 0000  
                        ??_Write_NVstore 0026                               _mdb_unlock 07EC  
                       ?_TMR5_Initialize 0000                        __end_of_cctalk_on 1ACC  
                   DATAEE_WriteByte@bAdd 001D                           displ_hex@value 009A  
                  __size_of_credit_check 0022                             _enable_notes 103A  
                                __Hparam 0000                                  __Lparam 0000  
             __CFG_RSTOSC$HFINTOSC_64MHZ 000000                        __end_of_creditclr FF8F  
                         mdb_comm@mcount 001F                        __end_of_displ_hex 0AF0  
                      __end_of_dispfunc1 FDA6                        __end_of_dispfunc2 FDA5  
                      __end_of_dispfunc3 FDA4                        __end_of_lcd_write 17BE  
                      __end_of_fiftyrand FFE9                           mdb_comm@slvadd 0020  
                                ___ltdiv 1128                        __end_of_mdb_reset 0F34  
                      __end_of_mdb_noten 1542                                  ___ltmod 1366  
                      __end_of_mdb_waitr 1AD2                         ??_DAC1_SetOutput 001D  
                      __end_of_mdb_waitx 1AD8                                  _cc_poll FD71  
                                _cc_test FD7C                                  _cc_stop FD77  
                        __size_of_mdb_on 0006                                  _dbcount 0031  
                       set_price@channel 00A9                                  __pcinit 15B4  
                                _cashint FD67                     __end_of_init_mdbdata 18CA  
                                _cashinv FD69                          _cctalk_pinenter 168C  
                                __ramtop 0F00                                  _chkbyte 003F  
                                _enabled FFBE                               _errorflags 0096  
                                __ptext0 0978                                  __ptext1 0D92  
                                __ptext2 1192                                  __ptext3 190E  
                                __ptext4 0EAE                                  __ptext5 1508  
                                __ptext6 1404                                  __ptext7 19E8  
                                __ptext8 1820                                  __ptext9 168C  
                                _credclr FC95                                  _credmem FD6B  
                                _credits FF9C                                  _command 0092  
                                _dispclr FDA1                                  _dispoff FD9A  
                                _mdbdata 0060                                  _lcdfunc 004E  
                                _lcdline 0099                                _T1CONbits 000FCF  
                                _butindb 175A                                  _dsphome FD9F  
                  _OSCILLATOR_Initialize 19B8                                  _mastadd FD7E  
                                _hopcoin FD59                         set_price@buttons 00A8  
                                _buttons 0038                                  _inithop FF59  
                              _T3CONbits 000FC9                                  _inscoin FEE7  
                              _CMOUTbits 000F3D                        __end_of_read_busy 148A  
                                _second1 FD6F                       _EUSART1_Initialize 1A14  
               ??_PIN_MANAGER_Initialize 001D                    __size_of_displ_credit 0034  
                              _T5CONbits 000FC3                                  _nobytes 0093  
                                _senschk 0034                                  _noteerr FF3D  
                                _tenrand FFC8                                  _notenum 004D  
                                _sensmsg FFA9                                  _sensval FD5D  
                                _senspos 0035                    __size_of_displ_nendis 0032  
                                _pnvcash 0047                                  _venderr 0033  
                                _servmsg FE38                           ??_Vend_timeset 001D  
                  __size_of_displ_noteer 0030               __size_of_SYSTEM_Initialize 0032  
                           _credit_check 18EC                               ??_lcd_init 0025  
                             ??_lcd_test 0024                               ??_mdb_comm 0020  
                             ??_mdb_init 0025                     end_of_initialization 15E0  
                      __end_of_secondadd FD6F                               ??_mdb_poll 0022  
                    __size_of_Sensor_set 00D8                      ?_EUSART1_Initialize 000B  
                          ??_cctalk_comm 0021                            ??_cctalk_init 0025  
                          ??_cctalk_read 001D                            ??_cctalk_poll 0024  
                    __size_of_Vend_setup 003E                            __pdataCOMRAMh 004D  
                      __end_of_note_poll FD91                        __end_of_set_price 0124  
                      __end_of_set_notes 0634                  __size_of_Update_Hopcoin 0086  
                      __end_of_note_type FD90                        __end_of_price_set 103A  
                             _save_notes 18CA                        __end_of_just_busy FD8A  
                      __end_of_priceexit FCEE                             ??_Clear_cred 0029  
                      __end_of_vend_init 0E20                    __size_of_mdb_security 0020  
                       ___ltdiv@dividend 001D                        __end_of_rom_error FD89  
                     _EUSART2_Initialize 19D0                        __end_of_vendsetup FDF3  
                      __end_of_vendstore FD67                               _note_reset FD93  
                             _sens_error FD8A                               _note_setup FD92  
                                postinc0 000FEE                    __size_of_EUSART1_Read 0012  
                             _motr_error FD8B                    __size_of_mdb_transmit 000E  
                             _just_reset FD86                            Read_NVstore@i 0024  
                             _pricesetm2 FE7B                     ??_EUSART1_Initialize 001D  
                             _pricestore FD63                    __CFG_WDTCPS$WDTCPS_31 000000  
                    ?_EUSART2_Initialize 0000                 Init_vendmem@chanlinkbits 001F  
                           _displ_credit 16C0                             _displ_nendis 1728  
                             _venderrors FD61                         displ_code@ercode 0026  
                           _displ_noteer 17F0                        displ_sens@dmsgpos 002A  
                            ?_credit_add 0000                              ?_lcd_clockE 0000  
                            ?_lcd_clockH 0000                              ?_lcd_clockL 0000  
                 ??_CMP1_GetOutputStatus 001D                   __size_of_cctalk_adpoll 0020  
                       ___ltdiv@quotient 0023                    __size_of_Read_NVstore 0034  
                     __end_of_Clear_cred 1310                              ?_displ_code 000B  
              __size_of_Update_cashaudit 00C4                              ?_displ_note 0029  
                            ?_displ_sens 002A                        displ_sens@smsgpos 002B  
                            ?_lcd_string 0024                              ?_lcd_writeC 0000  
                    EUSART1_Write@txData 001D                         ?_CMP1_Initialize 000B  
                       __CFG_FEXTOSC$OFF 000000                 __end_of_DATAEE_WriteByte 157C  
                           _mdb_security 190E                     ??_EUSART2_Initialize 001D  
                            ?_mdb_unlock 0000                     _eusartmdb_Initialize 19E8  
                  __size_of_Read_Service 0012                             _EUSART1_Read 1A3E  
                    __end_of_cashbox_err FD85                             _mdb_transmit 1A62  
                          ??_lcd_dispadd 0021                               displ_hex@i 00A5  
                  __size_of_Init_vendmem 008E                      __end_of_cctalk_comm 0448  
                    __end_of_cctalk_init 1448                      __end_of_cctalk_read 196C  
                __end_of_cctalk_pinenter 16C0                      __end_of_cctalk_poll 184E  
                   _timer0ReloadVal16bit 00AA                          __pcstackCOMRAMh 000B  
                        __pcstackCOMRAMl 0000                               mdb_reset@i 0023  
           __end_of_INTERRUPT_Initialize 1AC6                            ??_displ_price 002A  
                     mdb_transmit@txbyte 001E                               _twentyrand FFE9  
                         __end_of_cc_pay FD7A                           __end_of_cc_pin FD76  
                         __end_of_dacmsg FF9C                           __end_of_clrmsg FFF7  
                         __end_of_dispon FDA3                           __end_of_mdb_on 1ADE  
                         __end_of_dispsl FD99                           __end_of_dispsr FD9A  
                           _Read_NVstore 16F4                         displ_credit@cash 002A  
                         __end_of_hopadd FD80                   ?_OSCILLATOR_Initialize 0000  
                         __end_of_offmsg FFFB                           __end_of_senset FD0D  
                    start_initialization 15B4                             _Read_Service 1A50  
               __size_of_TMR0_Initialize 002E          __size_of_PIN_MANAGER_Initialize 00B0  
                           ?_Hopper_coin 0000                          _credit_subtract 1310  
                Update_cashaudit@addcash 0027                    ?_eusartmdb_Initialize 0000  
                  __end_of_EUSART1_Write 1A7E                             _Init_vendmem 0E20  
                            ?_save_notes 0000                      DATAEE_ReadByte@bAdd 001D  
               __size_of_PIN_MANAGER_IOC 0006                            Init_vendmem@i 0023  
                          _cctalk_adpoll 192E                      __size_of_credit_add 005A  
                       __CFG_LPBOREN$OFF 000000                      __size_of_lcd_clockE 000E  
                    __size_of_lcd_clockH 0008                      __size_of_lcd_clockL 0008  
               __size_of_TMR1_Initialize 0036                    __size_of_init_mdbdata 0026  
                       ??_PMD_Initialize 001D                             ??_Sensor_set 002C  
                    __size_of_displ_code 0106                      __end_of_lcd_dispadd 19A0  
                   __end_of_Vend_timeset 1AE6                      __size_of_displ_note 0038  
                    __size_of_displ_sens 0074                             ??_Vend_setup 0029  
                               ??_mdb_on 001D                      __size_of_lcd_string 00B4  
                    __size_of_lcd_writeC 0066                      __size_of_mdb_unlock 00C8  
               __size_of_DAC1_Initialize 000C                      __end_of_displ_price 14CA  
                          __pcstackBANK0 009A                      __end_of_dispshright FD9D  
                          butindb@butval 0020                                _cc_adpoll FD72  
                            _cashbox_err FD84                              __pnvCOMRAMh 004C  
                              _cc_enable FD7B                     __end_of_note_removed FD86  
                              _chan1time FD47                    credit_subtract@credit 0021  
                   __end_of_note_stacker FD8E                                _chan2time FD45  
                              _chan3time FD43                                _chan4time FD41  
                              _chan5time FD3F                                _chan6time FD3D  
                              _chan7time FD3B                                _chan8time FD39  
                              _cc_newpin FD74                     init_mdbdata@initdata 001D  
                              _cc_serial FD73                       __end_of_Sensor_set 07EC  
                            _cctalk_comm 034C                              _cctalk_init 1404  
                            _cctalk_read 194E                             _init_mdbdata 18A4  
                      __size_of_lcd_init 00A8                              _cctalk_poll 1820  
                      __size_of_lcd_test 0016                       __end_of_Vend_setup 1508  
                      __size_of_mdb_comm 00FA                                _cc_status FD7A  
                      __size_of_mdb_init 0068                           _Update_Hopcoin 0F34  
                      __size_of_mdb_poll 0122                                __pnvBANK0 00AA  
                         ?_cctalk_adpoll 0000                                _chanlink1 000003  
                              _chanlink2 000004                                _chanlink3 000005  
                              _chanlink4 000006                                _chanlink5 000007  
                              _chanlink6 000008                                _chanlink7 000009  
                              _chanlink8 00000A                                _cctalk_on 1AC6  
                 _PIN_MANAGER_Initialize 0BA4                         ?_cctalk_pinenter 0000  
               __size_of_TMR3_Initialize 0036                                __pintcode 0008  
                          __pmediumconst FC94                                 ?___ltdiv 001D  
                               ?___ltmod 001D                         __CFG_PPS1WAY$OFF 000000  
                              _creditclr FF7F                                 _DAC1CON0 000F33  
                               _DAC1CON1 000F34                                _displ_hex 0A3A  
                              _dispfunc1 FDA5                                _dispfunc2 FDA4  
                              _dispfunc3 FDA3                                _lcd_write 178C  
                     Hopper_coin@coinval 00A6                                _fiftyrand FFE1  
                              _mdb_reset 0EAE                                _mdb_noten 1508  
                              _mdb_waitr 1ACC                                _mdb_waitx 1AD2  
                               _BAUD1CON 000F9F                                 _BAUD2CON 000E9F  
                __end_of_credit_subtract 1366                                 ?_butindb 0000  
                  __end_of_enter_service 0D92                      __size_of_save_notes 0022  
                         __size_of_Audit 0002                                _mdbtxbyte 0095  
                       _Update_cashaudit 08B4                           _acept_disabled FD83  
                 ??_eusartmdb_Initialize 001D                           __size_of_butin 004A  
               __size_of_DATAEE_ReadByte 0018                                _read_busy 1448  
                   _INTERRUPT_Initialize 1ABE                   __end_of_Update_Hopcoin 0FBA  
                       ___ltmod@dividend 001D                    lcd_dispadd@lcdaddress 0021  
                      ??_TMR0_Initialize 001D                    __end_of_Write_NVstore 18A4  
                               _LATCbits 000F85                                _secondadd FD6D  
                  lcd_dispadd@lcdatasave 0022                                 _IPR0bits 000EBA  
                               _PIE0bits 000EC2                            _note_features FD8C  
                            _lcd_dispadd 1988                      __CFG_BORV$VBOR_2P45 000000  
                          _theft_attempt FD80                               ?_cctalk_on 0000  
                     __end_of_cc_countrq FD79                                 _PIR0bits 000ECA  
                        ___ltdiv@divisor 0020                             cctalk_comm@i 0022  
                               _PIR3bits 000ECD                                 _PIR4bits 000ECE  
                               _PIR7bits 000ED1                          ___ltdiv@counter 0026  
                              _note_poll FD90                                _set_price 0000  
                              _set_notes 0542                 __size_of_TMR5_Initialize 0036  
                              _note_type FD8F                                _price_set 0FBA  
                              _just_busy FD89                                _priceexit FCD8  
                           cctalk_poll@i 0024                                _vend_init 0D92  
                              _sensorval 0036                                _rom_error FD88  
                      ??_PIN_MANAGER_IOC 000B                              _displ_price 148A  
                              _vendprice 0037                                _vendsetup FDA6  
                              _vendstore FD65                            _note_rejected FD81  
                      ??_TMR1_Initialize 001D                               ?_displ_hex 0027  
                             ?_lcd_write 0000                            _note_security FD91  
                    __end_of_hundredrand FFE1                               ?_mdb_reset 0000  
                             ?_mdb_noten 0000                              _dispshright FD9C  
                             ?_mdb_waitr 0000                               ?_mdb_waitx 000B  
                           ??_credit_add 0028                             ??_lcd_clockE 001D  
                           ??_lcd_clockH 001D                             ??_lcd_clockL 001D  
                 Write_NVstore@storesize 0025                                mdb_comm@i 0021  
                 __end_of_acept_disabled FD84                                mdb_init@i 0027  
                  DATAEE_WriteByte@bData 001F                             ??_displ_code 0024  
                              mdb_poll@i 0022                          displ_hex@hexnum 0027  
                           ??_displ_note 002B                             ??_displ_sens 002B  
                           ??_lcd_string 0027                             ??_lcd_writeC 0023  
                             ?_read_busy 0000                    ?_INTERRUPT_Initialize 0000  
                      ??_DAC1_Initialize 001D                             ??_mdb_unlock 001F  
                      ?_DATAEE_WriteByte 001D                          ?_Update_Hopcoin 002A  
                   __size_of_Hopper_coin 00E0                          ??_cctalk_adpoll 0024  
                     ??_DATAEE_WriteByte 0020                      lcd_string@lcdstring 0024  
                  __size_of_Vend_timeset 0002                                 __Hrparam 0000  
                       Sensor_set@dacpos 00A6                                 __Lrparam 0000  
                     __end_of_credit_add 12BA                               ?_set_price 0000  
                     __CFG_BOREN$SBORDIS 000000                               ?_set_notes 0000  
                     __end_of_lcd_clockE 1A9A                               ?_price_set 0000  
                     __end_of_lcd_clockH 1ABE                       __end_of_lcd_clockL 1AB6  
                             ?_vend_init 0000                  ??_OSCILLATOR_Initialize 001D  
                     Read_Service@senval 001D                       __end_of_jammed_err FD88  
                     __end_of_displ_code 034C                       __end_of_displ_note 15B4  
                     __end_of_displ_sens 1128              __size_of_EUSART1_Initialize 0016  
                       __size_of___ltdiv 006A                         __size_of___ltmod 0054  
                     __end_of_lcd_string 0BA4                       __end_of_dispcursor FD9E  
                     __end_of_lcd_writeC 1260                           _invalid_escrow FD82  
                    __end_of_note_escrow FD8F                       __end_of_dispshleft FD9C  
                     __end_of_dispnormal FD9F                        ??_TMR3_Initialize 001D  
                     __end_of_mdb_unlock 08B4                                 _cc_level FD76  
                Update_Hopcoin@direction 002A                         cctalk_pinenter@i 0024  
                               _cc_reset FD7D                         ?_credit_subtract 0000  
                            _dspposition 0042                               _T0CON0bits 000FD5  
                       __size_of_butindb 0032                                 _cctflags 003B  
                               _cashoutv FD5B                  __size_of_DAC1_SetOutput 0008  
          __size_of_CMP1_GetOutputStatus 000E                                 __ptext10 1AC6  
                               __ptext11 192E                                 __ptext20 1AD2  
                               __ptext12 034C                      __end_of_pricesetmsg FF7F  
                               __ptext21 1A70                                 __ptext13 194E  
                             _T1GCONbits 000FD0                                 __ptext30 18CA  
                               __ptext22 1AD8                                 __ptext14 0E20  
                               __ptext31 1728                                 __ptext23 18A4  
                               __ptext15 1AA6                                 __ptext40 0714  
                               __ptext32 157C                                 __ptext24 1A3E  
                               __ptext16 0124                                 __ptext41 10B4  
                               __ptext33 0FBA                                 __ptext25 0C54  
                               __ptext17 0448                                 __ptext50 0246  
                               __ptext42 1A7E                                 __ptext34 0000  
                               __ptext26 19FE                                 __ptext18 1ACC  
                               __ptext51 16C0                                 __ptext43 0634  
                               __ptext35 148A                                 __ptext27 0CFC  
                               __ptext19 1A62                                 __ptext60 1A8C  
                               __ptext52 0AF0                                 __ptext44 175A  
                               __ptext36 1A50                                 __ptext28 0542  
                               __ptext61 1366                                 __ptext53 0A3A  
                               __ptext45 13BA                                 __ptext37 07EC  
                               __ptext29 103A                                 __ptext70 19A0  
                               __ptext62 1128                                 __ptext54 11FA  
                               __ptext46 0F34                                 __ptext38 14CA  
                               __ptext71 17BE                                 __ptext63 18EC  
                               __ptext55 1988                                 __ptext47 12BA  
                               __ptext39 1AE4                                 __ptext80 19D0  
                               __ptext72 15EA                                 __ptext64 1310  
                               __ptext56 178C                                 __ptext48 1AE6  
                               __ptext81 1A14                                 __ptext73 1620  
                               __ptext65 1260                                 __ptext57 1448  
                               __ptext49 17F0                                 __ptext82 1A9A  
                               __ptext74 1656                                 __ptext66 08B4  
                               __ptext58 1AAE                                 __ptext83 1A2A  
                               __ptext75 184E                                 __ptext67 187C  
                               __ptext59 1AB6                                 __ptext76 196C  
                               __ptext68 1542                                 __ptext85 1ADE  
                               __ptext77 0BA4                                 __ptext69 16F4  
                               __ptext78 19B8                                 __ptext79 1ABE  
                               _disabled FFB4                      __end_of_sensorflags FD37  
                               _auditmsg FD1B                                 _dispaddr FDA0  
                               _lcd_init 0C54                                 _lcd_test 19FE  
                               _mdb_comm 0448                                 _mdb_init 1192  
                           _Vend_timeset 1AE4                                 _mdb_poll 0124  
                               _mdbflags 003E                               _T3GCONbits 000FCA  
            DATAEE_WriteByte@GIEBitValue 0020              __size_of_EUSART2_Initialize 0018  
                  __end_of_chan1linkbits FD59                            __size_of_main 00C2  
                             _T5GCONbits 000FC4                                 _hoperror FD37  
                           ??_save_notes 0021                                 _hoppcoin FEB4  
                               _initnote FF18                    __end_of_chan2linkbits FD57  
                               _hpserial 002C                                 _nochange FCEE  
                        ___ltmod@divisor 0020                          cctalk_comm@dest 0023  
                      ??_DATAEE_ReadByte 001F                     __CFG_WDTCWS$WDTCWS_7 000000  
                  __end_of_chan3linkbits FD55                 __size_of_CMP1_Initialize 0014  
                        ___ltmod@counter 0023                              ??_cctalk_on 001D  
                  __end_of_chan4linkbits FD53                               _RC1STAbits 000F9D  
                               _vcashout 008E                                 _notebits FD5F  
                             _RC2STAbits 000E9D                                 _notebyte 0040  
                               _pricemsg FD28                    __end_of_chan5linkbits FD51  
                               _notetest FD0D                                 _venflags 002F  
                               _setnotes FDF3                            init_mdbdata@i 001E  
                               _vendtest FCBF                              _hundredrand FFD9  
                  __end_of_chan6linkbits FD4F                                 int$flags 004F  
                 __end_of_invalid_escrow FD83                       cctalk_comm@command 0020  
                  __end_of_chan7linkbits FD4D                             _note_removed FD85  
                  Write_NVstore@storeadd 0021                    Read_NVstore@storesize 0023  
                  Write_NVstore@storemem 0023                             _note_stacker FD8D  
                  __end_of_chan8linkbits FD4B                          cctalk_read@data 001D  
                            ??_displ_hex 002A              PIN_MANAGER_Initialize@state 001D  
                            ??_lcd_write 001F                        ??_TMR5_Initialize 001D  
                     cctalk_comm@nobytes 001F                              ??_mdb_reset 0022  
                            ??_mdb_noten 0022                              ??_mdb_waitr 001D  
                            ??_mdb_waitx 001D                               _INTCONbits 000FF2  
                            _NVMCON1bits 000F81                       __end_of_save_notes 18EC  
                 ??_INTERRUPT_Initialize 001D                              ??_read_busy 001D  
                     __end_of_note_reset FD94                           _twohundredrand FFD1  
                     __end_of_sens_error FD8B                       __end_of_note_setup FD93  
                               intlevel2 0000                       __end_of_motr_error FD8C  
                           ?_cctalk_comm 001F                       __end_of_just_reset FD87  
                           ?_cctalk_init 0000                             ?_cctalk_read 0000  
                           ?_cctalk_poll 0000                       __end_of_pricesetm2 FEB4  
                ?_PIN_MANAGER_Initialize 000B                       __end_of_pricestore FD65  
                         cctalk_adpoll@i 0024                        __CFG_CLKOUTEN$OFF 000000  
                          ?_enable_notes 0000                              _PPSLOCKbits 000EA0  
                     __end_of_venderrors FD63                              _note_escrow FD8E  
                            ??_set_price 00A6                              ??_set_notes 002C  
                            ??_price_set 002B                 __end_of_Update_cashaudit 0978  
                   Read_NVstore@storeadd 001F                              ??_vend_init 0029  
                   Read_NVstore@storemem 0021                              _noteen_byte 003C  
                      lcd_string@lcdline 0026                   __size_of_EUSART1_Write 000E  
                   displ_note@notestring 0029   __end_of_INTERRUPT_InterruptManagerHigh 00AA  
__size_of_INTERRUPT_InterruptManagerHigh 00A2           _INTERRUPT_InterruptManagerHigh 0008  
                             _RX1PPSbits 000EB5                              _pricesetmsg FF6D  
                             _RX2PPSbits 000E8D                              _sensorflags FD35  
                      lcd_test@character 0024                          _TMR0_Initialize 184E  
                   Init_vendmem@chanlink 0021                   __end_of_twohundredrand FFD9  
                          ?_credit_check 0000                               _TX1STAbits 000F9E  
         __end_of_PIN_MANAGER_Initialize 0C54                      enable_notes@notenum 002B  
                     __end_of_twentyrand FFF1                          _PIN_MANAGER_IOC 1ADE  
                         ??_enable_notes 002B                             ?_lcd_dispadd 0000  
                        _TMR1_Initialize 1656  
